--------------------------------------------------------
--  DDL for Package Body OKL_OPEN_INTERFACE_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."OKL_OPEN_INTERFACE_PVT" AS
/* $Header: OKLRKOIB.pls 120.100.12010000.6 2010/02/23 10:58:21 rpillay ship $*/

  SUBTYPE krpv_rec_type IS OKL_KRP_PVT.krpv_rec_type;
  SUBTYPE krpv_tbl_type IS OKL_KRP_PVT.krpv_tbl_type;

  -- GLOBAL VARIABLES


  g_customer_account_id NUMBER; -- only populated from populate_header_rec()
  g_customer_id         NUMBER; -- only populated from populate_header_rec()
  g_bill_to_address_id  NUMBER; -- only populated from populate_header_rec()
  g_release_asset_flag  VARCHAR2(1); -- only updated at load_input_record()
  g_instance_number  VARCHAR2(30); -- Parallel submission instance number
  g_qcl_id              NUMBER;
  G_FA_LINE_LTY_ID      OKC_LINE_STYLES_V.ID%TYPE := 42;
  G_FIN_LINE_LTY_ID     OKC_LINE_STYLES_V.ID%TYPE := 33;

  G_BULK_BATCH_SIZE NUMBER := 10000;
  G_PKG_NAME                 CONSTANT VARCHAR2(200) := 'OKL_OPEN_INTERFACE_PVT';
  G_APP_NAME                 CONSTANT VARCHAR2(3)   :=  OKL_API.G_APP_NAME;

  G_API_TYPE                 CONSTANT VARCHAR2(4)   := '_PVT';
  G_UNEXPECTED_ERROR         CONSTANT VARCHAR2(1000) := 'OKL_UNEXPECTED_ERROR';
  G_MISSING_VALUE            CONSTANT VARCHAR2(1000) := 'OKL_MISSING_VALUE';
  G_INVALID_VALUE            CONSTANT VARCHAR2(1000) := 'OKL_LLA_INVALID_IMPORT_VALUE';
  G_VALIDATION_FAILED        CONSTANT VARCHAR2(1000) := 'OKL_VALIDATION_FAILED';

  G_NULL_CONTRACT            CONSTANT VARCHAr2(1000) := 'OKL_NULL_CONTRACT';
  G_DUP_VALUE                CONSTANT VARCHAr2(1000) := 'OKL_DUP_VALUE';
  G_LITERAL_MISMATCH         CONSTANT VARCHAr2(1000) := 'OKL_LITERAL_MISTMATCH';
  G_PARTY_ROLE_LINE_ERROR    CONSTANT VARCHAR2(1000) := 'OKL_PARTY_ROLE_LINE_ERROR';
  G_TERM_LINE_ERROR          CONSTANT VARCHAR2(1000) := 'OKL_TERM_LINE_ERROR';
  G_TERM_NO_LINE_NUMBER      CONSTANT VARCHAR2(1000) := 'OKL_TERM_NO_LINE_NUMBER';
  G_PAYMENT_NO_LINE_NUMBER   CONSTANT VARCHAR2(1000) := 'OKL_PAYMENT_NO_LINE_NUMBER';
  G_PAYMENT_LINE_ERROR       CONSTANT VARCHAR2(1000) := 'OKL_PAYMENT_LINE_ERROR';

  G_INVALID_CONTRACT         CONSTANT VARCHAR2(1000) := 'OKL_INVALID_CONTRACT';
  G_GUARANTOR_SETUP_ERROR    CONSTANT VARCHAR2(1000) := 'OKL_GUARANTOR_SETUP_ERROR';
  G_INVALID_LTY_CODE         CONSTANT VARCHAR2(1000) := 'OKL_INVALID_LTY_CODE';
  G_INVALID_COMBINATION      CONSTANT VARCHAR2(1000) := 'OKL_INVALID_FLEX_COMB';
  G_PAYMENT_SCHD_ERROR       CONSTANT VARCHAR2(1000) := 'OKL_PAYMENT_SCHD_ERROR';
  G_UOM_SETUP_ERROR          CONSTANT VARCHAR2(1000) := 'OKL_UOM_SETUP_ERROR';
  G_PAYMENT_START_DATE_ERROR CONSTANT VARCHAR2(1000) := 'OKL_PAYMENT_START_DATE_ERROR';
  G_MISSING_VALUE_FOR_STAGE  CONSTANT VARCHAR2(1000) := 'OKL_MISSING_VALUE_FOR_STAGE';
  G_MISSING_VALUE_FOR_LINE   CONSTANT VARCHAR2(1000) := 'OKL_MISSING_VALUE_FOR_LINE';
  G_MISSING_VALUE_STAGE_LINE CONSTANT VARCHAR2(1000) := 'OKL_MISSING_VALUE_STAGE_LINE';
  G_FIN_ASSET_ERROR          CONSTANT VARCHAR2(1000) := 'OKL_FIN_ASSET_ERROR';
  G_LABEL_SETUP_ERROR        CONSTANT VARCHAR2(1000) := 'OKL_LABEL_SETUP_ERROR';
  --G_INVALID_USAGE_ITEM_ASSOC CONSTANT VARCHAR2(1000) := 'OKL_LLA_INVALID_USAGE_ITEM_ASSOC';
  G_INVALID_USAGE_ITEM_ASSOC CONSTANT VARCHAR2(1000) := 'OKL_LLA_INVALID_USG_ITEM_ASSOC';
  G_NULL_PARAMETER           CONSTANT VARCHAR2(1000) := 'OKL_NULL_INTF_PARAM';
  G_INVALID_PARAMETER        CONSTANT VARCHAR2(1000) := 'OKL_INVALID_PARAM';
  G_OKL_TXD_ID               CONSTANT VARCHAR2(1000) := 'OKL_LLA_TXD_ID';
  G_DATESIGNED_LT_START      CONSTANT VARCHAR2(1000) := 'OKL_QA_DATESIGNED_LT_START';
  G_INVALID_TEMPLATE         CONSTANT VARCHAR2(1000) := 'OKL_LLA_INVALID_TEMPLATE';
  G_BILL_VENDOR_INVALID      CONSTANT VARCHAR2(1000) := 'OKL_LLA_BILL_VENDOR_INVALID';
  G_UNSUPPORTED_VALUE        CONSTANT VARCHAR2(1000) := 'OKL_LLA_UNSUPPORTED_USAGE';
  G_QA_USAGE_CHECK           CONSTANT VARCHAR2(1000) := 'OKL_QA_USAGE_CHECK';
  G_QA_FIXED_USAGE           CONSTANT VARCHAR2(1000) := 'OKL_QA_FIXED_USAGE';
  G_INIT_DIRC_COST           CONSTANT VARCHAR2(1000) := 'OKL_LLA_INIT_DIRECT_COST';
  G_STUB_PMNT_BOTH           CONSTANT VARCHAR2(1000) := 'OKL_LLA_STUB_PMNT_BOTH';
  G_DUP_TAX_BOOK             CONSTANT VARCHAR2(1000) := 'OKL_LLA_DUP_TAX_BOOK';
  G_MIXED_ASSET              CONSTANT VARCHAR2(1000) := 'OKL_LLA_MIXED_ASSET';
  G_VALUE_NOT_ALLOWED        CONSTANT VARCHAR2(1000) := 'OKL_TERM_VALUE_NOT_ALLOWED';
  G_NO_STRM_TMPL             CONSTANT VARCHAR2(1000) := 'OKL_NO_STRM_TMPL';
  G_INVALID_NEW_LINE_REQ     CONSTANT VARCHAR2(1000) := 'OKL_INVALID_NEW_LINE_REQ';

-- start cklee 02/13/2004 bug# 3440442
-- 3rd party insurance
  G_INSURER                       CONSTANT VARCHAR2(80) := 'INSURER';
  G_INSURANCE_AGENT               CONSTANT VARCHAR2(80) := 'INSURANCE_AGENT';

--   OKX_INSURER_V
  G_INSURANCE_COMPANY_NAME        CONSTANT VARCHAR2(80) := 'INSURANCE_COMPANY_NAME';
  G_INSURANCE_COMPANY_NUMBER      CONSTANT VARCHAR2(80) := 'INSURANCE_COMPANY_NUMBER';
  G_INSURANCE_COMPANY_ID          CONSTANT VARCHAR2(80) := 'INSURANCE_COMPANY_ID';
  G_INSURANCE_COMPANY_SITE_NAME   CONSTANT VARCHAR2(80) := 'INSURANCE_COMPANY_SITE_NAME';
  G_INSURANCE_COMPANY_SITE_NUM    CONSTANT VARCHAR2(80) := 'INSURANCE_COMPANY_SITE_NUMBER';
  G_INSURANCE_COMPANY_SITE_ID     CONSTANT VARCHAR2(80) := 'INSURANCE_COMPANY_SITE_ID';
--  OKX_INSURANCE_AGENT_V
  G_AGENT_NAME                    CONSTANT VARCHAR2(80) := 'AGENT_NAME';
  G_AGENT_NUMBER                  CONSTANT VARCHAR2(80) := 'AGENT_NUMBER';
  G_AGENT_ID                      CONSTANT VARCHAR2(80) := 'AGENT_ID';
  G_AGENT_ADDRESS_SITE_NAME       CONSTANT VARCHAR2(80) := 'AGENT_ADDRESS_SITE_NAME';
  G_AGENT_ADDRESS_SITE_NUMBER     CONSTANT VARCHAR2(80) := 'AGENT_ADDRESS_SITE_NUMBER';
  G_AGENT_ADDRESS_SITE_ID         CONSTANT VARCHAR2(80) := 'AGENT_ADDRESS_SITE_ID';

  G_DEFAULT_NUM  CONSTANT NUMBER := 0;
  G_DEFAULT_CHAR CONSTANT VARCHAR2(1) := 'X';
  G_DEFAULT_DATE CONSTANT DATE := TO_DATE('1111','YYYY');
  G_FINAL_DATE   CONSTANT    DATE    	:= TO_DATE('1','j') + 5300000;
-- end cklee 02/13/2004 bug# 3440442
  G_REQUIRED_VALUE CONSTANT VARCHAR2(200) := OKC_API.G_REQUIRED_VALUE;
  G_COL_NAME_TOKEN CONSTANT VARCHAR2(200) := OKC_API.G_COL_NAME_TOKEN;
  G_PRODUCT_ID NUMBER;
  G_REVENUE_RECOGNITION_METHOD okl_product_parameters_v.REVENUE_RECOGNITION_METHOD%TYPE;
  G_INTEREST_CALCULATION_BASIS okl_product_parameters_v.INTEREST_CALCULATION_BASIS%TYPE;
  G_DEAL_TYPE okl_product_parameters_v.DEAL_TYPE%TYPE;

  -- hariven - Bug#5393374 - Added - Start
  G_WF_EVT_KHR_IMPORTED CONSTANT VARCHAR2(50) := 'oracle.apps.okl.la.lease_contract.imported';
  G_WF_ITM_CONTRACT_ID CONSTANT VARCHAR2(11) := 'CONTRACT_ID';
  -- hariven - Bug#5393374 - Added - End

TYPE req_tab_type is TABLE of NUMBER index by binary_integer;
TYPE batch_tab_type is TABLE of VARCHAR2(30) index by binary_integer;

  TYPE template_h_rec_type IS RECORD (
      ID                               OKL_K_HEADERS_FULL_V.ID%TYPE
     ,OBJECT_VERSION_NUMBER            OKL_K_HEADERS_FULL_V.OBJECT_VERSION_NUMBER%TYPE
     ,SFWT_FLAG                        OKL_K_HEADERS_FULL_V.SFWT_FLAG%TYPE
     ,CHR_ID_RESPONSE                  OKL_K_HEADERS_FULL_V.CHR_ID_RESPONSE%TYPE
     ,CHR_ID_AWARD                     OKL_K_HEADERS_FULL_V.CHR_ID_AWARD%TYPE
     ,CHR_ID_RENEWED                   OKL_K_HEADERS_FULL_V.CHR_ID_RENEWED%TYPE
     ,INV_ORGANIZATION_ID              OKL_K_HEADERS_FULL_V.INV_ORGANIZATION_ID%TYPE
     ,STS_CODE                         OKL_K_HEADERS_FULL_V.STS_CODE%TYPE
     ,QCL_ID                           OKL_K_HEADERS_FULL_V.QCL_ID%TYPE
     ,SCS_CODE                         OKL_K_HEADERS_FULL_V.SCS_CODE%TYPE
     ,CONTRACT_NUMBER                  OKL_K_HEADERS_FULL_V.CONTRACT_NUMBER%TYPE
     ,CURRENCY_CODE                    OKL_K_HEADERS_FULL_V.CURRENCY_CODE%TYPE
     ,CONTRACT_NUMBER_MODIFIER         OKL_K_HEADERS_FULL_V.CONTRACT_NUMBER_MODIFIER%TYPE
     ,ARCHIVED_YN                      OKL_K_HEADERS_FULL_V.ARCHIVED_YN%TYPE
     ,DELETED_YN                       OKL_K_HEADERS_FULL_V.DELETED_YN%TYPE
     ,CUST_PO_NUMBER_REQ_YN            OKL_K_HEADERS_FULL_V.CUST_PO_NUMBER_REQ_YN%TYPE
     ,PRE_PAY_REQ_YN                   OKL_K_HEADERS_FULL_V.PRE_PAY_REQ_YN%TYPE
     ,CUST_PO_NUMBER                   OKL_K_HEADERS_FULL_V.CUST_PO_NUMBER%TYPE
     ,SHORT_DESCRIPTION                OKL_K_HEADERS_FULL_V.SHORT_DESCRIPTION%TYPE
     ,COMMENTS                         OKL_K_HEADERS_FULL_V.COMMENTS%TYPE
     ,DESCRIPTION                      OKL_K_HEADERS_FULL_V.DESCRIPTION%TYPE
     ,DPAS_RATING                      OKL_K_HEADERS_FULL_V.DPAS_RATING%TYPE
     ,COGNOMEN                         OKL_K_HEADERS_FULL_V.COGNOMEN%TYPE
     ,TEMPLATE_YN                      OKL_K_HEADERS_FULL_V.TEMPLATE_YN%TYPE
     ,tEMPLATE_USED                    OKL_K_HEADERS_FULL_V.TEMPLATE_USED%TYPE
     ,DATE_APPROVED                    OKL_K_HEADERS_FULL_V.DATE_APPROVED%TYPE
     ,DATETIME_CANCELLED               OKL_K_HEADERS_FULL_V.DATETIME_CANCELLED%TYPE
     ,AUTO_RENEW_DAYS                  OKL_K_HEADERS_FULL_V.AUTO_RENEW_DAYS%TYPE
     ,DATE_ISSUED                      OKL_K_HEADERS_FULL_V.DATE_ISSUED%TYPE
     ,DATETIME_RESPONDED               OKL_K_HEADERS_FULL_V.DATETIME_RESPONDED%TYPE
     ,NON_RESPONSE_REASON              OKL_K_HEADERS_FULL_V.NON_RESPONSE_REASON%TYPE
     ,NON_RESPONSE_EXPLAIN             OKL_K_HEADERS_FULL_V.NON_RESPONSE_EXPLAIN%TYPE
     ,RFP_TYPE                         OKL_K_HEADERS_FULL_V.RFP_TYPE%TYPE
     ,CHR_TYPE                         OKL_K_HEADERS_FULL_V.CHR_TYPE%TYPE
     ,KEEP_ON_MAIL_LIST                OKL_K_HEADERS_FULL_V.KEEP_ON_MAIL_LIST%TYPE
     ,SET_ASIDE_REASON                 OKL_K_HEADERS_FULL_V.SET_ASIDE_REASON%TYPE
     ,SET_ASIDE_PERCENT                OKL_K_HEADERS_FULL_V.SET_ASIDE_PERCENT%TYPE
     ,RESPONSE_COPIES_REQ              OKL_K_HEADERS_FULL_V.RESPONSE_COPIES_REQ%TYPE
     ,DATE_CLOSE_PROJECTED             OKL_K_HEADERS_FULL_V.DATE_CLOSE_PROJECTED%TYPE
     ,DATETIME_PROPOSED                OKL_K_HEADERS_FULL_V.DATETIME_PROPOSED%TYPE
     ,DATE_SIGNED                      OKL_K_HEADERS_FULL_V.DATE_SIGNED%TYPE
     ,DATE_TERMINATED                  OKL_K_HEADERS_FULL_V.DATE_TERMINATED%TYPE
     ,DATE_RENEWED                     OKL_K_HEADERS_FULL_V.DATE_RENEWED%TYPE
     ,TRN_CODE                         OKL_K_HEADERS_FULL_V.TRN_CODE%TYPE
     ,START_DATE                       OKL_K_HEADERS_FULL_V.START_DATE%TYPE
     ,END_DATE                         OKL_K_HEADERS_FULL_V.END_DATE%TYPE
     ,AUTHORING_ORG_ID                 OKL_K_HEADERS_FULL_V.AUTHORING_ORG_ID%TYPE
     ,BUY_OR_SELL                      OKL_K_HEADERS_FULL_V.BUY_OR_SELL%TYPE
     ,ISSUE_OR_RECEIVE                 OKL_K_HEADERS_FULL_V.ISSUE_OR_RECEIVE%TYPE
     ,ESTIMATED_AMOUNT                 OKL_K_HEADERS_FULL_V.ESTIMATED_AMOUNT%TYPE
     ,CHR_ID_RENEWED_TO                OKL_K_HEADERS_FULL_V.CHR_ID_RENEWED_TO%TYPE
     ,ESTIMATED_AMOUNT_RENEWED         OKL_K_HEADERS_FULL_V.ESTIMATED_AMOUNT_RENEWED%TYPE
     ,CURRENCY_CODE_RENEWED            OKL_K_HEADERS_FULL_V.CURRENCY_CODE_RENEWED%TYPE
     ,USER_ACCESS_LEVEL                OKL_K_HEADERS_FULL_V.USER_ACCESS_LEVEL%TYPE
     ,UPG_ORIG_SYSTEM_REF              OKL_K_HEADERS_FULL_V.UPG_ORIG_SYSTEM_REF%TYPE
     ,UPG_ORIG_SYSTEM_REF_ID           OKL_K_HEADERS_FULL_V.UPG_ORIG_SYSTEM_REF_ID%TYPE
     ,APPLICATION_ID                   OKL_K_HEADERS_FULL_V.APPLICATION_ID%TYPE
     ,RESOLVED_UNTIL                   OKL_K_HEADERS_FULL_V.RESOLVED_UNTIL%TYPE
     ,ATTRIBUTE_CATEGORY               OKL_K_HEADERS_FULL_V.ATTRIBUTE_CATEGORY%TYPE
     ,ATTRIBUTE1                       OKL_K_HEADERS_FULL_V.ATTRIBUTE1%TYPE
     ,ATTRIBUTE2                       OKL_K_HEADERS_FULL_V.ATTRIBUTE2%TYPE
     ,ATTRIBUTE3                       OKL_K_HEADERS_FULL_V.ATTRIBUTE3%TYPE
     ,ATTRIBUTE4                       OKL_K_HEADERS_FULL_V.ATTRIBUTE4%TYPE
     ,ATTRIBUTE5                       OKL_K_HEADERS_FULL_V.ATTRIBUTE5%TYPE
     ,ATTRIBUTE6                       OKL_K_HEADERS_FULL_V.ATTRIBUTE6%TYPE
     ,ATTRIBUTE7                       OKL_K_HEADERS_FULL_V.ATTRIBUTE7%TYPE
     ,ATTRIBUTE8                       OKL_K_HEADERS_FULL_V.ATTRIBUTE8%TYPE
     ,ATTRIBUTE9                       OKL_K_HEADERS_FULL_V.ATTRIBUTE9%TYPE
     ,ATTRIBUTE10                      OKL_K_HEADERS_FULL_V.ATTRIBUTE10%TYPE
     ,ATTRIBUTE11                      OKL_K_HEADERS_FULL_V.ATTRIBUTE11%TYPE
     ,ATTRIBUTE12                      OKL_K_HEADERS_FULL_V.ATTRIBUTE12%TYPE
     ,ATTRIBUTE13                      OKL_K_HEADERS_FULL_V.ATTRIBUTE13%TYPE
     ,ATTRIBUTE14                      OKL_K_HEADERS_FULL_V.ATTRIBUTE14%TYPE
     ,ATTRIBUTE15                      OKL_K_HEADERS_FULL_V.ATTRIBUTE15%TYPE
     ,CREATED_BY                       OKL_K_HEADERS_FULL_V.CREATED_BY%TYPE
     ,CREATION_DATE                    OKL_K_HEADERS_FULL_V.CREATION_DATE%TYPE
     ,LAST_UPDATED_BY                  OKL_K_HEADERS_FULL_V.LAST_UPDATED_BY%TYPE
     ,LAST_UPDATE_DATE                 OKL_K_HEADERS_FULL_V.LAST_UPDATE_DATE%TYPE
     ,LAST_UPDATE_LOGIN                OKL_K_HEADERS_FULL_V.LAST_UPDATE_LOGIN%TYPE
     ,ORIG_SYSTEM_SOURCE_CODE          OKL_K_HEADERS_FULL_V.ORIG_SYSTEM_SOURCE_CODE%TYPE
     ,ORIG_SYSTEM_ID1                  OKL_K_HEADERS_FULL_V.ORIG_SYSTEM_ID1%TYPE
     ,ORIG_SYSTEM_REFERENCE1           OKL_K_HEADERS_FULL_V.ORIG_SYSTEM_REFERENCE1%TYPE
     ,KHR_ROW_ID                       OKL_K_HEADERS_FULL_V.KHR_ROW_ID%TYPE
     ,KHR_OBJECT_VERSION_NUMBER        OKL_K_HEADERS_FULL_V.KHR_OBJECT_VERSION_NUMBER%TYPE
     ,ISG_ID                           OKL_K_HEADERS_FULL_V.ISG_ID%TYPE
     ,KHR_ID                           OKL_K_HEADERS_FULL_V.KHR_ID%TYPE
     ,PDT_ID                           OKL_K_HEADERS_FULL_V.PDT_ID%TYPE
     ,AMD_CODE                         OKL_K_HEADERS_FULL_V.AMD_CODE%TYPE
     ,DATE_FIRST_ACTIVITY              OKL_K_HEADERS_FULL_V.DATE_FIRST_ACTIVITY%TYPE
     ,GENERATE_ACCRUAL_YN              OKL_K_HEADERS_FULL_V.GENERATE_ACCRUAL_YN%TYPE
     ,GENERATE_ACCRUAL_OVERRIDE_YN     OKL_K_HEADERS_FULL_V.GENERATE_ACCRUAL_OVERRIDE_YN%TYPE
     ,DATE_REFINANCED                  OKL_K_HEADERS_FULL_V.DATE_REFINANCED%TYPE
     ,CREDIT_ACT_YN                    OKL_K_HEADERS_FULL_V.CREDIT_ACT_YN%TYPE
     ,TERM_DURATION                    OKL_K_HEADERS_FULL_V.TERM_DURATION%TYPE
     ,CONVERTED_ACCOUNT_YN             OKL_K_HEADERS_FULL_V.CONVERTED_ACCOUNT_YN%TYPE
     ,DATE_CONVERSION_EFFECTIVE        OKL_K_HEADERS_FULL_V.DATE_CONVERSION_EFFECTIVE%TYPE
     ,SYNDICATABLE_YN                  OKL_K_HEADERS_FULL_V.SYNDICATABLE_YN%TYPE
     ,SALESTYPE_YN                     OKL_K_HEADERS_FULL_V.SALESTYPE_YN%TYPE
     ,DATE_DEAL_TRANSFERRED            OKL_K_HEADERS_FULL_V.DATE_DEAL_TRANSFERRED%TYPE
     ,DATETIME_PROPOSAL_EFFECTIVE      OKL_K_HEADERS_FULL_V.DATETIME_PROPOSAL_EFFECTIVE%TYPE
     ,DATETIME_PROPOSAL_INEFFECTIVE    OKL_K_HEADERS_FULL_V.DATETIME_PROPOSAL_INEFFECTIVE%TYPE
     ,DATE_PROPOSAL_ACCEPTED           OKL_K_HEADERS_FULL_V.DATE_PROPOSAL_ACCEPTED%TYPE
     ,KHR_ATTRIBUTE_CATEGORY           OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE_CATEGORY%TYPE
     ,KHR_ATTRIBUTE1                   OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE1%TYPE
     ,KHR_ATTRIBUTE2                   OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE2%TYPE
     ,KHR_ATTRIBUTE3                   OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE3%TYPE
     ,KHR_ATTRIBUTE4                   OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE4%TYPE
     ,KHR_ATTRIBUTE5                   OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE5%TYPE
     ,KHR_ATTRIBUTE6                   OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE6%TYPE
     ,KHR_ATTRIBUTE7                   OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE7%TYPE
     ,KHR_ATTRIBUTE8                   OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE8%TYPE
     ,KHR_ATTRIBUTE9                   OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE9%TYPE
     ,KHR_ATTRIBUTE10                  OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE10%TYPE
     ,KHR_ATTRIBUTE11                  OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE11%TYPE
     ,KHR_ATTRIBUTE12                  OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE12%TYPE
     ,KHR_ATTRIBUTE13                  OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE13%TYPE
     ,KHR_ATTRIBUTE14                  OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE14%TYPE
     ,KHR_ATTRIBUTE15                  OKL_K_HEADERS_FULL_V.KHR_ATTRIBUTE15%TYPE
     ,KHR_CREATED_BY                   OKL_K_HEADERS_FULL_V.KHR_CREATED_BY%TYPE
     ,KHR_CREATON_DATE                 OKL_K_HEADERS_FULL_V.KHR_CREATON_DATE%TYPE
     ,KHR_LAST_UPDATED_BY              OKL_K_HEADERS_FULL_V.KHR_LAST_UPDATED_BY%TYPE
     ,KHR_LAST_UPDATE_DATE             OKL_K_HEADERS_FULL_V.KHR_LAST_UPDATE_DATE%TYPE
     ,KHR_LAST_UPDATE_LOGIN            OKL_K_HEADERS_FULL_V.KHR_LAST_UPDATE_LOGIN%TYPE
     ,PRE_TAX_YIELD                    OKL_K_HEADERS_FULL_V.PRE_TAX_YIELD%TYPE
     ,AFTER_TAX_YIELD                  OKL_K_HEADERS_FULL_V.AFTER_TAX_YIELD%TYPE
     ,IMPLICIT_INTEREST_RATE           OKL_K_HEADERS_FULL_V.IMPLICIT_INTEREST_RATE%TYPE
     ,IMPLICIT_NON_IDC_INTEREST_RATE   OKL_K_HEADERS_FULL_V.IMPLICIT_NON_IDC_INTEREST_RATE%TYPE
     ,TARGET_PRE_TAX_YIELD             OKL_K_HEADERS_FULL_V.TARGET_PRE_TAX_YIELD%TYPE
     ,TARGET_AFTER_TAX_YIELD           OKL_K_HEADERS_FULL_V.TARGET_AFTER_TAX_YIELD%TYPE
     ,TARGET_IMPLICIT_INTEREST_RATE    OKL_K_HEADERS_FULL_V.TARGET_IMPLICIT_INTEREST_RATE%TYPE
     ,TARGET_IMPLICIT_NONIDC_INTRATE   OKL_K_HEADERS_FULL_V.TARGET_IMPLICIT_NONIDC_INTRATE%TYPE
     ,DATE_LAST_INTERIM_INTEREST_CAL   OKL_K_HEADERS_FULL_V.DATE_LAST_INTERIM_INTEREST_CAL%TYPE
     ,DEAL_TYPE                        OKL_K_HEADERS_FULL_V.DEAL_TYPE%TYPE
     ,PRE_TAX_IRR                      OKL_K_HEADERS_FULL_V.PRE_TAX_IRR%TYPE
     ,AFTER_TAX_IRR                    OKL_K_HEADERS_FULL_V.AFTER_TAX_IRR%TYPE
     ,EXPECTED_DELIVERY_DATE           OKL_K_HEADERS_FULL_V.EXPECTED_DELIVERY_DATE%TYPE
     ,ACCEPTED_DATE                    OKL_K_HEADERS_FULL_V.ACCEPTED_DATE%TYPE
     ,PREFUNDING_ELIGIBLE_YN           OKL_K_HEADERS_FULL_V.PREFUNDING_ELIGIBLE_YN%TYPE
     ,REVOLVING_CREDIT_YN              OKL_K_HEADERS_FULL_V.REVOLVING_CREDIT_YN%TYPE
     ,CURRENCY_CONVERSION_TYPE         OKL_K_HEADERS_FULL_V.CURRENCY_CONVERSION_TYPE%TYPE
     ,CURRENCY_CONVERSION_RATE         OKL_K_HEADERS_FULL_V.CURRENCY_CONVERSION_RATE%TYPE
     ,CURRENCY_CONVERSION_DATE         OKL_K_HEADERS_FULL_V.CURRENCY_CONVERSION_DATE%TYPE
     ,ASSIGNABLE_YN                    OKL_K_HEADERS_FULL_V.ASSIGNABLE_YN%TYPE
     ,CUST_ACCT_ID                     OKL_K_HEADERS_FULL_V.CUST_ACCT_ID%TYPE
     ,BILL_TO_SITE_USE_ID              OKL_K_HEADERS_FULL_V.BILL_TO_SITE_USE_ID%TYPE);


 TYPE intf_h_rec_type IS RECORD (
      BATCH_NUMBER                       OKL_HEADER_INTERFACE.BATCH_NUMBER%TYPE
      ,TEMPLATE_NUMBER                    OKL_HEADER_INTERFACE.TEMPLATE_NUMBER%TYPE
     ,STATUS                             OKL_HEADER_INTERFACE.STATUS %TYPE
     ,CREATED_BY                         OKL_HEADER_INTERFACE.CREATED_BY %TYPE
     ,DATE_CREATED                       OKL_HEADER_INTERFACE.DATE_CREATED %TYPE
     ,DATE_CREATED_IN_OKL                OKL_HEADER_INTERFACE.DATE_CREATED_IN_OKL%TYPE
     ,APPLICATION_CODE                   OKL_HEADER_INTERFACE.APPLICATION_CODE%TYPE
     ,CONTRACT_CATEGORY                  OKL_HEADER_INTERFACE.CONTRACT_CATEGORY%TYPE
     ,CONTRACT_NUMBER_OLD                OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE
     ,CONTRACT_SOURCE                    OKL_HEADER_INTERFACE.CONTRACT_SOURCE%TYPE
     ,CONTRACT_NUMBER                    OKL_HEADER_INTERFACE.CONTRACT_NUMBER%TYPE
     ,CUSTOMER_NUMBER                    OKL_HEADER_INTERFACE.CUSTOMER_NUMBER%TYPE
     ,CUSTOMER_ID                        OKL_HEADER_INTERFACE.CUSTOMER_ID%TYPE
     ,CUSTOMER_ACCOUNT_NUMBER            OKL_HEADER_INTERFACE.CUSTOMER_ACCOUNT_NUMBER%TYPE
     ,CUSTOMER_ACCOUNT_ID                OKL_HEADER_INTERFACE.CUSTOMER_ACCOUNT_ID%TYPE
     ,START_DATE                         OKL_HEADER_INTERFACE.START_DATE%TYPE
     ,IMPORT_REQUEST_STAGE               OKL_HEADER_INTERFACE.IMPORT_REQUEST_STAGE%TYPE
     ,CURRENCY_CODE                      OKL_HEADER_INTERFACE.CURRENCY_CODE%TYPE
     ,CUSTOMER_PO_NUMBER                 OKL_HEADER_INTERFACE.CUSTOMER_PO_NUMBER%TYPE
     ,DATE_SIGNED                        OKL_HEADER_INTERFACE.DATE_SIGNED%TYPE
     ,DATE_APPROVED                      OKL_HEADER_INTERFACE.DATE_APPROVED%TYPE
     ,ACCEPTANCE_METHOD_CODE             OKL_HEADER_INTERFACE.ACCEPTANCE_METHOD_CODE%TYPE
     ,CONSUMER_CREDIT_ACT_DEAL_FLAG      OKL_HEADER_INTERFACE.CONSUMER_CREDIT_ACT_DEAL_FLAG%TYPE
     ,TERM                               OKL_HEADER_INTERFACE.TERM%TYPE
     ,CONVERTED_ACCOUNT                  OKL_HEADER_INTERFACE.CONVERTED_ACCOUNT%TYPE
     ,ACCEPTED_DATE                      OKL_HEADER_INTERFACE.ACCEPTED_DATE%TYPE
     ,DEAL_TYPE_CODE                     OKL_HEADER_INTERFACE.DEAL_TYPE_CODE%TYPE
     ,EXPECTED_DELIVERY_DATE             OKL_HEADER_INTERFACE.EXPECTED_DELIVERY_DATE%TYPE
     ,CONTRACT_DESCRIPTION               OKL_HEADER_INTERFACE.CONTRACT_DESCRIPTION%TYPE
     ,SALESPERSON_NAME                   OKL_HEADER_INTERFACE.SALESPERSON_NAME%TYPE
     ,SALESPERSON_ID                     OKL_HEADER_INTERFACE.SALESPERSON_ID%TYPE
     ,PRIVATE_LABEL_NUMBER               OKL_HEADER_INTERFACE.PRIVATE_LABEL_NUMBER%TYPE
     ,PRIVATE_LABEL_ID                   OKL_HEADER_INTERFACE.PRIVATE_LABEL_ID%TYPE
     ,PRIVATE_LABEL_URL                  OKL_HEADER_INTERFACE.PRIVATE_LABEL_URL%TYPE
     ,PROGRAM_AGREEMENT_NUMBER           OKL_HEADER_INTERFACE.PROGRAM_AGREEMENT_NUMBER%TYPE
     ,PROGRAM_AGREEMENT_ID               OKL_HEADER_INTERFACE.PROGRAM_AGREEMENT_ID%TYPE
     ,PROGRAM_VENDOR_NAME                OKL_HEADER_INTERFACE.PROGRAM_VENDOR_NAME%TYPE
     ,PROGRAM_VENDOR_ID                  OKL_HEADER_INTERFACE.PROGRAM_VENDOR_ID%TYPE
     ,MASTER_LEASE_AGREEMENT_NUMBER      OKL_HEADER_INTERFACE.MASTER_LEASE_AGREEMENT_NUMBER%TYPE
     ,MASTER_LEASE_AGREEMENT_ID          OKL_HEADER_INTERFACE.MASTER_LEASE_AGREEMENT_ID%TYPE
     ,PRODUCT_NAME                       OKL_HEADER_INTERFACE.PRODUCT_NAME%TYPE
     ,PRODUCT_ID                         OKL_HEADER_INTERFACE.PRODUCT_ID%TYPE
     ,CALCULATE_RESIDUAL_INSURANCE       OKL_HEADER_INTERFACE.CALCULATE_RESIDUAL_INSURANCE%TYPE
     ,REBOOK_LIMIT_DATE                  OKL_HEADER_INTERFACE.REBOOK_LIMIT_DATE%TYPE
     ,IMPORT_REQUEST_ID                  OKL_HEADER_INTERFACE.IMPORT_REQUEST_ID%TYPE
     ,END_OF_TERM_OPTION                 OKL_HEADER_INTERFACE.END_OF_TERM_OPTION%TYPE
     ,END_OF_TERM_AMOUNT                 OKL_HEADER_INTERFACE.END_OF_TERM_AMOUNT%TYPE
     ,MID_TERM_OPTION                    OKL_HEADER_INTERFACE.MID_TERM_OPTION%TYPE
     ,MID_TERM_AMOUNT                    OKL_HEADER_INTERFACE.MID_TERM_AMOUNT%TYPE
     ,SECURITY_DEPOSIT_HOLD_FLAG         OKL_HEADER_INTERFACE.SECURITY_DEPOSIT_HOLD_FLAG%TYPE
     ,SECURITY_DEPOSIT_NET_FLAG          OKL_HEADER_INTERFACE.SECURITY_DEPOSIT_NET_FLAG%TYPE
     ,SECURITY_DEPOSIT_DATE              OKL_HEADER_INTERFACE.SECURITY_DEPOSIT_DATE%TYPE
     ,RENEWAL_NOTICE_DAYS                OKL_HEADER_INTERFACE.RENEWAL_NOTICE_DAYS%TYPE
     ,RENEWAL_OPTION                     OKL_HEADER_INTERFACE.RENEWAL_OPTION%TYPE
     ,RENEWAL_AMOUNT                     OKL_HEADER_INTERFACE.RENEWAL_AMOUNT%TYPE
     ,LATE_INTEREST_HELD_UNTIL_DATE      OKL_HEADER_INTERFACE.LATE_INTEREST_HELD_UNTIL_DATE%TYPE
     ,LATE_INTEREST_EXEMPT_FLAG          OKL_HEADER_INTERFACE.LATE_INTEREST_EXEMPT_FLAG%TYPE
     ,LATE_INTEREST_PRODUCT_CODE         OKL_HEADER_INTERFACE.LATE_INTEREST_PRODUCT_CODE%TYPE
     ,LATE_CHARGE_HELD_UNTIL_DATE        OKL_HEADER_INTERFACE.LATE_CHARGE_HELD_UNTIL_DATE%TYPE
     ,LATE_CHARGE_PRODUCT_CODE           OKL_HEADER_INTERFACE.LATE_CHARGE_PRODUCT_CODE%TYPE
     ,LATE_CHARGE_EXEMPT_FLAG            OKL_HEADER_INTERFACE.LATE_CHARGE_EXEMPT_FLAG%TYPE
     ,VARIABLE_RATE                      OKL_HEADER_INTERFACE.VARIABLE_RATE%TYPE
     ,CONVERT_TYPE                       OKL_HEADER_INTERFACE.CONVERT_TYPE%TYPE
     ,CONVERSION_METHOD                  OKL_HEADER_INTERFACE.CONVERSION_METHOD%TYPE
     ,DATE_OF_CONVERSION                 OKL_HEADER_INTERFACE.DATE_OF_CONVERSION%TYPE
     ,CONVERT_BY_DATE                    OKL_HEADER_INTERFACE.CONVERT_BY_DATE%TYPE
     ,VARIABLE_METHOD                    OKL_HEADER_INTERFACE.VARIABLE_METHOD%TYPE
     ,INDEX_NAME                         OKL_HEADER_INTERFACE.INDEX_NAME%TYPE
     ,BASE_RATE                          OKL_HEADER_INTERFACE.BASE_RATE%TYPE
     ,ADDER                              OKL_HEADER_INTERFACE.ADDER%TYPE
     ,MINIMUM_RATE                       OKL_HEADER_INTERFACE.MINIMUM_RATE%TYPE
     ,MAXIMUM_RATE                       OKL_HEADER_INTERFACE.MAXIMUM_RATE%TYPE
     ,TOLERANCE                          OKL_HEADER_INTERFACE.TOLERANCE%TYPE
     ,ADJUSTMENT_FREQUENCY               OKL_HEADER_INTERFACE.ADJUSTMENT_FREQUENCY%TYPE
     ,DAYS_IN_YEAR                       OKL_HEADER_INTERFACE.DAYS_IN_YEAR%TYPE
     ,DAYS_IN_MONTH                      OKL_HEADER_INTERFACE.DAYS_IN_MONTH%TYPE
     ,INTEREST_METHOD                    OKL_HEADER_INTERFACE.INTEREST_METHOD%TYPE
     ,INTEREST_START_DATE                OKL_HEADER_INTERFACE.INTEREST_START_DATE%TYPE
     ,METHOD_OF_CALCULATION              OKL_HEADER_INTERFACE.METHOD_OF_CALCULATION%TYPE
     ,FORMULA_NAME                       OKL_HEADER_INTERFACE.FORMULA_NAME%TYPE
     ,CAPITALIZE_FLAG                    OKL_HEADER_INTERFACE.CAPITALIZE_FLAG%TYPE
     ,NON_NOTIFICATION_FLAG              OKL_HEADER_INTERFACE.NON_NOTIFICATION_FLAG%TYPE
     ,TAX_WITHHOLDING_FLAG               OKL_HEADER_INTERFACE.TAX_WITHHOLDING_FLAG%TYPE
     ,TAX_CALC_FORMULA_NAME              OKL_HEADER_INTERFACE.TAX_CALC_FORMULA_NAME%TYPE
     ,TAX_OWNER                          OKL_HEADER_INTERFACE.TAX_OWNER%TYPE
     ,FACTORING_DATE                     OKL_HEADER_INTERFACE.FACTORING_DATE%TYPE
     ,FACTORING_PERCENTAGE               OKL_HEADER_INTERFACE.FACTORING_PERCENTAGE%TYPE
     ,FACTORING_DISCOUNT_RATE            OKL_HEADER_INTERFACE.FACTORING_DISCOUNT_RATE%TYPE
     ,EVERGREEN_ELIGIBLE_FLAG            OKL_HEADER_INTERFACE.EVERGREEN_ELIGIBLE_FLAG%TYPE
     ,BILL_TO_ADDRESS_ID                 OKL_HEADER_INTERFACE.BILL_TO_ADDRESS_ID%TYPE
     ,BILL_TO_ADDRESS                    OKL_HEADER_INTERFACE.BILL_TO_ADDRESS%TYPE
     ,BANK_ACCOUNT_ID                    OKL_HEADER_INTERFACE.BANK_ACCOUNT_ID%TYPE
     ,BANK_ACCOUNT_NUMBER                OKL_HEADER_INTERFACE.BANK_ACCOUNT_NUMBER%TYPE
     ,REASON_FOR_INVOICE_REVIEW          OKL_HEADER_INTERFACE.REASON_FOR_INVOICE_REVIEW%TYPE
     ,INVOICE_REVIEW_UNTIL_DATE          OKL_HEADER_INTERFACE.INVOICE_REVIEW_UNTIL_DATE%TYPE
     ,INVOICE_FORMAT_ID                  OKL_HEADER_INTERFACE.INVOICE_FORMAT_ID%TYPE
     ,INVOICE_FORMAT_CODE                OKL_HEADER_INTERFACE.INVOICE_FORMAT_CODE%TYPE
     ,PRINT_LEAD_DAYS                    OKL_HEADER_INTERFACE.PRINT_LEAD_DAYS%TYPE --hariven bug 5359935
     ,REVIEW_INVOICE_FLAG                OKL_HEADER_INTERFACE.REVIEW_INVOICE_FLAG%TYPE
     ,PAYMENT_METHOD_ID                  OKL_HEADER_INTERFACE.PAYMENT_METHOD_ID%TYPE
     ,PAYMENT_METHOD                     OKL_HEADER_INTERFACE.PAYMENT_METHOD%TYPE
     ,AUTHORING_ORG_ID                   OKL_HEADER_INTERFACE.AUTHORING_ORG_ID%TYPE
     ,INVENTORY_ORGANIZATION_ID          OKL_HEADER_INTERFACE.INVENTORY_ORGANIZATION_ID%TYPE
     ,POLICY_NUMBER                      OKL_HEADER_INTERFACE.POLICY_NUMBER%TYPE
     ,POLICY_EFFECTIVE_FROM              OKL_HEADER_INTERFACE.POLICY_EFFECTIVE_FROM%TYPE
     ,POLICY_EFFECTIVE_TO                OKL_HEADER_INTERFACE.POLICY_EFFECTIVE_TO%TYPE
     ,COVERED_AMOUNT                     OKL_HEADER_INTERFACE.COVERED_AMOUNT%TYPE
     ,DEDUCTIBLE_AMOUNT                  OKL_HEADER_INTERFACE.DEDUCTIBLE_AMOUNT%TYPE
     ,ENDORSEMENT                        OKL_HEADER_INTERFACE.ENDORSEMENT%TYPE
     ,NAME_OF_INSURED                    OKL_HEADER_INTERFACE.NAME_OF_INSURED%TYPE
     ,LESSOR_INSURED_FLAG                OKL_HEADER_INTERFACE.LESSOR_INSURED_FLAG%TYPE
     ,LESSOR_PAYEE_FLAG                  OKL_HEADER_INTERFACE.LESSOR_PAYEE_FLAG%TYPE
     ,INSURANCE_COMPANY_NAME             OKL_HEADER_INTERFACE.INSURANCE_COMPANY_NAME%TYPE
     ,INSURANCE_COMPANY_ID               OKL_HEADER_INTERFACE.INSURANCE_COMPANY_ID%TYPE
     ,INSURANCE_COMPANY_SITE_NAME        OKL_HEADER_INTERFACE.INSURANCE_COMPANY_SITE_NAME%TYPE
     ,INSURANCE_COMPANY_SITE_ID          OKL_HEADER_INTERFACE.INSURANCE_COMPANY_SITE_ID%TYPE
     ,AGENT_NAME                         OKL_HEADER_INTERFACE.AGENT_NAME%TYPE
     ,AGENT_ID                           OKL_HEADER_INTERFACE.AGENT_ID%TYPE
     ,AGENT_ADDRESS_SITE_NAME            OKL_HEADER_INTERFACE.AGENT_ADDRESS_SITE_NAME%TYPE
     ,AGENT_ADDRESS_SITE_ID              OKL_HEADER_INTERFACE.AGENT_ADDRESS_SITE_ID%TYPE
     ,PROOF_DUE_DATE                     OKL_HEADER_INTERFACE.PROOF_DUE_DATE%TYPE
     ,PROOF_PROVIDED_DATE                OKL_HEADER_INTERFACE.PROOF_PROVIDED_DATE%TYPE
     ,PREFUNDING_ELIGIBLE_FLAG           OKL_HEADER_INTERFACE.PREFUNDING_ELIGIBLE_FLAG%TYPE
     ,PRIVATE_ACTIVITY_BOND_FLAG         OKL_HEADER_INTERFACE.PRIVATE_ACTIVITY_BOND_FLAG%TYPE
     ,RVI_AUTO_CALCULATE_FLAG            OKL_HEADER_INTERFACE.RVI_AUTO_CALCULATE_FLAG%TYPE
     ,RVI_GUARANTEED_AMOUNT              OKL_HEADER_INTERFACE.RVI_GUARANTEED_AMOUNT%TYPE
     ,RVI_PRESENT_GUARANTEED_AMOUNT      OKL_HEADER_INTERFACE.RVI_PRESENT_GUARANTEED_AMOUNT%TYPE
     ,RVI_PREMIUM_AMOUNT                 OKL_HEADER_INTERFACE.RVI_PREMIUM_AMOUNT%TYPE
     ,RVI_RATE                           OKL_HEADER_INTERFACE.RVI_RATE%TYPE
     ,FLOOR_PRICE_FORMULA                OKL_HEADER_INTERFACE.FLOOR_PRICE_FORMULA%TYPE
     ,REMKT_SALE_PRICE_FORMULA           OKL_HEADER_INTERFACE.REMKT_SALE_PRICE_FORMULA%TYPE
     ,REPURCHASE_QUOTE_OPTION            OKL_HEADER_INTERFACE.REPURCHASE_QUOTE_OPTION%TYPE
     ,REPURCHASE_QUOTE_FORMULA           OKL_HEADER_INTERFACE.REPURCHASE_QUOTE_FORMULA%TYPE
     ,SALE_PRICE_OPTION                  OKL_HEADER_INTERFACE.SALE_PRICE_OPTION%TYPE
     ,SALE_PRICE_AMOUNT                  OKL_HEADER_INTERFACE.SALE_PRICE_AMOUNT%TYPE
     ,SALE_PRICE_FORMULA                 OKL_HEADER_INTERFACE.SALE_PRICE_FORMULA%TYPE
     ,SALE_PRICE_PRORATE                 OKL_HEADER_INTERFACE.SALE_PRICE_PRORATE%TYPE
     ,DISCOUNT_RATE_OPTION               OKL_HEADER_INTERFACE.DISCOUNT_RATE_OPTION%TYPE
     ,DISCOUNT_RATE_AMOUNT               OKL_HEADER_INTERFACE.DISCOUNT_RATE_AMOUNT%TYPE
     ,DISCOUNT_RATE_FORMULA              OKL_HEADER_INTERFACE.DISCOUNT_RATE_FORMULA%TYPE
     ,DISCOUNT_RATE_PRORATE              OKL_HEADER_INTERFACE.DISCOUNT_RATE_PRORATE%TYPE
     ,QUOTE_FEE_OPTION                   OKL_HEADER_INTERFACE.QUOTE_FEE_OPTION%TYPE
     ,QUOTE_FEE_AMOUNT                   OKL_HEADER_INTERFACE.QUOTE_FEE_AMOUNT%TYPE
     ,QUOTE_FEE_FORMULA                  OKL_HEADER_INTERFACE.QUOTE_FEE_FORMULA%TYPE
     ,QUOTE_FEE_PRORATE                  OKL_HEADER_INTERFACE.QUOTE_FEE_PRORATE%TYPE
     ,ERT_PURCHASE_OPT                   OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT%TYPE
     ,ERT_PURCHASE_OPT_TYPE              OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_TYPE%TYPE
     ,ERT_PURCHASE_OPT_AMOUNT            OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_AMOUNT%TYPE
     ,ERT_PURCHASE_OPT_FORMULA           OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_FORMULA%TYPE
     ,ERT_PURCHASE_OPT_PRORATE           OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_PRORATE%TYPE
     ,ERT_PURCHASE_OPT_MAX_OPT           OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_MAX_OPT%TYPE
     ,ERT_PURCHASE_OPT_MAX_AMT           OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_MAX_AMT%TYPE
     ,ERT_PURCHASE_OPT_MAX_FORMULA       OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_MAX_FORMULA%TYPE
     ,ERT_PURCHASE_OPT_MIN_OPT           OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_MIN_OPT%TYPE
     ,ERT_PURCHASE_OPT_MIN_AMT           OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_MIN_AMT%TYPE
     ,ERT_PURCHASE_OPT_MIN_FORMULA       OKL_HEADER_INTERFACE.ERT_PURCHASE_OPT_MIN_FORMULA%TYPE
     ,EOT_PURCHASE_OPT                   OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT%TYPE
     ,EOT_PURCHASE_OPT_TYPE              OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_TYPE%TYPE
     ,EOT_PURCHASE_OPT_AMOUNT            OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_AMOUNT%TYPE
     ,EOT_PURCHASE_OPT_FORMULA           OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_FORMULA%TYPE
     ,EOT_PURCHASE_OPT_PRORATE           OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_PRORATE%TYPE
     ,EOT_PURCHASE_OPT_MAX_OPT           OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_MAX_OPT%TYPE
     ,EOT_PURCHASE_OPT_MAX_AMT           OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_MAX_AMT%TYPE
     ,EOT_PURCHASE_OPT_MAX_FORMULA       OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_MAX_FORMULA%TYPE
     ,EOT_PURCHASE_OPT_MIN_OPT           OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_MIN_OPT%TYPE
     ,EOT_PURCHASE_OPT_MIN_AMT           OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_MIN_AMT%TYPE
     ,EOT_PURCHASE_OPT_MIN_FORMULA       OKL_HEADER_INTERFACE.EOT_PURCHASE_OPT_MIN_FORMULA%TYPE
     ,TQP_ERL_TERMINATION_ALWD_FLAG      OKL_HEADER_INTERFACE.TQP_ERL_TERMINATION_ALWD_FLAG%TYPE
     ,TQP_PRT_TERMINATION_ALWD_FLAG      OKL_HEADER_INTERFACE.TQP_PRT_TERMINATION_ALWD_FLAG%TYPE
     ,QUOTE_EFFECTIVE_DAYS               OKL_HEADER_INTERFACE.QUOTE_EFFECTIVE_DAYS%TYPE
     ,QUOTE_EFF_MAX_DAYS                 OKL_HEADER_INTERFACE.QUOTE_EFF_MAX_DAYS%TYPE
     ,EOT_TOLERANCE_DAYS                 OKL_HEADER_INTERFACE.EOT_TOLERANCE_DAYS%TYPE
     ,PRT_TERMINATION_APPROVAL_REQ       OKL_HEADER_INTERFACE.PRT_TERMINATION_APPROVAL_REQ%TYPE
     ,PRT_TERMINATION_ALLOWED_FLAG       OKL_HEADER_INTERFACE.PRT_TERMINATION_ALLOWED_FLAG%TYPE
     ,GAIN_LOSS_APPROVAL_REQ             OKL_HEADER_INTERFACE.GAIN_LOSS_APPROVAL_REQ%TYPE
     ,GAIN_LOSS_NET_QUOTE_OPT            OKL_HEADER_INTERFACE.GAIN_LOSS_NET_QUOTE_OPT%TYPE
     ,GAIN_LOSS_NET_QUOTE_AMT            OKL_HEADER_INTERFACE.GAIN_LOSS_NET_QUOTE_AMT%TYPE
     ,GAIN_LOSS_NET_QUOTE_FORMULA        OKL_HEADER_INTERFACE.GAIN_LOSS_NET_QUOTE_FORMULA%TYPE
     ,GAIN_LOSS_TOLERANCE_ALLOWED        OKL_HEADER_INTERFACE.GAIN_LOSS_TOLERANCE_ALLOWED%TYPE
     ,QUOTE_RCPT_CONTRACT_ROLE           OKL_HEADER_INTERFACE.QUOTE_RCPT_CONTRACT_ROLE%TYPE
     ,QUOTE_APPROVER_CONTRACT_ROLE       OKL_HEADER_INTERFACE.QUOTE_APPROVER_CONTRACT_ROLE%TYPE
     ,QUOTE_CRTSY_COPY_CONTRACT_ROLE     OKL_HEADER_INTERFACE.QUOTE_CRTSY_COPY_CONTRACT_ROLE%TYPE
     ,ERT_QUOTE_CALC_TERM_OPTION         OKL_HEADER_INTERFACE.ERT_QUOTE_CALC_TERM_OPTION%TYPE
     ,ERT_QUOTE_CALC_TERM_FORMULA        OKL_HEADER_INTERFACE.ERT_QUOTE_CALC_TERM_FORMULA%TYPE
     ,ERT_CONTRACT_OBLIG_OPT             OKL_HEADER_INTERFACE.ERT_CONTRACT_OBLIG_OPT%TYPE
     ,ERT_CONTRACT_OBLIG_AMOUNT          OKL_HEADER_INTERFACE.ERT_CONTRACT_OBLIG_AMOUNT%TYPE
     ,ERT_CONTRACT_OBLIG_FORMULA         OKL_HEADER_INTERFACE.ERT_CONTRACT_OBLIG_FORMULA%TYPE
     ,ERT_CONTRACT_OBLIG_PRORATE         OKL_HEADER_INTERFACE.ERT_CONTRACT_OBLIG_PRORATE%TYPE
     ,ERT_DISC_RATE_OPT                  OKL_HEADER_INTERFACE.ERT_DISC_RATE_OPT%TYPE
     ,ERT_DISC_RATE_AMOUNT               OKL_HEADER_INTERFACE.ERT_DISC_RATE_AMOUNT%TYPE
     ,ERT_DISC_RATE_FORMULA              OKL_HEADER_INTERFACE.ERT_DISC_RATE_FORMULA%TYPE
     ,ERT_DISC_RATE_PRORATE              OKL_HEADER_INTERFACE.ERT_DISC_RATE_PRORATE%TYPE
     ,ERT_QUOTE_FEE_OPT                  OKL_HEADER_INTERFACE.ERT_QUOTE_FEE_OPT%TYPE
     ,ERT_QUOTE_FEE_AMOUNT               OKL_HEADER_INTERFACE.ERT_QUOTE_FEE_AMOUNT%TYPE
     ,ERT_QUOTE_FEE_FORMULA              OKL_HEADER_INTERFACE.ERT_QUOTE_FEE_FORMULA%TYPE
     ,ERT_QUOTE_FEE_PRORATE              OKL_HEADER_INTERFACE.ERT_QUOTE_FEE_PRORATE%TYPE
     ,ERT_RETURN_FEE_OPTION              OKL_HEADER_INTERFACE.ERT_RETURN_FEE_OPTION%TYPE
     ,ERT_RETURN_FEE_AMOUNT              OKL_HEADER_INTERFACE.ERT_RETURN_FEE_AMOUNT%TYPE
     ,ERT_RETURN_FEE_FORMULA             OKL_HEADER_INTERFACE.ERT_RETURN_FEE_FORMULA%TYPE
     ,ERT_RETURN_FEE_PRORATE             OKL_HEADER_INTERFACE.ERT_RETURN_FEE_PRORATE%TYPE
     ,ERT_ROLL_INCTV_OPTION              OKL_HEADER_INTERFACE.ERT_ROLL_INCTV_OPTION%TYPE
     ,ERT_ROLL_INCTV_AMOUNT              OKL_HEADER_INTERFACE.ERT_ROLL_INCTV_AMOUNT%TYPE
     ,ERT_ROLL_INCTV_FORMULA             OKL_HEADER_INTERFACE.ERT_ROLL_INCTV_FORMULA%TYPE
     ,ERT_ROLL_INCTV_PRORATE             OKL_HEADER_INTERFACE.ERT_ROLL_INCTV_PRORATE%TYPE
     ,ERT_SECU_DEP_DISPO_OPTION          OKL_HEADER_INTERFACE.ERT_SECU_DEP_DISPO_OPTION%TYPE
     ,ERT_SECU_DEP_DISPO_AMOUNT          OKL_HEADER_INTERFACE.ERT_SECU_DEP_DISPO_AMOUNT%TYPE
     ,ERT_SECU_DEP_DISPO_FORMULA         OKL_HEADER_INTERFACE.ERT_SECU_DEP_DISPO_FORMULA%TYPE
     ,ERT_SECU_DEP_DISPO_PRORATE         OKL_HEADER_INTERFACE.ERT_SECU_DEP_DISPO_PRORATE%TYPE
     ,ERT_TERM_PENALTY_OPTION            OKL_HEADER_INTERFACE.ERT_TERM_PENALTY_OPTION%TYPE
     ,ERT_TERM_PENALTY_AMOUNT            OKL_HEADER_INTERFACE.ERT_TERM_PENALTY_AMOUNT%TYPE
     ,ERT_TERM_PENALTY_FORMULA           OKL_HEADER_INTERFACE.ERT_TERM_PENALTY_FORMULA%TYPE
     ,ERT_TERM_PENALTY_PRORATE           OKL_HEADER_INTERFACE.ERT_TERM_PENALTY_PRORATE%TYPE
     ,ERT_TERM_PENALTY_CAP_OPTION        OKL_HEADER_INTERFACE.ERT_TERM_PENALTY_CAP_OPTION%TYPE
     ,ERT_TERM_PENALTY_CAP_AMOUNT        OKL_HEADER_INTERFACE.ERT_TERM_PENALTY_CAP_AMOUNT%TYPE
     ,ERT_TERM_PENALTY_CAP_FORMULA       OKL_HEADER_INTERFACE.ERT_TERM_PENALTY_CAP_FORMULA%TYPE
     ,ERT_EST_PROP_TAX_OPTION            OKL_HEADER_INTERFACE.ERT_EST_PROP_TAX_OPTION%TYPE
     ,ERT_EST_PROP_TAX_AMOUNT            OKL_HEADER_INTERFACE.ERT_EST_PROP_TAX_AMOUNT%TYPE
     ,ERT_EST_PROP_TAX_FORMULA           OKL_HEADER_INTERFACE.ERT_EST_PROP_TAX_FORMULA%TYPE
     ,ERT_EST_PROP_TAX_PRORATE           OKL_HEADER_INTERFACE.ERT_EST_PROP_TAX_PRORATE%TYPE
     ,ERT_CONTR_FEES_OPTION              OKL_HEADER_INTERFACE.ERT_CONTR_FEES_OPTION%TYPE
     ,ERT_OUTSTND_BAL_OPTION             OKL_HEADER_INTERFACE.ERT_OUTSTND_BAL_OPTION%TYPE
     ,ERT_SERV_MANT_OPTION               OKL_HEADER_INTERFACE.ERT_SERV_MANT_OPTION%TYPE
     ,EOT_QUOTE_CALC_TERM_OPTION         OKL_HEADER_INTERFACE.EOT_QUOTE_CALC_TERM_OPTION%TYPE
     ,EOT_QUOTE_CALC_TERM_FORMULA        OKL_HEADER_INTERFACE.EOT_QUOTE_CALC_TERM_FORMULA%TYPE
     ,EOT_CONTRACT_OBLIG_OPT             OKL_HEADER_INTERFACE.EOT_CONTRACT_OBLIG_OPT%TYPE
     ,EOT_CONTRACT_OBLIG_AMOUNT          OKL_HEADER_INTERFACE.EOT_CONTRACT_OBLIG_AMOUNT%TYPE
     ,EOT_CONTRACT_OBLIG_FORMULA         OKL_HEADER_INTERFACE.EOT_CONTRACT_OBLIG_FORMULA%TYPE
     ,EOT_CONTRACT_OBLIG_PRORATE         OKL_HEADER_INTERFACE.EOT_CONTRACT_OBLIG_PRORATE%TYPE
     ,EOT_DISC_RATE_OPT                  OKL_HEADER_INTERFACE.EOT_DISC_RATE_OPT%TYPE
     ,EOT_DISC_RATE_AMOUNT               OKL_HEADER_INTERFACE.EOT_DISC_RATE_AMOUNT%TYPE
     ,EOT_DISC_RATE_FORMULA              OKL_HEADER_INTERFACE.EOT_DISC_RATE_FORMULA%TYPE
     ,EOT_DISC_RATE_PRORATE              OKL_HEADER_INTERFACE.EOT_DISC_RATE_PRORATE%TYPE
     ,EOT_QUOTE_FEE_OPT                  OKL_HEADER_INTERFACE.EOT_QUOTE_FEE_OPT%TYPE
     ,EOT_QUOTE_FEE_AMOUNT               OKL_HEADER_INTERFACE.EOT_QUOTE_FEE_AMOUNT%TYPE
     ,EOT_QUOTE_FEE_FORMULA              OKL_HEADER_INTERFACE.EOT_QUOTE_FEE_FORMULA%TYPE
     ,EOT_QUOTE_FEE_PRORATE              OKL_HEADER_INTERFACE.EOT_QUOTE_FEE_PRORATE%TYPE
     ,EOT_RETURN_FEE_OPTION              OKL_HEADER_INTERFACE.EOT_RETURN_FEE_OPTION%TYPE
     ,EOT_RETURN_FEE_AMOUNT              OKL_HEADER_INTERFACE.EOT_RETURN_FEE_AMOUNT%TYPE
     ,EOT_RETURN_FEE_FORMULA             OKL_HEADER_INTERFACE.EOT_RETURN_FEE_FORMULA%TYPE
     ,EOT_RETURN_FEE_PRORATE             OKL_HEADER_INTERFACE.EOT_RETURN_FEE_PRORATE%TYPE
     ,EOT_ROLL_INCTV_OPTION              OKL_HEADER_INTERFACE.EOT_ROLL_INCTV_OPTION%TYPE
     ,EOT_ROLL_INCTV_AMOUNT              OKL_HEADER_INTERFACE.EOT_ROLL_INCTV_AMOUNT%TYPE
     ,EOT_ROLL_INCTV_FORMULA             OKL_HEADER_INTERFACE.EOT_ROLL_INCTV_FORMULA%TYPE
     ,EOT_ROLL_INCTV_PRORATE             OKL_HEADER_INTERFACE.EOT_ROLL_INCTV_PRORATE%TYPE
     ,EOT_SECU_DEP_DISPO_OPTION          OKL_HEADER_INTERFACE.EOT_SECU_DEP_DISPO_OPTION%TYPE
     ,EOT_SECU_DEP_DISPO_AMOUNT          OKL_HEADER_INTERFACE.EOT_SECU_DEP_DISPO_AMOUNT%TYPE
     ,EOT_SECU_DEP_DISPO_FORMULA         OKL_HEADER_INTERFACE.EOT_SECU_DEP_DISPO_FORMULA%TYPE
     ,EOT_SECU_DEP_DISPO_PRORATE         OKL_HEADER_INTERFACE.EOT_SECU_DEP_DISPO_PRORATE%TYPE
     ,EOT_TERM_PENALTY_OPTION            OKL_HEADER_INTERFACE.EOT_TERM_PENALTY_OPTION%TYPE
     ,EOT_TERM_PENALTY_AMOUNT            OKL_HEADER_INTERFACE.EOT_TERM_PENALTY_AMOUNT%TYPE
     ,EOT_TERM_PENALTY_FORMULA           OKL_HEADER_INTERFACE.EOT_TERM_PENALTY_FORMULA%TYPE
     ,EOT_TERM_PENALTY_PRORATE           OKL_HEADER_INTERFACE.EOT_TERM_PENALTY_PRORATE%TYPE
     ,EOT_TERM_PENALTY_CAP_OPTION        OKL_HEADER_INTERFACE.EOT_TERM_PENALTY_CAP_OPTION%TYPE
     ,EOT_TERM_PENALTY_CAP_AMOUNT        OKL_HEADER_INTERFACE.EOT_TERM_PENALTY_CAP_AMOUNT%TYPE
     ,EOT_TERM_PENALTY_CAP_FORMULA       OKL_HEADER_INTERFACE.EOT_TERM_PENALTY_CAP_FORMULA%TYPE
     ,EOT_EST_PROP_TAX_OPTION            OKL_HEADER_INTERFACE.EOT_EST_PROP_TAX_OPTION%TYPE
     ,EOT_EST_PROP_TAX_AMOUNT            OKL_HEADER_INTERFACE.EOT_EST_PROP_TAX_AMOUNT%TYPE
     ,EOT_EST_PROP_TAX_FORMULA           OKL_HEADER_INTERFACE.EOT_EST_PROP_TAX_FORMULA%TYPE
     ,EOT_EST_PROP_TAX_PRORATE           OKL_HEADER_INTERFACE.EOT_EST_PROP_TAX_PRORATE%TYPE
     ,EOT_CONTR_FEES_OPTION              OKL_HEADER_INTERFACE.EOT_CONTR_FEES_OPTION%TYPE
     ,EOT_OUTSTND_BAL_OPTION             OKL_HEADER_INTERFACE.EOT_OUTSTND_BAL_OPTION%TYPE
     ,EOT_SERV_MANT_OPTION               OKL_HEADER_INTERFACE.EOT_SERV_MANT_OPTION%TYPE
     ,EVERGREEN_PASSTHRU_FEES            OKL_HEADER_INTERFACE.EVERGREEN_PASSTHRU_FEES%TYPE
     ,EVERGREEN_PASSTHRU_PERCENT         OKL_HEADER_INTERFACE.EVERGREEN_PASSTHRU_PERCENT%TYPE
     ,LIEN_TYPE                          OKL_HEADER_INTERFACE.LIEN_TYPE%TYPE
     ,FILING_NUMBER                      OKL_HEADER_INTERFACE.FILING_NUMBER%TYPE
     ,FILING_DATE                        OKL_HEADER_INTERFACE.FILING_DATE%TYPE
     ,FILING_STATUS                      OKL_HEADER_INTERFACE.FILING_STATUS%TYPE
     ,LIEN_HOLDER_NAME                   OKL_HEADER_INTERFACE.LIEN_HOLDER_NAME%TYPE
     ,LIEN_HOLDER_ID                     OKL_HEADER_INTERFACE.LIEN_HOLDER_ID%TYPE
     ,JURISDICTION                       OKL_HEADER_INTERFACE.JURISDICTION%TYPE
     ,SUB_JURISDICTION                   OKL_HEADER_INTERFACE.SUB_JURISDICTION%TYPE
     ,LIEN_EXPIRATION_DATE               OKL_HEADER_INTERFACE.LIEN_EXPIRATION_DATE%TYPE
     ,LIEN_CONTINUATION_NUMBER           OKL_HEADER_INTERFACE.LIEN_CONTINUATION_NUMBER%TYPE
     ,LIEN_CONTINUATION_DATE             OKL_HEADER_INTERFACE.LIEN_CONTINUATION_DATE%TYPE
     ,TITLE_TYPE                         OKL_HEADER_INTERFACE.TITLE_TYPE%TYPE
     ,TITLE_ISSUER_NAME                  OKL_HEADER_INTERFACE.TITLE_ISSUER_NAME%TYPE
     ,TITLE_ISSUER_ID                    OKL_HEADER_INTERFACE.TITLE_ISSUER_ID%TYPE
     ,TITLE_DATE                         OKL_HEADER_INTERFACE.TITLE_DATE%TYPE
     ,TITLE_NUMBER                       OKL_HEADER_INTERFACE.TITLE_NUMBER%TYPE
     ,REGISTRATION_NUMBER                OKL_HEADER_INTERFACE.REGISTRATION_NUMBER%TYPE
     ,LOCATION                           OKL_HEADER_INTERFACE.LOCATION%TYPE
     ,TITLE_CUSTODIAN_NAME               OKL_HEADER_INTERFACE.TITLE_CUSTODIAN_NAME%TYPE
     ,TITLE_CUSTODIAN_ID                 OKL_HEADER_INTERFACE.TITLE_CUSTODIAN_ID%TYPE
     ,PAYEE_SITE                         OKL_HEADER_INTERFACE.PAYEE_SITE%TYPE
     ,REGISTRATION_LOCATION              OKL_HEADER_INTERFACE.REGISTRATION_LOCATION%TYPE
     ,REG_EXPIRATION_DATE                OKL_HEADER_INTERFACE.REG_EXPIRATION_DATE%TYPE
     ,CREDIT_LINE_ID                     OKL_HEADER_INTERFACE.CREDIT_LINE_ID%TYPE
     ,CREDIT_LINE_NUMBER                 OKL_HEADER_INTERFACE.CREDIT_LINE_NUMBER%TYPE
     ,PRTFL_APPROVAL_REQ                 OKL_HEADER_INTERFACE.PRTFL_APPROVAL_REQ%TYPE
     ,PRTFL_ASSGN_GROUP                  OKL_HEADER_INTERFACE.PRTFL_ASSGN_GROUP%TYPE
     ,PRTFL_BUDGET_AMT_OPT               OKL_HEADER_INTERFACE.PRTFL_ASSGN_GROUP%TYPE
     ,PRTFL_BUDGET_FIXED_AMT             OKL_HEADER_INTERFACE.PRTFL_BUDGET_FIXED_AMT%TYPE
     ,PRTFL_BUDGET_AMT_FORMULA           OKL_HEADER_INTERFACE.PRTFL_BUDGET_AMT_FORMULA%TYPE
     ,PRTFL_DAYS_FROM_CON_EXPR           OKL_HEADER_INTERFACE.PRTFL_DAYS_FROM_CON_EXPR%TYPE
     ,PRTFL_STRATEGY                     OKL_HEADER_INTERFACE.PRTFL_STRATEGY%TYPE
     ,PROP_TAX_APPLICABLE                OKL_HEADER_INTERFACE.PROP_TAX_APPLICABLE%TYPE
     ,PROP_TAX_LEASE_REP                 OKL_HEADER_INTERFACE.PROP_TAX_LEASE_REP%TYPE
     ,MEX_TAX_SUB_BASIC_WTHLD            OKL_HEADER_INTERFACE.MEX_TAX_SUB_BASIC_WTHLD%TYPE
     ,MEX_TAX_CALC_FORMULA               OKL_HEADER_INTERFACE.MEX_TAX_CALC_FORMULA%TYPE
     ,AUS_TAX_STAMP_DUTY                 OKL_HEADER_INTERFACE.AUS_TAX_STAMP_DUTY%TYPE
     ,CURRENCY_CONVERSION_TYPE           OKL_HEADER_INTERFACE.CURRENCY_CONVERSION_TYPE%TYPE
     ,CURRENCY_CONVERSION_RATE           OKL_HEADER_INTERFACE.CURRENCY_CONVERSION_RATE%TYPE
     ,CURRENCY_CONVERSION_DATE           OKL_HEADER_INTERFACE.CURRENCY_CONVERSION_DATE%TYPE
     ,ASSIGNABLE_YN                      OKL_HEADER_INTERFACE.ASSIGNABLE_YN%TYPE
     ,LESSEE_VENDOR_ID                   OKL_HEADER_INTERFACE.LESSEE_VENDOR_ID%TYPE
     ,LESSEE_VENDOR_NAME                 OKL_HEADER_INTERFACE.LESSEE_VENDOR_NAME%TYPE
     ,LESSEE_VENDOR_SITE_ID              OKL_HEADER_INTERFACE.LESSEE_VENDOR_SITE_ID%TYPE
     ,LESSEE_VENDOR_SITE_CODE            OKL_HEADER_INTERFACE.LESSEE_VENDOR_SITE_CODE%TYPE
-- cklee start 02/23/2004
     ,INSURANCE_COMPANY_NUMBER           OKL_HEADER_INTERFACE.INSURANCE_COMPANY_NUMBER%TYPE
     ,INSURANCE_COMPANY_SITE_NUMBER      OKL_HEADER_INTERFACE.INSURANCE_COMPANY_SITE_NUMBER%TYPE
     ,AGENT_NUMBER                       OKL_HEADER_INTERFACE.AGENT_NUMBER%TYPE
     ,AGENT_ADDRESS_SITE_NUMBER          OKL_HEADER_INTERFACE.AGENT_ADDRESS_SITE_NUMBER%TYPE
     --,RELEASED_ASSET_YN                  OKL_HEADER_INTERFACE.RELEASED_ASSET_YN%TYPE
-- cklee start 02/23/2004
     ,CASH_APPL_RULE_NAME                OKL_HEADER_INTERFACE.CASH_APPL_RULE_NAME%TYPE
-- Added by rravikir (Fix for Bug 3947959) 10/07/2004
     ,PROP_TAX_BILL_METHOD               OKL_HEADER_INTERFACE.PROP_TAX_BILL_METHOD%TYPE
-- End
  -- AKP new rules 4067094
     ,GAIN_LOSS_TOLRNC_ALLWD_AMT         OKL_HEADER_INTERFACE.GAIN_LOSS_TOLRNC_ALLWD_AMT%TYPE
     ,GAIN_LOSS_TOLRNC_ALLWD_FRML        OKL_HEADER_INTERFACE.GAIN_LOSS_TOLRNC_ALLWD_FRML%TYPE
     ,GAIN_LOSS_TOLRNC_BASIS             OKL_HEADER_INTERFACE.GAIN_LOSS_TOLRNC_BASIS%TYPE
     ,GAIN_LOSS_APPRV_PROC_FRML          OKL_HEADER_INTERFACE.GAIN_LOSS_APPRV_PROC_FRML%TYPE
     ,ERT_ABSORBED_FEE_FRML              OKL_HEADER_INTERFACE.ERT_ABSORBED_FEE_FRML%TYPE
     ,ERT_EXPENSE_FEE_FRML               OKL_HEADER_INTERFACE.ERT_EXPENSE_FEE_FRML%TYPE
     ,ERT_FINANCED_FEE_FRML              OKL_HEADER_INTERFACE.ERT_FINANCED_FEE_FRML%TYPE
     ,ERT_GENERAL_FEE_FRML               OKL_HEADER_INTERFACE.ERT_GENERAL_FEE_FRML%TYPE
     ,ERT_INCOME_FEE_FRML                OKL_HEADER_INTERFACE.ERT_INCOME_FEE_FRML%TYPE
     ,ERT_MISC_FEE_FRML                  OKL_HEADER_INTERFACE.ERT_MISC_FEE_FRML%TYPE
     ,ERT_PASSTHRU_FEE_FRML              OKL_HEADER_INTERFACE.ERT_PASSTHRU_FEE_FRML%TYPE
     ,ERT_ROLLOVER_FEE_FRML              OKL_HEADER_INTERFACE.ERT_ROLLOVER_FEE_FRML%TYPE
     ,EOT_ABSORBED_FEE_FRML              OKL_HEADER_INTERFACE.EOT_ABSORBED_FEE_FRML%TYPE
     ,EOT_EXPENSE_FEE_FRML               OKL_HEADER_INTERFACE.EOT_EXPENSE_FEE_FRML%TYPE
     ,EOT_FINANCED_FEE_FRML              OKL_HEADER_INTERFACE.EOT_FINANCED_FEE_FRML%TYPE
     ,EOT_GENERAL_FEE_FRML               OKL_HEADER_INTERFACE.EOT_GENERAL_FEE_FRML%TYPE
     ,EOT_INCOME_FEE_FRML                OKL_HEADER_INTERFACE.EOT_INCOME_FEE_FRML%TYPE
     ,EOT_MISC_FEE_FRML                  OKL_HEADER_INTERFACE.EOT_MISC_FEE_FRML%TYPE
     ,EOT_PASSTHRU_FEE_FRML              OKL_HEADER_INTERFACE.EOT_PASSTHRU_FEE_FRML%TYPE
     ,EOT_ROLLOVER_FEE_FRML              OKL_HEADER_INTERFACE.EOT_ROLLOVER_FEE_FRML%TYPE
  -- AKP new rules 4067094
     ,DELETE_BEFORE_IMPORT_YN            OKL_HEADER_INTERFACE.DELETE_BEFORE_IMPORT_YN%TYPE /* akp_delete */
     ,ST_UPDATE_LINES_FROM_CONTRACT      OKL_HEADER_INTERFACE.ST_UPDATE_LINES_FROM_CONTRACT%TYPE
     ,ST_INTEREST_DISCLOSED              OKL_HEADER_INTERFACE.ST_INTEREST_DISCLOSED%TYPE
     ,ST_TRANSFER_OF_TITLE               OKL_HEADER_INTERFACE.ST_TRANSFER_OF_TITLE%TYPE
     ,ST_SALE_AND_LEASE_BACK             OKL_HEADER_INTERFACE.ST_SALE_AND_LEASE_BACK%TYPE
     ,ST_PURCHASE_OF_LEASE               OKL_HEADER_INTERFACE.ST_PURCHASE_OF_LEASE%TYPE
     ,ST_EQUIPMENT_USAGE                 OKL_HEADER_INTERFACE.ST_EQUIPMENT_USAGE%TYPE
     ,ST_EQUIPMENT_AGE                   OKL_HEADER_INTERFACE.ST_EQUIPMENT_AGE%TYPE
     ,ST_ASSET_UPFRONT_TAX               OKL_HEADER_INTERFACE.ST_ASSET_UPFRONT_TAX%TYPE
     ,ST_BILL_STREAM_TYPE_CODE           OKL_HEADER_INTERFACE.ST_BILL_STREAM_TYPE_CODE%TYPE
     ,ST_BILL_STREAM_PURPOSE_CODE        OKL_HEADER_INTERFACE.ST_BILL_STREAM_PURPOSE_CODE%TYPE
     ,ST_FIN_STREAM_TYPE_CODE            OKL_HEADER_INTERFACE.ST_FIN_STREAM_TYPE_CODE%TYPE
     ,ST_FIN_STREAM_PURPOSE_CODE         OKL_HEADER_INTERFACE.ST_FIN_STREAM_PURPOSE_CODE%TYPE
     ,ST_CAP_STREAM_TYPE_CODE            OKL_HEADER_INTERFACE.ST_CAP_STREAM_TYPE_CODE%TYPE
     ,ST_CAP_STREAM_PURPOSE_CODE         OKL_HEADER_INTERFACE.ST_CAP_STREAM_PURPOSE_CODE%TYPE
     -- AKP: Vartiable Rate
     ,INT_RATE_EFFECTIVE_FROM_DATE         OKL_HEADER_INTERFACE.INT_RATE_EFFECTIVE_FROM_DATE%TYPE
     ,INT_RATE_EFFECTIVE_TO_DATE           OKL_HEADER_INTERFACE.INT_RATE_EFFECTIVE_TO_DATE%TYPE
     ,INT_RATE_PRINC_BASIS_CODE        OKL_HEADER_INTERFACE.INT_RATE_PRINC_BASIS_CODE%TYPE
     ,INT_RATE_BASIS_CODE         OKL_HEADER_INTERFACE.INT_RATE_BASIS_CODE%TYPE
     ,INT_RATE_DELAY_CODE             OKL_HEADER_INTERFACE.INT_RATE_DELAY_CODE%TYPE
     ,INT_RATE_DELAY_FREQ        OKL_HEADER_INTERFACE.INT_RATE_DELAY_FREQ%TYPE
     ,INT_RATE_CMPND_FREQ_CODE  OKL_HEADER_INTERFACE.INT_RATE_CMPND_FREQ_CODE%TYPE
     ,INT_RATE_CATCHUP_BASIS_CODE          OKL_HEADER_INTERFACE.INT_RATE_CATCHUP_BASIS_CODE%TYPE
     ,INT_RATE_CATCHUP_START_DATE          OKL_HEADER_INTERFACE.INT_RATE_CATCHUP_START_DATE%TYPE
     ,INT_RATE_CAT_STLMNT_CODE     OKL_HEADER_INTERFACE.INT_RATE_CAT_STLMNT_CODE%TYPE
     ,INT_RATE_CHANGE_START_DATE      OKL_HEADER_INTERFACE.INT_RATE_CHANGE_START_DATE%TYPE
     ,INT_RATE_CHANGE_FREQ_CODE  OKL_HEADER_INTERFACE.INT_RATE_CHANGE_FREQ_CODE%TYPE
     ,INT_RATE_CHANGE_VALUE           OKL_HEADER_INTERFACE.INT_RATE_CHANGE_VALUE%TYPE
     ,INT_RATE_CON_OPTION_CODE      OKL_HEADER_INTERFACE.INT_RATE_CON_OPTION_CODE%TYPE
     ,INT_RATE_NEXT_CON_DATE        OKL_HEADER_INTERFACE.INT_RATE_NEXT_CON_DATE%TYPE
     --,INT_RATE_EFFECTIVE_FROM_DATE_CON     OKL_HEADER_INTERFACE.INT_RATE_EFFECTIVE_FROM_DATE_CON%TYPE
     --,INT_RATE_EFFECTIVE_TO_DATE_CON       OKL_HEADER_INTERFACE.INT_RATE_EFFECTIVE_TO_DATE_CON%TYPE
     ,INT_RATE_CON_INDEX_NAME       OKL_HEADER_INTERFACE.INT_RATE_CON_INDEX_NAME%TYPE
     ,INT_RATE_CON_BASE_RATE               OKL_HEADER_INTERFACE.INT_RATE_CON_BASE_RATE%TYPE
     ,INT_RATE_CON_START_DATE     OKL_HEADER_INTERFACE.INT_RATE_CON_START_DATE%TYPE
     ,INT_RATE_CON_ADDER_RATE              OKL_HEADER_INTERFACE.INT_RATE_CON_ADDER_RATE%TYPE
     ,INT_RATE_CON_MAXIMUM_RATE            OKL_HEADER_INTERFACE.INT_RATE_CON_MAXIMUM_RATE%TYPE
     ,INT_RATE_CON_MINIMUM_RATE            OKL_HEADER_INTERFACE.INT_RATE_CON_MINIMUM_RATE%TYPE
     ,INT_RATE_CON_PRC_BAS_CODE    OKL_HEADER_INTERFACE.INT_RATE_CON_PRC_BAS_CODE%TYPE
     ,INT_RATE_CON_DAY_MTH_CODE    OKL_HEADER_INTERFACE.INT_RATE_CON_DAY_MTH_CODE%TYPE
     ,INT_RATE_CON_DAY_YER_CODE    OKL_HEADER_INTERFACE.INT_RATE_CON_DAY_YER_CODE%TYPE
     ,INT_RATE_CON_INT_BAS_CODE     OKL_HEADER_INTERFACE.INT_RATE_CON_INT_BAS_CODE%TYPE
     ,INT_RATE_CON_RATE_DELAY_CODE         OKL_HEADER_INTERFACE.INT_RATE_CON_RATE_DELAY_CODE%TYPE
     ,INT_RATE_CON_RATE_DELAY_FREQ    OKL_HEADER_INTERFACE.INT_RATE_CON_RATE_DELAY_FREQ%TYPE
     ,INT_RATE_CON_CMPND_FREQ_CODE  OKL_HEADER_INTERFACE.INT_RATE_CON_CMPND_FREQ_CODE%TYPE
     ,INT_RATE_CON_FORMULA_NAME  OKL_HEADER_INTERFACE.INT_RATE_CON_FORMULA_NAME%TYPE
     ,INT_RATE_CON_CAT_BAS_CODE      OKL_HEADER_INTERFACE.INT_RATE_CON_CAT_BAS_CODE%TYPE
     ,INT_RATE_CON_CAT_START_DATE    OKL_HEADER_INTERFACE.INT_RATE_CON_CAT_START_DATE%TYPE
     ,INT_RATE_CON_CAT_STLMNT_CODE    OKL_HEADER_INTERFACE.INT_RATE_CON_CAT_STLMNT_CODE%TYPE
     ,INT_RATE_CON_CHG_START_DATE    OKL_HEADER_INTERFACE.INT_RATE_CON_CHG_START_DATE%TYPE
     ,INT_RATE_CON_CHG_FREQ_CODE    OKL_HEADER_INTERFACE.INT_RATE_CON_CHG_FREQ_CODE%TYPE
     ,INT_RATE_CON_CHG_VALUE    OKL_HEADER_INTERFACE.INT_RATE_CON_CHG_VALUE%TYPE
     ,INT_RATE_CAT_FREQ_CODE    OKL_HEADER_INTERFACE.INT_RATE_CAT_FREQ_CODE%TYPE
     ,INT_RATE_CON_CAT_FREQ_CODE    OKL_HEADER_INTERFACE.INT_RATE_CON_CAT_FREQ_CODE%TYPE
      -- Bug 4655611
     ,RVI_STREAM_CODE  OKL_HEADER_INTERFACE.RVI_STREAM_CODE%TYPE
     ,RVI_STREAM_PURPOSE_CODE  OKL_HEADER_INTERFACE.RVI_STREAM_PURPOSE_CODE%TYPE
      -- Bug 4655611
      -- Contract Additional field, Bug 4558486
     ,ATTRIBUTE_CATEGORY OKL_HEADER_INTERFACE.ATTRIBUTE_CATEGORY%TYPE
     ,ATTRIBUTE1         OKL_HEADER_INTERFACE.ATTRIBUTE1%TYPE
     ,ATTRIBUTE2         OKL_HEADER_INTERFACE.ATTRIBUTE2%TYPE
     ,ATTRIBUTE3         OKL_HEADER_INTERFACE.ATTRIBUTE3%TYPE
     ,ATTRIBUTE4         OKL_HEADER_INTERFACE.ATTRIBUTE4%TYPE
     ,ATTRIBUTE5         OKL_HEADER_INTERFACE.ATTRIBUTE5%TYPE
     ,ATTRIBUTE6         OKL_HEADER_INTERFACE.ATTRIBUTE6%TYPE
     ,ATTRIBUTE7         OKL_HEADER_INTERFACE.ATTRIBUTE7%TYPE
     ,ATTRIBUTE8         OKL_HEADER_INTERFACE.ATTRIBUTE8%TYPE
     ,ATTRIBUTE9         OKL_HEADER_INTERFACE.ATTRIBUTE9%TYPE
     ,ATTRIBUTE10        OKL_HEADER_INTERFACE.ATTRIBUTE10%TYPE
     ,ATTRIBUTE11        OKL_HEADER_INTERFACE.ATTRIBUTE11%TYPE
     ,ATTRIBUTE12        OKL_HEADER_INTERFACE.ATTRIBUTE12%TYPE
     ,ATTRIBUTE13        OKL_HEADER_INTERFACE.ATTRIBUTE13%TYPE
     ,ATTRIBUTE14        OKL_HEADER_INTERFACE.ATTRIBUTE14%TYPE
     ,ATTRIBUTE15        OKL_HEADER_INTERFACE.ATTRIBUTE15%TYPE
      -- Contract Additional field, Bug 4558486
     -- $1 Buyout
     ,EOT_AUTO_PROC_PURCHASE_OPT OKL_HEADER_INTERFACE.EOT_AUTO_PROC_PURCHASE_OPT%TYPE
     -- $1 Buyout
     ,PTH_EVG_PAYOUT_BASIS        OKL_HEADER_INTERFACE.PTH_EVG_PAYOUT_BASIS%TYPE
     ,PTH_PAYOUT_BASIS_FORMULA    OKL_HEADER_INTERFACE.PTH_PAYOUT_BASIS_FORMULA%TYPE
     ,PTH_EVG_STREAM_CODE         OKL_HEADER_INTERFACE.PTH_EVG_STREAM_CODE%TYPE
     ,PTH_EVG_STREAM_PURPOSE_CODE OKL_HEADER_INTERFACE.PTH_EVG_STREAM_PURPOSE_CODE%TYPE
     ,SEND_BILL_SALE               OKL_HEADER_INTERFACE.SEND_BILL_SALE%TYPE
     ,MANUAL_QUOTES_ONLY           OKL_HEADER_INTERFACE.MANUAL_QUOTES_ONLY%TYPE
     ,FIRST_TERMINATION_DATE       OKL_HEADER_INTERFACE.FIRST_TERMINATION_DATE%TYPE
     ,QUOTE_RCPT_ADDL_RCPT_ROLE    OKL_HEADER_INTERFACE.QUOTE_RCPT_ADDL_RCPT_ROLE%TYPE
     ,QUOTE_RCPT_ALLOC_PTG         OKL_HEADER_INTERFACE.QUOTE_RCPT_ALLOC_PTG%TYPE
     ,QUOTE_APPRVR_ADV_NOTICE_ROLE OKL_HEADER_INTERFACE.QUOTE_APPRVR_ADV_NOTICE_ROLE%TYPE
     ,QUOTE_APPROVER_DELAY_DAYS    OKL_HEADER_INTERFACE.QUOTE_APPROVER_DELAY_DAYS%TYPE
     ,ERT_SERV_MANT_FRML           OKL_HEADER_INTERFACE.ERT_SERV_MANT_FRML%TYPE
     ,EOT_SERV_MANT_FRML           OKL_HEADER_INTERFACE.EOT_SERV_MANT_FRML%TYPE
     --Added by dpsingh for LE Uptake
     ,LEGAL_ENTITY_ID              NUMBER := Okl_Api.G_MISS_NUM
     -- Added by Punith for R12 ebtax
     ,ST_TAX_SCHEDULE_APPLIES_FLAG OKL_HEADER_INTERFACE.ST_TAX_SCHEDULE_APPLIES_FLAG%TYPE
   );

   SUBTYPE fee_types_rec_type IS OKL_MAINTAIN_FEE_PVT.fee_types_rec_type;
   SUBTYPE tlpv_rec_type IS okl_txl_assets_pub.tlpv_rec_type;

 TYPE intf_party_rec_type IS RECORD (
     CONTRACT_NUMBER         OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE
     ,LINE_NUMBER             OKL_LINES_INTERFACE.LINE_NUMBER%TYPE
--
     ,PARTY_ID                HZ_PARTIES.PARTY_ID%TYPE
     ,PARTY_NUMBER            HZ_PARTIES.PARTY_NUMBER%TYPE
     ,PARTY_NAME              HZ_PARTIES.PARTY_NAME%TYPE
     ,PARTY_CATEGORY_CODE     HZ_PARTIES.CATEGORY_CODE%TYPE
--
     ,PARTY_SITE_ID           HZ_PARTY_SITES.PARTY_SITE_ID%TYPE
     ,PARTY_SITE_NUMBER       HZ_PARTY_SITES.PARTY_SITE_NUMBER%TYPE
     ,PARTY_SITE_NAME         HZ_PARTY_SITES.PARTY_SITE_NAME%TYPE
--
     ,INTF_PARTY_ID           VARCHAR2(150)
     ,INTF_PARTY_NUMBER       VARCHAR2(150)
     ,INTF_PARTY_NAME         VARCHAR2(150)
     ,INTF_PARTY_SITE_ID      VARCHAR2(150)
     ,INTF_PARTY_SITE_NUMBER  VARCHAR2(150)
     ,INTF_PARTY_SITE_NAME    VARCHAR2(150)
   );


   G_BASE_PMNT_HDR       pphv_rec_type;
   G_EVG_PMNT_HDR        pphv_rec_type;
   G_LLA_CHR_ID          CONSTANT VARCHAR2(30) := 'OKL_LLA_CHR_ID';

   G_EVG_CONT_PMNT_HDR   pphv_rec_type; -- Evergreen param at contract header


------------------------------------------------------------------------------
-- PROCEDURE debug_message
--
--  This procedure prints debug message depending on DEBUG flag
--
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE debug_message(
                           p_message IN VARCHAR2
                          ) IS
   L_DEBUG NUMBER := 1;
   BEGIN
      IF ( L_DEBUG = 1 ) THEN
        fnd_file.put_line (fnd_file.log, p_message);
        --dbms_output.put_line (p_message);
         okl_debug_pub.logmessage(p_message);
      END IF;

      RETURN;
   END debug_message;

------------------------------------------------------------------------------
-- PROCEDURE Report_Error
-- It is a generalized routine to display error on Concurrent Manager Log file
-- Calls:
--   okl_api package
--   fnd_msg_pub package
-- Called by:
--   process_record
--   check_input_record
--   process_input_record
------------------------------------------------------------------------------

  PROCEDURE Report_Error(
                         x_msg_count OUT NOCOPY NUMBER,
                         x_msg_data  OUT NOCOPY VARCHAR2
                        ) IS

  x_msg_index_out NUMBER;
  x_msg_out       VARCHAR2(2000);

  BEGIN

    okl_api.end_activity(
                         X_msg_count => x_msg_count,
                         X_msg_data  => x_msg_data
                        );

    FOR i in 1..x_msg_count
    LOOP
      FND_MSG_PUB.GET(
                      p_msg_index     => i,
                      p_encoded       => FND_API.G_FALSE,
                      p_data          => x_msg_data,
                      p_msg_index_out => x_msg_index_out
                     );

      fnd_file.put_line(fnd_file.output, 'Error '||to_char(i)||': '||x_msg_data);
      --dbms_output.put_line('Error '||to_char(i)||': '||x_msg_data);
      debug_message('Error '||to_char(i)||': '||x_msg_data);

    END LOOP;
    return;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END Report_Error;

  PROCEDURE write_to_log(
                         p_message IN VARCHAR2
                        ) IS
  BEGIN
    --dbms_output.put_line(p_message);
    debug_message(p_message);
    fnd_file.put_line(fnd_file.output, p_message);
  END write_to_log;

------------------------------------------------------------------------------
-- PROCEDURE get_can_bto
-- It returns CAN and BTO from OKC_K_HEADERS - after migration
-- Calls:
-- Called by:
------------------------------------------------------------------------------

   PROCEDURE get_can_bto(
                         x_return_status  OUT NOCOPY VARCHAR2,
                         p_chr_id         IN  OKC_K_HEADERS_B.ID%TYPE,
                         x_bto_id         OUT NOCOPY OKC_K_HEADERS_B.BILL_TO_SITE_USE_ID%TYPE,
                         x_can_id         OUT NOCOPY OKC_K_HEADERS_B.CUST_ACCT_ID%TYPE
                        ) IS

   l_proc_name VARCHAR2(35) := 'GET_CAN_BTO';

   CURSOR can_bto_csr (p_chr_id OKC_K_HEADERS_B.ID%TYPE) IS
   SELECT bill_to_site_use_id,
          cust_acct_id
   FROM   okc_k_headers_v
   WHERE  id = p_chr_id;

   BEGIN
      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      OPEN can_bto_csr (p_chr_id);
      FETCH can_bto_csr INTO x_bto_id,
                             x_can_id;
      IF can_bto_csr%NOTFOUND THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;
      CLOSE can_bto_csr;

   END get_can_bto;

------------------------------------------------------------------------------
-- PROCEDURE get_canonical_date
-- It changes date input to canonical_date format as specified in FND_DATE
-- routine. Only required for date columns which are defined as rule segments
-- Calls:
-- Called by:
------------------------------------------------------------------------------
   FUNCTION get_canonical_date(
                               p_from_date IN DATE
                              ) RETURN VARCHAR2 IS
   l_canonical_date VARCHAR2(25);

   BEGIN

     l_canonical_date := NULL;

     SELECT TO_CHAR(p_from_date ,fnd_date.canonical_mask)
     INTO l_canonical_date
     FROM dual;

     RETURN l_canonical_date;

   EXCEPTION
     WHEN OTHERS THEN
        RETURN NULL;
   END get_canonical_date;

------------------------------------------------------------------------------
-- PROCEDURE Process_Record
-- It Validates Input record and Load record after SUCCESSFUL validation
-- Calls:
--   Check_Inout_Record
--   Load_Input_Record
--   Report Error
-- Called by:
--   Starting point
------------------------------------------------------------------------------
  PROCEDURE Process_Record (
                            errbuf             OUT NOCOPY VARCHAR2,
                            retcode            OUT NOCOPY VARCHAR2,
                            p_batch_number     IN VARCHAR2,
                            p_start_date_from  IN VARCHAR2,
                            p_start_date_to    IN VARCHAR2,
                            p_contract_number  IN VARCHAR2,
                            p_customer_number  IN VARCHAR2,
                            p_instance_number  IN VARCHAR2 DEFAULT 'NONE'
                           ) IS


  X_Progress         VARCHAR2(3) := NULL;
  l_proc_name         CONSTANT VARCHAR2(30)  := 'PROCESS_RECORD';
  X_msg_count        NUMBER;
  X_msg_data         VARCHAR2(2000);
  X_return_status    VARCHAR2(200);
  X_total_checked    NUMBER := 0;
  x_total_loaded     NUMBER := 0;
  param_error        EXCEPTION;
  BEGIN

    X_Progress := '010';
    X_return_status := OKL_API.G_RET_STS_SUCCESS;
    g_instance_number := nvl(p_instance_number, 'NONE');

    --fnd_file.put_line(fnd_file.output, 'OKL Contract Open Interface Report');
    --fnd_file.put_line(fnd_file.output, '==================================');
    write_to_log('OKL Contract Open Interface Report');
    write_to_log('==================================');

    write_to_log('***** Parameter values *****');
    write_to_log('Batch Number            : '||NVL(p_batch_number,'NULL'));
    write_to_log('Contract Start Date From: '||NVL(p_start_date_from,'NULL'));
    write_to_log('Contract Start Date To  : '||NVL(p_start_date_to,'NULL'));
    write_to_log('Contract Number         : '||NVL(p_contract_number,'NULL'));
    write_to_log('Customer Number         : '||NVL(p_customer_number,'NULL'));
    write_to_log('Instance Number         : '||NVL(p_instance_number,'NULL'));
    write_to_log('==================================');

    IF (p_batch_number    IS NULL AND
       p_start_date_from IS NULL AND
       p_start_date_to   IS NULL AND
       p_contract_number IS NULL AND
       p_customer_number IS NULL ) THEN  -- All Null

       okl_api.set_message(
                           G_APP_NAME,
                           G_NULL_PARAMETER
                          );
       RAISE param_error;
    ELSIF
       (p_batch_number     IS NOT NULL AND
        (p_start_date_from IS NOT NULL OR
         p_start_date_to   IS NOT NULL OR
         p_contract_number IS NOT NULL OR
         p_customer_number IS NOT NULL)) THEN  -- Provide Batch Number only

       okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_PARAMETER,
                           'PARAM_NAME',
                           'BATCH_NUMBER'
                          );
       RAISE param_error;
    ELSIF
       (p_customer_number IS NOT NULL
        AND
        p_start_date_from IS NULL
        AND
        p_start_date_to IS NULL
       ) THEN
       okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_PARAMETER,
                           'PARAM_NAME',
                           'Customer Number And Start Date From To'
                          );
       RAISE param_error;
    END IF;

/* Bug 4350579 - no need to run check_input_record
 * Validations are moved to load procedure
 *
 *
 *  check_input_record(
 *                  p_init_msg_list   => OKL_API.G_TRUE,
 *                  x_return_status   => X_return_status,
 *                  x_msg_count       => X_msg_count,
 *                  x_msg_data        => X_msg_data,
 *                  p_batch_number    => p_batch_number,
 *                  p_start_date_from => FND_DATE.CANONICAL_TO_DATE(p_start_date_from),
 *                  p_start_date_to   => FND_DATE.CANONICAL_TO_DATE(p_start_date_to),
 *                  p_contract_number => p_contract_number,
 *                  p_customer_number => p_customer_number,
 *                  x_total_checked   => x_total_checked
 *                 );
 *
 *       okl_open_interface_pvt.report_error (
 *                                        x_msg_count => x_msg_count,
 *                                        x_msg_data  => x_msg_data
 *                                       );
 *
    -- Check if Validation is SUCCESSFUL or not
    --fnd_file.put_line(fnd_file.output, '==================================');
    --fnd_file.put_line(fnd_file.output, 'Total Contract Checked for loading: '||TO_CHAR(nvl(x_total_checked,0)));
    --fnd_file.put_line(fnd_file.output, '==================================');

 *  write_to_log('==================================');
 *  write_to_log('Total Contract Checked for loading: '||TO_CHAR(nvl(x_total_checked,0)));
 *  write_to_log('==================================');
 *  Bug 4350579
 */
    Load_Input_Record(
                    p_init_msg_list   => OKL_API.G_TRUE,
                    x_return_status   => X_return_status,
                    x_msg_count       => X_msg_count,
                    x_msg_data        => X_msg_data,
                    p_batch_number    => p_batch_number,
                    p_start_date_from => FND_DATE.CANONICAL_TO_DATE(p_start_date_from),
                    p_start_date_to   => FND_DATE.CANONICAL_TO_DATE(p_start_date_to),
                    p_contract_number => p_contract_number,
                    p_customer_number => p_customer_number,
                    x_total_loaded    => x_total_loaded
                   );

    write_to_log('==================================');
    write_to_log('Total Contract loaded: '||TO_CHAR(nvl(x_total_loaded,0)));
    write_to_log('==================================');

    RETURN;

    EXCEPTION
      WHEN param_error THEN
      okl_api.end_activity(
                           X_msg_count => X_msg_count,
                           X_msg_data  => X_msg_data
                          );

      report_error(
                   x_msg_count => X_msg_count,
                   x_msg_data  => X_msg_data
                  );

   END Process_Record;

------------------------------------------------------------------------------
-- PROCEDURE Update_Interface_Status
-- It Changes Status to Interface Table
-- Calls:
--  None
-- Called By:
--  check_input_record
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE Update_Interface_Status (p_contract_number IN  okl_header_interface.contract_number_old%TYPE,
                                      p_new_contract_number IN okl_header_interface.contract_number%TYPE,
                                      p_status          IN  VARCHAR2,
                                      x_return_status   OUT NOCOPY VARCHAR2 ) IS

   x_proc_name    VARCHAR2(35) := 'UPDATE_INTERFACE_STATUS';
   update_failed  EXCEPTION;
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     UPDATE okl_header_interface
     SET    status              = p_status,
            contract_number     = p_new_contract_number,
            scheduled_worker_id = decode(p_status, 'ERROR', null, scheduled_worker_id),
            date_created_in_okl = decode(p_status,'INTERFACED',SYSDATE,
                                                  'FINAL', SYSDATE, NULL) -- update date in case of Successful loading
     WHERE  contract_number_old = p_contract_number;

     IF SQL%NOTFOUND THEN
        RAISE update_failed;
     END IF;

   EXCEPTION
     WHEN update_failed THEN
      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||x_proc_name
                         );
       x_return_status := OKL_API.G_RET_STS_ERROR;

   END Update_Interface_Status;

------------------------------------------------------------------------------
-- PROCEDURE get_template
-- It returns Template Contract information identified by p_template_number
-- Calls:
--  None
-- Called By:
------------------------------------------------------------------------------
   FUNCTION get_template (
                           x_return_status   OUT NOCOPY VARCHAR2,
                           x_msg_count       OUT NOCOPY NUMBER,
                           x_msg_data        OUT NOCOPY VARCHAR2,
                           p_template_number IN  VARCHAR2
                          )
   RETURN template_h_rec_TYPE IS

   CURSOR t_header_csr (p_template VARCHAR2) IS
   SELECT
      ID
      ,OBJECT_VERSION_NUMBER
      ,SFWT_FLAG
      ,CHR_ID_RESPONSE
      ,CHR_ID_AWARD
      ,CHR_ID_RENEWED
      ,INV_ORGANIZATION_ID
      ,STS_CODE
      ,QCL_ID
      ,SCS_CODE
      ,CONTRACT_NUMBER
      ,CURRENCY_CODE
      ,CONTRACT_NUMBER_MODIFIER
      ,ARCHIVED_YN
      ,DELETED_YN
      ,CUST_PO_NUMBER_REQ_YN
      ,PRE_PAY_REQ_YN
      ,CUST_PO_NUMBER
      ,SHORT_DESCRIPTION
      ,COMMENTS
      ,DESCRIPTION
      ,DPAS_RATING
      ,COGNOMEN
      ,TEMPLATE_YN
      ,TEMPLATE_USED
      ,DATE_APPROVED
      ,DATETIME_CANCELLED
      ,AUTO_RENEW_DAYS
      ,DATE_ISSUED
      ,DATETIME_RESPONDED
      ,NON_RESPONSE_REASON
      ,NON_RESPONSE_EXPLAIN
      ,RFP_TYPE
      ,CHR_TYPE
      ,KEEP_ON_MAIL_LIST
      ,SET_ASIDE_REASON
      ,SET_ASIDE_PERCENT
      ,RESPONSE_COPIES_REQ
      ,DATE_CLOSE_PROJECTED
      ,DATETIME_PROPOSED
      ,DATE_SIGNED
      ,DATE_TERMINATED
      ,DATE_RENEWED
      ,TRN_CODE
      ,START_DATE
      ,END_DATE
      ,AUTHORING_ORG_ID
      ,BUY_OR_SELL
      ,ISSUE_OR_RECEIVE
      ,ESTIMATED_AMOUNT
      ,CHR_ID_RENEWED_TO
      ,ESTIMATED_AMOUNT_RENEWED
      ,CURRENCY_CODE_RENEWED
      ,USER_ACCESS_LEVEL
      ,UPG_ORIG_SYSTEM_REF
      ,UPG_ORIG_SYSTEM_REF_ID
      ,APPLICATION_ID
      ,RESOLVED_UNTIL
      ,ATTRIBUTE_CATEGORY
      ,ATTRIBUTE1
      ,ATTRIBUTE2
      ,ATTRIBUTE3
      ,ATTRIBUTE4
      ,ATTRIBUTE5
      ,ATTRIBUTE6
      ,ATTRIBUTE7
      ,ATTRIBUTE8
      ,ATTRIBUTE9
      ,ATTRIBUTE10
      ,ATTRIBUTE11
      ,ATTRIBUTE12
      ,ATTRIBUTE13
      ,ATTRIBUTE14
      ,ATTRIBUTE15
      ,CREATED_BY
      ,CREATION_DATE
      ,LAST_UPDATED_BY
      ,LAST_UPDATE_DATE
      ,LAST_UPDATE_LOGIN
      ,ORIG_SYSTEM_SOURCE_CODE
      ,ORIG_SYSTEM_ID1
      ,ORIG_SYSTEM_REFERENCE1
      ,KHR_ROW_ID
      ,KHR_OBJECT_VERSION_NUMBER
      ,ISG_ID
      ,KHR_ID
      ,PDT_ID
      ,AMD_CODE
      ,DATE_FIRST_ACTIVITY
      ,GENERATE_ACCRUAL_YN
      ,GENERATE_ACCRUAL_OVERRIDE_YN
      ,DATE_REFINANCED
      ,CREDIT_ACT_YN
      ,TERM_DURATION
      ,CONVERTED_ACCOUNT_YN
      ,DATE_CONVERSION_EFFECTIVE
      ,SYNDICATABLE_YN
      ,SALESTYPE_YN
      ,DATE_DEAL_TRANSFERRED
      ,DATETIME_PROPOSAL_EFFECTIVE
      ,DATETIME_PROPOSAL_INEFFECTIVE
      ,DATE_PROPOSAL_ACCEPTED
      ,KHR_ATTRIBUTE_CATEGORY
      ,KHR_ATTRIBUTE1
      ,KHR_ATTRIBUTE2
      ,KHR_ATTRIBUTE3
      ,KHR_ATTRIBUTE4
      ,KHR_ATTRIBUTE5
      ,KHR_ATTRIBUTE6
      ,KHR_ATTRIBUTE7
      ,KHR_ATTRIBUTE8
      ,KHR_ATTRIBUTE9
      ,KHR_ATTRIBUTE10
      ,KHR_ATTRIBUTE11
      ,KHR_ATTRIBUTE12
      ,KHR_ATTRIBUTE13
      ,KHR_ATTRIBUTE14
      ,KHR_ATTRIBUTE15
      ,KHR_CREATED_BY
      ,KHR_CREATON_DATE
      ,KHR_LAST_UPDATED_BY
      ,KHR_LAST_UPDATE_DATE
      ,KHR_LAST_UPDATE_LOGIN
      ,PRE_TAX_YIELD
      ,AFTER_TAX_YIELD
      ,IMPLICIT_INTEREST_RATE
      ,IMPLICIT_NON_IDC_INTEREST_RATE
      ,TARGET_PRE_TAX_YIELD
      ,TARGET_AFTER_TAX_YIELD
      ,TARGET_IMPLICIT_INTEREST_RATE
      ,TARGET_IMPLICIT_NONIDC_INTRATE
      ,DATE_LAST_INTERIM_INTEREST_CAL
      ,DEAL_TYPE
      ,PRE_TAX_IRR
      ,AFTER_TAX_IRR
      ,EXPECTED_DELIVERY_DATE
      ,ACCEPTED_DATE
      ,PREFUNDING_ELIGIBLE_YN
      ,REVOLVING_CREDIT_YN
      ,CURRENCY_CONVERSION_TYPE
      ,CURRENCY_CONVERSION_RATE
      ,CURRENCY_CONVERSION_DATE
      ,ASSIGNABLE_YN
      ,CUST_ACCT_ID
      ,BILL_TO_SITE_USE_ID
   FROM okl_k_headers_full_v
   WHERE contract_number = p_template
   AND   template_yn = 'Y';

   l_t_header_rec  template_h_rec_type;
   template_failed EXCEPTION;

   l_proc_name VARCHAR2(30) := 'GET_TEMPLATE';
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN t_header_csr (p_template_number);
     FETCH t_header_csr into l_t_header_rec;
     IF t_header_csr%NOTFOUND THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_TEMPLATE,
                            'TEMPLATE_NUMBER',
                            p_template_number
                           );
        RAISE template_failed;
     END IF;
     CLOSE t_header_csr;

     RETURN l_t_header_rec;

   EXCEPTION
     WHEN template_failed THEN
        IF t_header_csr%ISOPEN THEN
           CLOSE t_header_csr;
        END IF;
        x_return_status := OKL_API.G_RET_STS_ERROR;
   END get_template;


--*********************** check Interface **************************************

------------------------------------------------------------------------------
-- PROCEDURE get_contract_rules
-- It retrives rules associated with contract and returns error, if any
-- Calls:
--  None
-- Called By:
------------------------------------------------------------------------------
  PROCEDURE get_contract_rules(
                               x_return_status   OUT NOCOPY VARCHAR2,
                               x_msg_count       OUT NOCOPY NUMBER,
                               x_msg_data        OUT NOCOPY VARCHAR2,
                               p_chr_id          IN  OKC_K_HEADERS_V.ID%TYPE,
                               p_cle_id          IN  OKC_K_LINES_V.ID%TYPE,
                               p_rgd_code        IN  OKC_RULE_GROUPS_V.RGD_CODE%TYPE,
                               p_rule_code       IN  OKC_RULES_V.RULE_INFORMATION_CATEGORY%TYPE,
                               x_rulv_tbl        OUT NOCOPY rulv_tbl_type,
                               x_rule_count      OUT NOCOPY NUMBER
                              ) IS
  l_proc_name VARCHAR2(35) := 'GET_CONTRACT_RULES';

  CURSOR rulv_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE,
                   p_cle_id OKC_K_LINES_V.ID%TYPE,
                   p_rgd_code OKC_RULE_GROUPS_V.RGD_CODE%TYPE,
                   p_rule_code OKC_RULES_V.RULE_INFORMATION_CATEGORY%TYPE) IS
  SELECT
            rule.ID,
            rule.OBJECT_VERSION_NUMBER,
            rule.SFWT_FLAG,
            rule.OBJECT1_ID1,
            rule.OBJECT2_ID1,
            rule.OBJECT3_ID1,
            rule.OBJECT1_ID2,
            rule.OBJECT2_ID2,
            rule.OBJECT3_ID2,
            rule.JTOT_OBJECT1_CODE,
            rule.JTOT_OBJECT2_CODE,
            rule.JTOT_OBJECT3_CODE,
            rule.DNZ_CHR_ID,
            rule.RGP_ID,
            rule.PRIORITY,
            rule.STD_TEMPLATE_YN,
            rule.COMMENTS,
            rule.WARN_YN,
            rule.ATTRIBUTE_CATEGORY,
            rule.ATTRIBUTE1,
            rule.ATTRIBUTE2,
            rule.ATTRIBUTE3,
            rule.ATTRIBUTE4,
            rule.ATTRIBUTE5,
            rule.ATTRIBUTE6,
            rule.ATTRIBUTE7,
            rule.ATTRIBUTE8,
            rule.ATTRIBUTE9,
            rule.ATTRIBUTE10,
            rule.ATTRIBUTE11,
            rule.ATTRIBUTE12,
            rule.ATTRIBUTE13,
            rule.ATTRIBUTE14,
            rule.ATTRIBUTE15,
            rule.CREATED_BY,
            rule.CREATION_DATE,
            rule.LAST_UPDATED_BY,
            rule.LAST_UPDATE_DATE,
            rule.LAST_UPDATE_LOGIN,
            --rule.TEXT,
            rule.RULE_INFORMATION_CATEGORY,
            rule.RULE_INFORMATION1,
            rule.RULE_INFORMATION2,
            rule.RULE_INFORMATION3,
            rule.RULE_INFORMATION4,
            rule.RULE_INFORMATION5,
            rule.RULE_INFORMATION6,
            rule.RULE_INFORMATION7,
            rule.RULE_INFORMATION8,
            rule.RULE_INFORMATION9,
            rule.RULE_INFORMATION10,
            rule.RULE_INFORMATION11,
            rule.RULE_INFORMATION12,
            rule.RULE_INFORMATION13,
            rule.RULE_INFORMATION14,
            rule.RULE_INFORMATION15,
            rule.TEMPLATE_YN,
            rule.ans_set_jtot_object_code,
            rule.ans_set_jtot_object_id1,
            rule.ans_set_jtot_object_id2,
            rule.DISPLAY_SEQUENCE
  FROM   okc_rule_groups_v rg,
         okc_rules_v       rule
  WHERE  rg.id                          = rule.rgp_id
  AND    rg.dnz_chr_id                  = p_chr_id
  AND    ( ( p_cle_id IS NULL
             AND
             rg.cle_id IS NULL
           )
           OR
           rg.cle_id = p_cle_id
         )
  AND    rg.rgd_code                    = p_rgd_code
  AND    rule.rule_information_category = p_rule_code;

  i NUMBER := 0;
  BEGIN

    FOR rulv_rec IN rulv_csr (p_chr_id,
                              p_cle_id,
                              p_rgd_code,
                              p_rule_code)
    LOOP
       i := rulv_csr%ROWCOUNT;
       --x_rulv_tbl(i) := rulv_rec;
    x_rulv_tbl(i).id                            := rulv_rec.id;
    x_rulv_tbl(i).rgp_id                        := rulv_rec.rgp_id;
    x_rulv_tbl(i).object1_id1                   := rulv_rec.object1_id1;
    x_rulv_tbl(i).object2_id1                   := rulv_rec.object2_id1;
    x_rulv_tbl(i).object3_id1                   := rulv_rec.object3_id1;
    x_rulv_tbl(i).object1_id2                   := rulv_rec.object1_id2;
    x_rulv_tbl(i).object2_id2                   := rulv_rec.object2_id2;
    x_rulv_tbl(i).object3_id2                   := rulv_rec.object3_id2;
    x_rulv_tbl(i).jtot_object1_code             := rulv_rec.jtot_object1_code;
    x_rulv_tbl(i).jtot_object2_code             := rulv_rec.jtot_object2_code;
    x_rulv_tbl(i).jtot_object3_code             := rulv_rec.jtot_object3_code;
    x_rulv_tbl(i).dnz_chr_id                    := rulv_rec.dnz_chr_id;
    x_rulv_tbl(i).std_template_yn               := rulv_rec.std_template_yn;
    x_rulv_tbl(i).warn_yn                       := rulv_rec.warn_yn;
    x_rulv_tbl(i).priority                      := rulv_rec.priority;
    x_rulv_tbl(i).object_version_number         := rulv_rec.object_version_number;
    x_rulv_tbl(i).created_by                    := rulv_rec.created_by;
    x_rulv_tbl(i).creation_date                 := rulv_rec.creation_date;
    x_rulv_tbl(i).last_updated_by               := rulv_rec.last_updated_by;
    x_rulv_tbl(i).last_update_date              := rulv_rec.last_update_date;
    x_rulv_tbl(i).last_update_login             := rulv_rec.last_update_login;
    x_rulv_tbl(i).attribute_category            := rulv_rec.attribute_category;
    x_rulv_tbl(i).attribute1                    := rulv_rec.attribute1;
    x_rulv_tbl(i).attribute2                    := rulv_rec.attribute2;
    x_rulv_tbl(i).attribute3                    := rulv_rec.attribute3;
    x_rulv_tbl(i).attribute4                    := rulv_rec.attribute4;
    x_rulv_tbl(i).attribute5                    := rulv_rec.attribute5;
    x_rulv_tbl(i).attribute6                    := rulv_rec.attribute6;
    x_rulv_tbl(i).attribute7                    := rulv_rec.attribute7;
    x_rulv_tbl(i).attribute8                    := rulv_rec.attribute8;
    x_rulv_tbl(i).attribute9                    := rulv_rec.attribute9;
    x_rulv_tbl(i).attribute10                   := rulv_rec.attribute10;
    x_rulv_tbl(i).attribute11                   := rulv_rec.attribute11;
    x_rulv_tbl(i).attribute12                   := rulv_rec.attribute12;
    x_rulv_tbl(i).attribute13                   := rulv_rec.attribute13;
    x_rulv_tbl(i).attribute14                   := rulv_rec.attribute14;
    x_rulv_tbl(i).attribute15                   := rulv_rec.attribute15;
    x_rulv_tbl(i).rule_information_category     := rulv_rec.rule_information_category;
    x_rulv_tbl(i).rule_information1             := rulv_rec.rule_information1;
    x_rulv_tbl(i).rule_information2             := rulv_rec.rule_information2;
    x_rulv_tbl(i).rule_information3             := rulv_rec.rule_information3;
    x_rulv_tbl(i).rule_information4             := rulv_rec.rule_information4;
    x_rulv_tbl(i).rule_information5             := rulv_rec.rule_information5;
    x_rulv_tbl(i).rule_information6             := rulv_rec.rule_information6;
    x_rulv_tbl(i).rule_information7             := rulv_rec.rule_information7;
    x_rulv_tbl(i).rule_information8             := rulv_rec.rule_information8;
    x_rulv_tbl(i).rule_information9             := rulv_rec.rule_information9;
    x_rulv_tbl(i).rule_information10            := rulv_rec.rule_information10;
    x_rulv_tbl(i).rule_information11            := rulv_rec.rule_information11;
    x_rulv_tbl(i).rule_information12            := rulv_rec.rule_information12;
    x_rulv_tbl(i).rule_information13            := rulv_rec.rule_information13;
    x_rulv_tbl(i).rule_information14            := rulv_rec.rule_information14;
    x_rulv_tbl(i).rule_information15            := rulv_rec.rule_information15;
    x_rulv_tbl(i).template_yn                   := rulv_rec.template_yn;
    x_rulv_tbl(i).ans_set_jtot_object_code      := rulv_rec.ans_set_jtot_object_code;
    x_rulv_tbl(i).ans_set_jtot_object_id1       := rulv_rec.ans_set_jtot_object_id1;
    x_rulv_tbl(i).ans_set_jtot_object_id2       := rulv_rec.ans_set_jtot_object_id2;
    x_rulv_tbl(i).display_sequence              := rulv_rec.display_sequence;
    END LOOP;

    x_rule_count := i;

    RETURN;

  END get_contract_rules;

------------------------------------------------------------------------------
-- PROCEDURE check_stream_type_code
-- It validates payment method code and returns ID1 and
-- stacks error, if any, for further processing
-- Calls:
--  None
-- Called By:
--  check_line_literal
--  check_payment_record
--  check_payment_rule_group
------------------------------------------------------------------------------

   PROCEDURE check_stream_type_code(
                                     x_return_status       OUT NOCOPY VARCHAR2,
                                     x_msg_count           OUT NOCOPY NUMBER,
                                     x_msg_data            OUT NOCOPY VARCHAR2,
                                     p_stream_type_code    IN  VARCHAR2,
                                     p_stream_purpose      IN  VARCHAR2,
                                     x_id1                 OUT NOCOPY NUMBER,
                                     x_name                OUT NOCOPY VARCHAR2
                                    ) IS

   CURSOR strm_csr (p_strm_code    VARCHAR2,
                    p_strm_purpose VARCHAR2) IS
   SELECT ID1, NAME
   FROM   okl_strmtyp_source_v
   WHERE  status              = 'A'
   AND    name                = p_strm_code
   AND    stream_type_purpose = p_strm_purpose;

   l_id1      NUMBER;
   l_name     OKL_STRMTYP_SOURCE_V.NAME%TYPE;
   strm_failed EXCEPTION;

   BEGIN
     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     debug_message('p_stream_type_code=' || p_stream_type_code);
     debug_message('p_stream_purpose=' || p_stream_purpose);
     OPEN strm_csr(p_stream_type_code,
                   p_stream_purpose);
     FETCH strm_csr INTO l_id1,l_name;

     IF strm_csr%NOTFOUND THEN
        RAISE strm_failed;
     END IF;

     x_id1  := l_id1;
     x_name := l_name;
     RETURN;

   EXCEPTION
     WHEN strm_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;

   END check_stream_type_code;

------------------------------------------------------------------------------
-- FUNCTION validate_currency_code
-- It validates currency Code against database, FND_CURRENCIES
-- Returns OKL_API.G_RET_STS_ERROR for unknown currency code
--         OKL_API.G_RET_STS_SUCCESS for valid currency code
-- Calls:
--  None
-- Called By:
--  check_input_record
------------------------------------------------------------------------------

  FUNCTION validate_currency_code (p_contract_number IN OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                                   p_currency_code   IN VARCHAR2)
  RETURN VARCHAR2 IS

    CURSOR currency_csr(p_curr_code FND_CURRENCIES.CURRENCY_CODE%TYPE) IS
    SELECT currency_code
    FROM   FND_CURRENCIES
    WHERE  currency_code = p_curr_code
    AND    NVL(end_date_active,SYSDATE) >= SYSDATE;

    x_return_status VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
    l_currency_code FND_CURRENCIES.CURRENCY_CODE%TYPE;

  BEGIN

    IF (p_currency_code IS NULL) THEN
       okl_api.set_message(
                           G_APP_NAME,
                           G_MISSING_VALUE,
                           'CONTRACT_NUM',
                           p_contract_number,
                           'COL_NAME',
                           'CURRENCY_CODE'
                          );
         x_return_status := OKL_API.G_RET_STS_ERROR;

         return x_return_status;
    END IF;

    OPEN currency_csr(p_currency_code);
    FETCH currency_csr INTO l_currency_code;
    IF currency_csr%NOTFOUND THEN
      okl_api.set_message(
                          G_APP_NAME,
                          G_INVALID_VALUE,
                          'CONTRACT_NUM',
                          p_contract_number,
                          'COL_NAME',
                          'CURRENCY_CODE',
                          'COL_VALUE',
                          p_currency_code
                          );
       x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;
    CLOSE currency_csr;

    return x_return_status;

  END validate_currency_code;

------------------------------------------------------------------------------
-- FUNCTION check_header_literal
-- It checks for literals in
--   application_code, contract_category, converted_account,
--   security_deposit_hold_flag, seurity_deposite_net_flag,
--   review_invoice_flag, date_signed, date_approved, term,
--   accepted_date, deal_type_code, bill_to_address, authoring_org_id,
--   customer_account
-- columns and reports error, if any
-- Returns OKL_API.G_RET_STS_ERROR for any Error
--         OKL_API.G_RET_STS_SUCCESS
-- Calls:
--  None
-- Called By:
--  check_input_record
------------------------------------------------------------------------------

  FUNCTION check_header_literal (
                     p_contract_number             IN okl_header_interface.contract_number_old%type,
                     p_template_id                 IN okc_k_headers_v.id%type,
                     p_application_code            IN okl_header_interface.application_code%type,
                     p_contract_category           IN okl_header_interface.contract_category%type,
                     p_import_request_stage        IN okl_header_interface.import_request_stage%type,
                     p_converted_account           IN okl_header_interface.converted_account%type,
                     p_security_deposit_hold_flag  IN okl_header_interface.security_deposit_hold_flag%type,
                     p_security_deposit_net_flag   IN okl_header_interface.security_deposit_net_flag%type,
                     p_review_invoice_flag         IN okl_header_interface.review_invoice_flag%type,
                     p_date_signed                 IN okl_header_interface.date_signed%TYPE,
                     p_start_date                  IN okl_header_interface.start_date%TYPE,
                     p_date_approved               IN okl_header_interface.date_approved%TYPE,
                     p_term                        IN okl_header_interface.term%TYPE,
                     p_accepted_date               IN okl_header_interface.accepted_date%TYPE,
                     p_deal_type_code              IN okl_header_interface.deal_type_code%TYPE,
                     p_bill_to_address             IN okl_header_interface.bill_to_address%TYPE,
                     p_bill_to_address_id          IN okl_header_interface.bill_to_address_id%TYPE,
                     p_authoring_org_id            IN okl_header_interface.authoring_org_id%TYPE,
                     p_inv_organization_id         IN okl_header_interface.inventory_organization_id%TYPE,
                     p_customer_account_number     IN okl_header_interface.customer_account_number%TYPE,
                     p_customer_account_id         IN okl_header_interface.customer_account_id%TYPE,
                     p_eot_purchase_opt_type       IN okl_header_interface.eot_purchase_opt_type%TYPE,
		     p_expected_delivery_date      IN okl_header_interface.expected_delivery_date%TYPE,
                     p_currency_code               IN okl_header_interface.currency_code%TYPE
                    )
  RETURN VARCHAR2 IS

  x_return_status VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
  l_return_status VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;

  l_rulv_tbl   rulv_tbl_type;
  l_rule_count NUMBER;
  x_msg_count  NUMBER;
  x_msg_data   VARCHAR2(2000);

  l_cust_acct_present VARCHAR2(1) := 'N';
  l_bto_present       VARCHAR2(1) := 'N';

  l_bill_to_site_use_id OKC_K_HEADERS_B.BILL_TO_SITE_USE_ID%TYPE;
  l_cust_acct_id        OKC_K_HEADERS_B.CUST_ACCT_ID%TYPE;
  l_proc_name           VARCHAR2(35) := 'check_header_literal';

  BEGIN

    debug_message(l_proc_name);

    IF (UPPER(p_import_request_stage) NOT IN ( 'NEW','PASSED','COMPLETE','APPROVED','BOOKED' )) THEN
       okl_api.set_message(
                           G_APP_NAME,
                           G_LITERAL_MISMATCH,
                           'COL_NAME',
                           'IMPORT_REQUEST_STAGE',
                           'COL_VALUE',
                           p_import_request_stage
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_import_request_stage <> 'NEW'
        AND
        p_date_signed IS NULL ) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_STAGE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'DATE_SIGNED',
                            'STAGE',
                            p_import_request_stage
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_import_request_stage <> 'NEW'
        AND
        p_date_signed >= NVL(p_start_date,SYSDATE) ) THEN
       okl_api.set_message(
                           G_APP_NAME,
                           G_DATESIGNED_LT_START
                          );
       x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_import_request_stage = 'BOOKED'
        AND
        p_date_approved IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_STAGE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'DATE_APPROVED',
                            'STAGE',
                            p_import_request_stage
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_import_request_stage <> 'NEW'
        AND
        p_term IS NULL ) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_STAGE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'TERM',
                            'STAGE',
                            p_import_request_stage
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_authoring_org_id IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'AUTHORING_ORG_ID'
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;

    END IF;

    IF (p_inv_organization_id IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'INV_ORGANIZATION_ID'
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;

    END IF;

   IF (UPPER(p_import_request_stage) <> 'NEW'
       AND
       p_expected_delivery_date IS NULL) THEN
       okl_api.set_message(
                           G_APP_NAME,
                           G_MISSING_VALUE_FOR_STAGE,
                           'CONTRACT_NUM',
                           p_contract_number,
                           'COL_NAME',
                           'EXPECTED_DELIVERY_DATE',
                           'STAGE',
                           p_import_request_stage
                          );
        x_return_status := OKL_API.G_RET_STS_ERROR;
   END IF;


   l_return_status := validate_currency_code(p_contract_number => p_contract_number,
                                             p_currency_code   => p_currency_code);

   IF (l_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
      x_return_status := l_return_status;
   END IF;

   return x_return_status;

 END check_header_literal;


------------------------------------------------------------------------------
-- PROCEDURE check_for_release_asset
-- This procedure checks to see whether the asset is released or not.
-- Calls:
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE check_for_release_asset(
                                     x_return_status OUT NOCOPY VARCHAR2,
                                     x_msg_count     OUT NOCOPY NUMBER,
                                     x_msg_data      OUT NOCOPY VARCHAR2,
                                     p_asset_number  IN  VARCHAR2,
                                     p_line_number   IN  NUMBER,
                                     p_org_id        IN  NUMBER,
                                     x_release_asset OUT NOCOPY VARCHAR2,
                                     x_asset_id      OUT NOCOPY OKL_LA_RELEASE_ASSETS_UV.ASSET_ID%TYPE
                                    ) IS

   CURSOR release_csr (p_asset_number VARCHAR2,
                       p_org_id       NUMBER) IS
   SELECT asset_id
   FROM   OKL_LA_RELEASE_ASSETS_UV
   WHERE  asset_number    = p_asset_number
   AND    organization_id = p_org_id;

   l_proc_name VARCHAR2(35) := 'CHECK_FOR_RELEASE_ASSET';
   l_release_yn VARCHAR2(1) := 'N';
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);

     x_asset_id   := NULL;
     l_release_yn := 'N';
     OPEN release_csr (p_asset_number,
                       p_org_id);
     FETCH release_csr INTO x_asset_id;
     IF release_csr%NOTFOUND THEN
        l_release_yn := 'N';
     ELSE
        l_release_yn := 'Y';
     END IF;
     CLOSE release_csr;

     debug_message('=====> Asset '||p_asset_number||'/'||p_line_number||' : Released? : '||l_release_yn);
     debug_message('=====> Asset ID: '||x_asset_id);

     x_release_asset := l_release_yn;

   EXCEPTION
    WHEN OTHERS THEN
      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;

   END check_for_release_asset;
------------------------------------------------------------------------------
-- PROCEDURE get_release_asset_flag
-- This procedure checks to see whether the contract header includes release assets.
-- If Asset lines include a Release Asset, the function returns a value of 'Y'
-- If Asset lines does not include Releases Assets, the function returns a value of 'N'
-- If Asset lines includes mixed Assets, the function reports error
-- Calls:
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   FUNCTION get_release_asset_flag(
                                     x_return_status    OUT NOCOPY VARCHAR2,
                                     x_msg_count        OUT NOCOPY NUMBER,
                                     x_msg_data         OUT NOCOPY VARCHAR2,
                                     p_contract_number  IN  Varchar2,
                                     p_org_id           IN  NUMBER
                                    ) RETURN VARCHAR2 IS

   CURSOR release_csr (p_asset_number VARCHAR2,
                       p_org_id       NUMBER) IS
   SELECT 'Y'
   FROM   OKL_LINES_INTERFACE OLI
   WHERE  oli.contract_number_old = p_contract_number
   AND    EXISTS (    SELECT fa.asset_id
                      FROM   FA_ADDITIONS_B FA,
                             OKL_ASSET_RETURNS_B OAR,
                             OKC_K_ITEMS   CIM_FA,
                             OKC_K_LINES_B CLEB_FA,
                             OKC_K_LINES_B CLEB_TL,
                             OKC_K_HEADERS_B CHRB
                      WHERE  cleb_tl.chr_id = chrb.id
                      AND    chrb.inv_organization_id = p_org_id
                      AND    cleb_tl.lse_id = G_FIN_LINE_LTY_ID
                      AND    oar.kle_id = cleb_tl.id
                      AND    oar.ars_code = 'RE_LEASE'
                      AND    cleb_fa.cle_id = cleb_tl.id
                      AND    cleb_fa.lse_id = G_FA_LINE_LTY_ID
                      AND    cleb_fa.id = cim_fa.cle_id
                      AND    cleb_fa.dnz_chr_id =cim_fa.dnz_chr_id
                      AND    cim_fa.object1_id1 = fa.asset_id
                      AND    cim_fa.object1_id2 ='#'
                      AND    fa.asset_number = oli.asset_number
                      AND    not exists (SELECT '1'
                                         FROM  okc_k_headers_b chrb_2,
                                               okc_statuses_b chr_sts,
                                               okc_k_lines_b cleb_2,
                                               okc_statuses_b cle_sts,
                                               okc_k_items cim_2
                                         WHERE chrb_2.id = cleb_2.dnz_chr_id
                                         AND   chrb_2.scs_code in ('LEASE','LOAN')
                                         AND   chrb_2.sts_code = chr_sts.code
                                         AND   chr_sts.ste_code not in ('HOLD', 'EXPIRED', 'TERMINATED', 'CANCELLED')
                                         AND   cleb_2.id = cim_2.cle_id
                                         AND   cleb_2.dnz_chr_id = cim_2.dnz_chr_id
                                         AND   cleb_2.sts_code = cle_sts.code
                                         AND   cle_sts.ste_code not in ('HOLD', 'EXPIRED', 'TERMINATED', 'CANCELLED')
                                         AND   cim_2.object1_id1 = to_char(fa.asset_id)
                                         AND   cim_2.object1_id2 = '#' and cim_2.jtot_object1_code = 'OKX_ASSET'
                                        )

                 ) ;


   CURSOR unrelease_csr (p_asset_number VARCHAR2,
                       p_org_id       NUMBER) IS

   SELECT 'Y'
   FROM   OKL_LINES_INTERFACE OLI
   WHERE  oli.contract_number_old = p_contract_number
   AND    NOT EXISTS (SELECT fa.asset_id
                      FROM   FA_ADDITIONS_B FA,
                             OKL_ASSET_RETURNS_B OAR,
                             OKC_K_ITEMS   CIM_FA,
                             OKC_K_LINES_B CLEB_FA,
                             OKC_K_LINES_B CLEB_TL,
                             OKC_K_HEADERS_B CHRB
                      WHERE  cleb_tl.chr_id = chrb.id
                      AND    chrb.inv_organization_id = p_org_id
                      AND    cleb_tl.lse_id = G_FIN_LINE_LTY_ID
                      AND    oar.kle_id = cleb_tl.id
                      AND    oar.ars_code = 'RE_LEASE'
                      AND    cleb_fa.cle_id = cleb_tl.id
                      AND    cleb_fa.lse_id = G_FA_LINE_LTY_ID
                      AND    cleb_fa.id = cim_fa.cle_id
                      AND    cleb_fa.dnz_chr_id =cim_fa.dnz_chr_id
                      AND    cim_fa.object1_id1 = fa.asset_id
                      AND    cim_fa.object1_id2 ='#'
                      AND    fa.asset_number = oli.asset_number
                     ) ;

   l_proc_name VARCHAR2(35) := 'GET_RELEASE_ASSET_FLAG';
   l_released_assets_exist_yn VARCHAR2(1) := 'N';
   l_released_assets_not_exist_yn VARCHAR2(1) := 'N';
   l_release_yn VARCHAR2(1) ;
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);

     OPEN release_csr (p_contract_number,
                       p_org_id);

     FETCH release_csr INTO l_released_assets_exist_yn;
     IF release_csr%NOTFOUND THEN
        l_released_assets_exist_yn := 'N';
     ELSE
        l_released_assets_exist_yn := 'Y';
     END IF;
     CLOSE release_csr;
     debug_message ('l_released_assets_exist_yn :'|| l_released_assets_exist_yn);

     OPEN unrelease_csr (p_contract_number,
                         p_org_id);

     FETCH unrelease_csr INTO l_released_assets_not_exist_yn;
     IF unrelease_csr%NOTFOUND THEN
        l_released_assets_not_exist_yn := 'N';
     ELSE
        l_released_assets_not_exist_yn := 'Y';
     END IF;
     CLOSE unrelease_csr;
     debug_message ('l_released_assets_not_exist_yn :'|| l_released_assets_not_exist_yn);


     IF ((l_released_assets_exist_yn = 'Y') AND (l_released_assets_not_exist_yn = 'N')) THEN
            l_release_yn := 'Y';
     ELSIF ((l_released_assets_exist_yn = 'N') AND (l_released_assets_not_exist_yn = 'Y')) THEN
            l_release_yn := 'N';
     -- 4539003
     ELSIF ((l_released_assets_exist_yn = 'N') AND (l_released_assets_not_exist_yn = 'N')) THEN
            l_release_yn := 'N';
     ELSE
        okl_api.set_message(
                            G_APP_NAME,
                            G_MIXED_ASSET,
                            'CONTRACT_NUM',
                            p_contract_number
                           );
        x_return_status := OKL_API.G_RET_STS_ERROR;
     END IF;
     debug_message ('l_release_yn : '|| l_release_yn);
	 RETURN l_release_yn;

   EXCEPTION
    WHEN OTHERS THEN
      IF ( release_csr%ISOPEN ) THEN
         CLOSE release_csr;
      END IF;
      IF ( unrelease_csr%ISOPEN ) THEN
         CLOSE unrelease_csr;
      END IF;
      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;

   END get_release_asset_flag;
------------------------------------------------------------------------------
-- PROCEDURE check_line_literal
-- It checks for literals in
--   line_number, line_type, amount, inventory_item, install_site,
--   asset_corporate_book, asset_category_segments, asset_location_segments,
--   depreciation_method, life_in_months, fee_code, price_list_name,
--   counter_group_name, usage_bill_frequency_code, base_reading_uom_code
-- columns and reports error, if any
-- Returns OKL_API.G_RET_STS_ERROR for any Error
--         OKL_API.G_RET_STS_SUCCESS
-- Calls:
--  check_stream_type_code
-- Called By:
--  check_input_record
------------------------------------------------------------------------------

  PROCEDURE check_line_literal (
                               x_return_status             OUT NOCOPY VARCHAR2,
                               x_msg_count                 OUT NOCOPY NUMBER,
                               x_msg_data                  OUT NOCOPY VARCHAR2,
                               p_contract_number           IN okl_header_interface.contract_number_old%TYPE,
                               p_import_request_stage      IN okl_header_interface.import_request_stage%TYPE,
                               p_product_id                IN okl_header_interface.product_id%TYPE,
                               p_product_name              IN okl_header_interface.product_name%TYPE,
                               p_line_number               IN okl_lines_interface.line_number%TYPE,
                               p_line_type                 IN okl_lines_interface.line_type%TYPE,
                               p_amount                    IN okl_lines_interface.amount%TYPE,
                               p_currency_code             IN okl_lines_interface.currency_code%TYPE,
                               p_asset_number              IN okl_lines_interface.asset_number%TYPE,
                               p_inventory_item_name       IN okl_lines_interface.inventory_item_name%TYPE,
                               p_inventory_item_id         IN okl_lines_interface.inventory_item_id%TYPE,
                               p_install_site_number       IN okl_lines_interface.install_site_number%TYPE,
                               p_install_site_id           IN okl_lines_interface.install_site_id%TYPE,
                               p_asset_corporate_book      IN okl_lines_interface.asset_corporate_book%TYPE,
                               p_asset_category_id         IN okl_lines_interface.asset_category_id%TYPE,
                               p_asset_category_segment1   IN okl_lines_interface.asset_category_segment1%TYPE,
                               p_asset_category_segment2   IN okl_lines_interface.asset_category_segment2%TYPE,
                               p_asset_category_segment3   IN okl_lines_interface.asset_category_segment3%TYPE,
                               p_asset_category_segment4   IN okl_lines_interface.asset_category_segment4%TYPE,
                               p_asset_category_segment5   IN okl_lines_interface.asset_category_segment5%TYPE,
                               p_asset_category_segment6   IN okl_lines_interface.asset_category_segment6%TYPE,
                               p_asset_category_segment7   IN okl_lines_interface.asset_category_segment7%TYPE,
                               p_asset_location_id         IN okl_lines_interface.asset_location_id%TYPE,
                               p_asset_location_segment1   IN okl_lines_interface.asset_location_segment1%TYPE,
                               p_asset_location_segment2   IN okl_lines_interface.asset_location_segment2%TYPE,
                               p_asset_location_segment3   IN okl_lines_interface.asset_location_segment3%TYPE,
                               p_asset_location_segment4   IN okl_lines_interface.asset_location_segment4%TYPE,
                               p_asset_location_segment5   IN okl_lines_interface.asset_location_segment5%TYPE,
                               p_asset_location_segment6   IN okl_lines_interface.asset_location_segment6%TYPE,
                               p_asset_location_segment7   IN okl_lines_interface.asset_location_segment7%TYPE,
                               p_depreciation_method_id    IN okl_lines_interface.depreciation_method_id%TYPE,
                               p_depreciation_method_code  IN okl_lines_interface.depreciation_method_code%TYPE,
                               p_life_in_months            IN okl_lines_interface.life_in_months%TYPE,
                               p_fee_code                  IN okl_lines_interface.fee_code%TYPE,
                               p_stream_purpose            IN okl_lines_interface.stream_purpose_code%TYPE,
                               p_fee_type                  IN okl_lines_interface.fee_type%TYPE,
                               p_price_list_name           IN okl_lines_interface.price_list_name%TYPE,
                               p_price_list_id             IN okl_lines_interface.price_list_id%TYPE,
                               p_counter_group_name        IN okl_lines_interface.counter_group_name%TYPE,
                               p_counter_group_id          IN okl_lines_interface.counter_group_id%TYPE,
                               p_usage_bill_frequency_code IN okl_lines_interface.usage_bill_frequency_code%TYPE,
                               p_base_reading_uom_code     IN okl_lines_interface.base_reading_uom_code%TYPE,
                               p_usage_type_code           IN okl_lines_interface.usage_type_code%TYPE,
                               p_usage_period              IN okl_lines_interface.usage_period%TYPE,
                               p_usage_no_of_period        IN okl_lines_interface.usage_no_of_period%TYPE,
                               p_tax_cost                  IN okl_lines_interface.tax_cost%TYPE,
                               p_tax_book                  IN okl_lines_interface.tax_book%TYPE,
                               p_life_in_months_tax        IN okl_lines_interface.life_in_months_tax%TYPE,
                               p_deprn_method_tax          IN okl_lines_interface.deprn_method_tax%TYPE,
                               p_deprn_rate_tax            IN okl_lines_interface.deprn_rate_tax%TYPE,
                               p_in_service_date           IN okl_lines_interface.in_service_date%TYPE,
			       p_link_asset_amount         IN okl_lines_interface.link_asset_amount%TYPE,
                               p_inv_org_id                IN okl_header_interface.inventory_organization_id%TYPE,
                               p_term_quote_id             IN okl_lines_interface.termination_quote_id%TYPE,
                               p_term_quote_number         IN okl_lines_interface.termination_quote_number%TYPE,
                               p_fee_purpose_code          IN okl_lines_interface.fee_purpose_code%TYPE
                              ) IS
-- 4475344
/*
  CURSOR srv_supp_csr(p_contract_number OKL_PARTY_ROLES_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                      p_line_number     OKL_PARTY_ROLES_INTERFACE.LINE_NUMBER%TYPE) IS
  SELECT service_vendor_id,
         service_vendor_name
  FROM   okl_party_roles_interface
  WHERE  contract_number_old = p_contract_number
  AND    line_number         = p_line_number;
*/
  CURSOR fnd_lookup_csr(p_lookup_code FND_LOOKUPS.LOOKUP_CODE%TYPE,
                        p_lookup_type FND_LOOKUPS.LOOKUP_TYPE%TYPE) IS
  SELECT 'X'
  FROM   FND_LOOKUPS
  WHERE  lookup_code = p_lookup_code
  AND    lookup_type = p_lookup_type;

  l_supp_name     OKL_PARTY_ROLES_INTERFACE.SERVICE_VENDOR_NAME%TYPE;
  l_supp_id       OKL_PARTY_ROLES_INTERFACE.SERVICE_VENDOR_ID%TYPE;

  x_id1 okl_strmtyp_source_v.id1%TYPE;
  x_asset_id      OKL_LA_RELEASE_ASSETS_UV.ASSET_ID%TYPE;
  x_release_asset VARCHAR2(1) := 'N';

  halt_validation EXCEPTION;
  l_return_status VARCHAR2(1);

  l_proc_name     VARCHAR2(35) := 'check_line_literal';
  l_fee_name      OKL_STRMTYP_SOURCE_V.NAME%TYPE;

  l_exists_yn     VARCHAR2(1);

  BEGIN
    debug_message(l_proc_name);

    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    debug_message('Line type: '||p_line_type);

    IF (p_line_type NOT IN ('ASSET','SERVICE', 'FEE', 'USAGE', 'ASSET_SUBSIDY', 'ASSET_ADDON' )) THEN
       okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_VALUE,
                           'CONTRACT_NUM',
                           p_contract_number||'/'||TO_CHAR(p_line_number),
                           'COL_NAME',
                           'LINE_TYPE',
                           'COL_VALUE',
                           p_line_type
                           );

       x_return_status := OKL_API.G_RET_STS_ERROR;
       RAISE halt_validation; -- major error, don't proceed with other validation
    END IF;

    IF (p_line_type = 'ASSET'
        AND
        p_asset_number IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'ASSET NUMBER',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;
/* 4414408
    check_for_release_asset(
                            x_return_status => l_return_status,
                            x_msg_count     => x_msg_count,
                            x_msg_data      => x_msg_data,
                            p_asset_number  => p_asset_number,
                            p_line_number   => p_line_number,
                            p_org_id        => p_inv_org_id,
                            x_release_asset => x_release_asset,
                            x_asset_id      => x_asset_id
                           );

    IF (l_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    debug_message('------> Asset '||p_asset_number||': Released? :'||x_release_asset);

    IF (p_line_type = 'ASSET'
        AND
        x_release_asset = 'N'
        AND
        p_tax_book IS NOT NULL
        AND
        p_asset_corporate_book IS NULL) THEN
           okl_api.set_message(
                                G_APP_NAME,
                                G_MISSING_VALUE_FOR_LINE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                'COL_NAME',
                                'CORPORATE BOOK',
                                'LINE',
                                p_line_type
                                );
           x_return_status := OKL_API.G_RET_STS_ERROR;

    END IF;
*/
    IF (p_line_type = 'USAGE'
        AND
        p_asset_number IS NULL
        AND
        p_import_request_stage <> 'NEW') THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_STAGE_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'ASSET NUMBER',
                            'STAGE',
                            p_import_request_stage,
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_line_type IN ('SERVICE', 'FEE')
        AND
        p_amount IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'AMOUNT',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

/* 4414408
    IF (p_line_type = 'ASSET'
        AND
        x_release_asset = 'N'
        AND
        p_inventory_item_name IS NULL
        AND
        p_inventory_item_id IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'INVENTORY_ITEM_NAME OR INVENTORY_ITEM_ID',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;
*/
    IF (p_line_type IN ('SERVICE','USAGE')
        AND
        p_inventory_item_name IS NULL
        AND
        p_inventory_item_id IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'INVENTORY_ITEM_NAME OR INVENTORY_ITEM_ID',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

/* 4414408
    IF (p_line_type = 'ASSET'
        AND
        x_release_asset = 'N'
        AND
        p_install_site_number IS NULL
        AND
        p_install_site_id IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'INSTALL_SITE_NUMBER OR INSTALL_SITE_ID',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;
*/
    IF (p_line_type = 'FEE') THEN

      IF (p_fee_code IS NULL) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE_FOR_LINE,
                             'CONTRACT_NUM',
                             p_contract_number||'/'||TO_CHAR(p_line_number),
                             'COL_NAME',
                             'FEE_CODE',
                             'LINE',
                             p_line_type
                             );

         x_return_status := OKL_API.G_RET_STS_ERROR;

      ELSE

         check_stream_type_code(
                                x_return_status    => l_return_status,
                                x_msg_count        => x_msg_count,
                                x_msg_data         => x_msg_data,
                                p_stream_type_code => p_fee_code,
                                p_stream_purpose   => p_stream_purpose,
                                x_id1              => x_id1,
                                x_name             => l_fee_name
                               );
         IF (l_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                'COL_NAME',
                                'FEE_CODE, STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                p_fee_code||', '||p_stream_purpose
                              );
             x_return_status := OKL_API.G_RET_STS_ERROR;
         END IF;
      END IF; --fee_code not null

      IF (p_fee_type IS NULL) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE_FOR_LINE,
                             'CONTRACT_NUM',
                             p_contract_number||'/'||TO_CHAR(p_line_number),
                             'COL_NAME',
                             'FEE_TYPE',
                             'LINE',
                             p_line_type
                             );

         x_return_status := OKL_API.G_RET_STS_ERROR;

      END IF; --Fee Type

      IF (p_fee_type = 'ROLLOVER'
          AND
          ( p_term_quote_id IS NULL
            AND
            p_term_quote_number IS NULL)
         ) THEN

            okl_api.set_message(
                                G_APP_NAME,
                                G_MISSING_VALUE_FOR_LINE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||p_line_number,
                                'COL_NAME',
                                'TERMINATION_QUOTE_ID OR TERMINATION_QUOTE_NUMBER',
                                'LINE',
                                p_line_type
                                );
            x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;

      IF (p_fee_purpose_code is NOT NULL) THEN
         OPEN fnd_lookup_csr (p_fee_purpose_code, 'OKL_FEE_PURPOSE');
         FETCH fnd_lookup_csr INTO l_exists_yn;
         IF (fnd_lookup_csr%NOTFOUND) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                'COL_NAME',
                                'FEE_PURPOSE_CODE',
                                'COL_VALUE',
                                p_fee_purpose_code
                              );
             x_return_status := OKL_API.G_RET_STS_ERROR;
         END IF;
         CLOSE fnd_lookup_csr;
      END IF;

    END IF; -- fee line type

    IF (p_line_type = 'USAGE'
        AND
        p_price_list_name IS NULL
        AND
        p_price_list_id IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'PRICE_LIST_NAME OR PRICE_LIST_ID',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_line_type = 'USAGE'
        AND
        p_base_reading_uom_code IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'BASE_READING_UOM_CODE',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_line_type = 'USAGE'
        AND
        p_usage_type_code IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'USAGE_TYPE',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_line_type = 'USAGE'
        AND
        p_usage_period IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'USAGE_PERIOD',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_line_type = 'USAGE'
        AND
        p_usage_no_of_period IS NULL) THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||TO_CHAR(p_line_number),
                            'COL_NAME',
                            'USAGE_NO_OF_PERIOD',
                            'LINE',
                            p_line_type
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (p_line_type = 'SERVICE') THEN
       --
       -- Check for the presence of SERVICE VENDOR
       -- and link asset line amount
       --
       IF (p_link_asset_amount IS NULL
           AND
           p_asset_number IS NOT NULL) THEN
            okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE_FOR_LINE,
                             'CONTRACT_NUM',
                             p_contract_number||'/'||TO_CHAR(p_line_number),
                             'COL_NAME',
                             'LINK ASSET AMOUNT',
                             'LINE',
                             p_line_type
                            );
            x_return_status := OKL_API.G_RET_STS_ERROR;
        END IF;

/* 4475344
        l_supp_name := NULL;
        l_supp_id   := NULL;
        OPEN srv_supp_csr (p_contract_number,
                           p_line_number);
        FETCH srv_supp_csr INTO l_supp_id,
                                l_supp_name;
        CLOSE srv_supp_csr;

        IF (l_supp_name IS NULL
            AND
            l_supp_id IS NULL) THEN
           okl_api.set_message(
                                G_APP_NAME,
                                G_MISSING_VALUE_FOR_LINE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                'COL_NAME',
                                'SERVICE VENDOR',
                                'LINE',
                                p_line_type
                                );

           x_return_status := OKL_API.G_RET_STS_ERROR;
        END IF;
*/
    END IF; -- SERVICE line

    debug_message('return status :'||x_return_status);

    return;

  EXCEPTION
    WHEN halt_validation THEN
       x_return_status := OKL_API.G_RET_STS_ERROR;

  END check_line_literal;

------------------------------------------------------------------------------
-- FUNCTION validate_customer
-- It validates customer against database, OKX_PARTIES_V
-- Returns OKL_API.G_RET_STS_ERROR for unknown customer
--         OKL_API.G_RET_STS_SUCCESS for existing customer
-- Also outputs ID1 for corresponding Customer
-- Calls:
--  None
-- Called By:
--  check_input_record
------------------------------------------------------------------------------

  FUNCTION validate_customer (p_contract_number IN  OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                              p_customer_id     IN  OKX_PARTIES_V.ID1%TYPE,
                              p_customer_number IN  OKX_PARTIES_V.PARTY_NUMBER%TYPE,
                              x_id1             OUT NOCOPY OKX_PARTIES_V.ID1%TYPE)
  RETURN VARCHAR2 IS

    CURSOR customer_csr (p_customer_id     OKX_PARTIES_V.ID1%TYPE,
                         p_customer_number OKX_PARTIES_V.PARTY_NUMBER%TYPE) IS
    SELECT   id1
    FROM     okx_parties_v
    WHERE    NVL(TRUNC(end_date_active), TRUNC(SYSDATE)) >= TRUNC(SYSDATE)
    AND      ((id1          = p_customer_id
              AND p_customer_id IS NOT NULL)
              OR
             (party_number = p_customer_number
              AND
              p_customer_number IS NOT NULL));

  BEGIN

    OPEN  customer_csr(p_customer_id,
                       p_customer_number);
    FETCH customer_csr into x_id1;
    CLOSE customer_csr;

    IF (x_id1 IS NULL) THEN
       okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_VALUE,
                           'CONTRACT_NUM',
                           p_contract_number,
                           'COL_NAME',
                           'CUSTOMER_ID, NUMBER',
                           'COL_VALUE',
                           p_customer_id||', '||p_customer_number
                           );
       return OKL_API.G_RET_STS_ERROR;  -- Customer Not found
    ELSE
       return OKL_API.G_RET_STS_SUCCESS;
    END IF;

  END validate_customer;

------------------------------------------------------------------------------
-- FUNCTION check_contract_number
-- It checks for duplicate contract number in OKL.
-- Returns OKL_API.G_RET_STS_ERROR for duplicate and
--         OKL_API.G_RET_STS_SUCCESS for New
-- Calls:
--  None
-- Called By:
--  check_input_record
------------------------------------------------------------------------------

  FUNCTION check_contract_number (p_contract_number IN VARCHAR2)
  RETURN VARCHAR2 IS

    CURSOR khdr_csr (p_ontract_number OKC_K_HEADERS_V.CONTRACT_NUMBER%TYPE) IS
    SELECT contract_number
    FROM   okc_k_headers_v
    WHERE  contract_number = p_contract_number;

    x_return_status   VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
    l_contract_number OKC_K_HEADERS_V.CONTRACT_NUMBER%TYPE;

  BEGIN

    OPEN khdr_csr(p_contract_number);
    FETCH khdr_csr INTO l_contract_number;
    IF khdr_csr%NOTFOUND THEN
       x_return_status := OKL_API.G_RET_STS_SUCCESS;
    ELSE
       x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;
    CLOSE khdr_csr;

    IF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
       okl_api.set_message(
                           G_APP_NAME,
                           G_DUP_VALUE,
                           'COL_NAME',
                           'CONTRACT_NUMBER_OLD',
                           'COL_VALUE',
                           p_contract_number
                          );
    END IF;

    return x_return_status;

  END check_contract_number;


------------------------------------------------------------------------------
-- PROCEDURE check_payment_frequency_code
-- It validates Payment Frequency Code and returns ID1 and
-- stacks error, if any for further processing
-- Calls:
--  None
-- Called By:
--  check_payment_record
--  create_payment_other_rules
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE check_payment_frequency_code(
                                          x_return_status     OUT NOCOPY VARCHAR2,
                                          x_msg_count         OUT NOCOPY NUMBER,
                                          x_msg_data          OUT NOCOPY VARCHAR2,
                                          p_payment_freq_code IN  okl_payments_interface.payment_frequency_code%TYPE,
                                          x_id1               OUT NOCOPY okx_tuom_v.id1%TYPE,
                                          x_uom_code          OUT NOCOPY okx_tuom_v.uom_code%TYPE
                                        ) IS
/*
   CURSOR freq_csr (p_payment_freq_code okl_payments_interface.payment_frequency_code%TYPE) IS
   SELECT id1,
          uom_code
   FROM   okx_tuom_v
   WHERE  uom_class     = 'OKL-TIME'
   AND    base_uom_flag = 'N'
   AND    name          = p_payment_freq_code;
*/
   CURSOR freq_csr (p_payment_freq_code okl_payments_interface.payment_frequency_code%TYPE) IS
   SELECT id1,
          id1
   FROM   okl_time_units_v
   WHERE  name = p_payment_freq_code;

   l_id1      okx_tuom_v.id1%TYPE;
   l_uom_code okx_tuom_v.uom_code%TYPE;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      OPEN freq_csr(p_payment_freq_code);
      FETCH freq_csr INTO l_id1,
                          l_uom_code;
      IF freq_csr%NOTFOUND THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;

      x_id1      := l_id1;
      x_uom_code := l_uom_code;
      RETURN;

   END check_payment_frequency_code;

------------------------------------------------------------------------------
-- PROCEDURE check_contract_line
-- It validates Party role line number/ Terms Line number/ Payments line number against contract
-- line number in OKL_LINES_INTERFACE table
-- Calls:
--  None
-- Called By:
--  check_payment_record
--  check_input_record
------------------------------------------------------------------------------
   PROCEDURE  check_contract_line(
                                  x_return_status   OUT NOCOPY VARCHAR2,
                                  p_contract_number IN  okl_party_roles_interface.contract_number_old%TYPE,
                                  p_line_number     IN  okl_party_roles_interface.line_number%TYPE
                                 ) IS

   CURSOR line_csr (p_contract_number VARCHAR2,
                    p_line_number     NUMBER) IS
   SELECT 'X'
   FROM   okl_lines_interface
   WHERE  contract_number_old = p_contract_number
   AND    line_number         = p_line_number;

   l_dummy VARCHAR2(1);
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN line_csr (p_contract_number,
                    p_line_number);
     FETCH line_csr INTO l_dummy;
     IF line_csr%NOTFOUND THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
     END IF;
     CLOSE line_csr;

     return;
   END check_contract_line;

------------------------------------------------------------------------------
-- PROCEDURE check_payment_record
-- It validates Payment interface Record and stacks error, if any
-- for further processing
-- Calls:
--  None
-- Called By:
--  check_payment_record
------------------------------------------------------------------------------
   PROCEDURE check_payment_record(
                                 x_return_status              OUT NOCOPY VARCHAR2,
                                 x_msg_count                  OUT NOCOPY NUMBER,
                                 x_msg_data                   OUT NOCOPY VARCHAR2,
                                 p_contract_number_old        IN  okl_payments_interface.contract_number_old%TYPE,
                                 p_line_number                IN  okl_payments_interface.line_number%TYPE,
                                 p_asset_number               IN  okl_payments_interface.asset_number%TYPE,
                                 p_payment_type_code          IN  VARCHAR2,
                                 p_stream_purpose             IN  okl_payments_interface.stream_purpose_code%TYPE,
                                 p_payment_schedule_number    IN  okl_payments_interface.payment_schedule_number%TYPE,
                                 p_payment_frequency_code     IN  okl_payments_interface.payment_frequency_code%TYPE,
                                 p_arrears_flag               IN  okl_payments_interface.arrears_flag%TYPE,
                                 p_advance_payments           IN  okl_payments_interface.advance_payments%TYPE,
                                 p_payment_amount             IN  okl_payments_interface.payment_amount%TYPE,
                                 p_start_date                 IN  okl_payments_interface.start_date%TYPE,
                                 p_number_of_periods          IN  okl_payments_interface.number_of_periods%TYPE,
                                 p_rate                       IN  okl_payments_interface.rate%TYPE,
                                 p_comments                   IN  okl_payments_interface.comments%TYPE,
                                 p_stub_days                  IN  okl_payments_interface.stub_days%TYPE,
                                 p_stub_amount                IN  okl_payments_interface.stub_amount%TYPE
                                ) IS

   x_id1          okx_tuom_v.id1%TYPE;
   x_id2          okl_strmtyp_source_v.id1%TYPE;
   x_uom_code     okx_tuom_v.uom_code%TYPE;
   payment_failed EXCEPTION;

   l_return_status VARCHAR2(1);
   l_proc_name     VARCHAR2(35) := 'check_payment_record';
   l_payment_name  OKL_STRMTYP_SOURCE_V.NAME%TYPE;

   BEGIN

     debug_message(l_proc_name);

/*
      IF (p_asset_number IS NULL
          AND
          p_line_number IS NOT NULL) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'ASSET_NUMBER'
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;
*/

      IF (p_payment_type_code IS NULL) THEN

         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'PAYMENT_TYPE_CODE'
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      ELSE

         check_stream_type_code(
                                 x_return_status    => l_return_status,
                                 x_msg_count        => x_msg_count,
                                 x_msg_data         => x_msg_data,
                                 p_stream_type_code => p_payment_type_code,
                                 p_stream_purpose   => p_stream_purpose,
                                 x_id1              => x_id2,
                                 x_name             => l_payment_name
                                );

         IF (l_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number_old||'/'||p_line_number,
                                'COL_NAME',
                                'PAYMENT_TYPE_CODE, STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                 p_payment_type_code||', '||p_stream_purpose
                                );
             x_return_status := OKL_API.G_RET_STS_ERROR;
         END IF;
      END IF;

/*
      IF (p_payment_amount IS NULL
          AND
          p_rate IS NULL) THEN
          okl_api.set_message(
                              G_APP_NAME,
                              G_MISSING_VALUE,
                              'CONTRACT_NUM',
                              p_contract_number_old||'/'||p_line_number,
                              'COL_NAME',
                              'PAYMENT_AMOUNT or RATE'
                             );
          x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;
*/

      IF (p_payment_frequency_code IS NULL) THEN

         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'PAYMENT_FREQUENCY_CODE'
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      ELSE
         check_payment_frequency_code(
                                      x_return_status     => l_return_status,
                                      x_msg_count         => x_msg_count,
                                      x_msg_data          => x_msg_data,
                                      p_payment_freq_code => p_payment_frequency_code,
                                      x_id1               => x_id1,
                                      x_uom_code          => x_uom_code
                                     );
         IF (l_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number_old||'/'||p_line_number,
                                'COL_NAME',
                                'PAYMENT_FREQUENCY_CODE',
                                'COL_VALUE',
                                 p_payment_frequency_code
                                );
             x_return_status := OKL_API.G_RET_STS_ERROR;
         END IF;
      END IF;

      IF (p_advance_payments IS NULL) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'ADVANCE_PAYMENTS'
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;

      IF (p_arrears_flag <> 'Y'
          AND
          p_arrears_flag <> 'N') THEN

         okl_api.set_message(
                             G_APP_NAME,
                             G_INVALID_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'ARREARS_FLAG',
                             'COL_VALUE',
                              p_arrears_flag
                             );
          x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;

/*
      IF (p_start_date IS NULL) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'START_DATE'
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;
*/

      IF (p_stub_days IS NOT NULL
          AND
          p_stub_amount IS NOT NULL
          AND
          p_number_of_periods IS NOT NULL
          AND
          p_payment_amount IS NOT NULL
         ) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_STUB_PMNT_BOTH,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      ELSIF (p_stub_days IS NULL AND p_stub_amount IS NOT NULL) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'STUB_DAYS'
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      ELSIF (p_stub_days IS NOT NULL AND p_stub_amount IS NULL) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'STUB_AMOUNT'
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      ELSIF (p_number_of_periods IS NOT NULL AND p_payment_amount IS NULL) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'PAYMENT_AMOUNT'
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      ELSIF (p_number_of_periods IS NULL AND p_payment_amount IS NOT NULL) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_MISSING_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number_old||'/'||p_line_number,
                             'COL_NAME',
                             'NUMBER_OF_PERIODS'
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;

      RETURN;

   EXCEPTION

      WHEN payment_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;

   END check_payment_record;

 ------------------------------------------------------------------------------
 -- PROCEDURE validate_usage_freq
 -- It validates Usage line payment frequency code
 -- Calls:
 --  None
 -- Called By:
 ------------------------------------------------------------------------------
    PROCEDURE validate_usage_freq(
                                  x_return_status   OUT NOCOPY VARCHAR2,
                                  x_msg_count       OUT NOCOPY VARCHAR2,
                                  x_msg_data        OUT NOCOPY VARCHAR2,
                                  p_freq            IN  VARCHAR2,
                                  p_contract_number IN  VARCHAR2,
                                  p_line_number     IN  NUMBER
                                 ) IS

    CURSOR freq_csr (p_freq_code VARCHAR2) IS
    SELECT 'Y'
    FROM   okx_units_of_measure_v okx,
           okc_time_code_units_v okc
    WHERE  okx.uom_code     = okc.uom_code
    AND    okc.active_flag  = 'Y'
    AND    okc.tce_code NOT IN ('HOUR','MINUTE','SECOND')
    AND    okx.uom_code     = p_freq_code;

    l_found     VARCHAR2(1) := 'N';
    freq_failed EXCEPTION;
    BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      l_found := 'N';
      OPEN freq_csr (p_freq);
      FETCH freq_csr INTO l_found;
      CLOSE freq_csr;

      IF (l_found <> 'Y') THEN
         okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number||','||p_line_number,
                            'COL_NAME',
                            'USAGE_PERIOD',
                            'COL_VALUE',
                            p_freq
                            );
         RAISE freq_failed;
      END IF;

      RETURN;

    EXCEPTION
      WHEN freq_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
    END validate_usage_freq;

------------------------------------------------------------------------------
-- PROCEDURE Check_Input_Record
--    DO NOT USE THIS PROCEDURE, BUG 4350579
-- It Reads data from Interface Tables and Validates. During process of validation it
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--   check_header_literal
--   validate_customer
--   validate_currency_code
--   check_line_literal
--   check_contract_line
--   check_payment_record
--   update_interface_status
--   report_error
-- Called By:
--   process_record
------------------------------------------------------------------------------
  PROCEDURE Check_Input_Record(
                            p_init_msg_list    IN VARCHAR2,
                            x_return_status    OUT NOCOPY VARCHAR2,
                            x_msg_count        OUT NOCOPY NUMBER,
                            x_msg_data         OUT NOCOPY VARCHAR2,
                            p_batch_number     IN  VARCHAR2,
                            p_start_date_from  IN  DATE,
                            p_start_date_to    IN  DATE,
                            p_contract_number  IN  VARCHAR2,
                            p_customer_number  IN  VARCHAR2,
                            x_total_checked    OUT NOCOPY NUMBER
                           ) IS

  l_proc_name           VARCHAR2(35)  := NULL;
  l_progress            VARCHAR2(3)   := NULL;
  l_contract_number_old okl_header_interface.contract_number_old%TYPE;
  l_customer_id         okx_parties_v.id1%TYPE;
  l_record_status       VARCHAR2(3);
  l_batch_status        VARCHAR2(3);
  x_id1                 NUMBER;

  l_header_template     template_h_rec_type;

  header_validation_failed EXCEPTION;
  line_validation_failed EXCEPTION;

  --
  -- Cursor to fetch Header Interface Records
  --

  CURSOR okl_header_csr (p_batch_number    VARCHAR2,
                         p_start_date_from DATE,
                         p_start_date_to   DATE,
                         p_contract_number VARCHAR2,
                         p_customer_number VARCHAR2 ) IS

  SELECT *
  FROM   okl_header_interface
  WHERE  (
          batch_number        = p_batch_number
          OR
          contract_number_old = p_contract_number
          OR
          (
           customer_number    = p_customer_number
           AND
           start_date         between p_start_date_from AND p_start_date_to
          )
         )
  AND    nvl(scheduled_worker_id,'NONE') = g_instance_number
  AND    status in ('NEW','ERROR'); --Process only NEW and previuosly FAILED records

  --
  -- Cursor to fetch Line Interface Records for each contract header
  --

  CURSOR okl_line_csr (p_contract_number_old okc_k_headers_v.contract_number%TYPE) IS
  SELECT *
  FROM   okl_lines_interface
  WHERE  contract_number_old = p_contract_number_old
  ORDER BY line_number;

  --
  -- Cursor to fetch Party Role Records
  --

  CURSOR okl_party_role_csr (p_contract_number okc_k_headers_v.contract_number%TYPE) IS
  SELECT *
  FROM   okl_party_roles_interface
  WHERE  contract_number_old = p_contract_number;

  --
  -- Cursor to fetch Terms Records
  --

  CURSOR okl_term_csr (p_contract_number okc_k_headers_v.contract_number%TYPE) IS
  SELECT *
  FROM   okl_terms_interface
  WHERE  contract_number_old = p_contract_number;

  --
  -- Cursor to fetch Payments Records
  --

  CURSOR okl_payment_csr (p_contract_number okc_k_headers_v.contract_number%TYPE) IS
  SELECT *
  FROM   okl_payments_interface
  WHERE  contract_number_old = p_contract_number;


  BEGIN -- Actual Procedure Starts Here

   -- Bug 4350579
   -- THIS PROCEDURE IS NOT BEING USED ANY MORE
   -- DO NOT CALL THIS PROCEDURE FOR IMPORT
   --

  l_proc_name     := 'CHECK_INPUT_RECORD';
  x_return_status := OKL_API.G_RET_STS_SUCCESS; -- individual validaiton status
  l_record_status := OKL_API.G_RET_STS_SUCCESS; -- record level status
  l_batch_status  := OKL_API.G_RET_STS_SUCCESS; -- batch level status

  okl_api.init_msg_list(p_init_msg_list => OKL_API.G_TRUE);
  l_progress      := '000';

  FOR okl_header_rec IN okl_header_csr (p_batch_number,
                                        p_start_date_from,
                                        p_start_date_to,
                                        p_contract_number,
                                        p_customer_number )
  LOOP

    BEGIN
      -- Validation Starts For each Contract
      --fnd_file.put_line(fnd_file.output, 'Checking... '||okl_header_rec.contract_number_old);

      write_to_log('Checking... '||okl_header_rec.contract_number_old);

      x_total_checked := nvl(x_total_checked,0) + 1;

      l_progress := '010';
      l_record_status := OKL_API.G_RET_STS_SUCCESS;


      l_contract_number_old := okl_header_rec.contract_number_old;

      -- Validate CONTRACT_NUMBER_OLD
      IF ( okl_header_rec.contract_number_old IS NULL) THEN
         okl_api.set_message(
                            G_APP_NAME,
                            G_NULL_CONTRACT
                            );


         raise header_validation_failed; -- Unable to continue further

/* not required, bug 3798008
 *    ELSIF ( check_contract_number (l_contract_number_old) = OKL_API.G_RET_STS_ERROR ) THEN
 *
 *         raise header_validation_failed; -- Unable to continue further
 *
*/
      END IF;


      l_progress := '020';
      --
      -- Get Template Information if requested
      --
      l_header_template := NULL;
      IF (okl_header_rec.template_number IS NOT NULL) THEN
         l_header_template := get_template(
                                           x_return_status   => x_return_status,
                                           x_msg_count       => x_msg_count,
                                           x_msg_data        => x_msg_data,
                                           p_template_number => okl_header_rec.template_number
                                          );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_validation_failed;
         END IF;

      END IF;
      --
      -- Checks Constant literal, not needed check against table
      -- validate and stacks error
      --
      x_return_status := check_header_literal (
                           p_contract_number             => okl_header_rec.contract_number_old,
                           p_template_id                 => l_header_template.id,
                           p_application_code            => okl_header_rec.application_code,
                           p_contract_category           => NVL(okl_header_rec.contract_category,l_header_template.scs_code),
                           p_import_request_stage        => okl_header_rec.import_request_stage,
                           p_converted_account           => NVL(okl_header_rec.converted_account,
                                                                l_header_template.converted_account_yn),
                           p_security_deposit_hold_flag  => okl_header_rec.security_deposit_hold_flag,
                           p_security_deposit_net_flag   => okl_header_rec.security_deposit_net_flag,
                           p_review_invoice_flag         => okl_header_rec.review_invoice_flag,
                           p_date_signed                 => NVL(okl_header_rec.date_signed,l_header_template.date_signed),
                           p_start_date                  => NVL(okl_header_rec.start_date,l_header_template.start_date),
                           p_date_approved               => NVL(okl_header_rec.date_approved,l_header_template.date_approved),
                           p_term                        => NVL(okl_header_rec.term,l_header_template.term_duration),
                           p_accepted_date               => NVL(okl_header_rec.accepted_date,l_header_template.accepted_date),
                           p_deal_type_code              => NVL(okl_header_rec.deal_type_code,l_header_template.deal_type),
                           p_bill_to_address             => okl_header_rec.bill_to_address,
                           p_bill_to_address_id          => okl_header_rec.bill_to_address_id,
                           p_authoring_org_id            => NVL(okl_header_rec.authoring_org_id,
                                                                l_header_template.authoring_org_id),
			   p_inv_organization_id         => NVL(okl_header_rec.inventory_organization_id,
			                                        l_header_template.inv_organization_id),
                           p_customer_account_number     => okl_header_rec.customer_account_number,
                           p_customer_account_id         => okl_header_rec.customer_account_id,
                           p_eot_purchase_opt_type       => okl_header_rec.eot_purchase_opt_type,
                           p_expected_delivery_date      => okl_header_rec.expected_delivery_date,
                           p_currency_code               => NVL(okl_header_rec.currency_code,
                                                                  l_header_template.currency_code)
                          );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          l_record_status := OKL_API.G_RET_STS_ERROR;
      END IF;

      l_progress := '030';

      -- Validate CUSTOMER
      x_return_status := validate_customer(p_contract_number => okl_header_rec.contract_number_old,
                                           p_customer_id     => okl_header_rec.customer_id,
                                           p_customer_number => okl_header_rec.customer_number,
                                           x_id1             => l_customer_id);

      IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
         okl_header_rec.customer_id := l_customer_id;
      END IF;

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          l_record_status := OKL_API.G_RET_STS_ERROR;
      END IF;

      l_progress := '040';

      -- Validate CURRENCY CODE
      x_return_status := validate_currency_code(p_contract_number => okl_header_rec.contract_number_old,
                                                p_currency_code   => NVL(okl_header_rec.currency_code,
                                                                         l_header_template.currency_code));

      l_progress := '050';
      -- Call Line Cursor to get Line detail

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          l_record_status := OKL_API.G_RET_STS_ERROR;
      END IF;


      FOR okl_line_rec IN okl_line_csr (okl_header_rec.contract_number_old)
      LOOP
        BEGIN

        -- Validation Starts For each Line of current header

        l_progress := '080';

        -- Validate Line Number
        IF (okl_line_rec.line_number IS NULL) THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_MISSING_VALUE,
                               'CONTRACT_NUM',
                               okl_header_rec.contract_number_old,
                               'COL_NAME',
                               'CONTRACT_LINE_NUMBER'
                              );

           x_return_status := OKL_API.G_RET_STS_ERROR;

           raise line_validation_failed; -- unable to continue with line validation, proceed with next line

        END IF;

        l_progress := '090';
        check_line_literal (
                            x_return_status             => x_return_status,
                            x_msg_count                 => x_msg_count,
                            x_msg_data                  => x_msg_data,
                            p_contract_number           => okl_header_rec.contract_number_old,
                            p_import_request_stage      => okl_header_rec.import_request_stage,
                            p_product_id                => okl_header_rec.product_id,
                            p_product_name              => okl_header_rec.product_name,
                            p_line_number               => okl_line_rec.line_number,
                            p_line_type                 => okl_line_rec.line_type,
                            p_amount                    => okl_line_rec.amount,
                            p_currency_code             => okl_header_rec.currency_code,
                            p_asset_number              => okl_line_rec.asset_number,
                            p_inventory_item_name       => okl_line_rec.inventory_item_name,
                            p_inventory_item_id         => okl_line_rec.inventory_item_id,
                            p_install_site_number       => okl_line_rec.install_site_number,
                            p_install_site_id           => okl_line_rec.install_site_id,
                            p_asset_corporate_book      => okl_line_rec.asset_corporate_book,
                            p_asset_category_id         => okl_line_rec.asset_category_id,
                            p_asset_category_segment1   => okl_line_rec.asset_category_segment1,
                            p_asset_category_segment2   => okl_line_rec.asset_category_segment2,
                            p_asset_category_segment3   => okl_line_rec.asset_category_segment3,
                            p_asset_category_segment4   => okl_line_rec.asset_category_segment4,
                            p_asset_category_segment5   => okl_line_rec.asset_category_segment5,
                            p_asset_category_segment6   => okl_line_rec.asset_category_segment6,
                            p_asset_category_segment7   => okl_line_rec.asset_category_segment7,
                            p_asset_location_id         => okl_line_rec.asset_location_id,
                            p_asset_location_segment1   => okl_line_rec.asset_location_segment1,
                            p_asset_location_segment2   => okl_line_rec.asset_location_segment2,
                            p_asset_location_segment3   => okl_line_rec.asset_location_segment3,
                            p_asset_location_segment4   => okl_line_rec.asset_location_segment4,
                            p_asset_location_segment5   => okl_line_rec.asset_location_segment5,
                            p_asset_location_segment6   => okl_line_rec.asset_location_segment6,
                            p_asset_location_segment7   => okl_line_rec.asset_location_segment7,
                            p_depreciation_method_id    => okl_line_rec.depreciation_method_id,
                            p_depreciation_method_code  => okl_line_rec.depreciation_method_code,
                            p_life_in_months            => okl_line_rec.life_in_months,
                            p_fee_code                  => okl_line_rec.fee_code,
                            p_stream_purpose            => okl_line_rec.stream_purpose_code,
                            p_fee_type                  => okl_line_rec.fee_type,
                            p_price_list_name           => okl_line_rec.price_list_name,
                            p_price_list_id             => okl_line_rec.price_list_id,
                            p_counter_group_name        => okl_line_rec.counter_group_name,
                            p_counter_group_id          => okl_line_rec.counter_group_id,
                            p_usage_bill_frequency_code => okl_line_rec.usage_bill_frequency_code,
                            p_base_reading_uom_code     => okl_line_rec.base_reading_uom_code,
                            p_usage_type_code           => okl_line_rec.usage_type_code,
                            p_usage_period              => okl_line_rec.usage_period,
                            p_usage_no_of_period        => okl_line_rec.usage_no_of_period,
                            p_tax_cost                  => okl_line_rec.tax_cost,
                            p_tax_book                  => okl_line_rec.tax_book,
                            p_life_in_months_tax        => okl_line_rec.life_in_months_tax,
                            p_deprn_method_tax          => okl_line_rec.deprn_method_tax,
                            p_deprn_rate_tax            => okl_line_rec.deprn_rate_tax,
                            p_in_service_date           => okl_line_rec.in_service_date,
			    p_link_asset_amount         => okl_line_rec.link_asset_amount,
                            p_inv_org_id                => okl_header_rec.inventory_organization_id,
                            p_term_quote_id             => okl_line_rec.termination_quote_id,
                            p_term_quote_number         => okl_line_rec.termination_quote_number,
                            p_fee_purpose_code          => okl_line_rec.fee_purpose_code
                           );


        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            l_record_status := OKL_API.G_RET_STS_ERROR;
        END IF;

        EXCEPTION

            WHEN line_validation_failed THEN
                 x_return_status := OKL_API.G_RET_STS_ERROR;

        END; -- of line begin

      END LOOP; -- okl_line_csr

      l_progress := '100';
      -- Final Reporting of error, if any, for this contract

      FOR okl_party_role_rec IN okl_party_role_csr (okl_header_rec.contract_number_old)
      LOOP
         BEGIN
            IF (okl_party_role_rec.line_number IS NOT NULL) THEN
               check_contract_line(
                                   x_return_status   => x_return_status,
                                   p_contract_number => okl_party_role_rec.contract_number_old,
                                   p_line_number     => okl_party_role_rec.line_number
                                  );

               IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                  okl_api.set_message(
                                      G_APP_NAME,
                                      G_PARTY_ROLE_LINE_ERROR,
                                      'CONTRACT_NUM',
                                      okl_party_role_rec.contract_number_old||'/'||okl_party_role_rec.line_number
                                     );
                  x_return_status := OKL_API.G_RET_STS_ERROR;
               END IF;

               IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                  l_record_status := OKL_API.G_RET_STS_ERROR;
               END IF;
            END IF;
         END;

      END LOOP; -- party_role

      l_progress := '110';

      --x_return_status := l_record_status;

      FOR okl_term_rec IN okl_term_csr (okl_header_rec.contract_number_old)
      LOOP
         BEGIN
            x_return_status := OKL_API.G_RET_STS_SUCCESS;

            IF (okl_term_rec.line_number IS NULL) THEN
               okl_api.set_message(
                                   G_APP_NAME,
                                   G_TERM_NO_LINE_NUMBER,
                                   'CONTRACT_NUM',
                                   okl_term_rec.contract_number_old||'/'||okl_term_rec.line_number
                                  );
               check_contract_line(
                                   x_return_status   => x_return_status,
                                   p_contract_number => okl_term_rec.contract_number_old,
                                   p_line_number     => okl_term_rec.line_number
                                  );

               IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                  okl_api.set_message(
                                      G_APP_NAME,
                                      G_TERM_LINE_ERROR,
                                      'LINE_NUM',
                                      okl_term_rec.line_number,
                                      'CONTRACT_NUM',
                                      okl_term_rec.contract_number_old||'/'||okl_term_rec.line_number
                                     );
                  x_return_status := OKL_API.G_RET_STS_ERROR;
               END IF;

            END IF;

            IF (x_return_status <>  OKL_API.G_RET_STS_SUCCESS) THEN
               l_record_status := x_return_status;
            END IF;

            IF (okl_header_rec.import_request_stage <> 'NEW'
                AND
                okl_term_rec.bill_to_address_id IS NULL
                AND
                okl_term_rec.bill_to_address IS NULL) THEN

                okl_api.set_message(
                                    G_APP_NAME,
                                    G_MISSING_VALUE,
                                    'CONTRACT_NUM',
                                    okl_term_rec.contract_number_old||'/'||okl_term_rec.line_number,
                                   'COL_NAME',
                                   'BILL_TO_ADDRESS'
                                   );

                x_return_status := OKL_API.G_RET_STS_ERROR;
            END IF;

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               l_record_status := x_return_status;
            END IF;
         END;

      END LOOP; -- term

      l_progress := '120';

      FOR okl_payment_rec IN okl_payment_csr (okl_header_rec.contract_number_old)
      LOOP
         x_return_status := OKL_API.G_RET_STS_SUCCESS;
         BEGIN

            check_payment_record(
                                 x_return_status              => x_return_status,
                                 x_msg_count                  => x_msg_count,
                                 x_msg_data                   => x_msg_data,
                                 p_contract_number_old        => okl_payment_rec.contract_number_old,
                                 p_line_number                => okl_payment_rec.line_number,
                                 p_asset_number               => okl_payment_rec.asset_number,
                                 p_payment_type_code          => okl_payment_rec.payment_type_code,
                                 p_stream_purpose             => okl_payment_rec.stream_purpose_code,
                                 p_payment_schedule_number    => okl_payment_rec.payment_schedule_number,
                                 p_payment_frequency_code     => okl_payment_rec.payment_frequency_code,
                                 p_arrears_flag               => okl_payment_rec.arrears_flag,
                                 p_advance_payments           => okl_payment_rec.advance_payments,
                                 p_payment_amount             => okl_payment_rec.payment_amount,
                                 p_start_date                 => okl_payment_rec.start_date,
                                 p_number_of_periods          => okl_payment_rec.number_of_periods,
                                 p_rate                       => okl_payment_rec.rate,
                                 p_comments                   => okl_payment_rec.comments,
                                 p_stub_days                  => okl_payment_rec.stub_days,
                                 p_stub_amount                => okl_payment_rec.stub_amount
                                );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                l_record_status := x_return_status;
            END IF;

         END;

      END LOOP; -- payment

      l_progress := '130';

    EXCEPTION
      WHEN header_validation_failed THEN

--         okl_open_interface_pvt.report_error (
--                                          x_msg_count => x_msg_count,
--                                          x_msg_data  => x_msg_data
--                                         );
         x_return_status := OKL_API.G_RET_STS_ERROR;
         l_record_status := OKL_API.G_RET_STS_ERROR;

    END; -- of Header Begin

    IF (l_record_status <> OKL_API.G_RET_STS_SUCCESS) THEN
       l_batch_status  := OKL_API.G_RET_STS_ERROR;
       x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

    IF (l_record_status = OKL_API.G_RET_STS_SUCCESS) THEN
       Update_Interface_Status(p_contract_number     => okl_header_rec.contract_number_old,
                               p_new_contract_number => okl_header_rec.contract_number,
                               p_status              => 'ELIGIBLE',
                               x_return_status       => x_return_status
                              );
       COMMIT;

    ELSE
       Update_Interface_Status(p_contract_number     => okl_header_rec.contract_number_old,
                               p_new_contract_number => okl_header_rec.contract_number,
                               p_status              => 'ERROR',
                               x_return_status       => x_return_status
                              );
       COMMIT;
         x_return_status := OKL_API.G_RET_STS_ERROR;
    END IF;

--    report_error (
--                  x_msg_count => x_msg_count,
--                  x_msg_data  => x_msg_data
--                 );
--    debug_message('========================done ');

  END LOOP; -- okl_header_csr

  IF (l_batch_status <> OKL_API.G_RET_STS_SUCCESS) THEN
     x_return_status := l_batch_status; -- set final status to out variable for further processing
  END IF;

  EXCEPTION
    WHEN OTHERS THEN
      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;

      report_error (
                    x_msg_count => x_msg_count,
                    x_msg_data  => x_msg_data
                   );

  END Check_Input_Record;
--*********************** check Interface **************************************

--+++++++++++++++++++++++ Load Interface +++++++++++++++++++++++++++++++++++++++
------------------------------------------------------------------------------
-- FUNCTION get_product_id
-- It gets Product ID if any. It checks againts okl_products_v for
-- esistance of product as supplied in parameters
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------

  FUNCTION get_product_id (p_product_id     IN   okl_products_v.id%TYPE,
                           p_product_name   IN   okl_products_v.name%TYPE,
                           x_product_id     OUT NOCOPY  okl_products_v.id%TYPE )
  RETURN VARCHAR2 IS

  x_return_status VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
  l_product_id    OKL_PRODUCTS_V.ID%TYPE;
  l_revenue_recognition_method okl_product_parameters_v.REVENUE_RECOGNITION_METHOD%TYPE;
  l_interest_calculation_basis okl_product_parameters_v.INTEREST_CALCULATION_BASIS%TYPE;
  l_deal_type okl_product_parameters_v.DEAL_TYPE%TYPE;
  product_exception EXCEPTION;

  CURSOR product_csr(p_product_name okl_products_v.name%TYPE,
                     p_product_id   okl_products_v.id%TYPE) IS
  SELECT a.id,
         b.revenue_recognition_method,
         b.interest_calculation_basis,
         b.deal_type
  FROM   okl_products_v a,
         okl_product_parameters_v b
  WHERE  ((a.name = p_product_name
           AND
           p_product_name IS NOT NULL
          )
          OR
          (a.id   = p_product_id
           AND
           p_product_id IS NOT NULL
          )
         )
  AND    TRUNC(SYSDATE) BETWEEN NVL(a.from_date,TRUNC(SYSDATE)) AND NVL(a.to_date,TRUNC(SYSDATE))
  AND    A.id = B.id;

  BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN product_csr(p_product_name,
                      p_product_id);
     FETCH product_csr INTO l_product_id,
                            l_revenue_recognition_method,
                            l_interest_calculation_basis,
                            l_deal_type;

     IF product_csr%NOTFOUND THEN
       RAISE product_exception;
     END IF;
     CLOSE product_csr;
     x_product_id := l_product_id;
     G_PRODUCT_ID := l_product_id;
     G_REVENUE_RECOGNITION_METHOD := l_revenue_recognition_method;
     G_INTEREST_CALCULATION_BASIS := l_interest_calculation_basis;
     G_DEAL_TYPE := l_deal_type;

    return x_return_status;

  EXCEPTION

    WHEN product_exception THEN

       IF product_csr%ISOPEN THEN
          CLOSE product_csr;
       END IF;

       x_return_status := OKL_API.G_RET_STS_ERROR;
       return x_return_status;

    WHEN OTHERS THEN
       NULL;

  END get_product_id;

------------------------------------------------------------------------------
-- FUNCTION check_product_type
-- It checks product type and returns 'Y' to out parameter
-- if it is a LOAN product
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------

  PROCEDURE check_product_type (
                                x_return_status  OUT NOCOPY VARCHAR2,
                                x_msg_count      OUT NOCOPY NUMBER,
                                x_msg_data       OUT NOCOPY VARCHAR2,
                                p_prod_name      IN  okl_header_interface.product_name%TYPE,
                                p_prod_id        IN  okl_header_interface.product_id%TYPE,
                                x_loan_yn        OUT NOCOPY VARCHAR2
                               ) IS

  l_type          VARCHAR2(1) := 'N';
  l_proc_name     VARCHAR2(35) := 'CHECK_PRODUCT_TYPE';

  --dkagrawa changed query to use view okl_prod_qlty_val_uv than product_parameters_v for performance
  CURSOR prod_type_csr(p_product_name okl_products_v.name%TYPE,
                       p_product_id   okl_products_v.id%TYPE) IS
  SELECT 'Y'
  FROM   okl_products prod,
         okl_prod_qlty_val_uv pqv
  WHERE  ((prod.name = p_product_name
           AND
           p_product_name IS NOT NULL
          )
          OR
          (prod.id   = p_product_id
           AND
           p_product_id IS NOT NULL
          )
         )
  AND    TRUNC(SYSDATE) BETWEEN NVL(prod.from_date,TRUNC(SYSDATE)) AND NVL(prod.to_date,TRUNC(SYSDATE))
  AND    prod.id = pqv.pdt_id
  AND    prod.reporting_pdt_id IS NULL
  AND    pqv.quality_name IN ('LEASE','INVESTOR')
  AND    pqv.quality_val = 'LOAN';

  BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);

     l_type := 'N';
     OPEN prod_type_csr(p_prod_name,
                        p_prod_id);
     FETCH prod_type_csr INTO l_type;
     CLOSE prod_type_csr;

     x_loan_yn := l_type;

  EXCEPTION

    WHEN OTHERS THEN
       IF prod_type_csr%ISOPEN THEN
          CLOSE prod_type_csr;
       END IF;

       okl_api.set_message(
                           G_APP_NAME,
                           G_UNEXPECTED_ERROR,
                           'OKL_SQLCODE',
                           SQLCODE,
                           'OKL_SQLERRM',
                           SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

       x_return_status := OKL_API.G_RET_STS_ERROR;

  END check_product_type;

------------------------------------------------------------------------------
-- FUNCTION get_prog_agreement_id
-- It gets Program agreement ID if any.
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------

  FUNCTION get_prog_agreement_id (
                             p_scs_code         IN  okc_k_headers_v.scs_code%TYPE,
                             p_agreement_number IN  okc_k_headers_v.contract_number%TYPE,
                             p_agreement_id     IN  okc_k_headers_v.id%TYPE,
                             p_auth_org_id      IN  okc_k_headers_v.authoring_org_id%TYPE,
                             x_agreement_id     OUT NOCOPY okc_k_headers_v.contract_number%TYPE
                            ) RETURN VARCHAR2 IS

  x_return_status        VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
  l_contract_id          OKC_K_HEADERS_V.ID%TYPE;
  agreement_exception EXCEPTION;

  --Fixed Bug # 5484903
  CURSOR contract_csr (
                       p_scs_code        okc_k_headers_v.scs_code%TYPE,
                       p_agreement_id    okc_k_headers_v.id%TYPE,
                       p_agreement_number okc_k_headers_v.contract_number%TYPE,
                       p_auth_org_id      okc_k_headers_v.authoring_org_id%TYPE
                      ) IS
  SELECT id
   FROM   okc_k_headers_all_b
  WHERE  ((contract_number = p_agreement_number
           AND
           p_agreement_number IS NOT NULL
          )
          OR
          (id  = p_agreement_id
           AND
           p_agreement_id IS NOT NULL
          )
         )
  AND    scs_code = p_scs_code
  AND    sts_code = 'ACTIVE'
  AND    authoring_org_id = p_auth_org_id;

  BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN contract_csr(p_scs_code,
                       p_agreement_id,
                       p_agreement_number,
                       p_auth_org_id);
     FETCH contract_csr INTO l_contract_id;
     IF contract_csr%NOTFOUND THEN
        RAISE agreement_exception;
     END IF;
     CLOSE contract_csr;

     x_agreement_id := l_contract_id;

    return x_return_status;

  EXCEPTION

    WHEN agreement_exception THEN

       IF contract_csr%ISOPEN THEN
          CLOSE contract_csr;
       END IF;

       x_return_status := OKL_API.G_RET_STS_ERROR;
       return x_return_status;

    WHEN OTHERS THEN
       NULL;

  END get_prog_agreement_id;

------------------------------------------------------------------------------
-- FUNCTION get_agreement_id
-- It gets Master Lease ID if any. It checks againts okc_k_headers_v for
-- esistance of master contract as supplied in parameters
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------

  FUNCTION get_agreement_id (
                             p_scs_code         IN  okc_k_headers_v.scs_code%TYPE,
                             p_auth_org_id      IN  okc_k_headers_v.authoring_org_id%TYPE,
                             p_agreement_number IN  okc_k_headers_v.contract_number%TYPE,
                             p_agreement_id     IN  okc_k_headers_v.id%TYPE,
                             x_agreement_id     OUT NOCOPY okc_k_headers_v.contract_number%TYPE
                            ) RETURN VARCHAR2 IS

  x_return_status        VARCHAR2(3) := OKL_API.G_RET_STS_SUCCESS;
  l_contract_id          OKC_K_HEADERS_V.ID%TYPE;
  agreement_exception EXCEPTION;
  --Fixed Bug #5484903
  CURSOR contract_csr (
                       p_scs_code        okc_k_headers_v.scs_code%TYPE,
                       p_org_id          okc_k_headers_v.authoring_org_id%TYPE,
                       p_agreement_id    okc_k_headers_v.id%TYPE,
                       p_agreement_number okc_k_headers_v.contract_number%TYPE
                      ) IS
  SELECT id
  FROM   okc_k_headers_all_b
  WHERE  ((contract_number = p_agreement_number
           AND
           p_agreement_number IS NOT NULL
          )
          OR
          (id  = p_agreement_id
           AND
           p_agreement_id IS NOT NULL
          )
         )
  AND    authoring_org_id = p_org_id
  AND    scs_code = p_scs_code
  AND    sts_code <> 'TERMINATED';

  BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     debug_message('Org: '||p_auth_org_id);
     debug_message('SCS: '||p_scs_code);
     debug_message('Agreement :'||p_agreement_id||', '||p_agreement_number||'***');

     OPEN contract_csr(p_scs_code,
                       p_auth_org_id,
                       p_agreement_id,
                       p_agreement_number);
     FETCH contract_csr INTO l_contract_id;
     IF contract_csr%NOTFOUND THEN
        RAISE agreement_exception;
     END IF;
     CLOSE contract_csr;

     x_agreement_id := l_contract_id;

    return x_return_status;

  EXCEPTION

    WHEN agreement_exception THEN

       IF contract_csr%ISOPEN THEN
          CLOSE contract_csr;
       END IF;

       x_return_status := OKL_API.G_RET_STS_ERROR;
       return x_return_status;

    WHEN OTHERS THEN
       NULL;

  END get_agreement_id;

------------------------------------------------------------------------------
-- PROCEDURE get_vendor_id
-- It gets vendor id for given vendor name
-- and stacks error if any
-- Calls:
--  None
-- Called By:
--  process_party_role
------------------------------------------------------------------------------
  PROCEDURE get_vendor_id(
                          x_return_status     OUT NOCOPY VARCHAR2,
                          x_msg_count         OUT NOCOPY NUMBER,
                          x_msg_data          OUT NOCOPY VARCHAR2,
                          p_contract_number   IN  okl_header_interface.contract_number_old%TYPE,
                          p_line_number       IN  okl_lines_interface.line_number%TYPE,
                          x_vendor_id         OUT NOCOPY NUMBER,
                          p_vendor_name       IN OKX_VENDORS_V.NAME%TYPE
                         ) IS

    CURSOR vendor_csr (p_vendor_name VARCHAR2) IS
    SELECT id1
    FROM   okx_vendors_v
    WHERE  name = p_vendor_name;

    l_id         NUMBER;
    l_proc_name  VARCHAR2(35) := 'GET_VENDOR_ID';
    vendor_failed EXCEPTION;

    BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      OPEN  vendor_csr(p_vendor_name);
      FETCH vendor_csr INTO l_id;
      IF vendor_csr%NOTFOUND THEN
         RAISE vendor_failed;
      END IF;
      CLOSE vendor_csr;

      x_vendor_id := l_id;

    EXCEPTION
     WHEN vendor_failed THEN
       CLOSE vendor_csr;
       okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_VALUE,
                           'CONTRACT_NUM',
                           p_contract_number||'/'||TO_CHAR(p_line_number),
                           'COL_NAME',
                           'VENDOR_NAME',
                           'COL_VALUE',
                           p_vendor_name
                          );
       x_return_status := OKL_API.G_RET_STS_ERROR;


     WHEN OTHERS THEN
       IF vendor_csr%ISOPEN THEN
       CLOSE vendor_csr;
       END IF;

       okl_api.set_message(
                           G_APP_NAME,
                           G_UNEXPECTED_ERROR,
                           'OKL_SQLCODE',
                           SQLCODE,
                           'OKL_SQLERRM',
                           SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

       x_return_status := OKL_API.G_RET_STS_ERROR;

    END get_vendor_id;

------------------------------------------------------------------------------
-- PROCEDURE get_party_id
-- It gets party id for given party number
-- and stacks error if any
-- Calls:
--  None
-- Called By:
--  create_line_rules
--  process_party_role
------------------------------------------------------------------------------
  PROCEDURE get_party_id(
                              x_return_status     OUT NOCOPY VARCHAR2,
                              x_msg_count         OUT NOCOPY NUMBER,
                              x_msg_data          OUT NOCOPY VARCHAR2,
                              p_contract_number   IN  okl_header_interface.contract_number_old%TYPE,
                              p_line_number       IN  okl_lines_interface.line_number%TYPE,
                              p_party_id          IN  OKX_PARTIES_V.ID1%TYPE,
                              p_party_number      IN  OKX_PARTIES_V.PARTY_NUMBER%TYPE,
                              x_party_id          OUT NOCOPY NUMBER
                             ) IS

    CURSOR party_csr (p_party_number VARCHAR2,
                      p_party_id     NUMBER) IS
    SELECT id1
    FROM   okx_parties_v
    WHERE  ((party_number = p_party_number
             AND
             p_party_number IS NOT NULL)
             OR
             (id1          = p_party_id
              AND
              p_party_id IS NOT NULL
             )
            );

    l_id         NUMBER;
    l_proc_name  VARCHAR2(35) := 'GET_PARTY_ID';
    party_failed EXCEPTION;

    BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      OPEN  party_csr(p_party_number,
                      p_party_id);
      FETCH party_csr INTO l_id;
      IF party_csr%NOTFOUND THEN
         RAISE party_failed;
      END IF;
      CLOSE party_csr;

      x_party_id := l_id;

    EXCEPTION
     WHEN party_failed THEN
       CLOSE party_csr;
       okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_VALUE,
                           'CONTRACT_NUM',
                           p_contract_number||'/'||TO_CHAR(p_line_number),
                           'COL_NAME',
                           'PARTY_ID, NUMBER: ',
                           'COL_VALUE',
                           p_party_id||', '||p_party_number
                          );
       x_return_status := OKL_API.G_RET_STS_ERROR;


     WHEN OTHERS THEN
       IF party_csr%ISOPEN THEN
       CLOSE party_csr;
       END IF;

       okl_api.set_message(
                           G_APP_NAME,
                           G_UNEXPECTED_ERROR,
                           'OKL_SQLCODE',
                           SQLCODE,
                           'OKL_SQLERRM',
                           SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

       x_return_status := OKL_API.G_RET_STS_ERROR;

    END get_party_id;

-- cklee start 02/23/2004
------------------------------------------------------------------------------
-- PROCEDURE get_party
-- It gets party id/party site id for any given combination of name, number
-- and stacks error if any
-- Calls:
--  None
-- Called By:
------------------------------------------------------------------------------
  PROCEDURE get_party( x_return_status           OUT NOCOPY VARCHAR2,
                       x_msg_count               OUT NOCOPY NUMBER,
                       x_msg_data                OUT NOCOPY VARCHAR2,
                       p_intf_party_rec          IN  intf_party_rec_type,
                       x_party_id                OUT NOCOPY NUMBER,
                       x_party_site_id           OUT NOCOPY NUMBER
                      ) IS

    CURSOR party_csr (p_party_name         VARCHAR2,
                      p_party_id           NUMBER,
                      p_party_number       VARCHAR2,
                      p_party_site_name    VARCHAR2,
                      p_party_site_id      NUMBER,
                      p_party_site_number  VARCHAR2,
                      p_category_code      VARCHAR2) IS
  SELECT prt.PARTY_ID,
         prt.PARTY_NAME,
         prt.PARTY_NUMBER,
         hps.PARTY_SITE_ID,
         hps.PARTY_SITE_NAME,
         hps.PARTY_SITE_NUMBER
  FROM
      HZ_PARTIES PRT,
      HZ_PARTY_SITES HPS
  WHERE
      prt.PARTY_ID          = hps.PARTY_ID
--start modified by abhaxen for 6689015 on 24-Jan-2008
      -- Added new filters to remove full table scans
       AND ( prt.CATEGORY_CODE = p_category_code AND p_category_code IS NOT NULL )
       AND ( ( prt.PARTY_ID = p_party_id AND p_party_id IS NOT NULL )
       OR ( prt.PARTY_NAME = p_party_name AND p_party_name IS NOT NULL)
       OR ( prt.PARTY_NUMBER = p_party_number AND p_party_number IS NOT NULL ))
       AND ( ( hps.PARTY_SITE_ID = p_party_site_id AND p_party_site_id IS NOT NULL )
       OR( hps.PARTY_SITE_NUMBER = p_party_site_number AND p_party_site_number IS NOT NULL )
       OR( hps.PARTY_SITE_NAME = p_party_site_name AND p_party_site_name IS NOT NULL ))
       ;


/*  AND NVL(prt.CATEGORY_CODE, G_DEFAULT_CHAR)     = NVL(p_category_code, NVL(prt.CATEGORY_CODE,G_DEFAULT_CHAR))
  AND NVL(prt.PARTY_ID, G_DEFAULT_NUM)           = NVL(p_party_id, NVL(prt.PARTY_ID,G_DEFAULT_NUM))
  AND NVL(prt.PARTY_NUMBER, G_DEFAULT_CHAR)      = NVL(p_party_number, NVL(prt.PARTY_NUMBER, G_DEFAULT_CHAR))
  AND NVL(prt.PARTY_NAME, G_DEFAULT_CHAR)        = NVL(p_party_name, NVL(prt.PARTY_NAME, G_DEFAULT_CHAR))
  AND NVL(hps.PARTY_SITE_ID, G_DEFAULT_NUM)      = NVL(p_party_site_id, NVL(hps.PARTY_SITE_ID, G_DEFAULT_NUM))
  AND NVL(hps.PARTY_SITE_NUMBER, G_DEFAULT_CHAR) = NVL(p_party_site_number, NVL(hps.PARTY_SITE_NUMBER, G_DEFAULT_CHAR))
  AND NVL(hps.PARTY_SITE_NAME, G_DEFAULT_CHAR)   = NVL(p_party_site_name, NVL(hps.PARTY_SITE_NAME, G_DEFAULT_CHAR))  ;
*/
--end modified by abhsaxen for 6689015 on 24-Jan-2008
    l_proc_name  VARCHAR2(35) := 'GET_PARTY';
    party_failed EXCEPTION;
    r_party party_csr%ROWTYPE;
    l_count NUMBER := 0;


    BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      OPEN party_csr(p_intf_party_rec.party_name,
                     p_intf_party_rec.party_id,
                     p_intf_party_rec.party_number,
                     p_intf_party_rec.party_site_name,
                     p_intf_party_rec.party_site_id,
                     p_intf_party_rec.party_site_number,
                     p_intf_party_rec.party_category_code);

      LOOP

        FETCH party_csr INTO r_party;
        EXIT WHEN party_csr%NOTFOUND;

        x_party_id := r_party.party_id;
        x_party_site_id := r_party.party_site_id;
        l_count := party_csr%ROWCOUNT;

      END LOOP;
      CLOSE party_csr;

      -- no row return or multiple rows return
      IF (l_count = 0 OR l_count > 1) THEN
        raise party_failed;
      END IF;

    EXCEPTION
     WHEN party_failed THEN

       IF party_csr%ISOPEN THEN
         CLOSE party_csr;
       END IF;

       okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_VALUE,
                           'CONTRACT_NUM',
                           p_intf_party_rec.contract_number||'/'||TO_CHAR(p_intf_party_rec.line_number),
                           'COL_NAME',
--                           'PARTY_ID, NUMBER: ',
p_intf_party_rec.intf_party_id || ', ' || p_intf_party_rec.intf_party_name || ', '
 || p_intf_party_rec.intf_party_number || '/' ||
p_intf_party_rec.intf_party_site_id || ', ' || p_intf_party_rec.intf_party_site_name || ', '
 || p_intf_party_rec.intf_party_site_number || ': ',
                           'COL_VALUE',
p_intf_party_rec.party_id || ', ' || p_intf_party_rec.party_name || ', '
 || p_intf_party_rec.party_number || '/' ||
p_intf_party_rec.party_site_id || ', ' || p_intf_party_rec.party_site_name || ', '
 || p_intf_party_rec.party_site_number || ': '
                          );
       x_return_status := OKL_API.G_RET_STS_ERROR;


     WHEN OTHERS THEN

       IF party_csr%ISOPEN THEN
         CLOSE party_csr;
       END IF;

       okl_api.set_message(
                           G_APP_NAME,
                           G_UNEXPECTED_ERROR,
                           'OKL_SQLCODE',
                           SQLCODE,
                           'OKL_SQLERRM',
                           SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

       x_return_status := OKL_API.G_RET_STS_ERROR;

    END get_party;
-- cklee end 02/23/2004


------------------------------------------------------------------------------
-- PROCEDURE create_party_role
-- It creates Party Role from Header Interface Record and retruns status to
-- calling module for further processing.
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE create_party_role(
                              x_return_status       OUT NOCOPY VARCHAR2,
                              x_msg_count           OUT NOCOPY NUMBER,
                              x_msg_data            OUT NOCOPY VARCHAR2,
                              p_contract_header_id  IN  okl_k_headers_v.id%TYPE,
                              p_contract_number_old IN  okc_k_headers_v.orig_system_reference1%TYPE,
                              p_customer_id         IN  okl_header_interface.customer_id%TYPE,
                              p_customer_number     IN  okl_header_interface.customer_number%TYPE,
                              p_authoring_org_id    IN  okl_header_interface.authoring_org_id%TYPE,
                              x_cplv_rec            OUT NOCOPY cplv_rec_type ) IS

    CURSOR customer_csr (p_customer_number OKX_PARTIES_V.PARTY_NUMBER%TYPE,
                         p_customer_id     OKX_PARTIES_V.ID1%TYPE) IS
    SELECT id1
    FROM   okx_parties_v
    WHERE  ((party_number = p_customer_number
             AND
             p_customer_number IS NOT NULL
            )
            OR
            (id1          = p_customer_id
             AND
             p_customer_id IS NOT NULL
            )
           );

    l_id1              okx_parties_v.id1%TYPE;
    l_proc_name        VARCHAR2(35) := 'CREATE_PARTY_ROLE';
    party_role_failed  EXCEPTION;
    p_cplv_rec         cplv_rec_type;
    l_kplv_rec         kplv_rec_type;
    x_kplv_rec         kplv_rec_type;

   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

/*
     OPEN customer_csr(p_customer_number,
                       p_customer_id);
     FETCH customer_csr INTO l_id1;
     IF customer_csr%NOTFOUND THEN
        raise party_role_failed;
     END IF;
     CLOSE customer_csr;

     g_customer_id := l_id1;
*/

     -- Create LESSEE
     p_cplv_rec.chr_id            := p_contract_header_id;
     p_cplv_rec.dnz_chr_id        := p_contract_header_id;
     p_cplv_rec.object1_id1       := TO_CHAR(g_customer_id);
     --p_cplv_rec.object1_id1       := TO_CHAR(l_id1);
     p_cplv_rec.object1_id2       := '#';
     p_cplv_rec.jtot_object1_code := 'OKX_PARTY';
     p_cplv_rec.rle_code          := 'LESSEE';

     --OKL_OKC_MIGRATION_PVT.create_k_party_role( -- Contract addl field, Bug 4558486
     OKL_K_PARTY_ROLES_PVT.create_k_party_role(
                                                p_api_version => 1.0,
                                                p_init_msg_list => OKL_API.G_FALSE,
                                                x_return_status => x_return_status,
                                                x_msg_count     => x_msg_count,
                                                x_msg_data      => x_msg_data,
                                                p_cplv_rec      => p_cplv_rec,
                                                p_kplv_rec      => l_kplv_rec,
                                                x_cplv_rec      => x_cplv_rec,
                                                x_kplv_rec      => x_kplv_rec
                                               );

     IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
        -- Create LESSOR
        p_cplv_rec.chr_id            := p_contract_header_id;
        p_cplv_rec.dnz_chr_id        := p_contract_header_id;
        p_cplv_rec.object1_id1       := TO_CHAR(p_authoring_org_id);
        p_cplv_rec.object1_id2       := '#';
        p_cplv_rec.jtot_object1_code := 'OKX_OPERUNIT';
        p_cplv_rec.rle_code          := 'LESSOR';

       -- OKL_OKC_MIGRATION_PVT.create_k_party_role( -- Contract addl field, Bug 4558486
        OKL_K_PARTY_ROLES_PVT.create_k_party_role(
                                                p_api_version => 1.0,
                                                p_init_msg_list => OKL_API.G_FALSE,
                                                x_return_status => x_return_status,
                                                x_msg_count     => x_msg_count,
                                                x_msg_data      => x_msg_data,
                                                p_cplv_rec      => p_cplv_rec,
                                                p_kplv_rec      => l_kplv_rec,
                                                x_cplv_rec      => x_cplv_rec,
                                                x_kplv_rec      => x_kplv_rec
                                               );
     END IF;

     IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        RAISE party_role_failed;
     END IF;

     return;

   EXCEPTION
     WHEN party_role_failed THEN

       IF customer_csr%ISOPEN THEN
          CLOSE customer_csr;
       END IF;

       okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_VALUE,
                           'CONTRACT_NUM',
                           p_contract_number_old,
                           'COL_NAME',
                           'CUSTOMER_ID, NUMBER: ',
                           'COL_VALUE',
                           p_customer_id||', '||p_customer_number
                          );

       x_return_status := OKL_API.G_RET_STS_ERROR;

     WHEN OTHERS THEN

       IF customer_csr%ISOPEN THEN
       CLOSE customer_csr;
       END IF;

       okl_api.set_message(
                           G_APP_NAME,
                           G_UNEXPECTED_ERROR,
                           'OKL_SQLCODE',
                           SQLCODE,
                           'OKL_SQLERRM',
                           SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

       x_return_status := OKL_API.G_RET_STS_ERROR;


   END create_party_role;

------------------------------------------------------------------------------
-- PROCEDURE get_bill_to_address_id
-- It returns Bill To Address ID from bill to address number and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  create_header_rules
--  process_term
------------------------------------------------------------------------------

   PROCEDURE get_bill_to_address_id(
                                    x_return_status           OUT NOCOPY VARCHAR2,
                                    x_msg_count               OUT NOCOPY NUMBER,
                                    x_msg_data                OUT NOCOPY VARCHAR2,
                                    p_contract_number         IN  okl_header_interface.contract_number_old%TYPE,
                                    p_auth_org_id             IN  okl_header_interface.authoring_org_id%TYPE,
                                    p_bill_to_address_id      IN  okl_header_interface.bill_to_address_id%TYPE,
                                    p_bill_to_address         IN  okl_header_interface.bill_to_address%TYPE,
                                    p_customer_account_id     IN  NUMBER,
                                    x_bill_to_address_id      OUT NOCOPY NUMBER
                                   ) IS

   CURSOR bill_csr (p_org_id              NUMBER,
                    p_bill_to_address     VARCHAR2,
                    p_bill_to_address_id  NUMBER,
                    p_customer_account_id NUMBER) IS
   SELECT site_use.id1
   FROM   okx_cust_site_uses_v site_use,
          hz_cust_acct_sites_all site
   WHERE  site.cust_acct_site_id = site_use.cust_acct_site_id
   AND    ((site_use.name            = p_bill_to_address
            AND
            p_bill_to_address IS NOT NULL)
            OR
            (site_use.id1            = p_bill_to_address_id
             AND
             p_bill_to_address_id IS NOT NULL
            )
           )
   AND    site_use.org_id                = p_org_id
   AND    site.org_id                    = p_org_id
   AND    site_use.site_use_code         = 'BILL_TO'
   AND    site_use.cust_account_id       = p_customer_account_id
   AND    site_use.b_status              = 'A'
   AND    site.status                    = 'A';
   --AND    cust_acct_site_status = 'A';

   l_proc_name      VARCHAR2(35) := 'GET_BILL_TO_ADDRESS_ID';
   l_id             okl_header_interface.bill_to_address_id%TYPE;
   bill_failed      EXCEPTION;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;


      OPEN  bill_csr(p_auth_org_id,
                     p_bill_to_address,
                     p_bill_to_address_id,
                     p_customer_account_id);
      FETCH bill_csr INTO l_id;
      IF  bill_csr%NOTFOUND THEN
          raise bill_failed;
      END IF;
      CLOSE bill_csr;

      x_bill_to_address_id := l_id;

      return;

    EXCEPTION
      WHEN bill_failed THEN

        IF (bill_csr%ISOPEN) THEN
          CLOSE bill_csr;
        END IF;

        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'BILL_TO_ADDRESS_ID, NAME',
                            'COL_VALUE',
                            p_bill_to_address_id||', '||p_bill_to_address
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;


   END get_bill_to_address_id;

------------------------------------------------------------------------------
-- PROCEDURE get_bank_account_id
-- It returns Bank account id from account Number and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  create_header_rules
--  process_term
------------------------------------------------------------------------------

   PROCEDURE get_bank_account_id(
                                 x_return_status           OUT NOCOPY VARCHAR2,
                                 x_msg_count               OUT NOCOPY NUMBER,
                                 x_msg_data                OUT NOCOPY VARCHAR2,
                                 p_contract_number         IN  okl_header_interface.contract_number_old%TYPE,
                                 p_auth_org_id             IN  okl_header_interface.authoring_org_id%TYPE,
                                 p_bank_account_id         IN  okl_header_interface.bank_account_id%TYPE,
                                 p_bank_account_number     IN  okl_header_interface.bank_account_number%TYPE,
                                 p_customer_account_id     IN  NUMBER,
                                 p_cust_site_id            IN  NUMBER,
                                 x_bank_account_id         OUT NOCOPY NUMBER
                                ) IS

    CURSOR bank_acct_csr(p_bank_acc_number VARCHAR2,
                         p_bank_acc_id     NUMBER,
                         p_customer_acc_id NUMBER,
                         p_cust_site_id    NUMBER,
                         p_org_id          NUMBER) IS
    SELECT id1
    FROM   okx_rcpt_method_accounts_v
    WHERE  (
             (bank_account_num = p_bank_acc_number)
             OR
             (id1             = p_bank_acc_id)
            )
    AND    customer_id          = p_customer_acc_id
    -- udhenuko Bug#5925603 : Start
    --AND    customer_site_use_id =p_cust_site_id
    AND    ((customer_site_use_id = p_cust_site_id)
               or  ( customer_site_use_id IS NULL) )
     --Bug#5925603: End
    -- rbanerje Bug#5925603(Release bug 7355967) : Start
    -- AND    org_id               = p_org_id
    -- rbanerje Bug#5925603(Release bug 7355967) : End
    AND    TRUNC(SYSDATE) between NVL(START_DATE_ACTIVE, TRUNC(SYSDATE)) AND NVL(END_DATE_ACTIVE,TRUNC(SYSDATE))
    -- udhenuko Bug#5925603 : added order clause so that one used at site level will take precedence
    ORDER BY CUSTOMER_SITE_USE_ID;
    --Bug#5925603 : End

    l_id             OKX_RCPT_METHOD_ACCOUNTS_V.ID1%TYPE;
    bank_acct_failed EXCEPTION;
    l_proc_name      VARCHAR2(35) := 'GET_BANK_ACCOUNT_ID';

    BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      OPEN  bank_acct_csr(p_bank_account_number,
                          p_bank_account_id,
                          p_customer_account_id,
                          p_cust_site_id,
                          p_auth_org_id);
      FETCH bank_acct_csr INTO l_id;
      IF  bank_acct_csr%NOTFOUND THEN
          raise bank_acct_failed;
      END IF;
      CLOSE bank_acct_csr;

      x_bank_account_id := l_id;

      return;

    EXCEPTION
      WHEN bank_acct_failed THEN

        IF (bank_acct_csr%ISOPEN) THEN
          CLOSE bank_acct_csr;
        END IF;

        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'BANK_ACCOUNT_ID, NUMBER: ',
                            'COL_VALUE',
                            p_bank_account_id||', '||p_bank_account_number
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN

        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;

    END get_bank_account_id;

------------------------------------------------------------------------------
-- PROCEDURE get_index_id
-- It returns Index Id for a given Index Name and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  create_header_rules
------------------------------------------------------------------------------
   PROCEDURE get_index_id(
                          x_return_status OUT NOCOPY VARCHAR2,
                          p_index_name    IN  okl_header_interface.index_name%TYPE,
                          x_index_id      OUT NOCOPY okl_indices.id%TYPE
                         ) IS

   CURSOR index_csr (p_index_name okl_header_interface.index_name%TYPE) IS
   SELECT id
   FROM   okl_indices
   WHERE  name = p_index_name;

   l_proc_name  VARCHAR2(35) := 'GET_INDEX_ID';
   l_id         okl_indices.id%TYPE;
   index_failed EXCEPTION;

   BEGIN
      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      OPEN index_csr (p_index_name);
      FETCH index_csr INTO l_id;
      IF index_csr%NOTFOUND THEN
         raise index_failed;
      END IF;
      CLOSE index_csr;

      x_index_id := l_id;

      RETURN;

   EXCEPTION
      WHEN index_failed THEN
         --x_return_status := OKL_API.G_RET_STS_SUCCESS;
         x_return_status := OKL_API.G_RET_STS_ERROR; -- Bug 5024651
      WHEN OTHERS THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
   END get_index_id;

------------------------------------------------------------------------------
-- PROCEDURE get_payment_term
-- It returns payment term id after validation and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
------------------------------------------------------------------------------
   FUNCTION get_payment_term(
                             x_return_status   OUT NOCOPY VARCHAR2,
                             p_contract_number IN  OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                             p_line_number     IN  OKL_LINES_INTERFACE.LINE_NUMBER%TYPE,
                             p_payment_term    IN  OKL_LINES_INTERFACE.PAYMENT_TERM%TYPE,
                             p_payment_term_id IN  OKL_LINES_INTERFACE.PAYMENT_TERM_ID%TYPE
                            )
   RETURN NUMBER IS

   CURSOR term_csr (p_payment_term    VARCHAR2,
                    p_payment_term_id NUMBER) IS
   SELECT id1
   FROM   okx_payables_terms_v
   WHERE  (name = p_payment_term
           AND
           p_payment_term IS NOT NULL)
   OR     (id1 = p_payment_term_id
           AND
           p_payment_term_id IS NOT NULL)
   AND    TRUNC(SYSDATE) BETWEEN NVL(TRUNC(start_date_active),TRUNC(SYSDATE))
                         AND     NVL(TRUNC(end_date_active), TRUNC(SYSDATE));

   l_id1 OKX_PAYABLES_TERMS_V.ID1%TYPE;
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN term_csr (p_payment_term,
                    p_payment_term_id);
     FETCH term_csr INTO l_id1;
     IF term_csr%NOTFOUND THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM/LINE_NUMBER',
                            p_contract_number||'/'||p_line_number,
                            'COL_NAME',
                            'PAYMENT_TERM OR PAYMENT_TERM_ID',
                            'COL_VALUE',
                            p_payment_term||', '||p_payment_term_id
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;
       RETURN NULL;
     END IF;
     CLOSE term_csr;

     RETURN l_id1;

   END get_payment_term;

------------------------------------------------------------------------------
-- PROCEDURE get_vendor_paysite
-- It returns vendor Pay-site info and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
------------------------------------------------------------------------------
   FUNCTION get_vendor_paysite(
                               x_return_status       OUT NOCOPY VARCHAR2,
                               p_contract_number     IN  OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                               p_line_number         IN  OKL_LINES_INTERFACE.LINE_NUMBER%TYPE,
                               p_vendor_paysite_name IN  OKL_LINES_INTERFACE.VENDOR_PAYSITE_NAME%TYPE,
                               p_vendor_paysite_id   IN  OKL_LINES_INTERFACE.VENDOR_PAYSITE_ID%TYPE
                              )
   RETURN NUMBER IS
   CURSOR site_csr (p_name VARCHAR2,
                    p_id   NUMBER) IS
   SELECT id1
   FROM   okx_vendor_sites_v
   WHERE  (name = p_name
           AND
           p_name IS NOT NULL)
   OR
          (id1 = p_id
           AND
           p_id IS NOT NULL)
   AND    TRUNC(SYSDATE) BETWEEN NVL(TRUNC(start_date_active), TRUNC(SYSDATE))
                         AND     NVL(TRUNC(end_date_active), TRUNC(SYSDATE));

   l_id1 okx_vendor_sites_v.id1%TYPE;
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN site_csr (p_vendor_paysite_name,
                    p_vendor_paysite_id);
     FETCH site_csr INTO l_id1;
     IF site_csr%NOTFOUND THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM/LINE_NUMBER',
                            p_contract_number||'/'||p_line_number,
                            'COL_NAME',
                            'VENDOR PAY SITE NAME OR VENDOR PAYSITE ID',
                            'COL_VALUE',
                            p_vendor_paysite_name||', '||p_vendor_paysite_id
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;
       RETURN NULL;
     END IF;
     CLOSE site_csr;

     RETURN l_id1;

   END get_vendor_paysite;

------------------------------------------------------------------------------
-- PROCEDURE get_invoice_format
-- It returns Invoice Format id from Format Code and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  create_header_rules
--  process_term
------------------------------------------------------------------------------

   PROCEDURE get_invoice_format_id(
                                   x_return_status           OUT NOCOPY VARCHAR2,
                                   x_msg_count               OUT NOCOPY NUMBER,
                                   x_msg_data                OUT NOCOPY VARCHAR2,
                                   p_contract_number         IN  okl_header_interface.contract_number_old%TYPE,
                                   p_invoice_format_id       IN  okl_header_interface.invoice_format_id%TYPE,
                                   p_invoice_format_code     IN  okl_header_interface.invoice_format_code%TYPE,
                                   x_invoice_format_id       OUT NOCOPY NUMBER,
                                   x_invoice_format_name     OUT NOCOPY VARCHAR2
                                  ) IS

    CURSOR inv_format_csr(p_invoice_format_code VARCHAR2,
                          p_invoice_format_id   NUMBER) IS
    SELECT id,
           name
    FROM   okl_invoice_formats_v
    WHERE  ((name = p_invoice_format_code
             AND
             p_invoice_format_code IS NOT NULL)
             OR
             (id   = p_invoice_format_id
              AND
              p_invoice_format_id IS NOT NULL
             )
            )
    AND    TRUNC(SYSDATE) between NVL(START_DATE, TRUNC(SYSDATE)) AND NVL(END_DATE,TRUNC(SYSDATE));

    l_id              OKL_INVOICE_FORMATS_V.ID%TYPE;
    l_name            OKL_INVOICE_FORMATS_V.NAME%TYPE;
    inv_format_failed EXCEPTION;
    l_proc_name       VARCHAR2(35) := 'GET_INVOICE_FORMAT_ID';

    BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      OPEN  inv_format_csr(p_invoice_format_code,
                           p_invoice_format_id);
      FETCH inv_format_csr INTO l_id,
                                l_name;
      IF  inv_format_csr%NOTFOUND THEN
          raise inv_format_failed;
      END IF;
      CLOSE inv_format_csr;

      x_invoice_format_id   := l_id;
      x_invoice_format_name := l_name;
      return;

    EXCEPTION
      WHEN inv_format_failed THEN

        IF (inv_format_csr%ISOPEN) THEN
          CLOSE inv_format_csr;
        END IF;

        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'INVOICE_FORMAT_ID, CODE',
                            'COL_VALUE',
                            p_invoice_format_id||', '||p_invoice_format_code
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN

        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;

    END get_invoice_format_id;

------------------------------------------------------------------------------
-- PROCEDURE get_payment_method_id
-- It returns Payment Method id from Payment Method
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  create_header_rules
--  process_term
------------------------------------------------------------------------------

   PROCEDURE get_payment_method_id(
                                   x_return_status           OUT NOCOPY VARCHAR2,
                                   x_msg_count               OUT NOCOPY NUMBER,
                                   x_msg_data                OUT NOCOPY VARCHAR2,
                                   p_contract_number         IN  okl_header_interface.contract_number_old%TYPE,
                                   p_customer_account_id     IN  okl_header_interface.customer_account_id%TYPE,
                                   p_bill_to_address_id      IN  okl_header_interface.bill_to_address_id%TYPE,
                                   p_payment_method_id       IN  okl_header_interface.payment_method_id%TYPE,
                                   p_payment_method          IN  okl_header_interface.payment_method%TYPE,
                                   x_payment_method_id       OUT NOCOPY NUMBER
                                  ) IS

    CURSOR payment_csr(p_payment_method     VARCHAR2,
                       p_payment_method_id  NUMBER,
                       p_customer_acc_id    NUMBER,
                       p_bill_to_address_id NUMBER) IS
    SELECT id1
    FROM   okx_receipt_methods_v
    WHERE  ((name = p_payment_method
             AND
             p_payment_method IS NOT NULL)
             OR
             (id1  = p_payment_method_id
              AND
              p_payment_method_id IS NOT NULL))
    AND    customer_id  = p_customer_acc_id
    AND    (site_use_id = p_bill_to_address_id
            OR
            site_use_id IS NULL)
    AND    TRUNC(SYSDATE) between NVL(START_DATE_ACTIVE, TRUNC(SYSDATE)) AND NVL(END_DATE_ACTIVE,TRUNC(SYSDATE));

    l_id             OKX_RECEIPT_METHODS_V.ID1%TYPE;
    payment_failed   EXCEPTION;
    l_proc_name      VARCHAR2(35) := 'GET_PAYMENT_METHOD_ID';

    BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      debug_message(p_payment_method||','||p_customer_account_id||', '||p_bill_to_address_id);
      OPEN  payment_csr(p_payment_method,
                        p_payment_method_id,
                        p_customer_account_id,
                        p_bill_to_address_id);
      FETCH payment_csr INTO l_id;
      IF  payment_csr%NOTFOUND THEN
          raise payment_failed;
      END IF;
      CLOSE payment_csr;

      x_payment_method_id := l_id;
      debug_message('PMNT ID: '||x_payment_method_id);
      return;

    EXCEPTION
      WHEN payment_failed THEN

        IF (payment_csr%ISOPEN) THEN
          CLOSE payment_csr;
        END IF;

        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'PAYMENT_METHOD, ID',
                            'COL_VALUE',
                            p_payment_method||', '||p_payment_method_id
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN

        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;

    END get_payment_method_id;

------------------------------------------------------------------------------
-- PROCEDURE get_customer_account_id
-- It returns customer account id from account Number and
-- stacks Error, if any, and returns ERROR status to calling process.
-- validate against customer
-- Calls:
--  None
-- Called By:
--  create_header_rules
------------------------------------------------------------------------------

   PROCEDURE get_customer_account_id(
                                     x_return_status           OUT NOCOPY VARCHAR2,
                                     x_msg_count               OUT NOCOPY NUMBER,
                                     x_msg_data                OUT NOCOPY VARCHAR2,
                                     p_contract_number         IN  okl_header_interface.contract_number_old%TYPE,
                                     p_customer_id             IN  okl_header_interface.customer_id%TYPE,
                                     p_customer_account_id     IN  okl_header_interface.customer_account_id%TYPE,
                                     p_customer_account_number IN  okl_header_interface.customer_account_number%TYPE,
                                     x_customer_account_id     OUT NOCOPY NUMBER
                                    ) IS

    CURSOR cust_acct_csr(p_cust_id             NUMBER,
                         p_cust_acc_number     VARCHAR2,
                         p_customer_account_id NUMBER) IS
    SELECT id1
    FROM   okx_customer_accounts_v
    WHERE  ((description = p_cust_acc_number
             AND
             p_cust_acc_number IS NOT NULL)
             OR
             (id1         = p_customer_account_id
              AND
              p_customer_account_id IS NOT NULL
             )
            )
    AND    party_id = p_cust_id
    AND    status = 'A';

    l_id             OKX_CUSTOMER_ACCOUNTS_V.ID1%TYPE;
    cust_acct_failed EXCEPTION;
    l_proc_name      VARCHAR2(35) := 'GET_CUSTOMER_ACCOUNT_ID';

    BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      debug_message('Customer Account ID: '||p_customer_account_id);

      OPEN  cust_acct_csr(p_customer_id,
                          p_customer_account_number,
                          p_customer_account_id);
      FETCH cust_acct_csr INTO l_id;
      IF  cust_acct_csr%NOTFOUND THEN
          raise cust_acct_failed;
      END IF;
      CLOSE cust_acct_csr;

      x_customer_account_id := l_id;

      return;

    EXCEPTION
      WHEN cust_acct_failed THEN

        IF (cust_acct_csr%ISOPEN) THEN
          CLOSE cust_acct_csr;
        END IF;

        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'CUSTOMER_ACCOUNT, ID',
                            'COL_VALUE',
                            p_customer_account_number||', '||p_customer_account_id
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN

        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;

    END get_customer_account_id;

------------------------------------------------------------------------------
-- PROCEDURE get_customer_account_id
-- It returns customer account id from account Number and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  create_header_rules
------------------------------------------------------------------------------

   PROCEDURE get_customer_account_id(
                                     x_return_status           OUT NOCOPY VARCHAR2,
                                     x_msg_count               OUT NOCOPY NUMBER,
                                     x_msg_data                OUT NOCOPY VARCHAR2,
                                     p_contract_number         IN  okl_header_interface.contract_number_old%TYPE,
                                     p_customer_account_id     IN  okl_header_interface.customer_account_id%TYPE,
                                     p_customer_account_number IN  okl_header_interface.customer_account_number%TYPE,
                                     x_customer_account_id     OUT NOCOPY NUMBER
                                    ) IS

    CURSOR cust_acct_csr(p_cust_acc_number     VARCHAR2,
                         p_customer_account_id NUMBER) IS
    SELECT id1
    FROM   okx_customer_accounts_v
    WHERE  ((description = p_cust_acc_number
             AND
             p_cust_acc_number IS NOT NULL)
             OR
             (id1         = p_customer_account_id
              AND
              p_customer_account_id IS NOT NULL
             )
            )
    AND    status = 'A';

    l_id             OKX_CUSTOMER_ACCOUNTS_V.ID1%TYPE;
    cust_acct_failed EXCEPTION;
    l_proc_name      VARCHAR2(35) := 'GET_CUSTOMER_ACCOUNT_ID';

    BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      OPEN  cust_acct_csr(p_customer_account_number,
                          p_customer_account_id);
      FETCH cust_acct_csr INTO l_id;
      IF  cust_acct_csr%NOTFOUND THEN
          raise cust_acct_failed;
      END IF;
      CLOSE cust_acct_csr;

      x_customer_account_id := l_id;

      return;

    EXCEPTION
      WHEN cust_acct_failed THEN

        IF (cust_acct_csr%ISOPEN) THEN
          CLOSE cust_acct_csr;
        END IF;

        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'CUSTOMER_ACCOUNT, ID',
                            'COL_VALUE',
                            p_customer_account_number||', '||p_customer_account_id
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN

        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;

    END get_customer_account_id;

------------------------------------------------------------------------------
-- PROCEDURE get_base_uom_id
-- It returns Base Reading UOM ID from Code and
-- stacks Error, if any, and returns ERROR status to calling process.
-- p_rgp_id = Rule Group ID, create rule group if it is null, otherwise use it
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE get_base_uom_id(
                             x_return_status OUT NOCOPY VARCHAR2,
                             p_base_uom_code IN  okx_tuom_v.id1%TYPE,
                             x_base_uom_id   OUT NOCOPY okx_tuom_v.id1%TYPE
                            ) IS
   l_proc_name VARCHAR2(35) := 'GET_BASE_UOM_ID';
   CURSOR uom_csr (p_base_uom_code VARCHAR2) IS
   SELECT id1
   FROM   okx_tuom_v
   WHERE  uom_code = p_base_uom_code;

   uom_failed EXCEPTION;
   l_id       okx_tuom_v.id1%TYPE;

   BEGIN
      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      OPEN uom_csr(p_base_uom_code);
      FETCH uom_csr INTO l_id;
      IF uom_csr%NOTFOUND THEN
         RAISE uom_failed;
      END IF;

      CLOSE uom_csr;
      x_base_uom_id := l_id;

      RETURN;

   EXCEPTION
      WHEN uom_failed THEN
         IF uom_csr%ISOPEN THEN
            CLOSE uom_csr;
         END IF;
         x_return_status := OKL_API.G_RET_STS_ERROR;

   END get_base_uom_id;

------------------------------------------------------------------------------
-- PROCEDURE get_price_list_id
-- It returns Price List ID from Name and
-- stacks Error, if any, and returns ERROR status to calling process.
-- p_rgp_id = Rule Group ID, create rule group if it is null, otherwise use it
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE get_price_list_id(
                               x_return_status   OUT NOCOPY VARCHAR2,
                               p_price_list_name IN  okx_list_headers_v.name%TYPE,
                               p_price_list_id   IN  okx_list_headers_v.id1%TYPE,
                               x_price_list_id   OUT NOCOPY okx_list_headers_v.id1%TYPE
                              ) IS

   l_proc_name VARCHAR2(35) := 'GET_PRICE_LIST_ID';
   CURSOR price_csr (p_price_list_name VARCHAR2,
                     p_price_list_id   NUMBER) IS
   SELECT id1
   FROM   okx_list_headers_v
   WHERE  list_type_code = 'PRL'
   AND    ((name = p_price_list_name
            AND
            p_price_list_name IS NOT NULL
           )
           OR
           (id1 = p_price_list_id
            AND
            p_price_list_id IS NOT NULL
           )
          )
   AND    SYSDATE BETWEEN NVL(start_date_active,SYSDATE) AND NVL(end_date_active, SYSDATE);

   l_id         okx_list_headers_v.id1%TYPE;
   price_failed EXCEPTION;

   BEGIN
      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      OPEN price_csr(p_price_list_name,
                     p_price_list_id);
      FETCH price_csr INTO l_id;
      IF price_csr%NOTFOUND THEN
         RAISE price_failed;
      END IF;

      CLOSE price_csr;
      x_price_list_id := l_id;

      RETURN;

   EXCEPTION
      WHEN price_failed THEN
         IF price_csr%ISOPEN THEN
            CLOSE price_csr;
         END IF;
         x_return_status := OKL_API.G_RET_STS_ERROR;
   END get_price_list_id;

------------------------------------------------------------------------------
-- PROCEDURE get_usage_item_id
-- It returns USAGE ITEM ID from Number and
-- stacks Error, if any, and returns ERROR status to calling process.
-- p_rgp_id = Rule Group ID, create rule group if it is null, otherwise use it
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE get_usage_item_id(
                               x_return_status   OUT NOCOPY VARCHAR2,
                               p_usage_item_name IN  okx_system_items_v.name%TYPE,
                               p_usage_item_id   IN  okx_system_items_v.id1%TYPE,
                               p_org_id          IN  NUMBER,
                               x_usage_item_id   OUT NOCOPY okx_system_items_v.id1%TYPE,
                               x_usage_id2       OUT NOCOPY okx_system_items_v.id2%TYPE
                              ) IS

   l_proc_name VARCHAR2(35) := 'GET_USAGE_ITEM_ID';
   CURSOR uitem_csr (p_item_name VARCHAR2,
                     p_item_id   NUMBER,
                     p_org_id    NUMBER) IS
   SELECT id1,
          id2
   FROM   okx_system_items_v
   WHERE  usage_item_flag = 'Y'
   AND    organization_id = p_org_id
   AND    ((name = p_item_name
            AND
            p_item_name IS NOT NULL
           )
           OR
           (id1 = p_item_id
            AND
            p_item_id IS NOT NULL
           )
          );

   uitem_failed EXCEPTION;
   l_id1        okx_system_items_v.id1%TYPE;
   l_id2        okx_system_items_v.id2%TYPE;

   BEGIN
      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      OPEN uitem_csr(p_usage_item_name,
                     p_usage_item_id,
                     p_org_id);
      FETCH uitem_csr INTO l_id1,
                           l_id2;
      IF uitem_csr%NOTFOUND THEN
         RAISE uitem_failed;
      END IF;

      CLOSE uitem_csr;
      x_usage_item_id := l_id1;
      x_usage_id2     := l_id2;

      RETURN;

   EXCEPTION
      WHEN uitem_failed THEN
         IF uitem_csr%ISOPEN THEN
            CLOSE uitem_csr;
         END IF;
         x_return_status := OKL_API.G_RET_STS_ERROR;
   END get_usage_item_id;

------------------------------------------------------------------------------
-- PROCEDURE create_rule_group_and_rule
-- It creates rule group ad rules and
-- stacks Error, if any, and returns ERROR status to calling process.
-- p_rgp_id = Rule Group ID, create rule group if it is null, otherwise use it
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE create_rule_group_and_rule(
                                       x_return_status OUT NOCOPY VARCHAR2,
                                       x_msg_count     OUT NOCOPY NUMBER,
                                       x_msg_data      OUT NOCOPY VARCHAR2,
                                       p_rgp_id        IN  NUMBER,
                                       p_rgpv_rec      IN  rgpv_rec_type,
                                       p_rulv_rec      IN  rulv_rec_type,
                                       x_rgpv_rec      OUT NOCOPY rgpv_rec_type,
                                       x_rulv_rec      OUT NOCOPY rulv_rec_type
                                      ) IS

   l_proc_name VARCHAR2(35) := 'CREATE_RULE_GROUP_AND_RULE';
   l_id        NUMBER;
   rg_failed   EXCEPTION;
   l_rulv_rec_in rulv_rec_type;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      -- Check for presence of RULE info, if not RETURN with SUCCESS
      IF (p_rulv_rec.rule_information_category IS NULL) THEN
         RETURN;
      END IF;

      --IF (p_rgp_id IS NULL) THEN -- create rule group
      --Bug# 4284166 : Added check for p_rgp_id = OKC_API.G_MISS_NUM in if statement
      IF (p_rgp_id IS NULL or p_rgp_id = OKC_API.G_MISS_NUM) THEN -- create rule group

         OKL_RULE_PUB.create_rule_group(
                                      p_api_version     => 1.0,
                                      p_init_msg_list   => OKL_API.G_FALSE,
                                      x_return_status   => x_return_status,
                                      x_msg_count       => x_msg_count,
                                      x_msg_data        => x_msg_data,
                                      p_rgpv_rec        => p_rgpv_rec,
                                      x_rgpv_rec        => x_rgpv_rec
                                     );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             raise rg_failed;
         END IF;

         l_id := x_rgpv_rec.id;

      ELSE
         l_id := p_rgp_id;

      END IF; --rule_group

      -- create rule now
      l_rulv_rec_in        := p_rulv_rec;
      l_rulv_rec_in.rgp_id := l_id;

      OKL_RULE_PUB.create_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec_in,
                               x_rulv_rec        => x_rulv_rec
                              );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          x_return_status := OKL_API.G_RET_STS_ERROR;
          raise rg_failed;
      END IF;

      RETURN;

   EXCEPTION
      WHEN rg_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
   END create_rule_group_and_rule;

------------------------------------------------------------------------------
-- PROCEDURE create_update_asset_rules
-- It creates or updates rules and
-- stacks Error, if any, and returns ERROR status to calling process.
-- p_rgp_id = Rule Group ID, create rule group if it is null, otherwise use it
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE create_update_asset_rules(
    x_return_status                  OUT NOCOPY VARCHAR2,
    x_msg_count                      OUT NOCOPY NUMBER,
    x_msg_data                       OUT NOCOPY VARCHAR2,
    p_chr_id                         IN  okc_k_headers_v.id%TYPE,
    p_contract_number                IN  okl_header_interface.contract_number_old%TYPE,
    p_cle_id                         IN  okl_k_lines_v.id%TYPE,
    p_line_number                    IN  okc_k_lines_v.line_number%TYPE,
    p_line_type                      IN  okl_lines_interface.line_type%TYPE,
    p_inv_org_id                     IN  okl_lines_interface.inventory_organization_id%TYPE,
    p_sales_tax_exempt_flag          IN  okl_lines_interface.sales_tax_exempt_flag%TYPE,
    p_sales_tax_exempt_cert_number   IN  okl_lines_interface.sales_tax_exempt_cert_number%TYPE,
    p_sales_tax_override_flag        IN  okl_lines_interface.sales_tax_override_flag%TYPE,
    p_sales_tax_override_rate        IN  okl_lines_interface.sales_tax_override_rate%TYPE,
    p_st_upd_lines_from_contract     IN  okl_lines_interface.st_update_lines_from_contract%TYPE,
    p_st_transfer_of_title           IN  okl_lines_interface.st_transfer_of_title%TYPE,
    p_st_sale_and_lease_back         IN  okl_lines_interface.st_sale_and_lease_back%TYPE,
    p_st_purchase_of_lease           IN  okl_lines_interface.st_purchase_of_lease%TYPE,
    p_st_equipment_usage             IN  okl_lines_interface.st_equipment_usage%TYPE,
    p_st_equipment_age               IN  okl_lines_interface.st_equipment_age%TYPE,
    p_st_asset_upfront_tax           IN  okl_lines_interface.st_asset_upfront_tax%TYPE,
    p_vat_tax_exempt                 IN  okl_lines_interface.vat_tax_exempt%TYPE,
    p_vat_tax_exempt_cert_number     IN  okl_lines_interface.vat_tax_exempt_cert_number%TYPE,
    p_vat_tax_override_flag          IN  okl_lines_interface.vat_tax_override_flag%TYPE,
    p_vat_tax_override_rate          IN  okl_lines_interface.vat_tax_override_rate%TYPE,
    p_prop_tax_applicable            IN  okl_lines_interface.prop_tax_applicable%TYPE,
    p_prop_tax_lease_rep             IN  okl_lines_interface.prop_tax_lease_rep%TYPE,
    p_french_tax_code                IN  okl_lines_interface.french_tax_code%TYPE,
    p_french_tax_name                IN  okl_lines_interface.french_tax_name%TYPE,
    p_prop_tax_bill_method           IN  okl_lines_interface.prop_tax_bill_method%TYPE,
    p_prop_tax_as_contract_yn        IN  okl_lines_interface.prop_tax_as_contract_yn%TYPE ) IS

   line_rule_failed   EXCEPTION;
   rule_group_failed  EXCEPTION;
   rule_failed        EXCEPTION;
   l_proc_name        VARCHAR2(35) := 'CREATE_UPDATE_ASSET_RULES';

   x_lienholder_id    NUMBER := NULL;
   x_title_issuer_id  NUMBER := NULL;
   l_rgp_id           NUMBER;
   x_base_uom_id      okx_tuom_v.id1%TYPE;
   x_price_list_id    okx_list_headers_v.id1%TYPE;
   x_stream_id        okl_strmtyp_source_v.id1%TYPE;
   l_payment_term_id  okx_payables_terms_v.id1%TYPE;
   l_vendor_paysite_id okx_vendor_sites_v.id1%TYPE;
   l_freq_id          okl_time_units_v.id1%TYPE;

   -- Rule Rec
   x_rgpv_rec         rgpv_rec_type;
   l_rgpv_rec         rgpv_rec_type;

   l_rulv_rec         rulv_rec_type;
   x_rulv_rec         rulv_rec_type;

   lp_rulv_rec         rulv_rec_type;
   xp_rulv_rec         rulv_rec_type;

   l_progress         VARCHAR2(10) := '1.0';
   l_french_tax_code  OKL_FRENCH_TAX_V.CODE%TYPE;

   CURSOR french_tax_csr (p_tax_code okl_french_tax_v.code%TYPE,
                          p_tax_name okl_french_tax_v.name%TYPE) IS
   SELECT code
   FROM   okl_french_tax_v
   WHERE  ( code = p_tax_code
            AND
            p_tax_code IS NOT NULL)
   OR     ( name = p_tax_name
            AND
            p_tax_name IS NOT NULL)
   AND    TRUNC(SYSDATE) BETWEEN NVL(TRUNC(start_date), TRUNC(SYSDATE))
                             AND NVL(TRUNC(end_date), TRUNC(SYSDATE));

   CURSOR get_rule_group_info(p_chr_id  okc_k_headers_b.id%TYPE,
                              p_cle_id  okc_k_lines_v.id%TYPE) IS
   SELECT rgp.id
   FROM okc_rule_groups_v rgp
   WHERE rgp.dnz_chr_id = p_chr_id
   AND rgp.cle_id = p_cle_id
   AND rgp.rgd_code = 'LAASTX'
   AND rgp.rgp_type = 'KRG';

   -- 5179119
   CURSOR get_sales_tax_rule_info(p_chr_id  okc_k_headers_b.id%TYPE,
                                  p_rgp_id  okc_k_lines_v.id%TYPE) IS
   SELECT rule.id
   FROM okc_rules_v rule
   WHERE rule.dnz_chr_id = p_chr_id
   AND rule.rgp_id = p_rgp_id
   AND rule.rule_information_category = 'LAASTX';

   CURSOR get_prop_tax_rule_info(p_chr_id  okc_k_headers_b.id%TYPE,
                                 p_rgp_id  okc_k_lines_v.id%TYPE) IS
   SELECT rule.id
   FROM okc_rules_v rule
   WHERE rule.dnz_chr_id = p_chr_id
   AND rule.rgp_id = p_rgp_id
   AND rule.rule_information_category = 'LAPRTX';

   ln_rgp_id    OKC_RULE_GROUPS_V.ID%TYPE;
   ln_rule_id   OKC_RULES_V.ID%TYPE;
   -- 5179119
   l_sales_tax_rule_id   OKC_RULES_V.ID%TYPE;
   l_sales_tax_rule_found   BOOLEAN;

   lv_rec_populate_check  VARCHAR2(1) := 'N';

   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);

     OPEN get_rule_group_info(p_chr_id, p_cle_id);
     FETCH get_rule_group_info into ln_rgp_id;
     IF get_rule_group_info%NOTFOUND THEN
       RAISE rule_group_failed;
     END IF;
     CLOSE get_rule_group_info;

     -- Sales Tax 5179119
     OPEN get_sales_tax_rule_info(p_chr_id	=> p_chr_id,
   		  		  p_rgp_id	=> ln_rgp_id);
     FETCH get_sales_tax_rule_info into l_sales_tax_rule_id;
     IF get_sales_tax_rule_info%NOTFOUND THEN
       l_sales_tax_rule_found := FALSE;
     ELSE
       l_sales_tax_rule_found := TRUE;
     END IF;
     CLOSE get_sales_tax_rule_info;

    l_rulv_rec := NULL;

     -- Rule Group LAASTX
     IF (p_sales_tax_exempt_flag IS NOT NULL) THEN
       l_rulv_rec.rule_information1         := p_sales_tax_exempt_flag;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_sales_tax_exempt_cert_number IS NOT NULL) THEN
       l_rulv_rec.rule_information2         := p_sales_tax_exempt_cert_number;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_sales_tax_override_flag IS NOT NULL) THEN
       l_rulv_rec.rule_information3         := p_sales_tax_override_flag;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_sales_tax_override_rate IS NOT NULL) THEN
       l_rulv_rec.rule_information4         := p_sales_tax_override_rate;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_st_upd_lines_from_contract IS NOT NULL) THEN
       l_rulv_rec.rule_information5         := p_st_upd_lines_from_contract;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_st_transfer_of_title IS NOT NULL) THEN
       l_rulv_rec.rule_information6         := p_st_transfer_of_title;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_st_sale_and_lease_back IS NOT NULL) THEN
       l_rulv_rec.rule_information7         := p_st_sale_and_lease_back;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_st_purchase_of_lease IS NOT NULL) THEN
       l_rulv_rec.rule_information8         := p_st_purchase_of_lease;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_st_equipment_usage IS NOT NULL) THEN
       l_rulv_rec.rule_information9         := p_st_equipment_usage;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_st_equipment_age IS NOT NULL) THEN
       l_rulv_rec.rule_information10        := p_st_equipment_age;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_st_asset_upfront_tax IS NOT NULL) THEN
       l_rulv_rec.rule_information11        := p_st_asset_upfront_tax;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAASTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (lv_rec_populate_check = 'Y') THEN
       IF NOT(l_sales_tax_rule_found) THEN -- 5179119
         OKL_RULE_PUB.create_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec,
                               x_rulv_rec        => x_rulv_rec
                              );
       ELSE
         l_rulv_rec.id := l_sales_tax_rule_id;
         l_rulv_rec.created_by := OKC_API.G_MISS_NUM;
         l_rulv_rec.creation_date := OKC_API.G_MISS_DATE;
         OKL_RULE_PUB.update_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec,
                               x_rulv_rec        => x_rulv_rec
                              );
       END IF;
       l_progress := '1.1';
       IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         raise line_rule_failed;
       END IF;
     END IF;

     l_rulv_rec := NULL;
     lv_rec_populate_check := 'N';
     IF (p_vat_tax_exempt IS NOT NULL) THEN

       l_rulv_rec.rule_information1         := p_vat_tax_exempt;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAAVTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_vat_tax_exempt_cert_number IS NOT NULL) THEN

       l_rulv_rec.rule_information2         := p_vat_tax_exempt_cert_number;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAAVTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_vat_tax_override_flag IS NOT NULL) THEN

       l_rulv_rec.rule_information3         := p_vat_tax_override_flag;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAAVTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (p_vat_tax_override_rate IS NOT NULL) THEN

       l_rulv_rec.rule_information4         := p_vat_tax_override_rate;
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information_category := 'LAAVTX';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (lv_rec_populate_check = 'Y') THEN
       OKL_RULE_PUB.create_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec,
                               x_rulv_rec        => x_rulv_rec
                              );
       l_progress := '1.2';
       IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         raise line_rule_failed;
       END IF;
     END IF;

     -- Property Tax
     OPEN get_prop_tax_rule_info(p_chr_id	=> p_chr_id,
   		  			             p_rgp_id	=> ln_rgp_id);
     FETCH get_prop_tax_rule_info into ln_rule_id;
     IF get_prop_tax_rule_info%NOTFOUND THEN
       RAISE rule_failed;
     END IF;
     CLOSE get_prop_tax_rule_info;

     IF (p_prop_tax_applicable IS NOT NULL) THEN
       lp_rulv_rec.id                        := ln_rule_id;
       lp_rulv_rec.rule_information1         := p_prop_tax_applicable;
       lp_rulv_rec.rule_information_category := 'LAPRTX';
     END IF;

     IF (p_prop_tax_lease_rep IS NOT NULL) THEN
       lp_rulv_rec.id                        := ln_rule_id;
       lp_rulv_rec.rule_information2         := p_prop_tax_lease_rep;
       lp_rulv_rec.rule_information_category := 'LAPRTX';
     END IF;

     IF (p_prop_tax_bill_method IS NOT NULL) THEN
       lp_rulv_rec.id                        := ln_rule_id;
       lp_rulv_rec.rule_information3         := p_prop_tax_bill_method;
       lp_rulv_rec.rule_information_category := 'LAPRTX';
     END IF;

     IF (p_prop_tax_applicable IS NOT NULL
         OR
         p_prop_tax_lease_rep IS NOT NULL
         OR
         p_prop_tax_bill_method IS NOT NULL) THEN  -- Bug# 3984890
         OKL_RULE_PUB.update_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => lp_rulv_rec,
                               x_rulv_rec        => xp_rulv_rec
                              );
         l_progress := '1.3';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise line_rule_failed;
         END IF;

     END IF;

     l_rulv_rec := NULL;
     lv_rec_populate_check := 'N';

     -- 'LAASTK' Rule
     IF (p_prop_tax_as_contract_yn IS NOT NULL) THEN
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information1         := p_prop_tax_as_contract_yn;
       l_rulv_rec.rule_information_category := 'LAASTK';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (lv_rec_populate_check = 'Y') THEN
       OKL_RULE_PUB.create_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec,
                               x_rulv_rec        => x_rulv_rec
                              );
       l_progress := '1.4';
       IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         raise line_rule_failed;
       END IF;
     END IF;

     l_rulv_rec := NULL;
     lv_rec_populate_check := 'N';

     IF (p_french_tax_code IS NOT NULL
             OR
         p_french_tax_name IS NOT NULL) THEN

       OPEN french_tax_csr (p_french_tax_code,
                            p_french_tax_name);
       FETCH french_tax_csr INTO l_french_tax_code;
       IF french_tax_csr%NOTFOUND THEN
         okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||p_line_number,
                                'COL_NAME',
                                'FRENCH_TAX_CODE, NAME',
                                'COL_VALUE',
                                p_french_tax_code||', '||p_french_tax_name
                              );

         raise line_rule_failed;
       END IF;
       CLOSE french_tax_csr;
     END IF;

     IF (l_french_tax_code IS NOT NULL) THEN
       l_rulv_rec.rgp_id                    := ln_rgp_id;
       l_rulv_rec.dnz_chr_id                := p_chr_id;
       l_rulv_rec.rule_information1         := l_french_tax_code;
       l_rulv_rec.rule_information_category := 'LATAXP';
       l_rulv_rec.std_template_yn           := 'N';
       l_rulv_rec.warn_yn                   := 'N';
       lv_rec_populate_check := 'Y';
     END IF;

     IF (lv_rec_populate_check = 'Y') THEN
       OKL_RULE_PUB.create_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec,
                               x_rulv_rec        => x_rulv_rec
                              );
       l_progress := '1.5';
       IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         raise line_rule_failed;
       END IF;
     END IF;

     RETURN;

   EXCEPTION
     WHEN line_rule_failed THEN
       x_return_status := OKL_API.G_RET_STS_ERROR;
       debug_message('Line rule failed : '||l_progress);

     WHEN rule_group_failed THEN
       IF get_rule_group_info%ISOPEN THEN
         CLOSE get_rule_group_info;
       END IF;
       x_return_status := OKL_API.G_RET_STS_ERROR;

     WHEN rule_failed THEN
       IF get_prop_tax_rule_info%ISOPEN THEN
         CLOSE get_prop_tax_rule_info;
       END IF;
       x_return_status := OKL_API.G_RET_STS_ERROR;

     WHEN OTHERS THEN
       okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

       x_return_status := OKL_API.G_RET_STS_ERROR;
       debug_message('line other : '||l_progress);
   END create_update_asset_rules;

------------------------------------------------------------------------------
-- PROCEDURE create_line_rules
-- It creates rules for line records and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  get_party_id
-- Called By:
--  load_input_record
------------------------------------------------------------------------------

   PROCEDURE create_line_rules(
                            x_return_status                  OUT NOCOPY VARCHAR2,
                            x_msg_count                      OUT NOCOPY NUMBER,
                            x_msg_data                       OUT NOCOPY VARCHAR2,
                            p_chr_id                         IN  okc_k_headers_v.id%TYPE,
                            p_contract_number                IN  okl_header_interface.contract_number_old%TYPE,
                            p_cle_id                         IN  okl_k_lines_v.id%TYPE,
                            p_line_number                    IN  okc_k_lines_v.line_number%TYPE,
                            p_line_type                      IN  okl_lines_interface.line_type%TYPE,
                            p_inv_org_id                     IN  okl_lines_interface.inventory_organization_id%TYPE,
                            p_sales_tax_exempt_flag          IN  okl_lines_interface.sales_tax_exempt_flag%TYPE,
                            p_sales_tax_exempt_cert_number   IN  okl_lines_interface.sales_tax_exempt_cert_number%TYPE,
                            p_sales_tax_override_flag        IN  okl_lines_interface.sales_tax_override_flag%TYPE,
                            p_sales_tax_override_rate        IN  okl_lines_interface.sales_tax_override_rate%TYPE,
                            p_st_upd_lines_from_contract     IN  okl_lines_interface.st_update_lines_from_contract%TYPE,
                            p_st_transfer_of_title           IN  okl_lines_interface.st_transfer_of_title%TYPE,
                            p_st_sale_and_lease_back         IN  okl_lines_interface.st_sale_and_lease_back%TYPE,
                            p_st_purchase_of_lease           IN  okl_lines_interface.st_purchase_of_lease%TYPE,
                            p_st_equipment_usage             IN  okl_lines_interface.st_equipment_usage%TYPE,
                            p_st_equipment_age               IN  okl_lines_interface.st_equipment_age%TYPE,
                            p_st_asset_upfront_tax           IN  okl_lines_interface.st_asset_upfront_tax%TYPE,
                            p_vat_tax_exempt                 IN  okl_lines_interface.vat_tax_exempt%TYPE,
                            p_vat_tax_exempt_cert_number     IN  okl_lines_interface.vat_tax_exempt_cert_number%TYPE,
                            p_vat_tax_override_flag          IN  okl_lines_interface.vat_tax_override_flag%TYPE,
                            p_vat_tax_override_rate          IN  okl_lines_interface.vat_tax_override_rate%TYPE,
                            p_lien_type                      IN  okl_lines_interface.lien_type%TYPE,
                            p_lien_filing_number             IN  okl_lines_interface.lien_filing_number%TYPE,
                            p_lien_filing_date               IN  okl_lines_interface.lien_filing_date%TYPE,
                            p_lien_filing_status             IN  okl_lines_interface.lien_filing_status%TYPE,
                            p_lienholder_id                  IN  okl_lines_interface.lienholder_id%TYPE,
                            p_lienholder_number              IN  okl_lines_interface.lienholder_number%TYPE,
                            p_filing_jurisdiction            IN  okl_lines_interface.filing_jurisdiction%TYPE,
                            p_filing_sub_jurisdiction        IN  okl_lines_interface.filing_sub_jurisdiction%TYPE,
                            p_lien_expiration_date           IN  okl_lines_interface.lien_expiration_date%TYPE,
                            p_lien_continuation_number       IN  okl_lines_interface.lien_continuation_number%TYPE,
                            p_lien_continuation_date         IN  okl_lines_interface.lien_continuation_date%TYPE,
                            p_title_type                     IN  okl_lines_interface.title_type%TYPE,
                            p_title_issuer_number            IN  okl_lines_interface.title_issuer_number%TYPE,
                            p_title_issuer_id                IN  okl_lines_interface.title_issuer_id%TYPE,
                            p_title_date                     IN  okl_lines_interface.title_date%TYPE,
                            p_title_number                   IN  okl_lines_interface.title_number%TYPE,
                            p_registration_number            IN  okl_lines_interface.registration_number%TYPE,
                            p_asset_registration_loc_name    IN  okl_lines_interface.asset_registration_loc_name%TYPE,
                            p_title_custodian_name           IN  okl_lines_interface.title_custodian_name%TYPE,
                            p_payee_site_name                IN  okl_lines_interface.payee_site_name%TYPE,
                            p_passthrough_percent            IN  okl_lines_interface.passthrough_percent%TYPE,
                            p_passthrough_basis_code         IN  okl_lines_interface.passthrough_basis_code%TYPE,
                            p_fee_code                       IN  okl_lines_interface.fee_code%TYPE,
                            p_stream_purpose                 IN  okl_lines_interface.stream_purpose_code%TYPE,
                            p_usage_item_name                IN  okl_lines_interface.usage_item_name%TYPE,
                            p_usage_item_id                  IN  okl_lines_interface.usage_item_id%TYPE,
                            p_price_list_name                IN  okl_lines_interface.price_list_name%TYPE,
                            p_price_list_id                  IN  okl_lines_interface.price_list_id%TYPE,
                            p_minimum_qty_usage              IN  okl_lines_interface.minimum_qty_usage%TYPE,
                            p_default_qty_usage              IN  okl_lines_interface.default_qty_usage%TYPE,
                            p_amcv_flag                      IN  okl_lines_interface.amcv_flag%TYPE,
                            p_level_flag                     IN  okl_lines_interface.level_flag%TYPE,
                            p_base_reading                   IN  okl_lines_interface.base_reading%TYPE,
                            p_base_reading_uom_code          IN  okl_lines_interface.base_reading_uom_code%TYPE,
                            p_usage_type_code                IN  okl_lines_interface.usage_type_code%TYPE,
                            p_fixed_usage_quantity           IN  okl_lines_interface.fixed_usage_quantity%TYPE,
                            p_usage_period                   IN  okl_lines_interface.usage_period%TYPE,
                            p_usage_no_of_period             IN  okl_lines_interface.usage_no_of_period%TYPE,
                            p_fee_no_of_period               IN  okl_lines_interface.fee_exp_no_of_periods%TYPE,
                            p_fee_frequency                  IN  okl_lines_interface.fee_exp_frequency%TYPE,
                            p_fee_amount_per_period          IN  okl_lines_interface.fee_exp_amount_per_period%TYPE,
                            p_prop_tax_applicable            IN  okl_lines_interface.prop_tax_applicable%TYPE,
                            p_prop_tax_lease_rep             IN  okl_lines_interface.prop_tax_lease_rep%TYPE,
                            p_french_tax_code                IN  okl_lines_interface.french_tax_code%TYPE,
                            p_french_tax_name                IN  okl_lines_interface.french_tax_name%TYPE,
-- Added by rravikir (Fix for Bug 3947959)
                            p_prop_tax_bill_method           IN  okl_lines_interface.prop_tax_bill_method%TYPE,
                            p_prop_tax_as_contract_yn        IN  okl_lines_interface.prop_tax_as_contract_yn%TYPE
-- End
                           ) IS

   line_rule_failed   EXCEPTION;
   l_proc_name        VARCHAR2(35) := 'CREATE_LINE_RULES';

   x_lienholder_id    NUMBER := NULL;
   x_title_issuer_id  NUMBER := NULL;
   l_rgp_id           NUMBER;
   x_usage_item_id    okx_system_items_v.id1%TYPE;
   x_usage_id2        okx_system_items_v.id2%TYPE;
   x_base_uom_id      okx_tuom_v.id1%TYPE;
   x_price_list_id    okx_list_headers_v.id1%TYPE;
   x_stream_id        okl_strmtyp_source_v.id1%TYPE;
   l_payment_term_id  okx_payables_terms_v.id1%TYPE;
   l_vendor_paysite_id okx_vendor_sites_v.id1%TYPE;
   l_freq_id          okl_time_units_v.id1%TYPE;

   CURSOR freq_csr (p_frequency VARCHAR2) IS
   SELECT id1
   FROM   okl_time_units_v
   WHERE  name = p_frequency
   AND    status = 'A'
   AND    TRUNC(SYSDATE) BETWEEN NVL(TRUNC(start_date_active), TRUNC(SYSDATE)) AND
                                 NVL(TRUNC(end_date_active), TRUNC(SYSDATE));
   -- Rule Rec
   x_rgpv_rec         rgpv_rec_type;
   l_rgpv_rec         rgpv_rec_type;

   l_rulv_rec         rulv_rec_type;
   x_rulv_rec         rulv_rec_type;

   l_progress         VARCHAR2(10) := '1.0';
   l_french_tax_code  OKL_FRENCH_TAX_V.CODE%TYPE;

   CURSOR french_tax_csr (p_tax_code okl_french_tax_v.code%TYPE,
                          p_tax_name okl_french_tax_v.name%TYPE) IS
   SELECT code
   FROM   okl_french_tax_v
   WHERE  ( code = p_tax_code
            AND
            p_tax_code IS NOT NULL)
   OR     ( name = p_tax_name
            AND
            p_tax_name IS NOT NULL)
   AND    TRUNC(SYSDATE) BETWEEN NVL(TRUNC(start_date), TRUNC(SYSDATE))
                             AND NVL(TRUNC(end_date), TRUNC(SYSDATE));

   l_ok   VARCHAR2(1) := '?';
   CURSOR usage_type_csr (p_usage_type VARCHAR2) IS
   SELECT 'Y'
   FROM   fnd_lookups
   WHERE  lookup_type = 'OKS_USAGE_TYPE'
   AND    TRUNC(SYSDATE) BETWEEN NVL(TRUNC(start_date_active), TRUNC(SYSDATE)) AND
                              NVL(TRUNC(end_date_active), TRUNC(SYSDATE));

   -- Added by rravikir (Fix for Bug 3947959)
   lv_asset_default        okl_property_tax_setups.enable_asset_default%TYPE;
   CURSOR get_est_prop_tax_info(p_chr_id  okc_k_headers_b.id%TYPE) IS
   SELECT enable_asset_default
   FROM okl_property_tax_setups
   WHERE org_id = (SELECT authoring_org_id
                   FROM okc_k_headers_b
                   WHERE id = p_chr_id);
   -- End

   l_present_yn VARCHAR2(1);
   l_service_name OKL_STRMTYP_SOURCE_V.NAME%TYPE;

   -- 5179119
   CURSOR get_sales_tax_rgp_info(p_chr_id  okc_k_headers_b.id%TYPE,
                                        p_cle_id  okc_k_lines_v.id%TYPE) IS
   SELECT rgp.id
   FROM okc_rule_groups_v rgp
   WHERE rgp.dnz_chr_id = p_chr_id
   AND rgp.cle_id = p_cle_id
   AND rgp.rgd_code = 'LAASTX'
   AND rgp.rgp_type = 'KRG';

   CURSOR get_sales_tax_rule_info(p_chr_id  okc_k_headers_b.id%TYPE,
                                  p_rgp_id  okc_k_lines_v.id%TYPE) IS
   SELECT rule.id
   FROM okc_rules_v rule
   WHERE rule.dnz_chr_id = p_chr_id
   AND rule.rgp_id = p_rgp_id
   AND rule.rule_information_category = 'LAASTX';

   l_sales_tax_rgp_id    OKC_RULE_GROUPS_V.ID%TYPE;
   l_sales_tax_rule_id   OKC_RULES_V.ID%TYPE;
   l_sales_tax_rgp_found   BOOLEAN;
   l_sales_tax_rule_found   BOOLEAN;
   l_create_rule_group      BOOLEAN;
   -- 5179119
   l_rgp_count NUMBER; --AKP
   l_rul_count NUMBER;

   BEGIN
      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      --debug_message('AKP:In create_line_rules.. p_cle_id=' || p_cle_id);

      l_rulv_rec := NULL; -- DDEY

      -- Added by rravikir (Fix for Bug 3947959)
      OPEN get_est_prop_tax_info(p_chr_id   => p_chr_id);
      FETCH get_est_prop_tax_info into lv_asset_default;
      CLOSE get_est_prop_tax_info;
      -- End

      IF (p_line_type = 'ASSET') THEN
        -- Added by rravikir (Fix for Bug 3947959)
        IF (lv_asset_default IS NOT NULL AND lv_asset_default = 'YES') THEN
          create_update_asset_rules(
                            x_return_status                  => x_return_status,
                            x_msg_count                      => x_msg_count,
                            x_msg_data                       => x_msg_data,
                            p_chr_id                         => p_chr_id,
                            p_cle_id                         => p_cle_id,
                            p_contract_number                => p_contract_number,
                            p_line_number                    => p_line_number,
                            p_line_type                      => p_line_type,
                            p_inv_org_id                     => p_inv_org_id,
                            p_sales_tax_exempt_flag          => p_sales_tax_exempt_flag,
                            p_sales_tax_exempt_cert_number   => p_sales_tax_exempt_cert_number,
                            p_sales_tax_override_flag        => p_sales_tax_override_flag,
                            p_sales_tax_override_rate        => p_sales_tax_override_rate,
                            p_st_upd_lines_from_contract     => p_st_upd_lines_from_contract,
                            p_st_transfer_of_title           => p_st_transfer_of_title,
                            p_st_sale_and_lease_back         => p_st_sale_and_lease_back,
                            p_st_purchase_of_lease           => p_st_purchase_of_lease,
                            p_st_equipment_usage             => p_st_equipment_usage,
                            p_st_equipment_age               => p_st_equipment_age,
                            p_st_asset_upfront_tax           => p_st_asset_upfront_tax,
                            p_vat_tax_exempt                 => p_vat_tax_exempt,
                            p_vat_tax_exempt_cert_number     => p_vat_tax_exempt_cert_number,
                            p_vat_tax_override_flag          => p_vat_tax_override_flag,
                            p_vat_tax_override_rate          => p_vat_tax_override_rate,
                            p_prop_tax_applicable            => p_prop_tax_applicable,
                            p_prop_tax_lease_rep             => p_prop_tax_lease_rep,
                            p_french_tax_code                => p_french_tax_code,
                            p_french_tax_name                => p_french_tax_name,
                            p_prop_tax_bill_method           => p_prop_tax_bill_method,
                            p_prop_tax_as_contract_yn        => p_prop_tax_as_contract_yn);
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            raise line_rule_failed;
          END IF;
        ELSE
        -- End

         debug_message('***** > Else of estimated prop tax');

         -- 5179119
         OPEN get_sales_tax_rgp_info(p_chr_id, p_cle_id);
         FETCH get_sales_tax_rgp_info into l_sales_tax_rgp_id;
         IF get_sales_tax_rgp_info%NOTFOUND THEN
           l_sales_tax_rgp_found := FALSE;
         ELSE
           l_sales_tax_rgp_found := TRUE;
         END IF;
         CLOSE get_sales_tax_rgp_info;

         OPEN get_sales_tax_rule_info(p_chr_id	=> p_chr_id,
   		  		      p_rgp_id	=> l_sales_tax_rgp_id);
         FETCH get_sales_tax_rule_info into l_sales_tax_rule_id;
         IF get_sales_tax_rule_info%NOTFOUND THEN
           l_sales_tax_rule_found := FALSE;
         ELSE
           l_sales_tax_rule_found := TRUE;
         END IF;
         CLOSE get_sales_tax_rule_info;

         -- Rule Group LAASTX
         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAASTX';
         l_rgpv_rec.chr_id     := NULL;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := p_cle_id;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_create_rule_group                  := FALSE;
         IF (p_sales_tax_exempt_flag IS NOT NULL) THEN

            l_rulv_rec.rule_information1         := p_sales_tax_exempt_flag;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAASTX';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
            l_create_rule_group                  := TRUE;
         END IF;

         IF (p_sales_tax_exempt_cert_number IS NOT NULL) THEN

             l_rulv_rec.rule_information2         := p_sales_tax_exempt_cert_number;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
            l_create_rule_group                  := TRUE;

         END IF;

         IF (p_sales_tax_override_flag IS NOT NULL) THEN

             l_rulv_rec.rule_information3         := p_sales_tax_override_flag;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
            l_create_rule_group                  := TRUE;

         END IF;

         IF (p_sales_tax_override_rate IS NOT NULL) THEN

             l_rulv_rec.rule_information4         := p_sales_tax_override_rate;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
            l_create_rule_group                  := TRUE;

         END IF;

         IF (p_st_upd_lines_from_contract IS NOT NULL) THEN

             l_rulv_rec.rule_information5         := p_st_upd_lines_from_contract;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
             l_create_rule_group                  := TRUE;

         END IF;

         IF (p_st_transfer_of_title IS NOT NULL) THEN

             l_rulv_rec.rule_information6         := p_st_transfer_of_title;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
             l_create_rule_group                  := TRUE;

         END IF;

         IF (p_st_sale_and_lease_back IS NOT NULL) THEN

             l_rulv_rec.rule_information7         := p_st_sale_and_lease_back;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
             l_create_rule_group                  := TRUE;

         END IF;

         IF (p_st_purchase_of_lease IS NOT NULL) THEN

             l_rulv_rec.rule_information8         := p_st_purchase_of_lease;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
             l_create_rule_group                  := TRUE;

         END IF;

         IF (p_st_equipment_usage IS NOT NULL) THEN

             l_rulv_rec.rule_information9         := p_st_equipment_usage ;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
             l_create_rule_group                  := TRUE;

         END IF;

         IF (p_st_equipment_age IS NOT NULL) THEN

             l_rulv_rec.rule_information10        := p_st_equipment_age;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
             l_create_rule_group                  := TRUE;

         END IF;

         IF (p_st_asset_upfront_tax IS NOT NULL) THEN

             l_rulv_rec.rule_information11        := p_st_asset_upfront_tax;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAASTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
             l_create_rule_group                  := TRUE;

         END IF;

         IF (l_create_rule_group) THEN
         IF NOT(l_sales_tax_rgp_found) THEN -- 5179119
           create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );
         ELSE
           l_rgp_id := l_sales_tax_rgp_id;
           l_rulv_rec.rgp_id := l_sales_tax_rgp_id;
           IF NOT(l_sales_tax_rule_found) THEN
             OKL_RULE_PUB.create_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec,
                               x_rulv_rec        => x_rulv_rec
                              );
           ELSE
             l_rulv_rec.id := l_sales_tax_rule_id;
             l_rulv_rec.created_by := OKC_API.G_MISS_NUM;
             l_rulv_rec.creation_date := OKC_API.G_MISS_DATE;
             OKL_RULE_PUB.update_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec,
                               x_rulv_rec        => x_rulv_rec
                              );
           END IF;
         END IF;
         END IF;

         l_progress := '1.1';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;
         IF (p_vat_tax_exempt IS NOT NULL) THEN

             l_rulv_rec.rule_information1         := p_vat_tax_exempt;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAAVTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

         END IF;

         IF (p_vat_tax_exempt_cert_number IS NOT NULL) THEN

             l_rulv_rec.rule_information2         := p_vat_tax_exempt_cert_number;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAAVTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

         END IF;

         IF (p_vat_tax_override_flag IS NOT NULL) THEN

             l_rulv_rec.rule_information3         := p_vat_tax_override_flag;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAAVTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

         END IF;

         IF (p_vat_tax_override_rate IS NOT NULL) THEN

             l_rulv_rec.rule_information4         := p_vat_tax_override_rate;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAAVTX';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;

         -- Property Tax
         IF (p_prop_tax_applicable IS NOT NULL) THEN
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information1         := p_prop_tax_applicable;
            l_rulv_rec.rule_information_category := 'LAPRTX';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_prop_tax_lease_rep IS NOT NULL) THEN
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information2         := p_prop_tax_lease_rep;
            l_rulv_rec.rule_information_category := 'LAPRTX';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

-- Added by rravikir (Fix for Bug 3947959)
         IF (p_prop_tax_bill_method IS NOT NULL) THEN
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information3         := p_prop_tax_bill_method;
            l_rulv_rec.rule_information_category := 'LAPRTX';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;
-- End

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;

         -- Added by rravikir (Fix for Bug 3947959) (Creation of 'LAASTK' rule)
         IF (p_prop_tax_as_contract_yn IS NOT NULL) THEN
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information1         := p_prop_tax_as_contract_yn;
            l_rulv_rec.rule_information_category := 'LAASTK';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;
         -- End

         IF (p_french_tax_code IS NOT NULL
             OR
             p_french_tax_name IS NOT NULL) THEN

             OPEN french_tax_csr (p_french_tax_code,
                                  p_french_tax_name);
             FETCH french_tax_csr INTO l_french_tax_code;
             IF french_tax_csr%NOTFOUND THEN
               okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||p_line_number,
                                'COL_NAME',
                                'FRENCH_TAX_CODE, NAME',
                                'COL_VALUE',
                                p_french_tax_code||', '||p_french_tax_name
                              );

                raise line_rule_failed;
             END IF;

             CLOSE french_tax_csr;

         END IF;

         IF (l_french_tax_code IS NOT NULL) THEN
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information1         := l_french_tax_code;
             l_rulv_rec.rule_information_category := 'LATAXP';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;
        -- Added by rravikir (Fix for Bug 3947959)
        END IF;
        -- End

         debug_message('***** > After estimated prop tax');

         -- Rule Group LAAFLG
         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAAFLG';
         l_rgpv_rec.chr_id     := NULL;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := p_cle_id;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec            := NULL;
         IF (p_lien_type IS NOT NULL) THEN
            l_rulv_rec.rule_information1         := p_lien_type;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_lien_filing_number IS NOT NULL) THEN
            l_rulv_rec.rule_information2         := p_lien_filing_number;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_lien_filing_date IS NOT NULL) THEN
            l_rulv_rec.rule_information3         := TO_CHAR(p_lien_filing_date);
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_lien_filing_status IS NOT NULL) THEN
            l_rulv_rec.rule_information4         := p_lien_filing_status;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         x_lienholder_id := NULL;
         IF (p_lienholder_id IS NOT NULL
             OR
             p_lienholder_number IS NOT NULL) THEN

             get_party_id(
                          x_return_status     => x_return_status,
                          x_msg_count         => x_msg_count,
                          x_msg_data          => x_msg_data,
                          p_contract_number   => p_contract_number,
                          p_line_number       => p_line_number,
                          p_party_id          => p_lienholder_id,
                          p_party_number      => p_lienholder_number,
                          x_party_id          => x_lienholder_id
                         );
             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                raise line_rule_failed;
             END IF;
         END IF;

         IF (x_lienholder_id IS NOT NULL) THEN
            l_rulv_rec.jtot_object1_code         := 'OKX_PARTY';
            l_rulv_rec.object1_id1               := TO_CHAR(x_lienholder_id);
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_filing_jurisdiction IS NOT NULL) THEN
            l_rulv_rec.rule_information5         := p_filing_jurisdiction;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_filing_sub_jurisdiction IS NOT NULL) THEN
            l_rulv_rec.rule_information6         := p_filing_sub_jurisdiction;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_lien_expiration_date IS NOT NULL) THEN
            l_rulv_rec.rule_information7         := TO_CHAR(p_lien_expiration_date);
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

         END IF;

         IF (p_lien_continuation_number IS NOT NULL) THEN
            l_rulv_rec.rule_information8         := p_lien_continuation_number;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_lien_continuation_date IS NOT NULL) THEN
            l_rulv_rec.rule_information9         := TO_CHAR(p_lien_continuation_date);
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLLN';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.3';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;
         IF (p_title_type IS NOT NULL) THEN

            l_rulv_rec.rule_information1         := p_title_type;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLTL';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_title_issuer_id IS NOT NULL
             OR
             p_title_issuer_number IS NOT NULL) THEN
            get_party_id(
                         x_return_status     => x_return_status,
                         x_msg_count         => x_msg_count,
                         x_msg_data          => x_msg_data,
                         p_contract_number   => p_contract_number,
                         p_line_number       => p_line_number,
                         p_party_id          => p_title_issuer_id,
                         p_party_number      => p_title_issuer_number,
                         x_party_id          => x_title_issuer_id
                        );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE line_rule_failed;
            END IF;
         END IF;

         IF (x_title_issuer_id IS NOT NULL) THEN
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.jtot_object1_code         := 'OKX_PARTY';
            l_rulv_rec.object1_id1               := TO_CHAR(x_title_issuer_id);
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rule_information_category := 'LAFLTL';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_title_date IS NOT NULL) THEN
            l_rulv_rec.rule_information2         := TO_CHAR(p_title_date);
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLTL';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_title_number IS NOT NULL) THEN
            l_rulv_rec.rule_information3         := p_title_number;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLTL';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_registration_number IS NOT NULL) THEN
            l_rulv_rec.rule_information4         := p_registration_number;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLTL';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_asset_registration_loc_name IS NOT NULL) THEN
            l_rulv_rec.rule_information5         := p_asset_registration_loc_name;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLTL';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         -- Title_Custodian ???

         IF (p_payee_site_name IS NOT NULL) THEN
            l_rulv_rec.rule_information6         := p_payee_site_name;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFLTL';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.4';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; -- line type

/* taken care in process_party_role, 07/15/2002
      IF (p_line_type = 'SERVICE'
          OR
          p_line_type = 'FEE') THEN

         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAPSTH';
         l_rgpv_rec.chr_id     := NULL;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := p_cle_id;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec            := NULL;

         IF (p_passthrough_percent IS NOT NULL) THEN
            l_rulv_rec.rule_information1         := p_passthrough_percent;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTPR';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.5';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec            := NULL;
         IF (p_passthrough_basis_code IS NOT NULL) THEN
            l_rulv_rec.rule_information1         := p_passthrough_basis_code;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTBC';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.6';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

*/

/* Do not use it
         IF (p_payment_term IS NOT NULL
             OR
             p_payment_term_id IS NOT NULL) THEN

             l_payment_term_id := get_payment_term(
                                                   x_return_status   => x_return_status,
                                                   p_contract_number => p_contract_number,
                                                   p_line_number     => p_line_number,
                                                   p_payment_term    => p_payment_term,
                                                   p_payment_term_id => p_payment_term_id
                                                  );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                raise line_rule_failed;
             END IF;

             l_rulv_rec                           := NULL;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.jtot_object1_code         := 'OKX_PPAYTERM';
             l_rulv_rec.object1_id1               := TO_CHAR(l_payment_term_id);
             l_rulv_rec.object1_id2               := '#';
             l_rulv_rec.rule_information_category := 'PTR';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

             create_rule_group_and_rule(
                                         x_return_status => x_return_status,
                                         x_msg_count     => x_msg_count,
                                         x_msg_data      => x_msg_data,
                                         p_rgp_id        => l_rgp_id,
                                         p_rgpv_rec      => l_rgpv_rec,
                                         p_rulv_rec      => l_rulv_rec,
                                         x_rgpv_rec      => x_rgpv_rec,
                                         x_rulv_rec      => x_rulv_rec
                                        );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 raise line_rule_failed;
             END IF;

             IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
                l_rgp_id := x_rgpv_rec.id;
             END IF;
         END IF;

         IF (p_vendor_paysite_id IS NOT NULL
             OR
             p_vendor_paysite_name IS NOT NULL) THEN

             l_vendor_paysite_id := get_vendor_paysite(
                                                   x_return_status       => x_return_status,
                                                   p_contract_number     => p_contract_number,
                                                   p_line_number         => p_line_number,
                                                   p_vendor_paysite_name => p_vendor_paysite_name,
                                                   p_vendor_paysite_id   => p_vendor_paysite_id
                                                  );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                raise line_rule_failed;
             END IF;

             l_rulv_rec                           := NULL;
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.jtot_object1_code         := 'OKX_PAYTO';
             l_rulv_rec.object1_id1               := TO_CHAR(l_vendor_paysite_id);
             l_rulv_rec.object1_id2               := '#';
             l_rulv_rec.rule_information_category := 'PTO';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

             create_rule_group_and_rule(
                                         x_return_status => x_return_status,
                                         x_msg_count     => x_msg_count,
                                         x_msg_data      => x_msg_data,
                                         p_rgp_id        => l_rgp_id,
                                         p_rgpv_rec      => l_rgpv_rec,
                                         p_rulv_rec      => l_rulv_rec,
                                         x_rgpv_rec      => x_rgpv_rec,
                                         x_rulv_rec      => x_rulv_rec
                                        );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 raise line_rule_failed;
             END IF;

             IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
                l_rgp_id := x_rgpv_rec.id;
             END IF;
         END IF;
     END IF; -- line type
*/

     IF (p_line_type = 'SERVICE'
         AND
         p_fee_code IS NOT NULL) THEN

         check_stream_type_code(
	                        x_return_status    => x_return_status,
	                        x_msg_count        => x_msg_count,
	                        x_msg_data         => x_msg_data,
	                        p_stream_type_code => p_fee_code,
                                p_stream_purpose   => p_stream_purpose,
	                        x_id1              => x_stream_id,
                                x_name             => l_service_name
	                       );
         l_progress := '1.61';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||p_line_number,
                                'COL_NAME',
                                'FEE_CODE, STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                p_fee_code||', '||p_stream_purpose
                              );

             raise line_rule_failed;
         END IF;

         --
         -- UDS 10/27
         -- Check whether the stream is present in template for this contract
         --
         l_present_yn := '?';
         l_present_yn := OKL_STREAMS_UTIL.strm_tmpt_contains_strm_type
                                   (p_khr_id  => p_chr_id,
                                    p_sty_id  => x_stream_id
                                   );

         IF (l_present_yn <> 'Y') THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_NO_STRM_TMPL,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||p_line_number,
                                'COL_NAME',
                                'FEE_CODE, STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                p_fee_code||', '||p_stream_purpose
                              );

             raise line_rule_failed;

         END IF;

         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.jtot_object1_code         := 'OKL_STRMTYP';
         l_rulv_rec.object1_id1               := TO_CHAR(x_stream_id);
         l_rulv_rec.object1_id2               := '#';
         l_rulv_rec.rule_information_category := 'LASTRM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.7';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

     END IF;

     IF (p_line_type = 'USAGE') THEN

         -- NPR is not supported on 11.5.9
         IF (p_usage_type_code = 'NPR') THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_UNSUPPORTED_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||p_line_number,
                                'USAGE_TYPE',
                                p_usage_type_code
                               );
            RAISE line_rule_failed;
         END IF;

         l_ok := '?';
         OPEN usage_type_csr (p_usage_type_code);
         FETCH usage_type_csr INTO l_ok;
         CLOSE usage_type_csr;

         IF (l_ok <> 'Y') THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'COL_NAME',
                                'USAGE_TYPE',
                                'COL_VALUE',
                                p_usage_type_code
                               );
            RAISE line_rule_failed;
         END IF;

         IF (p_usage_type_code IN ('VRT', 'QTY')
             AND
             (p_default_qty_usage IS NULL
              OR
              p_base_reading IS NULL)) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_QA_USAGE_CHECK,
                                'LINE_NUM',
                                p_line_number,
                                'USAGE_TYPE',
                                p_usage_type_code
                               );
            RAISE line_rule_failed;
         END IF;

         IF (p_usage_type_code = 'FRT'
             AND
             p_fixed_usage_quantity IS NULL) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_QA_FIXED_USAGE,
                                'LINE_NUM',
                                p_line_number,
                                'USAGE_TYPE',
                                p_usage_type_code
                               );
            RAISE line_rule_failed;
         END IF;

         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAUSBB';
         l_rgpv_rec.chr_id     := NULL;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := p_cle_id;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec            := NULL;

         IF (p_usage_item_name IS NOT NULL
             OR
             p_usage_item_id IS NOT NULL) THEN

            get_usage_item_id(
                              x_return_status   => x_return_status,
                              p_usage_item_name => p_usage_item_name,
                              p_usage_item_id   => p_usage_item_id,
                              p_org_id          => p_inv_org_id,
                              x_usage_item_id   => x_usage_item_id,
                              x_usage_id2       => x_usage_id2
                             );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               okl_api.set_message(
                                   G_APP_NAME,
                                   G_INVALID_VALUE,
                                   'CONTRACT_NUM',
                                   p_contract_number,
                                   'COL_NAME',
                                   'USAGE_ITEM_NAME, ID',
                                   'COL_VALUE',
                                   p_usage_item_name||', '||p_usage_item_id
                                  );
               RAISE line_rule_failed;
            END IF;

            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.jtot_object1_code         := 'OKX_USAGE';
            l_rulv_rec.object1_id1               := TO_CHAR(x_usage_item_id);
            l_rulv_rec.object1_id2               := TO_CHAR(x_usage_id2);
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF; -- usage_item

         IF (p_price_list_name IS NOT NULL
             OR
             p_price_list_id IS NOT NULL) THEN

            get_price_list_id(
                              x_return_status   => x_return_status,
                              p_price_list_name => p_price_list_name,
                              p_price_list_id   => p_price_list_id,
                              x_price_list_id   => x_price_list_id
                             );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               okl_api.set_message(
                                   G_APP_NAME,
                                   G_INVALID_VALUE,
                                   'CONTRACT_NUM',
                                   p_contract_number,
                                   'COL_NAME',
                                   'PRICE_LIST_NAME, ID',
                                   'COL_VALUE',
                                   p_price_list_name||', '||p_price_list_id
                                  );
               RAISE line_rule_failed;
            END IF;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.jtot_object2_code         := 'OKX_PRICE';
            l_rulv_rec.object2_id1               := TO_CHAR(x_price_list_id);
            l_rulv_rec.object2_id2               := '#';
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_minimum_qty_usage IS NOT NULL) THEN

            l_rulv_rec.rule_information1         := TO_CHAR(p_minimum_qty_usage);
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_default_qty_usage IS NOT NULL) THEN

            l_rulv_rec.rule_information2         := TO_CHAR(p_default_qty_usage);
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_amcv_flag IS NOT NULL) THEN

            l_rulv_rec.rule_information3         := p_amcv_flag;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_level_flag IS NOT NULL) THEN

            l_rulv_rec.rule_information4         := p_level_flag;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_base_reading IS NOT NULL) THEN

            l_rulv_rec.rule_information5         := TO_CHAR(p_base_reading);
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_base_reading_uom_code IS NOT NULL) THEN

            get_base_uom_id(
                            x_return_status => x_return_status,
                            p_base_uom_code => p_base_reading_uom_code,
                            x_base_uom_id   => x_base_uom_id
                           );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               okl_api.set_message(
                                   G_APP_NAME,
                                   G_INVALID_VALUE,
                                   'CONTRACT_NUM',
                                   p_contract_number,
                                   'COL_NAME',
                                   'BASE_READING_UOM_CODE',
                                   'COL_VALUE',
                                   p_base_reading_uom_code
                                  );
               RAISE line_rule_failed;
            END IF;

            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.jtot_object3_code         := 'OKX_TUOM';
            l_rulv_rec.object3_id1               := x_base_uom_id;
            l_rulv_rec.object3_id2               := '#';
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_usage_type_code IS NOT NULL) THEN

            l_rulv_rec.rule_information6         := p_usage_type_code;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_fixed_usage_quantity IS NOT NULL) THEN

            l_rulv_rec.rule_information7         := p_fixed_usage_quantity;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_usage_period IS NOT NULL) THEN

            validate_usage_freq(
                                x_return_status   => x_return_status,
                                x_msg_count       => x_msg_count,
                                x_msg_data        => x_msg_data,
                                p_freq            => p_usage_period,
                                p_contract_number => p_contract_number,
                                p_line_number     => p_line_number
                               );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                raise line_rule_failed;
            END IF;

            l_rulv_rec.rule_information8         := p_usage_period;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_usage_no_of_period IS NOT NULL) THEN

            l_rulv_rec.rule_information9         := p_usage_no_of_period;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAUSBB';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.8';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

     END IF; -- line type USAGE

     IF (p_line_type IN ('SERVICE', 'FEE')) THEN
        -- Add new rules, RECURRING EXP

        IF (p_fee_no_of_period IS NOT NULL
            AND
            p_fee_frequency IS NOT NULL
            AND
            p_fee_amount_per_period IS NOT NULL) THEN

           okl_contract_top_line_pub.validate_fee_expense_rule(
                                                            p_api_version         => 1.0,
                                                            p_init_msg_list       => OKL_API.G_FALSE,
                                                            x_return_status       => x_return_status,
                                                            x_msg_count           => x_msg_count,
                                                            x_msg_data            => x_msg_data,
                                                            p_chr_id              => p_chr_id,
                                                            p_line_id             => p_cle_id,
                                                            p_no_of_period        => p_fee_no_of_period,
                                                            p_frequency           => p_fee_frequency,
                                                            p_amount_per_period   => p_fee_amount_per_period
                                                           );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE line_rule_failed;
            END IF;

         END IF;

         l_rulv_rec := NULL;

         -- Rule Group LAFEXP
         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAFEXP';
         l_rgpv_rec.chr_id     := NULL;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := p_cle_id;
         l_rgpv_rec.rgp_type   := 'KRG';

         IF (p_fee_no_of_period IS NOT NULL) THEN

            l_rulv_rec.rule_information1         := p_fee_no_of_period;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFEXP';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;
/*
         IF (p_fee_frequency IS NOT NULL) THEN

            OPEN freq_csr (p_fee_frequency);
            FETCH freq_csr INTO l_freq_id;
            CLOSE freq_csr;

            l_rulv_rec.jtot_object1_code         := 'OKL_TUOM';
            l_rulv_rec.object1_id1               := l_freq_id;
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFEXP';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;
*/

         IF (p_fee_amount_per_period IS NOT NULL) THEN

            l_rulv_rec.rule_information2         := p_fee_amount_per_period;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFEXP';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );
         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         IF (p_fee_frequency IS NOT NULL) THEN

            OPEN freq_csr (p_fee_frequency);
            FETCH freq_csr INTO l_freq_id;
            CLOSE freq_csr;

            l_rulv_rec := NULL;

            l_rulv_rec.jtot_object1_code         := 'OKL_TUOM';
            l_rulv_rec.object1_id1               := l_freq_id;
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAFREQ';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

            create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );
            l_progress := '1.2';
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                raise line_rule_failed;
            END IF;

            IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
               l_rgp_id := x_rgpv_rec.id;
            END IF;
         END IF;

     END IF;

/*
     IF (p_line_type = 'ASSET') THEN
         -- Rule Group LAHDTX

         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAHDTX';
         l_rgpv_rec.chr_id     := NULL;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := p_cle_id;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec := NULL;

         IF (p_prop_tax_applicable IS NOT NULL) THEN
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information1         := p_prop_tax_applicable;
            l_rulv_rec.rule_information_category := 'LAPRTX';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_prop_tax_lease_rep IS NOT NULL) THEN
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information2         := p_prop_tax_lease_rep;
            l_rulv_rec.rule_information_category := 'LAPRTX';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise line_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;

     END IF;
*/

     RETURN;

   EXCEPTION

     WHEN line_rule_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         debug_message('Line rule failed : '||l_progress);

      WHEN OTHERS THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;
        debug_message('line other : '||l_progress);

   END create_line_rules;

------------------------------------------------------------------------------
-- FUNCTION get_lien_holder
-- It returns lien_holder_id from name and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   FUNCTION get_lien_holder(
                x_return_status    OUT NOCOPY VARCHAR2,
                p_lien_holder_name IN  okl_header_interface.lien_holder_name%TYPE,
                p_lien_holder_id   IN  okl_header_interface.lien_holder_id%TYPE
               )
   RETURN VARCHAR2 IS
   CURSOR lien_csr (p_id   NUMBER,
                    p_name VARCHAR2) IS
   SELECT id1
   FROM   okx_parties_v
   WHERE  ((name = p_name
            AND
            p_name IS NOT NULL)
            OR
            (id1  = p_id
             AND
             p_id IS NOT NULL
            )
           );

   l_id   NUMBER;
   BEGIN
     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN lien_csr (p_lien_holder_id,
                    p_lien_holder_name);
     FETCH lien_csr INTO l_id;
     IF lien_csr%NOTFOUND THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        RETURN NULL;
     END IF;

     CLOSE lien_csr;
     RETURN TO_CHAR(l_id);

   END get_lien_holder;

------------------------------------------------------------------------------
-- FUNCTION get_late_policy_id
-- It returns late_policy_id for corresponding policy_code
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   FUNCTION get_late_policy_id(
                   x_return_status    OUT NOCOPY VARCHAR2,
                   p_late_policy_code IN  okl_header_interface.late_charge_product_code%TYPE,
                   p_org_id           IN  NUMBER,
                   p_late_policy_type IN  VARCHAR2
                  )
   RETURN VARCHAR2 IS
   CURSOR policy_csr (p_policy_code VARCHAR2,
                      p_org_id      NUMBER,
                      p_policy_type VARCHAR2) IS
   SELECT id
   FROM   okl_late_policies_v
   WHERE  name = p_policy_code
   AND    org_id = p_org_id
   AND    ( late_policy_type_code = 'LCT'
            OR
            late_policy_type_code = p_policy_type );

   l_id   NUMBER;
   BEGIN
     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN policy_csr (p_late_policy_code,
                      p_org_id,
                      p_late_policy_type
                     );
     FETCH policy_csr INTO l_id;
     IF policy_csr%NOTFOUND THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        RETURN NULL;
     END IF;

     CLOSE policy_csr;
     RETURN TO_CHAR(l_id);

   END get_late_policy_id;

------------------------------------------------------------------------------
-- PROCEDURE get_cash_appl_rule_id
-- It validates and get cash application rule ID from rule name
-- Calls:
-- Called By:
--   create_header_rule
------------------------------------------------------------------------------
   PROCEDURE get_cash_appl_rule_id (
                                    x_return_status           OUT NOCOPY VARCHAR2,
                                    x_msg_count               OUT NOCOPY NUMBER,
                                    x_msg_data                OUT NOCOPY VARCHAR2,
                                    p_contract_number         IN  OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                                    p_org_id                  IN  OKC_K_HEADERS_V.AUTHORING_ORG_ID%TYPE,
                                    p_cash_appl_rule_name     IN  OKL_HEADER_INTERFACE.CASH_APPL_RULE_NAME%TYPE,
                                    x_cash_appl_rule_id       OUT NOCOPY OKL_BPD_ACTIVE_CSH_RLS_V.ID1%TYPE
                                   ) IS

   cursor cash_csr (p_rule_name VARCHAR2,
                    p_org_id    NUMBER) IS
   SELECT id1
   FROM   okl_bpd_active_csh_rls_v
   WHERE  name           = p_rule_name
   AND    org_id         = p_org_id
   AND    TRUNC(SYSDATE) BETWEEN NVL(TRUNC(START_DATE),TRUNC(SYSDATE)) AND
                                 NVL(TRUNC(END_DATE),TRUNC(SYSDATE));
   cash_failed EXCEPTION;
   l_proc_name VARCHAR2(35) := 'GET_CASH_APPL_RULE_ID';

   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);

     OPEN cash_csr (p_cash_appl_rule_name,
                    p_org_id);
     FETCH cash_csr INTO x_cash_appl_rule_id;
     IF cash_csr%NOTFOUND THEN
        RAISE cash_failed;
     END IF;
     CLOSE cash_csr;

   EXCEPTION
      WHEN cash_failed THEN

        IF (cash_csr%ISOPEN) THEN
          CLOSE cash_csr;
        END IF;

        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'CASH_APPL_RULE_NAME',
                            'COL_VALUE',
                            p_cash_appl_rule_name
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN

        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;
   END get_cash_appl_rule_id;

function get_formula_id(p_name IN VARCHAR2,
                        x_return_status OUT NOCOPY VARCHAR2) RETURN NUMBER IS
l_formula_id number := 0;
begin
  x_return_status := OKC_API.G_RET_STS_SUCCESS;
  select id
  INTO   l_formula_id
  FROM   OKL_FORMULAE_B
  WHERE  NAME = p_name;

  return(l_formula_id);
  EXCEPTION WHEN OTHERS THEN
    x_return_status := OKC_API.G_RET_STS_ERROR;
    return(l_formula_id); -- 5024651
end;

------------------------------------------------------------------------------
-- PROCEDURE create_header_rules
-- It creates rules for header record and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--   get_customer_account_id
--   get_bill_to_address_id
--   get_bank_account_id
--   get_invoice_format_id
--   get_payment_method_id
-- Called By:
--   load_input_record
------------------------------------------------------------------------------
   PROCEDURE create_header_rules(
                                x_return_status              OUT NOCOPY VARCHAR2,
                                x_msg_count                  OUT NOCOPY NUMBER,
                                x_msg_data                   OUT NOCOPY VARCHAR2,
                                p_chr_id                     IN  OKC_K_HEADERS_V.ID%TYPE,
                                p_template_id                IN  OKC_K_HEADERS_V.ID%TYPE,
                                p_header_rec                 IN  intf_h_rec_type
                               ) IS

   header_rule_failed    EXCEPTION;
   l_proc_name           VARCHAR2(35) := 'CREATE_HEADER_RULES';

   x_customer_account_id OKX_CUSTOMER_ACCOUNTS_V.ID1%TYPE;
   x_bill_to_address_id  OKX_CUST_SITE_USES_V.ID1%TYPE;
   x_bank_account_id     OKX_RCPT_METHOD_ACCOUNTS_V.ID1%TYPE;
   x_invoice_format_id   OKL_INVOICE_FORMATS_V.ID%TYPE;
   x_payment_method_id   OKX_RECEIPT_METHODS_V.ID1%TYPE;
   x_invoice_format_name okl_invoice_formats_v.name%TYPE;
   x_index_id            okl_indices.id%TYPE;

   l_rgd_code            OKC_RULE_GROUPS_V.RGD_CODE%TYPE;
   l_rgp_type            OKC_RULE_GROUPS_V.RGP_TYPE%TYPE;

   l_chr_id              OKC_RULE_GROUPS_V.CHR_ID%TYPE;
   l_dnz_chr_id          OKC_RULE_GROUPS_V.DNZ_CHR_ID%TYPE;
   l_cle_id              OKC_RULE_GROUPS_V.CLE_ID%TYPE;
   l_rgp_id              OKC_RULE_GROUPS_V.ID%TYPE;
   l_jtot_object1_code   OKC_RULES_V.JTOT_OBJECT1_CODE%TYPE;
   l_object1_id1         OKC_RULES_V.OBJECT1_ID1%TYPE;
   l_rule_info1          OKC_RULES_V.RULE_INFORMATION1%TYPE;
   l_rule_info2          OKC_RULES_V.RULE_INFORMATION2%TYPE;
   l_rule_info_catg      OKC_RULES_V.RULE_INFORMATION_CATEGORY%TYPE;
   --l_rgp_id              NUMBER;

   -- Rule Rec
   x_rgpv_rec         rgpv_rec_type;
   l_rgpv_rec         rgpv_rec_type;

   l_rulv_rec         rulv_rec_type;
   x_rulv_rec         rulv_rec_type;

   l_rule_count       NUMBER := 0;
   l_rulv_tbl         rulv_tbl_type;

   CURSOR temp_role_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE) IS
 --Fixed # Bug 5484903
  SELECT object1_id1
   FROM   okc_k_party_roles_b
   WHERE  dnz_chr_id            = p_chr_id
   AND    chr_id                = dnz_chr_id
   AND    jtot_object1_code = 'OKX_PARTY'
   AND    rle_code          = 'LESSEE';

   l_customer_id NUMBER;

   l_rebook_limit_date VARCHAR2(100);
   l_security_deposit_hold_flag  VARCHAR2(450); -- same as rule segment datatype
   l_security_deposit_net_flag   VARCHAR2(450);
   l_security_deposit_date       VARCHAR2(450);
   l_renewal_notice_days         VARCHAR2(450);
   l_renewal_option              VARCHAR2(450);
   l_renewal_amount              VARCHAR2(450);
   l_late_interest_held_date     VARCHAR2(450);
   l_late_interest_exempt_flag   VARCHAR2(450);
   l_late_int_product_code       VARCHAR2(450);
   l_late_int_product_id         VARCHAR2(450);
   l_late_charge_held_until_date VARCHAR2(450);
   l_late_charge_product_code    VARCHAR2(450);
   l_late_charge_product_id      VARCHAR2(450);
   l_late_charge_exempt_flag     VARCHAR2(450);
   l_variable_rate               VARCHAR2(450);
   l_convert_type                VARCHAR2(450);
   l_conversion_method           VARCHAR2(450);
   l_date_of_conversion          VARCHAR2(450);
   l_convert_by_date             VARCHAR2(450);
   l_variable_method             VARCHAR2(450);
   l_index_name                  VARCHAR2(450);
   l_index_id                    VARCHAR2(450);
   l_base_rate                   VARCHAR2(450);
   l_adder                       VARCHAR2(450);
   l_minimum_rate                VARCHAR2(450);
   l_maximum_rate                VARCHAR2(450);
   l_tolerance                   VARCHAR2(450);
   l_adjustment_frequency        VARCHAR2(450);
   l_days_in_year                VARCHAR2(450);
   l_days_in_month               VARCHAR2(450);
   l_interest_method             VARCHAR2(450);
   l_interest_start_date         VARCHAR2(450);
   l_method_of_calculation       VARCHAR2(450);
   l_formula_name                VARCHAR2(450);
   l_factoring_date              VARCHAR2(450);
   l_factoring_percentage        VARCHAR2(450);
   l_factoring_discount_rate     VARCHAR2(450);
   l_evergreen_eligible_flag     VARCHAR2(450);
   l_bill_to_address_id          VARCHAR2(450);
   l_bill_to_address             VARCHAR2(450);
   l_reason_for_invoice_review   VARCHAR2(450);
   l_invoice_review_until_date   VARCHAR2(450);
   l_review_invoice_flag         VARCHAR2(450);
   l_print_lead_days             VARCHAR2(450);--hariven bug 5359935
   l_capitalize_flag             VARCHAR2(450);
   l_non_notification_flag       VARCHAR2(450);
   l_rvi_rate                    VARCHAR2(450);
   l_rvi_auto_calculate_flag     VARCHAR2(450);
   l_tax_withholding_flag        VARCHAR2(450);
   l_tax_calc_formula_name       VARCHAR2(450);
   l_tax_owner                   VARCHAR2(450);
   l_private_activity_bond_flag  VARCHAR2(450);
   l_floor_price_formula         VARCHAR2(450);
   l_remkt_sale_price_formula    VARCHAR2(450);
   l_repurchase_quote_option     VARCHAR2(450);
   l_repurchase_quote_formula    VARCHAR2(450);
   l_sale_price_option           VARCHAR2(450);
   l_sale_price_amount           VARCHAR2(450);
   l_sale_price_formula          VARCHAR2(450);
   l_sale_price_prorate          VARCHAR2(450);
   l_discount_rate_option        VARCHAR2(450);
   l_discount_rate_amount        VARCHAR2(450);
   l_discount_rate_formula       VARCHAR2(450);
   l_discount_rate_prorate       VARCHAR2(450);
   l_quote_fee_option            VARCHAR2(450);
   l_quote_fee_amount            VARCHAR2(450);
   l_quote_fee_formula           VARCHAR2(450);
   l_quote_fee_prorate           VARCHAR2(450);
   l_ert_purchase_opt            VARCHAR2(450);
   l_ert_purchase_opt_type       VARCHAR2(450);
   l_ert_purchase_opt_amount     VARCHAR2(450);
   l_ert_purchase_opt_formula    VARCHAR2(450);
   l_ert_purchase_opt_prorate    VARCHAR2(450);
   l_ert_purchase_opt_max_opt    VARCHAR2(450);
   l_ert_purchase_opt_max_amt    VARCHAR2(450);
   l_ert_purchase_opt_max_formula VARCHAR2(450);
   l_ert_purchase_opt_min_opt    VARCHAR2(450);
   l_ert_purchase_opt_min_amt    VARCHAR2(450);
   l_ert_purchase_opt_min_formula VARCHAR2(450);
   l_eot_purchase_opt            VARCHAR2(450);
   l_eot_purchase_opt_type       VARCHAR2(450);
   l_eot_purchase_opt_amount     VARCHAR2(450);
   l_eot_purchase_opt_formula    VARCHAR2(450);
   l_eot_purchase_opt_prorate    VARCHAR2(450);
   l_eot_purchase_opt_max_opt    VARCHAR2(450);
   l_eot_purchase_opt_max_amt    VARCHAR2(450);
   l_eot_purchase_opt_max_formula VARCHAR2(450);
   l_eot_purchase_opt_min_opt    VARCHAR2(450);
   l_eot_purchase_opt_min_amt    VARCHAR2(450);
   l_eot_purchase_opt_min_formula VARCHAR2(450);
   l_tqp_erl_term_alwd_flag       VARCHAR2(450);
   l_tqp_prt_term_alwd_flag       VARCHAR2(450);
   l_quote_effective_days          VARCHAR2(450);
   l_quote_eff_max_days            VARCHAR2(450);
   l_eot_tolerance_days            VARCHAR2(450);
   l_prt_termination_approval_req  VARCHAR2(450);
   l_prt_termination_allowed_flag  VARCHAR2(450);
   l_gain_loss_approval_req        VARCHAR2(450);
   l_gain_loss_net_quote_opt       VARCHAR2(450);
   l_gain_loss_net_quote_amt       VARCHAR2(450);
   l_gain_loss_net_quote_formula   VARCHAR2(450);
   l_gain_loss_tolrn_allwd         VARCHAR2(450);
   l_quote_approver_contract_role  VARCHAR2(450);
   l_quote_rcpt_contract_role      VARCHAR2(450);
   l_quote_crtsy_cp_cntrc_role     VARCHAR2(450);
   l_ert_quote_calc_term_option    VARCHAR2(450);
   l_ert_quote_calc_term_formula   VARCHAR2(450);
   l_ert_contract_oblig_opt        VARCHAR2(450);
   l_ert_contract_oblig_amount     VARCHAR2(450);
   l_ert_contract_oblig_formula    VARCHAR2(450);
   l_ert_contract_oblig_prorate    VARCHAR2(450);
   l_ert_disc_rate_opt             VARCHAR2(450);
   l_ert_disc_rate_amount          VARCHAR2(450);
   l_ert_disc_rate_formula         VARCHAR2(450);
   l_ert_disc_rate_prorate         VARCHAR2(450);
   l_ert_quote_fee_opt             VARCHAR2(450);
   l_ert_quote_fee_amount          VARCHAR2(450);
   l_ert_quote_fee_formula         VARCHAR2(450);
   l_ert_quote_fee_prorate         VARCHAR2(450);
   l_ert_return_fee_option         VARCHAR2(450);
   l_ert_return_fee_amount         VARCHAR2(450);
   l_ert_return_fee_formula        VARCHAR2(450);
   l_ert_return_fee_prorate        VARCHAR2(450);
   l_ert_roll_inctv_option         VARCHAR2(450);
   l_ert_roll_inctv_amount         VARCHAR2(450);
   l_ert_roll_inctv_formula        VARCHAR2(450);
   l_ert_roll_inctv_prorate        VARCHAR2(450);
   l_ert_secu_dep_dispo_option     VARCHAR2(450);
   l_ert_secu_dep_dispo_amount     VARCHAR2(450);
   l_ert_secu_dep_dispo_formula    VARCHAR2(450);
   l_ert_secu_dep_dispo_prorate    VARCHAR2(450);
   l_ert_term_penalty_option       VARCHAR2(450);
   l_ert_term_penalty_amount       VARCHAR2(450);
   l_ert_term_penalty_formula      VARCHAR2(450);
   l_ert_term_penalty_prorate      VARCHAR2(450);
   l_ert_term_penalty_cap_option   VARCHAR2(450);
   l_ert_term_penalty_cap_amount   VARCHAR2(450);
   l_ert_term_penalty_cap_formula  VARCHAR2(450);
   l_ert_est_prop_tax_option       VARCHAR2(450);
   l_ert_est_prop_tax_amount       VARCHAR2(450);
   l_ert_est_prop_tax_formula      VARCHAR2(450);
   l_ert_est_prop_tax_prorate      VARCHAR2(450);
   l_ert_contr_fees_option         VARCHAR2(450);
   l_ert_outstnd_bal_option        VARCHAR2(450);
   l_ert_serv_mant_option          VARCHAR2(450);
   l_eot_quote_calc_term_option    VARCHAR2(450);
   l_eot_quote_calc_term_formula   VARCHAR2(450);
   l_eot_contract_oblig_opt        VARCHAR2(450);
   l_eot_contract_oblig_amount     VARCHAR2(450);
   l_eot_contract_oblig_formula    VARCHAR2(450);
   l_eot_contract_oblig_prorate    VARCHAR2(450);
   l_eot_disc_rate_opt             VARCHAR2(450);
   l_eot_disc_rate_amount          VARCHAR2(450);
   l_eot_disc_rate_formula         VARCHAR2(450);
   l_eot_disc_rate_prorate         VARCHAR2(450);
   l_eot_quote_fee_opt             VARCHAR2(450);
   l_eot_quote_fee_amount          VARCHAR2(450);
   l_eot_quote_fee_formula         VARCHAR2(450);
   l_eot_quote_fee_prorate         VARCHAR2(450);
   l_eot_return_fee_option         VARCHAR2(450);
   l_eot_return_fee_amount         VARCHAR2(450);
   l_eot_return_fee_formula        VARCHAR2(450);
   l_eot_return_fee_prorate        VARCHAR2(450);
   l_eot_roll_inctv_option         VARCHAR2(450);
   l_eot_roll_inctv_amount         VARCHAR2(450);
   l_eot_roll_inctv_formula        VARCHAR2(450);
   l_eot_roll_inctv_prorate        VARCHAR2(450);
   l_eot_secu_dep_dispo_option     VARCHAR2(450);
   l_eot_secu_dep_dispo_amount     VARCHAR2(450);
   l_eot_secu_dep_dispo_formula    VARCHAR2(450);
   l_eot_secu_dep_dispo_prorate    VARCHAR2(450);
   l_eot_term_penalty_option       VARCHAR2(450);
   l_eot_term_penalty_amount       VARCHAR2(450);
   l_eot_term_penalty_formula      VARCHAR2(450);
   l_eot_term_penalty_prorate      VARCHAR2(450);
   l_eot_term_penalty_cap_option   VARCHAR2(450);
   l_eot_term_penalty_cap_amount   VARCHAR2(450);
   l_eot_term_penalty_cap_formula  VARCHAR2(450);
   l_eot_est_prop_tax_option       VARCHAR2(450);
   l_eot_est_prop_tax_amount       VARCHAR2(450);
   l_eot_est_prop_tax_formula      VARCHAR2(450);
   l_eot_est_prop_tax_prorate      VARCHAR2(450);
   l_eot_contr_fees_option         VARCHAR2(450);
   l_eot_outstnd_bal_option        VARCHAR2(450);
   l_eot_serv_mant_option          VARCHAR2(450);
   l_evergreen_passthru_fees       VARCHAR2(450);
   l_evergreen_passthru_percent    VARCHAR2(450);
   l_lien_type                     VARCHAR2(450);
   l_filing_number                 VARCHAR2(450);
   l_filing_date                   VARCHAR2(450);
   l_filing_status                 VARCHAR2(450);
   l_lien_holder_name              VARCHAR2(450);
   l_lien_holder_id                VARCHAR2(450);
   l_jurisdiction                  VARCHAR2(450);
   l_sub_jurisdiction              VARCHAR2(450);
   l_lien_expiration_date          VARCHAR2(450);
   l_lien_continuation_number      VARCHAR2(450);
   l_lien_continuation_date        VARCHAR2(450);
   l_title_type                    VARCHAR2(450);
   l_title_issuer_name             VARCHAR2(450);
   l_title_issuer_id               VARCHAR2(450);
   x_title_issuer_id               NUMBER;
   l_title_date                    VARCHAR2(450);
   l_title_number                  VARCHAR2(450);
   l_registration_number           VARCHAR2(450);
   l_location                      VARCHAR2(450);
   l_title_custodian_name          VARCHAR2(450);
   l_title_custodian_id            VARCHAR2(450);
   x_title_custodian_id            NUMBER;
   l_payee_site                    VARCHAR2(450);
   l_registration_location         VARCHAR2(450);
   l_reg_expiration_date           VARCHAR2(450);
   l_prtfl_approval_req            VARCHAR2(450);
   l_prtfl_assgn_group             VARCHAR2(450);
   l_prtfl_budget_amt_opt          VARCHAR2(450);
   l_prtfl_budget_fixed_amt        VARCHAR2(450);
   l_prtfl_budget_amt_formula      VARCHAR2(450);
   l_prtfl_days_from_con_expr      VARCHAR2(450);
   l_prtfl_strategy                VARCHAR2(450);
   l_prop_tax_applicable           VARCHAR2(450);
   l_prop_tax_lease_rep            VARCHAR2(450);
   l_mex_tax_sub_basic_wthld       VARCHAR2(450);
   l_mex_tax_calc_formula          VARCHAR2(450);
   l_aus_tax_stamp_duty            VARCHAR2(450);

-- Added by rravikir (Fix for Bug 3947959)
   l_prop_tax_bill_method          VARCHAR2(35);
-- End

   -- AKP new rules added 4067094

   l_gain_loss_tolrnc_allwd_amt     NUMBER;
   l_gain_loss_tolrnc_allwd_frml    VARCHAR2(150);
   l_gain_loss_tolrnc_basis         VARCHAR2(30);
   l_gain_loss_apprv_proc_frml      VARCHAR2(150);
   l_ert_absorbed_fee_frml          VARCHAR2(150);
   l_ert_expense_fee_frml           VARCHAR2(150);
   l_ert_financed_fee_frml          VARCHAR2(150);
   l_ert_general_fee_frml           VARCHAR2(150);
   l_ert_income_fee_frml            VARCHAR2(150);
   l_ert_misc_fee_frml              VARCHAR2(150);
   l_ert_passthru_fee_frml          VARCHAR2(150);
   l_ert_rollover_fee_frml          VARCHAR2(150);
   l_eot_absorbed_fee_frml          VARCHAR2(150);
   l_eot_expense_fee_frml           VARCHAR2(150);
   l_eot_financed_fee_frml          VARCHAR2(150);
   l_eot_general_fee_frml           VARCHAR2(150);
   l_eot_income_fee_frml            VARCHAR2(150);
   l_eot_misc_fee_frml              VARCHAR2(150);
   l_eot_passthru_fee_frml          VARCHAR2(150);
   l_eot_rollover_fee_frml          VARCHAR2(150);

   -- AKP new rules added 4067094

   l_st_upd_lines_from_contract     VARCHAR2(450);
   l_st_interest_disclosed          VARCHAR2(450);
   l_st_transfer_of_title           VARCHAR2(450);
   l_st_sale_and_lease_back         VARCHAR2(450);
   l_st_purchase_of_lease           VARCHAR2(450);
   l_st_equipment_usage             VARCHAR2(450);
   l_st_equipment_age               VARCHAR2(450);
   l_st_asset_upfront_tax           VARCHAR2(450);
   l_st_bill_stream_type_code       VARCHAR2(450);
   l_st_bill_stream_purpose_code    VARCHAR2(450);
   l_st_fin_stream_type_code        VARCHAR2(450);
   l_st_fin_stream_purpose_code     VARCHAR2(450);
   l_st_cap_stream_type_code        VARCHAR2(450);
   l_st_cap_stream_purpose_code     VARCHAR2(450);
   l_st_bill_stream_id              NUMBER;
   l_st_fin_stream_id               NUMBER;
   l_st_cap_stream_id               NUMBER;

   l_st_tax_schedule_applies_flag   VARCHAR2(450); -- R12 ebTax change

   l_id1                            OKL_STRMTYP_SOURCE_V.id1%TYPE;
   l_st_stream_name                 OKL_STRMTYP_SOURCE_V.name%TYPE;
   l_send_bill_sale                 VARCHAR2(150);
   l_manual_quotes_only             VARCHAR2(150);
   l_first_termination_date         VARCHAR2(150);
   l_quote_rcpt_addl_rcpt_role      VARCHAR2(30);
   l_quote_rcpt_alloc_ptg           NUMBER;
   l_quote_apprvr_adv_notice_role   VARCHAR2(30);
   l_quote_approver_delay_days      NUMBER;
   l_ert_serv_mant_frml             VARCHAR2(150);
   l_eot_serv_mant_frml             VARCHAR2(150);



   x_cash_appl_rule_id             OKL_BPD_ACTIVE_CSH_RLS_V.ID1%TYPE;

   l_rate_counter NUMBER := 1;
   l_tmpl_rate_rec krpv_rec_type;
   l_k_rate_tbl    krpv_tbl_type;
   l_no_data       BOOLEAN := TRUE;
   x_krpv_rec      krpv_rec_type;
   l_formula_id    NUMBER;

   l_progress         VARCHAR2(5) := '1.0';

   -- Bug 4655611
   SUBTYPE fee_types_rec_type IS OKL_MAINTAIN_FEE_PVT.fee_types_rec_type;
   l_fee_types_rec fee_types_rec_type;
   x_fee_types_rec fee_types_rec_type;

   l_contract_number            okc_k_headers_b.contract_number%TYPE;
   l_contract_start_date        okc_k_headers_b.start_date%TYPE;
   l_rvi_stream_type_id         okl_strmtyp_source_v.id1%TYPE;

   CURSOR contract_csr (p_contract_id NUMBER) is
   SELECT contract_number, start_date
   FROM   okl_k_headers_full_v
   WHERE  id = p_contract_id;

   CURSOR rvi_stream_csr (p_sty_id number, p_contract_start_date date) IS
   SELECT 'Y'
   FROM   okl_stream_types_uv STL
   WHERE  STL.id = p_sty_id
   AND    STL.start_date <= p_contract_start_date
   AND   (STL.end_date >= p_contract_start_date OR STL.end_date IS NULL);

   l_yn                         VARCHAR2(1) := 'N';
   l_rvi_stream_code OKL_HEADER_INTERFACE.RVI_STREAM_CODE%TYPE;
   l_rvi_stream_purpose_code OKL_HEADER_INTERFACE.RVI_STREAM_PURPOSE_CODE%TYPE;
   l_rvi_stream_name OKL_STRMTYP_SOURCE_V.NAME%TYPE;

   -- Bug 4655611

   l_eot_auto_proc_purchase_opt VARCHAR2(1);

   --R12B eBTax
   CURSOR c_tax_schedule_yn IS
   SELECT tax_schedule_yn
   FROM   okl_system_params;

   l_tax_schedule_yn VARCHAR2(1);

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      --
      -- Always Create Re-leased asset rule
      -- with value = 'N'
      --
/* Created at line creation
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;

      l_rgpv_rec.rgd_code   := 'LARLES';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec                           := NULL;

      l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
      l_rulv_rec.dnz_chr_id                := p_chr_id;
      l_rulv_rec.rule_information_category := 'LARLES';
      l_rulv_rec.rule_information1         := 'N';
      l_rulv_rec.std_template_yn           := 'N';
      l_rulv_rec.warn_yn                   := 'N';

      create_rule_group_and_rule(
                              x_return_status => x_return_status,
                              x_msg_count     => x_msg_count,
                              x_msg_data      => x_msg_data,
                              p_rgp_id        => l_rgp_id,
                              p_rgpv_rec      => l_rgpv_rec,
                              p_rulv_rec      => l_rulv_rec,
                              x_rgpv_rec      => x_rgpv_rec,
                              x_rulv_rec      => x_rulv_rec
                             );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      debug_message('------>Rule: LARLES/LARLES processed');
*/

/* Rule Migration
      IF (p_header_rec.customer_account_id IS NOT NULL
          OR
          p_header_rec.customer_account_number IS NOT NULL ) THEN

          get_customer_account_id(
                                  x_return_status           => x_return_status,
                                  x_msg_count               => x_msg_count,
                                  x_msg_data                => x_msg_data,
                                  p_contract_number         => p_header_rec.contract_number,
                                  p_customer_id             => g_customer_id,
                                  p_customer_account_id     => p_header_rec.customer_account_id,
                                  p_customer_account_number => p_header_rec.customer_account_number,
                                  x_customer_account_id     => x_customer_account_id
                                 );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            raise header_rule_failed;
         END IF;

         g_customer_account_id := x_customer_account_id; -- Used to get Bill to address at Terms Interface
         l_progress := '1.1';
      ELSE
         IF (p_header_rec.template_number IS NOT NULL) THEN

            l_rule_count := 0;
            get_contract_rules(
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_chr_id         => p_template_id,
                               p_cle_id         => NULL,
                               p_rgd_code       => 'LACAN',
                               p_rule_code      => 'CAN',
                               x_rulv_tbl       => l_rulv_tbl,
                               x_rule_count     => l_rule_count
                              );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE header_rule_failed;
            END IF;

            IF (l_rule_count > 0) THEN
               x_customer_account_id := TO_NUMBER(l_rulv_tbl(1).object1_id1);
               g_customer_account_id := x_customer_account_id; -- Used to get Bill to address at Terms Interface

               get_customer_account_id(
                                  x_return_status           => x_return_status,
                                  x_msg_count               => x_msg_count,
                                  x_msg_data                => x_msg_data,
                                  p_contract_number         => p_header_rec.contract_number,
                                  p_customer_id             => g_customer_id,
                                  p_customer_account_id     => x_customer_account_id,
                                  p_customer_account_number => NULL,
                                  x_customer_account_id     => x_customer_account_id
                                 );
                IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                   x_return_status := OKL_API.G_RET_STS_ERROR;
                   raise header_rule_failed;
                END IF;

            END IF;

         END IF;

      END IF;

      IF (x_customer_account_id IS NOT NULL) THEN

         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;

         l_rgpv_rec.rgd_code   := 'LACAN';
         l_rgpv_rec.chr_id     := p_chr_id;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := NULL;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec                           := NULL;

         l_rulv_rec.object1_id1               := TO_CHAR(x_customer_account_id);
         l_rulv_rec.object1_id2               := '#';
         l_rulv_rec.jtot_object1_code         := 'OKX_CUSTACCT';
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information_category := 'CAN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.3';

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise header_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; -- x_customer_account_id

      debug_message('------>Rule: LACAN/CAN processed');
*/

      IF (p_header_rec.rebook_limit_date IS NULL) THEN
         IF (p_header_rec.template_number IS NOT NULL) THEN

            get_contract_rules(
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_chr_id         => p_template_id,
                               p_cle_id         => NULL,
                               p_rgd_code       => 'LAREBL',
                               p_rule_code      => 'LAREBL',
                               x_rulv_tbl       => l_rulv_tbl,
                               x_rule_count     => l_rule_count
                              );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE header_rule_failed;
            END IF;

            IF (l_rule_count > 0) THEN
               l_rebook_limit_date := l_rulv_tbl(1).rule_information1;
            END IF;
         END IF;
      ELSE
         l_rebook_limit_date := get_canonical_date(p_header_rec.rebook_limit_date);
      END IF;

      IF (l_rebook_limit_date IS NOT NULL) THEN

         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAREBL';
         l_rgpv_rec.chr_id     := p_chr_id;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := NULL;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec                           := NULL;

         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_rebook_limit_date;
         l_rulv_rec.rule_information_category := 'LAREBL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';


         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.5';

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise header_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; -- rebook limit

      debug_message('------>Rule: LAREBL/LAREBL processed');

/* Not used currently - 05/20/2002

      --Rule Group LATROP

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LATROP';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;
      IF (p_header_rec.end_of_term_option IS NOT NULL) THEN

         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := p_header_rec.end_of_term_option;
         l_rulv_rec.rule_information_category := 'LAEOTR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

      END IF;

      IF (p_header_rec.end_of_term_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := TO_CHAR(p_header_rec.end_of_term_amount);
         l_rulv_rec.rule_information_category := 'LAEOTR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.7';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      l_rulv_rec := NULL;

      IF (p_header_rec.mid_term_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := p_header_rec.mid_term_option;
         l_rulv_rec.rule_information_category := 'LAMITR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (p_header_rec.mid_term_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := TO_CHAR(p_header_rec.mid_term_amount);
         l_rulv_rec.rule_information_category := 'LAMITR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.8';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

--Not used currently - 05/20/2002
*/

      -- RUle Group LASDEP
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LASDEP';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;
      --l_rulv_tbl            := NULL;

      l_security_deposit_hold_flag := p_header_rec.security_deposit_hold_flag;
      l_security_deposit_net_flag  := p_header_rec.security_deposit_net_flag;
      l_security_deposit_date      := get_canonical_date(p_header_rec.security_deposit_date);

      IF (l_security_deposit_hold_flag IS NULL
          OR
          l_security_deposit_net_flag IS NULL
          OR
          l_security_deposit_date IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN

         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LASDEP',
                            p_rule_code      => 'LASDEP',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_security_deposit_hold_flag := NVL(l_security_deposit_hold_flag,l_rulv_tbl(1).rule_information2);
            l_security_deposit_net_flag  := NVL(l_security_deposit_net_flag,l_rulv_tbl(1).rule_information4);
            l_security_deposit_date      := NVL(l_security_deposit_date,l_rulv_tbl(1).rule_information5);
         END IF;
      END IF;

      IF (l_security_deposit_hold_flag IS NOT NULL ) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_security_deposit_hold_flag;
         l_rulv_rec.rule_information_category := 'LASDEP';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_security_deposit_net_flag IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_security_deposit_net_flag;
         l_rulv_rec.rule_information_category := 'LASDEP';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_security_deposit_date IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_security_deposit_date;
         l_rulv_rec.rule_information_category := 'LASDEP';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.9';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LASDEP/LASDEP processed');

      -- Rule Group LARNOP
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LARNOP';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;

      l_renewal_notice_days := p_header_rec.renewal_notice_days;
      IF (l_renewal_notice_days IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN

         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LARNOP',
                            p_rule_code      => 'LAREND',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_renewal_notice_days := l_rulv_tbl(1).rule_information1;
         END IF;
     END IF;

     IF (l_renewal_notice_days IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_renewal_notice_days;
         l_rulv_rec.rule_information_category := 'LAREND';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.10';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LARNOP/LAREND processed');
      l_rulv_rec := NULL;

      l_renewal_option := p_header_rec.renewal_option;
      l_renewal_amount := TO_CHAR(p_header_rec.renewal_amount);

      IF (l_renewal_option IS NULL
          OR
          l_renewal_amount IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN

         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LARNOP',
                            p_rule_code      => 'LARNEW',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_renewal_option := NVL(l_renewal_option,l_rulv_tbl(1).rule_information1);
            l_renewal_amount := NVL(l_renewal_amount,l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_renewal_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_renewal_option;
         l_rulv_rec.rule_information_category := 'LARNEW';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_renewal_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_renewal_amount;
         l_rulv_rec.rule_information_category := 'LARNEW';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.11';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LARNOP/LARNEW processed');
      -- Rule Group LALIGR

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LALIGR';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec := NULL;

      l_late_interest_held_date := get_canonical_date(p_header_rec.late_interest_held_until_date);

      IF (l_late_interest_held_date IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LALIGR',
                            p_rule_code      => 'LAHUDT',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_late_interest_held_date := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_late_interest_held_date IS NOT NULL) THEN
         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_late_interest_held_date;
         l_rulv_rec.rule_information_category := 'LAHUDT';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.11';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

     -- IF (l_rgp_id IS NULL) THEN
     IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- rviriyal bug #6310553
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LALIGR/LAHUDT processed');
      l_rulv_rec := NULL;  -- dedey    added for bug 4637513

      l_late_interest_exempt_flag := p_header_rec.late_interest_exempt_flag;

      IF (l_late_interest_exempt_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LALIGR',
                            p_rule_code      => 'LALIEX',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_late_interest_exempt_flag := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_late_interest_exempt_flag IS NOT NULL) THEN
         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_late_interest_exempt_flag;
         l_rulv_rec.rule_information_category := 'LALIEX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.11';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      --IF (l_rgp_id IS NULL) THEN
     IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- rviriyal bug #6310553
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LALIGR/LALIEX processed');
      l_rulv_rec := NULL;   -- dedey    added for bug 4637513

      l_late_int_product_code := p_header_rec.late_interest_product_code;
      l_late_int_product_id   := NULL;

      IF (l_late_int_product_code IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LALIGR',
                            p_rule_code      => 'LALCIN',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_late_int_product_id  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_late_int_product_code IS NOT NULL) THEN
         l_late_int_product_id := get_late_policy_id(
                                                        x_return_status    => x_return_status,
                                                        p_late_policy_code => l_late_int_product_code,
                                                        p_org_id           => p_header_rec.authoring_org_id,
                                                        p_late_policy_type => 'INT'
                                                       );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                    G_APP_NAME,
                    G_INVALID_VALUE,
                    'CONTRACT_NUM',
                    p_header_rec.contract_number_old,
                    'COL_NAME',
                    'LATE_INTEREST_PRODUCT_CODE',
                    'COL_VALUE',
                    l_late_int_product_code
                   );
             raise header_rule_failed;
         END IF;

      END IF;

      IF (l_late_int_product_id IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_late_int_product_id;
         l_rulv_rec.rule_information_category := 'LALCIN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      --IF (l_rgp_id IS NULL) THEN
      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- rviriyal bug #6310553
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LALIGR/LALCIN processed');

      -- Rule Group LALCGR
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LALCGR';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;

      l_late_charge_held_until_date := get_canonical_date(p_header_rec.late_charge_held_until_date);

      IF (l_late_charge_held_until_date IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LALCGR',
                            p_rule_code      => 'LAHUDT',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_late_charge_held_until_date := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_late_charge_held_until_date IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_late_charge_held_until_date;
         l_rulv_rec.rule_information_category := 'LAHUDT';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.12';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- Bug 5085099
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LALCGR/LAHUDT processed');
      l_rulv_rec := NULL;
      l_late_charge_product_code := p_header_rec.late_charge_product_code;
      l_late_charge_product_id   := NULL;

      IF (l_late_charge_product_code IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LALCGR',
                            p_rule_code      => 'LALCPR',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_late_charge_product_id  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_late_charge_product_code IS NOT NULL) THEN
         l_late_charge_product_id := get_late_policy_id(
                                                        x_return_status    => x_return_status,
                                                        p_late_policy_code => l_late_charge_product_code,
                                                        p_org_id           => p_header_rec.authoring_org_id,
                                                        p_late_policy_type => 'CHG'
                                                       );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                    G_APP_NAME,
                    G_INVALID_VALUE,
                    'CONTRACT_NUM',
                    p_header_rec.contract_number_old,
                    'COL_NAME',
                    'LATE_CHARGE_PRODUCT_CODE',
                    'COL_VALUE',
                    l_late_charge_product_code
                   );
             raise header_rule_failed;
         END IF;

      END IF;

      IF (l_late_charge_product_id IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_late_charge_product_id;
         l_rulv_rec.rule_information_category := 'LALCPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.13';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- Bug 5085099
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LALCGR/LALCPR processed');

      l_rulv_rec := NULL;

      l_late_charge_exempt_flag := p_header_rec.late_charge_exempt_flag;

      IF (l_late_charge_exempt_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LALCGR',
                            p_rule_code      => 'LALCEX',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_late_charge_exempt_flag  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_late_charge_exempt_flag IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_late_charge_exempt_flag;
         l_rulv_rec.rule_information_category := 'LALCEX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.14';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LALCGR/LALCEX processed');

      /* -- AKP: Commented as new variable rate processing occurs OKL.H onwards
      --Rule Group LAIIND
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LAIIND';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_variable_rate := p_header_rec.variable_rate;

      IF (l_variable_rate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAIIND',
                            p_rule_code      => 'LAINTP',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_variable_rate  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_variable_rate IS NOT NULL) THEN

         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_variable_rate;
         l_rulv_rec.rule_information_category := 'LAINTP';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         l_progress := '1.141';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            raise header_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id; --store rgp_id
         END IF;

      END IF; -- variable_rate

      debug_message('------>Rule: LAIIND/LAINTP processed');
      l_rulv_rec := NULL;

      l_convert_type       := p_header_rec.convert_type;
      l_conversion_method  := p_header_rec.conversion_method;
      l_date_of_conversion := get_canonicaL_date(p_header_rec.date_of_conversion);
      l_convert_by_date    := get_canonicaL_date(p_header_rec.convert_by_date);

      IF (l_convert_type IS NULL
          OR
          l_conversion_method IS NULL
          OR
          l_date_of_conversion IS NULL
          OR
          l_convert_by_date IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAIIND',
                            p_rule_code      => 'LAICON',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_convert_type       := NVL(l_convert_type,l_rulv_tbl(1).rule_information1);
            l_conversion_method  := NVL(l_conversion_method,l_rulv_tbl(1).rule_information2);
            l_date_of_conversion := NVL(l_date_of_conversion,l_rulv_tbl(1).rule_information3);
            l_convert_by_date    := NVL(l_convert_by_date,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_convert_type IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information1         := l_convert_type;
          l_rulv_rec.rule_information_category := 'LAICON';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_conversion_method IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information2         := l_conversion_method;
          l_rulv_rec.rule_information_category := 'LAICON';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_date_of_conversion IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information3         := l_date_of_conversion;
          l_rulv_rec.rule_information_category := 'LAICON';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_convert_by_date IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information4         := l_convert_by_date;
          l_rulv_rec.rule_information_category := 'LAICON';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.15';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LAIIND/LAICON processed');
      l_rulv_rec := NULL;

      l_variable_method      := p_header_rec.variable_method;
      l_index_name           := p_header_rec.index_name;
      l_index_id             := NULL;
      l_base_rate            := p_header_rec.base_rate;
      l_adder                := p_header_rec.adder;
      l_minimum_rate         := p_header_rec.minimum_rate;
      l_maximum_rate         := p_header_rec.maximum_rate;
      l_tolerance            := p_header_rec.tolerance;
      l_adjustment_frequency := p_header_rec.adjustment_frequency;

      IF (l_variable_method IS NULL
          OR
          l_index_name IS NULL
          OR
          l_base_rate IS NULL
          OR
          l_adder IS NULL
          OR
          l_minimum_rate IS NULL
          OR
          l_maximum_rate IS NULL
          OR
          l_tolerance IS NULL
          OR
          l_adjustment_frequency IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAIIND',
                            p_rule_code      => 'LAIVAR',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_variable_method      := NVL(l_variable_method,l_rulv_tbl(1).rule_information1);
            l_index_id             := NVL(l_index_id,l_rulv_tbl(1).rule_information2);
            l_base_rate            := NVL(l_base_rate,l_rulv_tbl(1).rule_information3);
            l_adder                := NVL(l_adder,l_rulv_tbl(1).rule_information4);
            l_minimum_rate         := NVL(l_minimum_rate,l_rulv_tbl(1).rule_information5);
            l_maximum_rate         := NVL(l_maximum_rate,l_rulv_tbl(1).rule_information6);
            l_tolerance            := NVL(l_tolerance,l_rulv_tbl(1).rule_information7);
            l_adjustment_frequency := NVL(l_adjustment_frequency,l_rulv_tbl(1).rule_information8);
         END IF;
      END IF;

      IF (l_variable_method IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_variable_method;
         l_rulv_rec.rule_information_category := 'LAIVAR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_index_name IS NOT NULL) THEN

          get_index_id(
                       x_return_status => x_return_status,
                       p_index_name    => l_index_name,
                       x_index_id      => x_index_id
                      );
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_INVALID_VALUE,
                                 'CONTRACT_NUM',
                                 p_header_rec.contract_number_old,
                                 'COL_NAME',
                                 'INDEX_NAME',
                                 'COL_VALUE',
                                 p_header_rec.index_name
                                );
             raise header_rule_failed;
          END IF;
          l_index_id := x_index_id;
      END IF;

      IF (l_index_id IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information2         := TO_CHAR(x_index_id);
          l_rulv_rec.rule_information_category := 'LAIVAR';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_base_rate IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information3         := l_base_rate;
          l_rulv_rec.rule_information_category := 'LAIVAR';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_adder IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information4         := l_adder;
          l_rulv_rec.rule_information_category := 'LAIVAR';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_minimum_rate IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information5         := l_minimum_rate;
          l_rulv_rec.rule_information_category := 'LAIVAR';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_maximum_rate IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information6         := l_maximum_rate;
          l_rulv_rec.rule_information_category := 'LAIVAR';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_tolerance IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information7         := l_tolerance;
          l_rulv_rec.rule_information_category := 'LAIVAR';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_adjustment_frequency IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information8         := l_adjustment_frequency;
          l_rulv_rec.rule_information_category := 'LAIVAR';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;
      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.16';
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LAIIND/LAIVAR processed');

      l_days_in_year          := p_header_rec.days_in_year;
      l_days_in_month         := p_header_rec.days_in_month;
      l_interest_method       := p_header_rec.interest_method;
      l_interest_start_date   := get_canonicaL_date(p_header_rec.interest_start_date);
      l_method_of_calculation := p_header_rec.method_of_calculation;

      l_rulv_rec := NULL;

      IF (l_days_in_year IS NULL
          OR
          l_days_in_month IS NULL
          OR
          l_interest_method IS NULL
          OR
          l_interest_start_date IS NULL
          OR
          l_method_of_calculation IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAIIND',
                            p_rule_code      => 'LAICLC',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_days_in_year          := NVL(l_days_in_year,l_rulv_tbl(1).rule_information1);
            l_days_in_month         := NVL(l_days_in_month,l_rulv_tbl(1).rule_information2);
            l_interest_method       := NVL(l_interest_method,l_rulv_tbl(1).rule_information3);
            l_interest_start_date   := NVL(l_interest_start_date,l_rulv_tbl(1).rule_information4);
            l_method_of_calculation := NVL(l_method_of_calculation,l_rulv_tbl(1).rule_information5);
         END IF;
      END IF;
      IF (l_days_in_year IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_days_in_year;
         l_rulv_rec.rule_information_category := 'LAICLC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_days_in_month IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_days_in_month;
         l_rulv_rec.rule_information_category := 'LAICLC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_interest_method IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_interest_method;
         l_rulv_rec.rule_information_category := 'LAICLC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_interest_start_date IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_interest_start_date;
         l_rulv_rec.rule_information_category := 'LAICLC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_method_of_calculation IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_method_of_calculation;
         l_rulv_rec.rule_information_category := 'LAICLC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.17';
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LAIIND/LAICLC processed');
      l_rulv_rec := NULL;

      l_formula_name := p_header_rec.formula_name;

      IF (l_formula_name IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAIIND',
                            p_rule_code      => 'LAFORM',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_formula_name  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_formula_name IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_formula_name;
         l_rulv_rec.rule_information_category := 'LAFORM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.18';
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LAIIND/LAFORM processed');
      */ -- AKP: Commented because new vairable rate processing in OKL.H onwards

      l_rate_counter := 1;
      IF (p_header_rec.INT_RATE_EFFECTIVE_FROM_DATE IS NOT NULL) THEN
        l_k_rate_tbl(l_rate_counter).KHR_ID := p_chr_id;
        l_k_rate_tbl(l_rate_counter).PARAMETER_TYPE_CODE := 'ACTUAL';
        l_k_rate_tbl(l_rate_counter).EFFECTIVE_FROM_DATE := p_header_rec.INT_RATE_EFFECTIVE_FROM_DATE;

        l_no_data := TRUE;
        IF (p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          --get_template_rate(p_chr_id, 'ACTUAL', l_tmpl_rate_rec, l_no_data);
          okl_k_rate_params_pvt.get_rate_rec(
            p_chr_id => p_chr_id,
            p_parameter_type_code => 'ACTUAL',
            p_effective_from_date => NULL,
            x_krpv_rec => l_tmpl_rate_rec,
            x_no_data_found => l_no_data);
        END IF;

        l_k_rate_tbl(l_rate_counter).EFFECTIVE_TO_DATE := p_header_rec.INT_RATE_EFFECTIVE_TO_DATE;
        IF (p_header_rec.INT_RATE_EFFECTIVE_TO_DATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).EFFECTIVE_TO_DATE :=
                       l_tmpl_rate_rec.EFFECTIVE_TO_DATE;
        END IF;

        debug_message('Var Rate 1.1');
        IF (p_header_rec.INDEX_NAME IS NOT NULL) THEN
          get_index_id(
                       x_return_status => x_return_status,
                       p_index_name    => p_header_rec.INDEX_NAME,
                       x_index_id      => l_index_id
                      );
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_INVALID_VALUE,
                                 'CONTRACT_NUM',
                                 p_header_rec.contract_number_old,
                                 'COL_NAME',
                                 'INDEX_NAME',
                                 'COL_VALUE',
                                 p_header_rec.index_name
                                );
             raise header_rule_failed;
          END IF;
          l_k_rate_tbl(l_rate_counter).INTEREST_INDEX_ID := l_index_id;
        ELSE
          l_k_rate_tbl(l_rate_counter).INTEREST_INDEX_ID := NULL;
          IF (p_header_rec.INDEX_NAME IS NULL AND NOT(l_no_data) AND
              p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
            l_k_rate_tbl(l_rate_counter).INTEREST_INDEX_ID :=
                         l_tmpl_rate_rec.INTEREST_INDEX_ID;
          END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).BASE_RATE := p_header_rec.BASE_RATE;
        IF (p_header_rec.BASE_RATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).BASE_RATE :=
                       l_tmpl_rate_rec.BASE_RATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).INTEREST_START_DATE := p_header_rec.INTEREST_START_DATE;
        IF (p_header_rec.INTEREST_START_DATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).INTEREST_START_DATE :=
                       l_tmpl_rate_rec.INTEREST_START_DATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).ADDER_RATE := p_header_rec.ADDER;
        IF (p_header_rec.ADDER IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).ADDER_RATE :=
                       l_tmpl_rate_rec.ADDER_RATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).MINIMUM_RATE := p_header_rec.MINIMUM_RATE;
        IF (p_header_rec.MINIMUM_RATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).MINIMUM_RATE :=
                       l_tmpl_rate_rec.MINIMUM_RATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).MAXIMUM_RATE := p_header_rec.MAXIMUM_RATE;
        IF (p_header_rec.MAXIMUM_RATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).MAXIMUM_RATE :=
                       l_tmpl_rate_rec.MAXIMUM_RATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).PRINCIPAL_BASIS_CODE := p_header_rec.INT_RATE_PRINC_BASIS_CODE;
        IF (p_header_rec.INT_RATE_PRINC_BASIS_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_PRINC_BASIS_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).PRINCIPAL_BASIS_CODE :=
                       l_tmpl_rate_rec.PRINCIPAL_BASIS_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'PRINCIPAL_BASIS_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).DAYS_IN_A_MONTH_CODE := p_header_rec.DAYS_IN_MONTH;
        IF (p_header_rec.DAYS_IN_MONTH IS NULL) THEN
        IF (p_header_rec.DAYS_IN_MONTH IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).DAYS_IN_A_MONTH_CODE :=
                       l_tmpl_rate_rec.DAYS_IN_A_MONTH_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'DAYS_IN_A_MONTH_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).DAYS_IN_A_YEAR_CODE := p_header_rec.DAYS_IN_YEAR;
        IF (p_header_rec.DAYS_IN_YEAR IS NULL) THEN
        IF (p_header_rec.DAYS_IN_YEAR IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).DAYS_IN_A_YEAR_CODE :=
                       l_tmpl_rate_rec.DAYS_IN_A_YEAR_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'DAYS_IN_A_YEAR_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).INTEREST_BASIS_CODE := p_header_rec.INT_RATE_BASIS_CODE;
        IF (p_header_rec.INT_RATE_BASIS_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_BASIS_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).INTEREST_BASIS_CODE :=
                       l_tmpl_rate_rec.INTEREST_BASIS_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'INTEREST_BASIS_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_DELAY_CODE := p_header_rec.INT_RATE_DELAY_CODE;
        IF (p_header_rec.INT_RATE_DELAY_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_DELAY_CODE :=
                       l_tmpl_rate_rec.RATE_DELAY_CODE;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_DELAY_FREQUENCY := p_header_rec.INT_RATE_DELAY_FREQ;
        IF (p_header_rec.INT_RATE_DELAY_FREQ IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_DELAY_FREQUENCY :=
                       l_tmpl_rate_rec.RATE_DELAY_FREQUENCY;
        END IF;

        l_k_rate_tbl(l_rate_counter).COMPOUNDING_FREQUENCY_CODE := p_header_rec.INT_RATE_CMPND_FREQ_CODE;
        IF (p_header_rec.INT_RATE_CMPND_FREQ_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).COMPOUNDING_FREQUENCY_CODE :=
                       l_tmpl_rate_rec.COMPOUNDING_FREQUENCY_CODE;
        END IF;

        debug_message('Var Rate 1.2');
        IF (p_header_rec.FORMULA_NAME IS NOT NULL) THEN
          l_formula_id := get_formula_id(p_header_rec.FORMULA_NAME,
                                         x_return_status);
          IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
             --AKP: Todo: set message: Invalid formula name 5024651
             okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_VALUE,
                           'CONTRACT_NUM',
                           p_header_rec.contract_number_old,
                           'COL_NAME',
                           'FORMULA_NAME',
                           'COL_VALUE',
                           p_header_rec.FORMULA_NAME
                          );

             RAISE header_rule_failed;
          END IF;
          l_k_rate_tbl(l_rate_counter).CALCULATION_FORMULA_ID := l_formula_id;
        ELSE
          l_k_rate_tbl(l_rate_counter).CALCULATION_FORMULA_ID := NULL;
          IF (p_header_rec.FORMULA_NAME IS NULL AND NOT(l_no_data) AND
              p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
            l_k_rate_tbl(l_rate_counter).CALCULATION_FORMULA_ID :=
                         l_tmpl_rate_rec.CALCULATION_FORMULA_ID;
          END IF;
        END IF;

        debug_message('Var Rate 1.3');
        l_k_rate_tbl(l_rate_counter).CATCHUP_BASIS_CODE := p_header_rec.INT_RATE_CATCHUP_BASIS_CODE;
        IF (p_header_rec.INT_RATE_CATCHUP_BASIS_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_CATCHUP_BASIS_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CATCHUP_BASIS_CODE :=
                       l_tmpl_rate_rec.CATCHUP_BASIS_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'CATCHUP_BASIS_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).CATCHUP_START_DATE := p_header_rec.INT_RATE_CATCHUP_START_DATE;
        IF (p_header_rec.INT_RATE_CATCHUP_START_DATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CATCHUP_START_DATE :=
                       l_tmpl_rate_rec.CATCHUP_START_DATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).CATCHUP_SETTLEMENT_CODE := p_header_rec.INT_RATE_CAT_STLMNT_CODE;
        IF (p_header_rec.INT_RATE_CAT_STLMNT_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CATCHUP_SETTLEMENT_CODE :=
                       l_tmpl_rate_rec.CATCHUP_SETTLEMENT_CODE;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_CHANGE_START_DATE := p_header_rec.INT_RATE_CHANGE_START_DATE;
        IF (p_header_rec.INT_RATE_CHANGE_START_DATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_CHANGE_START_DATE :=
                       l_tmpl_rate_rec.RATE_CHANGE_START_DATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_CHANGE_FREQUENCY_CODE := p_header_rec.INT_RATE_CHANGE_FREQ_CODE;
        IF (p_header_rec.INT_RATE_CHANGE_FREQ_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_CHANGE_FREQ_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_CHANGE_FREQUENCY_CODE :=
                       l_tmpl_rate_rec.RATE_CHANGE_FREQUENCY_CODE;
      /* Removed for Forwar port Bug 8614628
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'RATE_CHANGE_FREQUENCY_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
 */
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_CHANGE_VALUE := p_header_rec.INT_RATE_CHANGE_VALUE;
        IF (p_header_rec.INT_RATE_CHANGE_VALUE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_CHANGE_VALUE :=
                       l_tmpl_rate_rec.RATE_CHANGE_VALUE;
        END IF;

        l_k_rate_tbl(l_rate_counter).CATCHUP_FREQUENCY_CODE := p_header_rec.INT_RATE_CAT_FREQ_CODE;
        IF (p_header_rec.INT_RATE_CAT_FREQ_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CATCHUP_FREQUENCY_CODE :=
                       l_tmpl_rate_rec.CATCHUP_FREQUENCY_CODE;
        END IF;

        l_k_rate_tbl(l_rate_counter).CONVERSION_OPTION_CODE := p_header_rec.INT_RATE_CON_OPTION_CODE;
        IF (p_header_rec.INT_RATE_CON_OPTION_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CONVERSION_OPTION_CODE :=
                       l_tmpl_rate_rec.CONVERSION_OPTION_CODE;
        END IF;

        l_k_rate_tbl(l_rate_counter).NEXT_CONVERSION_DATE := p_header_rec.INT_RATE_NEXT_CON_DATE;
        IF (p_header_rec.INT_RATE_NEXT_CON_DATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).NEXT_CONVERSION_DATE :=
                       l_tmpl_rate_rec.NEXT_CONVERSION_DATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).CONVERSION_TYPE_CODE := p_header_rec.CONVERT_TYPE;
        IF (p_header_rec.CONVERT_TYPE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CONVERSION_TYPE_CODE :=
                       l_tmpl_rate_rec.CONVERSION_TYPE_CODE;
        END IF;
        l_rate_counter := l_rate_counter + 1;

      ELSE
        IF (p_header_rec.INT_RATE_EFFECTIVE_FROM_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_EFFECTIVE_TO_DATE IS NOT NULL OR
            p_header_rec.INDEX_NAME IS NOT NULL OR
            p_header_rec.BASE_RATE IS NOT NULL OR
            p_header_rec.INTEREST_START_DATE IS NOT NULL OR
            p_header_rec.ADDER IS NOT NULL OR
            p_header_rec.MINIMUM_RATE IS NOT NULL OR
            p_header_rec.MAXIMUM_RATE IS NOT NULL OR
            p_header_rec.INT_RATE_PRINC_BASIS_CODE IS NOT NULL OR
            p_header_rec.DAYS_IN_YEAR IS NOT NULL OR
            p_header_rec.DAYS_IN_MONTH IS NOT NULL OR
            p_header_rec.INT_RATE_BASIS_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_DELAY_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_DELAY_FREQ IS NOT NULL OR
            p_header_rec.INT_RATE_CMPND_FREQ_CODE IS NOT NULL OR
            p_header_rec.FORMULA_NAME IS NOT NULL OR
            p_header_rec.INT_RATE_CATCHUP_BASIS_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CATCHUP_START_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CAT_STLMNT_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CHANGE_START_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CHANGE_FREQ_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CHANGE_VALUE IS NOT NULL OR
            p_header_rec.INT_RATE_CAT_FREQ_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_OPTION_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_NEXT_CON_DATE IS NOT NULL OR
            p_header_rec.CONVERT_TYPE IS NOT NULL
        )
        THEN
           -- Set error. Effective from date is missing
          OKC_API.set_message(p_app_name => G_APP_NAME,
                              p_msg_name => G_REQUIRED_VALUE,
                              p_token1 => G_COL_NAME_TOKEN,
                              p_token1_value => 'Effective_From_Date');
          x_return_status := OKC_API.G_RET_STS_ERROR;
          RAISE header_rule_failed;
        END IF;

      END IF;

      IF (p_header_rec.INT_RATE_EFFECTIVE_FROM_DATE IS NOT NULL) AND
           (p_header_rec.INT_RATE_EFFECTIVE_TO_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_INDEX_NAME IS NOT NULL OR
            p_header_rec.INT_RATE_CON_BASE_RATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_START_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_ADDER_RATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_MINIMUM_RATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_MAXIMUM_RATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_PRC_BAS_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_DAY_YER_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_DAY_MTH_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_INT_BAS_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_RATE_DELAY_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_RATE_DELAY_FREQ IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CMPND_FREQ_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_FORMULA_NAME IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CAT_BAS_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CAT_START_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CAT_STLMNT_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CHG_START_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CHG_FREQ_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CHG_VALUE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CAT_FREQ_CODE IS NOT NULL ) THEN
        l_k_rate_tbl(l_rate_counter).KHR_ID := p_chr_id;
        l_k_rate_tbl(l_rate_counter).PARAMETER_TYPE_CODE := 'CONVERSION';
        l_k_rate_tbl(l_rate_counter).EFFECTIVE_FROM_DATE := p_header_rec.INT_RATE_EFFECTIVE_FROM_DATE;

        l_no_data := TRUE;
        IF (p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          --get_template_rate(p_chr_id, 'CONVERSION', l_tmpl_rate_rec, l_no_data);
          okl_k_rate_params_pvt.get_rate_rec(
            p_chr_id => p_chr_id,
            p_parameter_type_code => 'CONVERSION',
            p_effective_from_date => NULL,
            x_krpv_rec => l_tmpl_rate_rec,
            x_no_data_found => l_no_data);
        END IF;

        l_k_rate_tbl(l_rate_counter).EFFECTIVE_TO_DATE := p_header_rec.INT_RATE_EFFECTIVE_TO_DATE;
        IF (p_header_rec.INT_RATE_EFFECTIVE_TO_DATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).EFFECTIVE_TO_DATE :=
                       l_tmpl_rate_rec.EFFECTIVE_TO_DATE;
        END IF;

        IF (p_header_rec.INT_RATE_CON_INDEX_NAME IS NOT NULL) THEN
          get_index_id(
                       x_return_status => x_return_status,
                       p_index_name    => p_header_rec.INT_RATE_CON_INDEX_NAME,
                       x_index_id      => x_index_id
                      );
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_INVALID_VALUE,
                                 'CONTRACT_NUM',
                                 p_header_rec.contract_number_old,
                                 'COL_NAME',
                                 'INDEX_NAME_CON',
                                 'COL_VALUE',
                                 p_header_rec.int_rate_con_index_name
                                );
             raise header_rule_failed;
          END IF;
          l_k_rate_tbl(l_rate_counter).INTEREST_INDEX_ID := l_index_id;
        ELSE
          l_k_rate_tbl(l_rate_counter).INTEREST_INDEX_ID := NULL;
          IF (p_header_rec.INT_RATE_CON_INDEX_NAME IS NULL AND NOT(l_no_data) AND
              p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
            l_k_rate_tbl(l_rate_counter).INTEREST_INDEX_ID :=
                         l_tmpl_rate_rec.INTEREST_INDEX_ID;
          END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).BASE_RATE := p_header_rec.INT_RATE_CON_BASE_RATE;
        IF (p_header_rec.INT_RATE_CON_BASE_RATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).BASE_RATE :=
                       l_tmpl_rate_rec.BASE_RATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).INTEREST_START_DATE := p_header_rec.INT_RATE_CON_START_DATE;
        IF (p_header_rec.INT_RATE_CON_START_DATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).INTEREST_START_DATE :=
                       l_tmpl_rate_rec.INTEREST_START_DATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).ADDER_RATE := p_header_rec.INT_RATE_CON_ADDER_RATE;
        IF (p_header_rec.INT_RATE_CON_ADDER_RATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).ADDER_RATE :=
                       l_tmpl_rate_rec.ADDER_RATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).MAXIMUM_RATE := p_header_rec.INT_RATE_CON_MAXIMUM_RATE;
        IF (p_header_rec.INT_RATE_CON_MAXIMUM_RATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).MAXIMUM_RATE :=
                       l_tmpl_rate_rec.MAXIMUM_RATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).MINIMUM_RATE := p_header_rec.INT_RATE_CON_MINIMUM_RATE;
        IF (p_header_rec.INT_RATE_CON_MINIMUM_RATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).MINIMUM_RATE :=
                       l_tmpl_rate_rec.MINIMUM_RATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).PRINCIPAL_BASIS_CODE := p_header_rec.INT_RATE_CON_PRC_BAS_CODE;
        IF (p_header_rec.INT_RATE_CON_PRC_BAS_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_CON_PRC_BAS_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).PRINCIPAL_BASIS_CODE :=
                       l_tmpl_rate_rec.PRINCIPAL_BASIS_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'PRINCIPAL_BASIS_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).DAYS_IN_A_MONTH_CODE := p_header_rec.INT_RATE_CON_DAY_MTH_CODE;
        IF (p_header_rec.INT_RATE_CON_DAY_MTH_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_CON_DAY_MTH_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).DAYS_IN_A_MONTH_CODE :=
                       l_tmpl_rate_rec.DAYS_IN_A_MONTH_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'DAYS_IN_A_MONTH_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).DAYS_IN_A_YEAR_CODE := p_header_rec.INT_RATE_CON_DAY_YER_CODE;
        IF (p_header_rec.INT_RATE_CON_DAY_YER_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_CON_DAY_YER_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).DAYS_IN_A_YEAR_CODE :=
                       l_tmpl_rate_rec.DAYS_IN_A_YEAR_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'DAYS_IN_A_YEAR_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).INTEREST_BASIS_CODE := p_header_rec.INT_RATE_CON_INT_BAS_CODE;
        IF (p_header_rec.INT_RATE_CON_INT_BAS_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_CON_INT_BAS_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).INTEREST_BASIS_CODE :=
                       l_tmpl_rate_rec.INTEREST_BASIS_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'INTEREST_BASIS_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_DELAY_CODE := p_header_rec.INT_RATE_CON_RATE_DELAY_CODE;
        IF (p_header_rec.INT_RATE_CON_RATE_DELAY_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_DELAY_CODE :=
                       l_tmpl_rate_rec.RATE_DELAY_CODE;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_DELAY_FREQUENCY := p_header_rec.INT_RATE_CON_RATE_DELAY_FREQ;
        IF (p_header_rec.INT_RATE_CON_RATE_DELAY_FREQ IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_DELAY_FREQUENCY :=
                       l_tmpl_rate_rec.RATE_DELAY_FREQUENCY;
        END IF;

        l_k_rate_tbl(l_rate_counter).COMPOUNDING_FREQUENCY_CODE := p_header_rec.INT_RATE_CON_CMPND_FREQ_CODE;
        IF (p_header_rec.INT_RATE_CON_CMPND_FREQ_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).COMPOUNDING_FREQUENCY_CODE :=
                       l_tmpl_rate_rec.COMPOUNDING_FREQUENCY_CODE;
        END IF;

        IF (p_header_rec.INT_RATE_CON_FORMULA_NAME IS NOT NULL) THEN
          l_formula_id := get_formula_id(p_header_rec.INT_RATE_CON_FORMULA_NAME,
                                         x_return_status);
          IF (x_return_status <> OKC_API.G_RET_STS_SUCCESS) THEN
             --AKP: Todo: set message: Invalid formula name 5024651
             okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_VALUE,
                           'CONTRACT_NUM',
                           p_header_rec.contract_number_old,
                           'COL_NAME',
                           'FORMULA_NAME',
                           'COL_VALUE',
                           p_header_rec.INT_RATE_CON_FORMULA_NAME
                          );

             RAISE header_rule_failed;
          END IF;
          l_k_rate_tbl(l_rate_counter).CALCULATION_FORMULA_ID := l_formula_id;
        ELSE
          l_k_rate_tbl(l_rate_counter).CALCULATION_FORMULA_ID := NULL;
          IF (p_header_rec.INT_RATE_CON_FORMULA_NAME IS NULL AND NOT(l_no_data) AND
              p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
            l_k_rate_tbl(l_rate_counter).CALCULATION_FORMULA_ID :=
                         l_tmpl_rate_rec.CALCULATION_FORMULA_ID;
          END IF;
        END IF;


        l_k_rate_tbl(l_rate_counter).CATCHUP_BASIS_CODE := p_header_rec.INT_RATE_CON_CAT_BAS_CODE;
        IF (p_header_rec.INT_RATE_CON_CAT_BAS_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_CON_CAT_BAS_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CATCHUP_BASIS_CODE :=
                       l_tmpl_rate_rec.CATCHUP_BASIS_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'CATCHUP_BASIS_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).CATCHUP_START_DATE := p_header_rec.INT_RATE_CON_CAT_START_DATE;
        IF (p_header_rec.INT_RATE_CON_CAT_START_DATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CATCHUP_START_DATE :=
                       l_tmpl_rate_rec.CATCHUP_START_DATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).CATCHUP_SETTLEMENT_CODE := p_header_rec.INT_RATE_CON_CAT_STLMNT_CODE;
        IF (p_header_rec.INT_RATE_CON_CAT_STLMNT_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CATCHUP_SETTLEMENT_CODE :=
                       l_tmpl_rate_rec.CATCHUP_SETTLEMENT_CODE;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_CHANGE_START_DATE := p_header_rec.INT_RATE_CON_CHG_START_DATE;
        IF (p_header_rec.INT_RATE_CON_CHG_START_DATE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_CHANGE_START_DATE :=
                       l_tmpl_rate_rec.RATE_CHANGE_START_DATE;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_CHANGE_FREQUENCY_CODE := p_header_rec.INT_RATE_CON_CHG_FREQ_CODE;
        IF (p_header_rec.INT_RATE_CON_CHG_FREQ_CODE IS NULL) THEN
        IF (p_header_rec.INT_RATE_CON_CHG_FREQ_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_CHANGE_FREQUENCY_CODE :=
                       l_tmpl_rate_rec.RATE_CHANGE_FREQUENCY_CODE;
        ELSE
          okl_k_rate_params_pvt.default_k_rate_params(
             p_api_version      => 1,
             p_init_msg_list    => OKC_API.G_FALSE,
             x_return_status    => x_return_status,
             x_msg_count        => x_msg_count,
             x_msg_data         => x_msg_data,
             p_deal_type        => G_DEAL_TYPE,
             p_rev_rec_method   => G_REVENUE_RECOGNITION_METHOD,
             p_int_calc_basis   => G_INTEREST_CALCULATION_BASIS,
             p_column_name      => 'DAYS_IN_A_YEAR_CODE',
             p_krpv_rec         => l_k_rate_tbl(l_rate_counter));
        END IF;
        END IF;

        l_k_rate_tbl(l_rate_counter).RATE_CHANGE_VALUE := p_header_rec.INT_RATE_CON_CHG_VALUE;
        IF (p_header_rec.INT_RATE_CON_CHG_VALUE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).RATE_CHANGE_VALUE :=
                       l_tmpl_rate_rec.RATE_CHANGE_VALUE;
        END IF;

        l_k_rate_tbl(l_rate_counter).CATCHUP_FREQUENCY_CODE := p_header_rec.INT_RATE_CON_CAT_FREQ_CODE;
        IF (p_header_rec.INT_RATE_CON_CAT_FREQ_CODE IS NULL AND NOT(l_no_data) AND
            p_header_rec.TEMPLATE_NUMBER IS NOT NULL) THEN
          l_k_rate_tbl(l_rate_counter).CATCHUP_FREQUENCY_CODE :=
                       l_tmpl_rate_rec.CATCHUP_FREQUENCY_CODE;
        END IF;
        l_rate_counter := l_rate_counter + 1;

      ELSE
      IF (p_header_rec.INT_RATE_EFFECTIVE_TO_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_INDEX_NAME IS NOT NULL OR
            p_header_rec.INT_RATE_CON_BASE_RATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_START_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_ADDER_RATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_MINIMUM_RATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_MAXIMUM_RATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_PRC_BAS_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_DAY_YER_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_DAY_MTH_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_INT_BAS_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_RATE_DELAY_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_RATE_DELAY_FREQ IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CMPND_FREQ_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_FORMULA_NAME IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CAT_BAS_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CAT_START_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CAT_STLMNT_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CHG_START_DATE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CHG_FREQ_CODE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CHG_VALUE IS NOT NULL OR
            p_header_rec.INT_RATE_CON_CAT_FREQ_CODE IS NOT NULL )
        THEN
           -- Set error. Effective from date is missing
          OKC_API.set_message(p_app_name => G_APP_NAME,
                              p_msg_name => G_REQUIRED_VALUE,
                              p_token1 => G_COL_NAME_TOKEN,
                              p_token1_value => 'Effective_From_Date_Con');
          x_return_status := OKC_API.G_RET_STS_ERROR;
          RAISE header_rule_failed;

        END IF;

      END IF;

      debug_message('l_rate_counter=' || l_rate_counter);
      IF (l_rate_counter > 1) THEN
        OKL_K_RATE_PARAMS_PVT.validate_k_rate_params(
                               p_api_version             => 1 ,
                               p_init_msg_list           => OKC_API.G_FALSE,
                               x_return_status           => x_return_status,
                               x_msg_count               => x_msg_count,
                               x_msg_data                => x_msg_data,
                               p_product_id              => G_PRODUCT_ID,
                               p_k_rate_tbl              => l_k_rate_tbl);
        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           RAISE header_rule_failed;
        ELSE
          FOR krpv_rec_cnt IN l_k_rate_tbl.FIRST..l_k_rate_tbl.LAST
          LOOP
            OKL_K_RATE_PARAMS_PVT.create_k_rate_params(
                          p_api_version           => 1 ,
                          p_init_msg_list         => OKC_API.G_FALSE,
                          x_return_status         => x_return_status,
                          x_msg_count             => x_msg_count,
                          x_msg_data              => x_msg_data,
                          p_krpv_rec              => l_k_rate_tbl(krpv_rec_cnt),
                          x_krpv_rec              => x_krpv_rec,
                          p_validate_flag         => 'N');
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE header_rule_failed;
            END IF;
          END LOOP;
        END IF;
      END IF;

      debug_message('Rate creation done...');
      -- Rule Group LAFCTG
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LAFCTG';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;

      l_factoring_date          := get_canonicaL_date(p_header_rec.factoring_date);
      l_factoring_percentage    := p_header_rec.factoring_percentage;
      l_factoring_discount_rate := p_header_rec.factoring_discount_rate;

      IF (l_factoring_date IS NULL
          OR
          l_factoring_percentage IS NULL
          OR
          l_factoring_discount_rate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAFCTG',
                            p_rule_code      => 'LAFCTG',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_factoring_date          := NVL(l_factoring_date,l_rulv_tbl(1).rule_information1);
            l_factoring_percentage    := NVL(l_factoring_percentage,l_rulv_tbl(1).rule_information2);
            l_factoring_discount_rate := NVL(l_factoring_discount_rate,l_rulv_tbl(1).rule_information3);
         END IF;
      END IF;

      IF (l_factoring_date IS NOT NULL) THEN
         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_factoring_date;
         l_rulv_rec.rule_information_category := 'LAFCTG';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_factoring_percentage IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_factoring_percentage;
         l_rulv_rec.rule_information_category := 'LAFCTG';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_factoring_discount_rate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_factoring_discount_rate;
         l_rulv_rec.rule_information_category := 'LAFCTG';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.19';
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LAFCTG/LAFCTG processed');
      -- Rule Group LAEVEL
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LAEVEL';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec := NULL;

      l_evergreen_eligible_flag := p_header_rec.evergreen_eligible_flag;

      IF (l_evergreen_eligible_flag IS NULL
          AND p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAEVEL',
                            p_rule_code      => 'LAEVEL',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_evergreen_eligible_flag  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_evergreen_eligible_flag IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_evergreen_eligible_flag;
         l_rulv_rec.rule_information_category := 'LAEVEL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      l_progress := '1.20';
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LAEVEL/LAEVEL processed');
      l_rulv_rec := NULL;

      l_evergreen_passthru_fees    := TO_CHAR(p_header_rec.evergreen_passthru_fees);
      l_evergreen_passthru_percent := TO_CHAR(p_header_rec.evergreen_passthru_percent);

      IF (l_evergreen_passthru_fees IS NULL
          OR
          l_evergreen_passthru_percent IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAEVEL',
                            p_rule_code      => 'LAEVPT',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_evergreen_passthru_fees    := NVL(l_evergreen_passthru_fees, l_rulv_tbl(1).rule_information1);
            l_evergreen_passthru_percent := NVL(l_evergreen_passthru_percent, l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_evergreen_passthru_fees IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_evergreen_passthru_fees;
         l_rulv_rec.rule_information_category := 'LAEVPT';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_evergreen_passthru_percent IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_evergreen_passthru_percent;
         l_rulv_rec.rule_information_category := 'LAEVPT';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: LAEVEL/LAEVPT processed');
      l_rulv_rec := NULL;

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LABILL';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

/* Rule Migration

      x_bill_to_address_id := NULL;

      IF (p_header_rec.bill_to_address_id IS NOT NULL
          OR
          p_header_rec.bill_to_address IS NOT NULL) THEN

          get_bill_to_address_id(
                             x_return_status           => x_return_status,
                             x_msg_count               => x_msg_count,
                             x_msg_data                => x_msg_data,
                             p_contract_number         => p_header_rec.contract_number,
                             p_auth_org_id             => p_header_rec.authoring_org_id,
                             p_bill_to_address_id      => p_header_rec.bill_to_address_id,
                             p_bill_to_address         => p_header_rec.bill_to_address,
                             p_customer_account_id     => x_customer_account_id,
                             x_bill_to_address_id      => x_bill_to_address_id
                            );

          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             raise header_rule_failed;
          END IF;

      ELSE
         IF (p_header_rec.template_number IS NOT NULL) THEN
            get_contract_rules(
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_chr_id         => p_template_id,
                               p_cle_id         => NULL,
                               p_rgd_code       => 'LABILL',
                               p_rule_code      => 'BTO',
                               x_rulv_tbl       => l_rulv_tbl,
                               x_rule_count     => l_rule_count
                              );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE header_rule_failed;
            END IF;

            IF (l_rule_count > 0) THEN
               x_bill_to_address_id  := TO_NUMBER(l_rulv_tbl(1).object1_id1);
            END IF;
        END IF;
      END IF;

      IF (x_bill_to_address_id IS NOT NULL) THEN
         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LABILL';
         l_rgpv_rec.chr_id     := p_chr_id;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := NULL;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec                           := NULL;
         l_rulv_rec.jtot_object1_code         := 'OKX_BILLTO';
         l_rulv_rec.object1_id1               := TO_CHAR(x_bill_to_address_id);
         l_rulv_rec.object1_id2               := '#';
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information_category := 'BTO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LABILL/BTO processed');
*/
      IF (p_header_rec.customer_id IS NOT NULL
          OR
          p_header_rec.customer_number IS NOT NULL) THEN
          x_return_status := validate_customer(
                                               p_contract_number => p_header_rec.contract_number_old,
                                               p_customer_id     => p_header_rec.customer_id,
                                               p_customer_number => p_header_rec.customer_number,
                                               x_id1             => l_customer_id
                                              );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              x_return_status := OKL_API.G_RET_STS_ERROR;
              raise header_rule_failed;
         END IF;
      ELSE
         -- Get customer info from template_contract
         OPEN temp_role_csr(p_template_id);
         FETCH temp_role_csr INTO l_customer_id;
         CLOSE temp_role_csr;
      END IF;

      x_bank_account_id := NULL;
      IF (p_header_rec.bank_account_id     IS NOT NULL
          OR
          p_header_rec.bank_account_number IS NOT NULL ) THEN

         get_bank_account_id(
                              x_return_status           => x_return_status,
                              x_msg_count               => x_msg_count,
                              x_msg_data                => x_msg_data,
                              p_contract_number         => p_header_rec.contract_number_old,
                              p_auth_org_id             => p_header_rec.authoring_org_id,
                              p_bank_account_id         => p_header_rec.bank_account_id,
                              p_bank_account_number     => p_header_rec.bank_account_number,
                              p_customer_account_id     => g_customer_account_id,
                              p_cust_site_id            => g_bill_to_address_id,
                              x_bank_account_id         => x_bank_account_id
                             );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              x_return_status := OKL_API.G_RET_STS_ERROR;
              raise header_rule_failed;
         END IF;

      ELSE
        IF (p_header_rec.template_number IS NOT NULL) THEN
            get_contract_rules(
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_chr_id         => p_template_id,
                               p_cle_id         => NULL,
                               p_rgd_code       => 'LABILL',
                               p_rule_code      => 'LABACC',
                               x_rulv_tbl       => l_rulv_tbl,
                               x_rule_count     => l_rule_count
                              );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE header_rule_failed;
            END IF;

            IF (l_rule_count > 0) THEN
               x_bank_account_id  := TO_NUMBER(l_rulv_tbl(1).object1_id1);
            END IF;
        END IF;
      END IF;

      IF (x_bank_account_id IS NOT NULL) THEN
         l_rulv_rec                           := NULL;
         l_rulv_rec.jtot_object1_code         := 'OKX_CUSTBKAC';
         l_rulv_rec.object1_id1               := TO_CHAR(x_bank_account_id);
         l_rulv_rec.object1_id2               := '#';
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information_category := 'LABACC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              x_return_status := OKL_API.G_RET_STS_ERROR;
              raise header_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; --bank_account_id

      debug_message('------>Rule: LABILL/LABACC processed');
      l_rulv_rec                           := NULL;

      l_reason_for_invoice_review := p_header_rec.reason_for_invoice_review;
      l_invoice_review_until_date := get_canonicaL_date(p_header_rec.invoice_review_until_date);

      IF (l_reason_for_invoice_review IS NULL
          OR
          l_invoice_review_until_date IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LABILL',
                            p_rule_code      => 'LAINPR',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_reason_for_invoice_review := NVL(l_reason_for_invoice_review,l_rulv_tbl(1).rule_information1);
            l_invoice_review_until_date := NVL(l_invoice_review_until_date,l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_reason_for_invoice_review IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information1         := l_reason_for_invoice_review;
          l_rulv_rec.rule_information_category := 'LAINPR';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_invoice_review_until_date IS NOT NULL) THEN
          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
          l_rulv_rec.dnz_chr_id                := p_chr_id;
          l_rulv_rec.rule_information2         := l_invoice_review_until_date;
          l_rulv_rec.rule_information_category := 'LAINPR';
          l_rulv_rec.std_template_yn           := 'N';
          l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LABILL/LAINPR processed');
      x_invoice_format_id := NULL;
      IF (p_header_rec.invoice_format_id   IS NOT NULL
          OR
          p_header_rec.invoice_format_code IS NOT NULL ) THEN
         get_invoice_format_id(
                               x_return_status           => x_return_status,
                               x_msg_count               => x_msg_count,
                               x_msg_data                => x_msg_data,
                               p_contract_number         => p_header_rec.contract_number_old,
                               p_invoice_format_id       => p_header_rec.invoice_format_id,
                               p_invoice_format_code     => p_header_rec.invoice_format_code,
                               x_invoice_format_id       => x_invoice_format_id,
                               x_invoice_format_name     => x_invoice_format_name
                              );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             raise header_rule_failed;
         END IF;
      END IF;

      x_cash_appl_rule_id := NULL;
      IF (p_header_rec.cash_appl_rule_name IS NOT NULL) THEN
         get_cash_appl_rule_id (
                                x_return_status           => x_return_status,
                                x_msg_count               => x_msg_count,
                                x_msg_data                => x_msg_data,
                                p_contract_number         => p_header_rec.contract_number_old,
                                p_org_id                  => p_header_rec.authoring_org_id,
                                p_cash_appl_rule_name     => p_header_rec.cash_appl_rule_name,
                                x_cash_appl_rule_id       => x_cash_appl_rule_id
                               );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             raise header_rule_failed;
         END IF;

      END IF;

      IF (p_header_rec.invoice_format_id IS NULL
          OR
          p_header_rec.invoice_format_code IS NULL
          OR
          p_header_rec.cash_appl_rule_name IS NULL
          OR
          p_header_rec.review_invoice_flag IS NULL
	  OR --hariven bug 5359935
		  p_header_rec.print_lead_days IS NULL --hariven bug 5359935
          AND
          p_header_rec.template_number IS NOT NULL) THEN

            get_contract_rules(
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_chr_id         => p_template_id,
                               p_cle_id         => NULL,
                               p_rgd_code       => 'LABILL',
                               p_rule_code      => 'LAINVD',
                               x_rulv_tbl       => l_rulv_tbl,
                               x_rule_count     => l_rule_count
                              );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE header_rule_failed;
            END IF;

            IF (l_rule_count > 0) THEN

               --sechawla 13-may-09 6826580 : assign ID instead of name
              -- x_invoice_format_name  := l_rulv_tbl(1).rule_information1;
               x_invoice_format_id  := l_rulv_tbl(1).rule_information1;

               l_review_invoice_flag  := NVL(p_header_rec.review_invoice_flag,
                                             l_rulv_tbl(1).rule_information4);

					     l_print_lead_days      := NVL(p_header_rec.print_lead_days, --hariven bug 5359935
                                             l_rulv_tbl(1).rule_information3); --hariven bug 5359935

               x_cash_appl_rule_id    := NVL(x_cash_appl_rule_id, l_rulv_tbl(1).object1_id1);
            END IF;
      END IF;

      l_rulv_rec := NULL;

      --sechawla 13-may-09 6826580 : assign ID instead of name
      --IF (x_invoice_format_name IS NOT NULL) THEN
      IF (x_invoice_format_id IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;

		 --sechawla 13-may-09 6826580 : assign ID instead of name
         --l_rulv_rec.rule_information1         := x_invoice_format_name;
         l_rulv_rec.rule_information1         := x_invoice_format_id;

         l_rulv_rec.rule_information_category := 'LAINVD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (NVL(l_review_invoice_flag, p_header_rec.review_invoice_flag) IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := NVL(l_review_invoice_flag, p_header_rec.review_invoice_flag);
         l_rulv_rec.rule_information_category := 'LAINVD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      --hariven bug 5359935 start
      IF (NVL(l_print_lead_days, p_header_rec.print_lead_days) IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := NVL(l_print_lead_days, p_header_rec.print_lead_days);
         l_rulv_rec.rule_information_category := 'LAINVD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;
     --hariven bug 5359935 End

      IF (x_cash_appl_rule_id IS NOT NULL) THEN
         l_rulv_rec.jtot_object1_code         := 'OKL_CASHAPPL';
         l_rulv_rec.object1_id1               := TO_CHAR(x_cash_appl_rule_id);
         l_rulv_rec.object1_id2               := '#';
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information_category := 'LAINVD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- Bug 5085099
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LABILL/LAINVD processed');
      x_payment_method_id := NULL;
      IF (p_header_rec.payment_method_id IS NOT NULL
          OR
          p_header_rec.payment_method IS NOT NULL) THEN
         get_payment_method_id(
                               x_return_status           => x_return_status,
                               x_msg_count               => x_msg_count,
                               x_msg_data                => x_msg_data,
                               p_contract_number         => p_header_rec.contract_number_old,
                               p_customer_account_id     => g_customer_account_id,
                               p_bill_to_address_id      => g_bill_to_address_id,  -- got from get_bill_to_address_id() above
                               p_payment_method_id       => p_header_rec.payment_method_id,
                               p_payment_method          => p_header_rec.payment_method,
                               x_payment_method_id       => x_payment_method_id
                              );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              x_return_status := OKL_API.G_RET_STS_ERROR;
              raise header_rule_failed;
         END IF;

      ELSE
         IF (p_header_rec.template_number IS NOT NULL) THEN
            get_contract_rules(
                               x_return_status  => x_return_status,
                               x_msg_count      => x_msg_count,
                               x_msg_data       => x_msg_data,
                               p_chr_id         => p_template_id,
                               p_cle_id         => NULL,
                               p_rgd_code       => 'LABILL',
                               p_rule_code      => 'LAPMTH',
                               x_rulv_tbl       => l_rulv_tbl,
                               x_rule_count     => l_rule_count
                              );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE header_rule_failed;
            END IF;

            IF (l_rule_count > 0) THEN
               x_payment_method_id := l_rulv_tbl(1).object1_id1;
            END IF;
         END IF;
      END IF;
      --debug_message('2PMNT ID: '||x_payment_method_id);

      l_rulv_rec := NULL;
      IF (x_payment_method_id IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.jtot_object1_code         := 'OKX_RCPTMTH';
         l_rulv_rec.object1_id1               := TO_CHAR(x_payment_method_id);
         l_rulv_rec.object1_id2               := '#';
         l_rulv_rec.rule_information_category := 'LAPMTH';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LABILL/LAPMTH processed');
      -- Rule Group LACPLN
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LACPLN';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_capitalize_flag := p_header_rec.capitalize_flag;

      IF (l_capitalize_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LACPLN',
                            p_rule_code      => 'LACPLN',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_capitalize_flag  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (p_header_rec.capitalize_flag IS NOT NULL) THEN

         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := p_header_rec.capitalize_flag;
         l_rulv_rec.rule_information_category := 'LACPLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            raise header_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; -- capitalize

      debug_message('------>Rule: LACPLN/LACPLN processed');
      -- Rule Group LANNTF
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LANNTF';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_non_notification_flag := p_header_rec.non_notification_flag;

      IF (l_non_notification_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
          get_contract_rules(
                             x_return_status  => x_return_status,
                             x_msg_count      => x_msg_count,
                             x_msg_data       => x_msg_data,
                             p_chr_id         => p_template_id,
                             p_cle_id         => NULL,
                             p_rgd_code       => 'LANNTF',
                             p_rule_code      => 'LANNTF',
                             x_rulv_tbl       => l_rulv_tbl,
                             x_rule_count     => l_rule_count
                            );

          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             RAISE header_rule_failed;
          END IF;

          IF (l_rule_count > 0) THEN
             l_non_notification_flag  := l_rulv_tbl(1).rule_information1;
          END IF;
      END IF;

      IF (l_non_notification_flag IS NOT NULL) THEN

         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_non_notification_flag;
         l_rulv_rec.rule_information_category := 'LANNTF';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            raise header_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; -- non_notification
      debug_message('------>Rule: LANNTF/LANNTF processed');

      -- Rule Group LARVIN -- DDD
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LARVIN';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;
      l_rvi_auto_calculate_flag := p_header_rec.rvi_auto_calculate_flag;

      IF (l_rvi_auto_calculate_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LARVIN',
                            p_rule_code      => 'LARVAU',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_rvi_auto_calculate_flag  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_rvi_auto_calculate_flag IS NOT NULL) THEN

         -- Bug 4655611
         IF (NVL(l_rvi_auto_calculate_flag,'N') = 'Y') THEN
           -- Validate rvi stream
           OPEN contract_csr(p_chr_id);
           FETCH contract_csr INTO l_contract_number,l_contract_start_date;

           IF contract_csr%NOTFOUND THEN
             x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
             CLOSE contract_csr;
             OKL_API.SET_MESSAGE(p_app_name     => g_app_name,
                                 p_msg_name     => 'OKL_LLA_CHR_ID');
             RAISE header_rule_failed;
           END IF;

           CLOSE contract_csr;
           debug_message('After close_contract_csr...');

           l_rvi_stream_code := p_header_rec.RVI_STREAM_CODE;
           l_rvi_stream_purpose_code := p_header_rec.RVI_STREAM_PURPOSE_CODE;
           debug_message('l_rvi_stream_code=' || l_rvi_stream_code);
           debug_message('l_rvi_stream_purpose_code=' || l_rvi_stream_purpose_code);
           IF ((l_rvi_stream_code IS NOT NULL AND
                l_rvi_stream_purpose_code IS NULL) OR
               (l_rvi_stream_code IS NULL AND
                l_rvi_stream_purpose_code IS NOT NULL)) THEN

                  okl_api.set_message(
                                      G_APP_NAME,
                                      G_INVALID_VALUE,
                                      'CONTRACT_NUM',
                                      l_contract_number, --||'/'||TO_CHAR(p_line_number),
                                     'COL_NAME',
                                     'RVI_STREAM_CODE, RVI_STREAM_PURPOSE_CODE',
                                     'COL_VALUE',
                                     l_rvi_stream_code||', '||l_rvi_stream_purpose_code
                                    );
                  x_return_status := OKL_API.G_RET_STS_ERROR;
                  RAISE header_rule_failed;

           ELSIF (l_rvi_stream_code IS NOT NULL AND
               l_rvi_stream_purpose_code IS NOT NULL) THEN
              check_stream_type_code(
                                     x_return_status    => x_return_status,
                                     x_msg_count        => x_msg_count,
                                     x_msg_data         => x_msg_data,
                                     p_stream_type_code => l_rvi_stream_code,
                                     p_stream_purpose   => l_rvi_stream_purpose_code,
                                     x_id1              => l_rvi_stream_type_id,
                                     x_name             => l_rvi_stream_name
                                    );
              IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                  okl_api.set_message(
                                      G_APP_NAME,
                                      G_INVALID_VALUE,
                                      'CONTRACT_NUM',
                                      l_contract_number, --||'/'||TO_CHAR(p_line_number),
                                     'COL_NAME',
                                     'RVI_STREAM_CODE, RVI_STREAM_PURPOSE_CODE',
                                     'COL_VALUE',
                                     l_rvi_stream_code||', '||l_rvi_stream_purpose_code
                                    );
                  x_return_status := OKL_API.G_RET_STS_ERROR;
                  RAISE header_rule_failed;
              END IF;

              debug_message('l_rvi_stream_type_id=' || l_rvi_stream_type_id);
              -- Check if the stream type is ID is effective
              OPEN rvi_stream_csr (l_rvi_stream_type_id, l_contract_start_date);
              FETCH rvi_stream_csr INTO l_yn;

              IF rvi_stream_csr%NOTFOUND THEN
                 CLOSE rvi_stream_csr;
                 okl_api.set_message(
                                     G_APP_NAME,
                                     G_NO_STRM_TMPL,
                                     'CONTRACT_NUM',
                                     l_contract_number, --||'/'||p_line_number,
                                     'COL_NAME',
                                     'RVI_STREAM_CODE, RVI_STREAM_PURPOSE_CODE',
                                     'COL_VALUE',
                                     l_rvi_stream_code||', '||l_rvi_stream_purpose_code
                                   );
                 RAISE header_rule_failed;
              ELSE
                 CLOSE rvi_stream_csr;
              END IF;
           END IF;

           l_fee_types_rec.dnz_chr_id := p_chr_id;
           l_fee_types_rec.item_id1 := l_rvi_stream_type_id;
           OKL_MAINTAIN_FEE_PVT.PROCESS_RVI_STREAM(
                                    p_api_version   => 1.0,
                                    p_init_msg_list => OKL_API.G_FALSE,
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_check_box_value => 'Y',
                                    p_fee_types_rec => l_fee_types_rec,
                                    x_fee_types_rec => x_fee_types_rec);

           IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              raise header_rule_failed;
           END IF;


           l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
           l_rulv_rec.dnz_chr_id                := p_chr_id;
           l_rulv_rec.rule_information1         := l_rvi_auto_calculate_flag;
           l_rulv_rec.rule_information_category := 'LARVAU';
           l_rulv_rec.std_template_yn           := 'N';
           l_rulv_rec.warn_yn                   := 'N';

           create_rule_group_and_rule(
                                      x_return_status => x_return_status,
                                      x_msg_count     => x_msg_count,
                                      x_msg_data      => x_msg_data,
                                      p_rgp_id        => l_rgp_id,
                                      p_rgpv_rec      => l_rgpv_rec,
                                      p_rulv_rec      => l_rulv_rec,
                                      x_rgpv_rec      => x_rgpv_rec,
                                      x_rulv_rec      => x_rulv_rec
                                     );

           IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              raise header_rule_failed;
           END IF;

           IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
              l_rgp_id := x_rgpv_rec.id;
           END IF;
         END IF; -- if rvi_auto_calculate_flag = 'Y'
         -- Bug 4655611

      END IF; -- rvi_auto_calculate_flag

      debug_message('------>Rule: LARVIN/LARVAU processed');
      l_rulv_rec            := NULL;
/* Removed form Rule Definition 05/22/2002
      IF (p_header_rec.rvi_guaranteed_amount IS NOT NULL) THEN

         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := TO_CHAR(p_header_rec.rvi_guaranteed_amount);
         l_rulv_rec.rule_information_category := 'LARVAM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

      END IF; -- rvi_guaranteed_amount

      IF (p_header_rec.rvi_present_guaranteed_amount IS NOT NULL) THEN

         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := TO_CHAR(p_header_rec.rvi_present_guaranteed_amount);
         l_rulv_rec.rule_information_category := 'LARVAM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

      END IF; -- rvi_guaranteed_amount

      IF (p_header_rec.rvi_premium_amount IS NOT NULL) THEN

         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := TO_CHAR(p_header_rec.rvi_premium_amount);
         l_rulv_rec.rule_information_category := 'LARVAM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

      END IF; -- rvi_guaranteed_amount

--  Removed form Rule Definition 05/22/2002
*/

      l_rvi_rate := TO_CHAR(p_header_rec.rvi_rate);

      IF (l_rvi_rate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LARVIN',
                            p_rule_code      => 'LARVAM',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_rvi_rate  := l_rulv_tbl(1).rule_information4;
         END IF;
      END IF;

      IF (l_rvi_rate IS NOT NULL) THEN

         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_rvi_rate;
         l_rulv_rec.rule_information_category := 'LARVAM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

      END IF; -- rvi_guaranteed_amount

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: LARVIN/LARVAM processed');
      -- Rule Group LAMXTX
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LAMXTX';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;
      l_tax_withholding_flag := p_header_rec.tax_withholding_flag;

      IF (l_tax_withholding_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAMXTX',
                            p_rule_code      => 'LAUKTX',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_tax_withholding_flag  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_tax_withholding_flag IS NOT NULL) THEN

         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_tax_withholding_flag;
         l_rulv_rec.rule_information_category := 'LAUKTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            raise header_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; -- tax_withholding_flag

      debug_message('------>Rule: LAMXTX/LAUKTX processed');
      l_rulv_rec            := NULL;

      l_tax_calc_formula_name := p_header_rec.tax_calc_formula_name;

      IF (l_tax_calc_formula_name IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAMXTX',
                            p_rule_code      => 'LAFORM',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_tax_calc_formula_name := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_tax_calc_formula_name IS NOT NULL) THEN

         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_tax_calc_formula_name;
         l_rulv_rec.rule_information_category := 'LAFORM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            raise header_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; -- tax_calc_formula_name

      debug_message('------>Rule: LAMXTX/LAFORM processed');

/* Not being used since 11.5.9
   Tax Owner rule is getting created from Product

      -- Rule Group LATOWN
      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LATOWN';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;

      l_tax_owner := p_header_rec.tax_owner;

      IF (l_tax_owner IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LATOWN',
                            p_rule_code      => 'LATOWN',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_tax_owner  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_tax_owner IS NOT NULL) THEN

         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_tax_owner;
         l_rulv_rec.rule_information_category := 'LATOWN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            raise header_rule_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; -- tax_owner
*/

      -- Rule Group LAPACT

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LAPACT';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec := NULL;

      l_private_activity_bond_flag := p_header_rec.private_activity_bond_flag;

      IF (l_private_activity_bond_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAPACT',
                            p_rule_code      => 'LAPACT',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_private_activity_bond_flag  := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_private_activity_bond_flag IS NOT NULL) THEN
         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_private_activity_bond_flag;
         l_rulv_rec.rule_information_category := 'LAPACT';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;


      debug_message('------>Rule: LAPACT/LAPACT processed');
--**************************

      -- Rule Group AMLARL

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMLARL';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;

      l_floor_price_formula      := p_header_rec.floor_price_formula;
      l_remkt_sale_price_formula := p_header_rec.remkt_sale_price_formula;

      --debug_message('Floor Price Formula: '|| l_floor_price_formula);
      IF (l_floor_price_formula IS NULL
          OR
          l_remkt_sale_price_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMLARL',
                            p_rule_code      => 'AMCFPR',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_floor_price_formula      := NVL(l_floor_price_formula,l_rulv_tbl(1).rule_information1);
            l_remkt_sale_price_formula := NVL(l_remkt_sale_price_formula,l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_floor_price_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_floor_price_formula;
         l_rulv_rec.rule_information_category := 'AMCFPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_remkt_sale_price_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_remkt_sale_price_formula;
         l_rulv_rec.rule_information_category := 'AMCFPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMLARL/AMCFPR processed');

      -- Rule Group AMREPQ

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMREPQ';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;

      l_repurchase_quote_option  := p_header_rec.repurchase_quote_option;
      l_repurchase_quote_formula := p_header_rec.repurchase_quote_formula;

      IF (l_repurchase_quote_option IS NULL
          OR
          l_repurchase_quote_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMREPQ',
                            p_rule_code      => 'AMARQC',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_repurchase_quote_option  := NVL(l_repurchase_quote_option,l_rulv_tbl(1).rule_information1);
            l_repurchase_quote_formula := NVL(l_repurchase_quote_formula,l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_repurchase_quote_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_repurchase_quote_option;
         l_rulv_rec.rule_information_category := 'AMARQC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_repurchase_quote_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_repurchase_quote_formula;
         l_rulv_rec.rule_information_category := 'AMARQC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMREPQ/AMARQC processed');
      l_rulv_rec := NULL;

      l_sale_price_option  := p_header_rec.sale_price_option;
      l_sale_price_amount  := TO_CHAR(p_header_rec.sale_price_amount);
      l_sale_price_formula := p_header_rec.sale_price_formula;
      l_sale_price_prorate := p_header_rec.sale_price_prorate;

      IF (l_sale_price_option IS NULL
          OR
          l_sale_price_amount IS NULL
          OR
          l_sale_price_formula IS NULL
          OR
          l_sale_price_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMREPQ',
                            p_rule_code      => 'AMBSPR',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_sale_price_option  := NVL(l_sale_price_option,l_rulv_tbl(1).rule_information1);
            l_sale_price_amount  := NVL(l_sale_price_amount,l_rulv_tbl(1).rule_information2);
            l_sale_price_formula := NVL(l_sale_price_formula,l_rulv_tbl(1).rule_information3);
            l_sale_price_prorate := NVL(l_sale_price_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_sale_price_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_sale_price_option;
         l_rulv_rec.rule_information_category := 'AMBSPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_sale_price_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_sale_price_amount;
         l_rulv_rec.rule_information_category := 'AMBSPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_sale_price_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_sale_price_formula;
         l_rulv_rec.rule_information_category := 'AMBSPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_sale_price_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_sale_price_prorate;
         l_rulv_rec.rule_information_category := 'AMBSPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMREPQ/AMBSPR processed');
      l_rulv_rec := NULL;

      l_discount_rate_option  := p_header_rec.discount_rate_option;
      l_discount_rate_amount  := p_header_rec.discount_rate_amount;
      l_discount_rate_formula := p_header_rec.discount_rate_formula;
      l_discount_rate_prorate := p_header_rec.discount_rate_prorate;

      IF (l_discount_rate_option IS NULL
          OR
          l_discount_rate_amount IS NULL
          OR
          l_discount_rate_formula IS NULL
          OR
          l_discount_rate_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMREPQ',
                            p_rule_code      => 'AMCQDR',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_discount_rate_option  := NVL(l_discount_rate_option,l_rulv_tbl(1).rule_information1);
            l_discount_rate_amount  := NVL(l_discount_rate_amount,l_rulv_tbl(1).rule_information2);
            l_discount_rate_formula := NVL(l_discount_rate_formula,l_rulv_tbl(1).rule_information3);
            l_discount_rate_prorate := NVL(l_discount_rate_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_discount_rate_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_discount_rate_option;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_discount_rate_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_discount_rate_amount;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_discount_rate_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_discount_rate_formula;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_discount_rate_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_discount_rate_prorate;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMREPQ/AMCQDR processed');
      l_rulv_rec := NULL;

      l_quote_fee_option   := p_header_rec.quote_fee_option;
      l_quote_fee_amount   := TO_CHAR(p_header_rec.quote_fee_amount);
      l_quote_fee_formula  := p_header_rec.quote_fee_formula;
      l_quote_fee_prorate  := p_header_rec.quote_fee_prorate;

      IF (l_quote_fee_option IS NULL
          OR
          l_quote_fee_amount IS NULL
          OR
          l_quote_fee_formula IS NULL
          OR
          l_quote_fee_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMREPQ',
                            p_rule_code      => 'AMCQFE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_quote_fee_option  := NVL(l_quote_fee_option,l_rulv_tbl(1).rule_information1);
            l_quote_fee_amount  := NVL(l_quote_fee_amount,l_rulv_tbl(1).rule_information2);
            l_quote_fee_formula := NVL(l_quote_fee_formula,l_rulv_tbl(1).rule_information3);
            l_quote_fee_prorate := NVL(l_quote_fee_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_quote_fee_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_quote_fee_option;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_quote_fee_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_quote_fee_amount;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_quote_fee_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_quote_fee_formula;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_quote_fee_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_quote_fee_prorate;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMREPQ/AMCQFE processed');
      -- Rule Group AMTEOC

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMTEOC';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;

      l_ert_purchase_opt              := p_header_rec.ert_purchase_opt;
      l_ert_purchase_opt_type         := p_header_rec.ert_purchase_opt_type;
      l_ert_purchase_opt_amount       := TO_CHAR(p_header_rec.ert_purchase_opt_amount);
      l_ert_purchase_opt_formula      := p_header_rec.ert_purchase_opt_formula;
      l_ert_purchase_opt_prorate      := p_header_rec.ert_purchase_opt_prorate;
      l_ert_purchase_opt_max_opt      := p_header_rec.ert_purchase_opt_max_opt;
      l_ert_purchase_opt_max_amt      := TO_CHAR(p_header_rec.ert_purchase_opt_max_amt);
      l_ert_purchase_opt_max_formula  := p_header_rec.ert_purchase_opt_max_formula;
      l_ert_purchase_opt_min_opt      := p_header_rec.ert_purchase_opt_min_opt;
      l_ert_purchase_opt_min_amt      := TO_CHAR(p_header_rec.ert_purchase_opt_min_amt);
      l_ert_purchase_opt_min_formula  := p_header_rec.ert_purchase_opt_min_formula;

      IF (l_ert_purchase_opt IS NULL
          OR
          l_ert_purchase_opt_type IS NULL
          OR
          l_ert_purchase_opt_amount IS NULL
          OR
          l_ert_purchase_opt_formula IS NULL
          OR
          l_ert_purchase_opt_prorate IS NULL
          OR
          l_ert_purchase_opt_max_opt IS NULL
          OR
          l_ert_purchase_opt_max_amt IS NULL
          OR
          l_ert_purchase_opt_max_formula IS NULL
          OR
          l_ert_purchase_opt_min_opt IS NULL
          OR
          l_ert_purchase_opt_min_amt IS NULL
          OR
          l_ert_purchase_opt_min_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEOC',
                            p_rule_code      => 'AMBPOC',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_purchase_opt              := NVL(l_ert_purchase_opt,l_rulv_tbl(1).rule_information1);
            l_ert_purchase_opt_type         := NVL(l_ert_purchase_opt_type,l_rulv_tbl(1).rule_information11);
            l_ert_purchase_opt_amount       := NVL(l_ert_purchase_opt_amount,l_rulv_tbl(1).rule_information2);
            l_ert_purchase_opt_formula      := NVL(l_ert_purchase_opt_formula,l_rulv_tbl(1).rule_information3);
            l_ert_purchase_opt_prorate      := NVL(l_ert_purchase_opt_prorate,l_rulv_tbl(1).rule_information4);
            l_ert_purchase_opt_max_opt      := NVL(l_ert_purchase_opt_max_opt,l_rulv_tbl(1).rule_information5);
            l_ert_purchase_opt_max_amt      := NVL(l_ert_purchase_opt_max_amt,l_rulv_tbl(1).rule_information6);
            l_ert_purchase_opt_max_formula  := NVL(l_ert_purchase_opt_max_formula,l_rulv_tbl(1).rule_information7);
            l_ert_purchase_opt_min_opt      := NVL(l_ert_purchase_opt_min_opt,l_rulv_tbl(1).rule_information8);
            l_ert_purchase_opt_min_amt      := NVL(l_ert_purchase_opt_min_amt,l_rulv_tbl(1).rule_information9);
            l_ert_purchase_opt_min_formula  := NVL(l_ert_purchase_opt_min_formula,l_rulv_tbl(1).rule_information10);
         END IF;
      END IF;

      IF (l_ert_purchase_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_ert_purchase_opt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_type IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information11        := l_ert_purchase_opt_type;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_purchase_opt_amount;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_purchase_opt_formula;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_ert_purchase_opt_prorate;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_max_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_ert_purchase_opt_max_opt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_max_amt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information6         := l_ert_purchase_opt_max_amt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_max_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information7         := l_ert_purchase_opt_max_formula;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_min_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information8         := l_ert_purchase_opt_min_opt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_min_amt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information9         := l_ert_purchase_opt_min_amt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_purchase_opt_min_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information10        := l_ert_purchase_opt_min_formula;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEOC/AMBPOC processed');
      -- Rule Group AMTFOC

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMTFOC';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;

      l_eot_purchase_opt              := p_header_rec.eot_purchase_opt;
      l_eot_purchase_opt_type         := p_header_rec.eot_purchase_opt_type;
      l_eot_purchase_opt_amount       := TO_CHAR(p_header_rec.eot_purchase_opt_amount);
      l_eot_purchase_opt_formula      := p_header_rec.eot_purchase_opt_formula;
      l_eot_purchase_opt_prorate      := p_header_rec.eot_purchase_opt_prorate;
      l_eot_purchase_opt_max_opt      := p_header_rec.eot_purchase_opt_max_opt;
      l_eot_purchase_opt_max_amt      := TO_CHAR(p_header_rec.eot_purchase_opt_max_amt);
      l_eot_purchase_opt_max_formula  := p_header_rec.eot_purchase_opt_max_formula;
      l_eot_purchase_opt_min_opt      := p_header_rec.eot_purchase_opt_min_opt;
      l_eot_purchase_opt_min_amt      := TO_CHAR(p_header_rec.eot_purchase_opt_min_amt);
      l_eot_purchase_opt_min_formula  := p_header_rec.eot_purchase_opt_min_formula;

      IF (l_eot_purchase_opt IS NULL
          OR
          l_eot_purchase_opt_type IS NULL
          OR
          l_eot_purchase_opt_amount IS NULL
          OR
          l_eot_purchase_opt_formula IS NULL
          OR
          l_eot_purchase_opt_prorate IS NULL
          OR
          l_eot_purchase_opt_max_opt IS NULL
          OR
          l_eot_purchase_opt_max_amt IS NULL
          OR
          l_eot_purchase_opt_max_formula IS NULL
          OR
          l_eot_purchase_opt_min_opt IS NULL
          OR
          l_eot_purchase_opt_min_amt IS NULL
          OR
          l_eot_purchase_opt_min_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFOC',
                            p_rule_code      => 'AMBPOC',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_purchase_opt              := NVL(l_eot_purchase_opt,l_rulv_tbl(1).rule_information1);
            l_eot_purchase_opt_type         := NVL(l_eot_purchase_opt_type,l_rulv_tbl(1).rule_information11);
            l_eot_purchase_opt_amount       := NVL(l_eot_purchase_opt_amount,l_rulv_tbl(1).rule_information2);
            l_eot_purchase_opt_formula      := NVL(l_eot_purchase_opt_formula,l_rulv_tbl(1).rule_information3);
            l_eot_purchase_opt_prorate      := NVL(l_eot_purchase_opt_prorate,l_rulv_tbl(1).rule_information4);
            l_eot_purchase_opt_max_opt      := NVL(l_eot_purchase_opt_max_opt,l_rulv_tbl(1).rule_information5);
            l_eot_purchase_opt_max_amt      := NVL(l_eot_purchase_opt_max_amt,l_rulv_tbl(1).rule_information6);
            l_eot_purchase_opt_max_formula  := NVL(l_eot_purchase_opt_max_formula,l_rulv_tbl(1).rule_information7);
            l_eot_purchase_opt_min_opt      := NVL(l_eot_purchase_opt_min_opt,l_rulv_tbl(1).rule_information8);
            l_eot_purchase_opt_min_amt      := NVL(l_eot_purchase_opt_min_amt,l_rulv_tbl(1).rule_information9);
            l_eot_purchase_opt_min_formula  := NVL(l_eot_purchase_opt_min_formula,l_rulv_tbl(1).rule_information10);
         END IF;
      END IF;

      IF (l_eot_purchase_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_purchase_opt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_type IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information11        := l_eot_purchase_opt_type;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_purchase_opt_amount;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_purchase_opt_formula;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_eot_purchase_opt_prorate;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_max_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_eot_purchase_opt_max_opt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_max_amt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information6         := l_eot_purchase_opt_max_amt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_max_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information7         := l_eot_purchase_opt_max_formula;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_min_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information8         := l_eot_purchase_opt_min_opt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_min_amt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information9         := l_eot_purchase_opt_min_amt;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_purchase_opt_min_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information10        := l_eot_purchase_opt_min_formula;
         l_rulv_rec.rule_information_category := 'AMBPOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFOC/AMBPOC processed');

      l_rulv_rec := NULL;

      l_eot_auto_proc_purchase_opt := p_header_rec.eot_auto_proc_purchase_opt;

      IF (l_eot_auto_proc_purchase_opt IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFOC',
                            p_rule_code      => 'AMTINV',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_auto_proc_purchase_opt := NVL(l_eot_auto_proc_purchase_opt,l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_eot_auto_proc_purchase_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_auto_proc_purchase_opt;
         l_rulv_rec.rule_information_category := 'AMTINV';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFOC/AMTINV processed');

      -- Rule Group AMTQPR

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMTQPR';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec            := NULL;

-- cklee bug# 3440442 bug# 3440442
     IF (NVL(p_header_rec.tqp_erl_termination_alwd_flag,'N') NOT IN ('Y','N')) THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_VALUE,
                               'CONTRACT_NUM',
                               p_header_rec.contract_number_old,
                               'COL_NAME',
                               'TQP_ERL_TERMINATION_ALWD_FLAG',
                               'COL_VALUE',
                               p_header_rec.tqp_erl_termination_alwd_flag
                              );

         x_return_status := OKL_API.G_RET_STS_ERROR;

        raise header_rule_failed;
     END IF;
-- cklee bug# 3440442 bug# 3440442

      l_tqp_erl_term_alwd_flag := p_header_rec.tqp_erl_termination_alwd_flag;

      IF (l_tqp_erl_term_alwd_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTQPR',
                            p_rule_code      => 'AMCTTA',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_tqp_erl_term_alwd_flag := NVL(l_tqp_erl_term_alwd_flag,l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_tqp_erl_term_alwd_flag IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_tqp_erl_term_alwd_flag;
         l_rulv_rec.rule_information_category := 'AMCTTA';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTQPR/AMCTTA processed');
      l_rulv_rec := NULL;

      l_tqp_prt_term_alwd_flag := p_header_rec.tqp_prt_termination_alwd_flag;

      IF (l_tqp_prt_term_alwd_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTQPR',
                            p_rule_code      => 'AMPTQA',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_tqp_prt_term_alwd_flag := NVL(l_tqp_prt_term_alwd_flag,l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_tqp_prt_term_alwd_flag IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_tqp_prt_term_alwd_flag;
         l_rulv_rec.rule_information_category := 'AMPTQA';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTQPR/AMPTQA processed');
      l_rulv_rec := NULL;

      l_quote_effective_days   := TO_CHAR(p_header_rec.quote_effective_days);
      l_quote_eff_max_days     := TO_CHAR(p_header_rec.quote_eff_max_days);

      IF (l_quote_effective_days IS NULL
          OR
          l_quote_eff_max_days IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTQPR',
                            p_rule_code      => 'AMQTEF',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_quote_effective_days := NVL(l_quote_effective_days,l_rulv_tbl(1).rule_information1);
            l_quote_eff_max_days   := NVL(l_quote_eff_max_days, l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_quote_effective_days IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_quote_effective_days;
         l_rulv_rec.rule_information_category := 'AMQTEF';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_quote_eff_max_days IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_quote_eff_max_days;
         l_rulv_rec.rule_information_category := 'AMQTEF';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTQPR/AMQTEF processed');
      l_rulv_rec := NULL;

      l_eot_tolerance_days := TO_CHAR(p_header_rec.eot_tolerance_days);

      IF (l_eot_tolerance_days IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTQPR',
                            p_rule_code      => 'AMTSET',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_tolerance_days := NVL(l_eot_tolerance_days,l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_eot_tolerance_days IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_tolerance_days;
         l_rulv_rec.rule_information_category := 'AMTSET';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTQPR/AMTSET processed');

      -- Send bill of sale, manual quote, First term date

      l_rulv_rec := NULL;

      l_send_bill_sale := p_header_rec.send_bill_sale;

      IF (l_send_bill_sale IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTQPR',
                            p_rule_code      => 'AMFBOS',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_send_bill_sale := NVL(l_send_bill_sale,l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_send_bill_sale IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_send_bill_sale;
         l_rulv_rec.rule_information_category := 'AMFBOS';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTQPR/AMFBOS processed');

      l_rulv_rec := NULL;

      l_manual_quotes_only := p_header_rec.manual_quotes_only;

      IF (l_manual_quotes_only IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTQPR',
                            p_rule_code      => 'AMCMTQ',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_manual_quotes_only := NVL(l_manual_quotes_only,l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_manual_quotes_only IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_manual_quotes_only;
         l_rulv_rec.rule_information_category := 'AMCMTQ';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTQPR/AMCMTQ processed');

      l_rulv_rec := NULL;

      l_first_termination_date := get_canonical_date(p_header_rec.first_termination_date);

      IF (l_first_termination_date IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTQPR',
                            p_rule_code      => 'AMDFTD',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_first_termination_date := NVL(l_first_termination_date,l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_first_termination_date IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_first_termination_date;
         l_rulv_rec.rule_information_category := 'AMDFTD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTQPR/AMDFTD processed');

      -- Rule Group AMTPAR

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMTPAR';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec := NULL;

      l_prt_termination_approval_req := p_header_rec.prt_termination_approval_req;

      IF (l_prt_termination_approval_req IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTPAR',
                            p_rule_code      => 'AMAPRE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_prt_termination_approval_req := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_prt_termination_approval_req IS NOT NULL) THEN
         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_prt_termination_approval_req;
         l_rulv_rec.rule_information_category := 'AMAPRE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTPAR/AMAPRE processed');
      l_rulv_rec := NULL;

      l_prt_termination_allowed_flag := p_header_rec.prt_termination_allowed_flag;

      IF (l_prt_termination_allowed_flag IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTPAR',
                            p_rule_code      => 'AMPTQA',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_prt_termination_allowed_flag := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_prt_termination_allowed_flag IS NOT NULL) THEN
         l_rulv_rec                           := NULL;
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_prt_termination_allowed_flag;
         l_rulv_rec.rule_information_category := 'AMPTQA';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTPAR/AMPTQA processed');
      -- Rule Group AMTPAR

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMTGAL';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';
      l_rulv_rec := NULL;


      l_gain_loss_approval_req      := p_header_rec.gain_loss_approval_req;

      IF (l_gain_loss_approval_req IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN

         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTGAL',
                            p_rule_code      => 'AMAPRE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_gain_loss_approval_req := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_gain_loss_approval_req IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_gain_loss_approval_req;
         l_rulv_rec.rule_information_category := 'AMAPRE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTGAL/AMAPRE processed');
      l_rulv_rec := NULL;

      l_gain_loss_net_quote_opt     := p_header_rec.gain_loss_net_quote_opt;
      l_gain_loss_net_quote_amt     := TO_CHAR(p_header_rec.gain_loss_net_quote_amt);
      l_gain_loss_net_quote_formula := p_header_rec.gain_loss_net_quote_formula;
      l_gain_loss_tolrn_allwd       := p_header_rec.gain_loss_tolerance_allowed;
      l_gain_loss_tolrnc_allwd_amt  := p_header_rec.gain_loss_tolrnc_allwd_amt;
      l_gain_loss_tolrnc_allwd_frml := p_header_rec.gain_loss_tolrnc_allwd_frml;
      l_gain_loss_tolrnc_basis      := p_header_rec.gain_loss_tolrnc_basis;
      l_gain_loss_apprv_proc_frml   := p_header_rec.gain_loss_apprv_proc_frml;

      IF (l_gain_loss_net_quote_opt IS NULL
          OR
          l_gain_loss_net_quote_amt IS NULL
          OR
          l_gain_loss_net_quote_formula IS NULL
          OR
          l_gain_loss_tolrn_allwd IS NULL
          OR
          l_gain_loss_tolrnc_allwd_amt IS NULL
          OR
          l_gain_loss_tolrnc_allwd_frml IS NULL
          OR
          l_gain_loss_tolrnc_basis IS NULL
          OR
          l_gain_loss_apprv_proc_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN

         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTGAL',
                            p_rule_code      => 'AMGALO',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_gain_loss_net_quote_opt     := NVL(l_gain_loss_net_quote_opt,l_rulv_tbl(1).rule_information1);
            l_gain_loss_net_quote_amt     := NVL(l_gain_loss_net_quote_amt,l_rulv_tbl(1).rule_information2);
            l_gain_loss_net_quote_formula := NVL(l_gain_loss_net_quote_formula,l_rulv_tbl(1).rule_information3);
            l_gain_loss_tolrn_allwd       := NVL(l_gain_loss_tolrn_allwd,l_rulv_tbl(1).rule_information7);
            l_gain_loss_tolrnc_allwd_amt  := NVL(l_gain_loss_tolrnc_allwd_amt,l_rulv_tbl(1).rule_information4);
            l_gain_loss_tolrnc_allwd_frml := NVL(l_gain_loss_tolrnc_allwd_frml,l_rulv_tbl(1).rule_information6);
            l_gain_loss_tolrnc_basis      := NVL(l_gain_loss_tolrnc_basis,l_rulv_tbl(1).rule_information5);
            l_gain_loss_apprv_proc_frml   := NVL(l_gain_loss_apprv_proc_frml,l_rulv_tbl(1).rule_information8);
         END IF;
      END IF;

      IF (l_gain_loss_net_quote_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_gain_loss_net_quote_opt;
         l_rulv_rec.rule_information_category := 'AMGALO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_gain_loss_net_quote_amt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_gain_loss_net_quote_amt;
         l_rulv_rec.rule_information_category := 'AMGALO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_gain_loss_net_quote_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_gain_loss_net_quote_formula;
         l_rulv_rec.rule_information_category := 'AMGALO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_gain_loss_tolrn_allwd IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information7         := l_gain_loss_tolrn_allwd;
         l_rulv_rec.rule_information_category := 'AMGALO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_gain_loss_tolrnc_allwd_amt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_gain_loss_tolrnc_allwd_amt;
         l_rulv_rec.rule_information_category := 'AMGALO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_gain_loss_tolrnc_allwd_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information6         := l_gain_loss_tolrnc_allwd_frml;
         l_rulv_rec.rule_information_category := 'AMGALO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_gain_loss_tolrnc_basis IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_gain_loss_tolrnc_basis;
         l_rulv_rec.rule_information_category := 'AMGALO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_gain_loss_apprv_proc_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information8         := l_gain_loss_apprv_proc_frml;
         l_rulv_rec.rule_information_category := 'AMGALO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTGAL/AMGALO processed');

      -- Rule Group AMQR1R

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMQR1R';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';
      l_rulv_rec := NULL;

      l_quote_rcpt_contract_role := p_header_rec.quote_rcpt_contract_role;

      IF (l_quote_rcpt_contract_role IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMQR1R',
                            p_rule_code      => 'AMLCRO',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_quote_rcpt_contract_role := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_quote_rcpt_contract_role IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_quote_rcpt_contract_role;
         l_rulv_rec.rule_information_category := 'AMLCRO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMQR1R/AMLCRO processed');

      l_rulv_rec := NULL;

      l_quote_rcpt_addl_rcpt_role := p_header_rec.quote_rcpt_addl_rcpt_role;
      l_quote_rcpt_alloc_ptg      := p_header_rec.quote_rcpt_alloc_ptg;

      IF (( l_quote_rcpt_addl_rcpt_role IS NULL
            OR
            l_quote_rcpt_alloc_ptg IS NULL
          )
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMQR1R',
                            p_rule_code      => 'AMLCRP',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_quote_rcpt_addl_rcpt_role := NVL(l_quote_rcpt_addl_rcpt_role,l_rulv_tbl(1).rule_information1);
            l_quote_rcpt_alloc_ptg      := NVL(l_quote_rcpt_alloc_ptg,l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_quote_rcpt_addl_rcpt_role IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_quote_rcpt_addl_rcpt_role;
         l_rulv_rec.rule_information_category := 'AMLCRP';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_quote_rcpt_alloc_ptg IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_quote_rcpt_alloc_ptg;
         l_rulv_rec.rule_information_category := 'AMLCRP';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMQR1R/AMLCRP processed');

      -- Rule Group AMQR5A

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMQR5A';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';
      l_rulv_rec := NULL;

      l_quote_approver_contract_role := p_header_rec.quote_approver_contract_role;

      IF (l_quote_approver_contract_role IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMQR5A',
                            p_rule_code      => 'AMLCAP',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_quote_approver_contract_role := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_quote_approver_contract_role IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_quote_approver_contract_role;
         l_rulv_rec.rule_information_category := 'AMLCAP';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMQR5A/AMLCAP processed');

      l_quote_apprvr_adv_notice_role := p_header_rec.quote_apprvr_adv_notice_role;
      l_quote_approver_delay_days    := p_header_rec.quote_approver_delay_days;

      IF ((l_quote_apprvr_adv_notice_role IS NULL
           OR
           l_quote_approver_delay_days IS NULL
          )
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMQR5A',
                            p_rule_code      => 'AMLCAV',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_quote_apprvr_adv_notice_role := NVL(l_quote_apprvr_adv_notice_role, l_rulv_tbl(1).rule_information1);
            l_quote_approver_delay_days := NVL(l_quote_approver_delay_days, l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_quote_apprvr_adv_notice_role IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_quote_apprvr_adv_notice_role;
         l_rulv_rec.rule_information_category := 'AMLCAV';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_quote_approver_delay_days IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_quote_approver_delay_days;
         l_rulv_rec.rule_information_category := 'AMLCAV';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMQR5A/AMLCAV processed');

      -- Rule Group AMQR9F

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMQR9F';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';
      l_rulv_rec := NULL;

      l_quote_crtsy_cp_cntrc_role := p_header_rec.quote_crtsy_copy_contract_role;

      IF (l_quote_crtsy_cp_cntrc_role IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMQR9F',
                            p_rule_code      => 'AMLCCO',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_quote_crtsy_cp_cntrc_role := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_quote_crtsy_cp_cntrc_role IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_quote_crtsy_cp_cntrc_role;
         l_rulv_rec.rule_information_category := 'AMLCCO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMQR9F/AMLCCO processed');

      -- Rule Group AMTEWC

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMTEWC';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';
      l_rulv_rec := NULL;

      l_ert_quote_calc_term_option  := p_header_rec.ert_quote_calc_term_option;
      l_ert_quote_calc_term_formula := p_header_rec.ert_quote_calc_term_formula;

      IF (l_ert_quote_calc_term_option IS NULL
          OR
          l_ert_quote_calc_term_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMATQC',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_quote_calc_term_option  := NVL(l_ert_quote_calc_term_option,l_rulv_tbl(1).rule_information1);
            l_ert_quote_calc_term_formula := NVL(l_ert_quote_calc_term_formula,l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_ert_quote_calc_term_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_ert_quote_calc_term_option;
         l_rulv_rec.rule_information_category := 'AMATQC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_quote_calc_term_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_quote_calc_term_formula;
         l_rulv_rec.rule_information_category := 'AMATQC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMATQC processed');
      l_rulv_rec := NULL;

      l_ert_contract_oblig_opt      := p_header_rec.ert_contract_oblig_opt;
      l_ert_contract_oblig_amount   := TO_CHAR(p_header_rec.ert_contract_oblig_amount);
      l_ert_contract_oblig_formula  := p_header_rec.ert_contract_oblig_formula;
      l_ert_contract_oblig_prorate  := p_header_rec.ert_contract_oblig_prorate;

      IF (l_ert_contract_oblig_opt IS NULL
          OR
          l_ert_contract_oblig_amount IS NULL
          OR
          l_ert_contract_oblig_formula IS NULL
          OR
          l_ert_contract_oblig_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMBCOC',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_contract_oblig_opt      := NVL(l_ert_contract_oblig_opt,l_rulv_tbl(1).rule_information1);
            l_ert_contract_oblig_amount   := NVL(l_ert_contract_oblig_amount,l_rulv_tbl(1).rule_information2);
            l_ert_contract_oblig_formula  := NVL(l_ert_contract_oblig_formula,l_rulv_tbl(1).rule_information3);
            l_ert_contract_oblig_prorate  := NVL(l_ert_contract_oblig_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_ert_contract_oblig_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_ert_contract_oblig_opt;
         l_rulv_rec.rule_information_category := 'AMBCOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_contract_oblig_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_contract_oblig_amount;
         l_rulv_rec.rule_information_category := 'AMBCOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_contract_oblig_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_contract_oblig_formula;
         l_rulv_rec.rule_information_category := 'AMBCOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_contract_oblig_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_ert_contract_oblig_prorate;
         l_rulv_rec.rule_information_category := 'AMBCOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMBCOC processed');
      l_rulv_rec := NULL;

      l_ert_disc_rate_opt      := p_header_rec.ert_disc_rate_opt;
      l_ert_disc_rate_amount   := TO_CHAR(p_header_rec.ert_disc_rate_amount);
      l_ert_disc_rate_formula  := p_header_rec.ert_disc_rate_formula;
      l_ert_disc_rate_prorate  := p_header_rec.ert_disc_rate_prorate;

      IF (l_ert_disc_rate_opt IS NULL
          OR
          l_ert_disc_rate_amount IS NULL
          OR
          l_ert_disc_rate_formula IS NULL
          OR
          l_ert_disc_rate_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMCQDR',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_disc_rate_opt      := NVL(l_ert_disc_rate_opt,l_rulv_tbl(1).rule_information1);
            l_ert_disc_rate_amount   := NVL(l_ert_disc_rate_amount,l_rulv_tbl(1).rule_information2);
            l_ert_disc_rate_formula  := NVL(l_ert_disc_rate_formula,l_rulv_tbl(1).rule_information3);
            l_ert_disc_rate_prorate  := NVL(l_ert_disc_rate_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_ert_disc_rate_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_ert_disc_rate_opt;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_disc_rate_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_disc_rate_amount;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_disc_rate_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_disc_rate_formula;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_disc_rate_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_ert_disc_rate_prorate;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMCQDR processed');
      l_rulv_rec := NULL;

      l_ert_quote_fee_opt      := p_header_rec.ert_quote_fee_opt;
      l_ert_quote_fee_amount   := TO_CHAR(p_header_rec.ert_quote_fee_amount);
      l_ert_quote_fee_formula  := p_header_rec.ert_quote_fee_formula;
      l_ert_quote_fee_prorate  := p_header_rec.ert_quote_fee_prorate;

      IF (l_ert_quote_fee_opt IS NULL
          OR
          l_ert_quote_fee_amount IS NULL
          OR
          l_ert_quote_fee_formula IS NULL
          OR
          l_ert_quote_fee_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMCQFE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_quote_fee_opt      := NVL(l_ert_quote_fee_opt,l_rulv_tbl(1).rule_information1);
            l_ert_quote_fee_amount   := NVL(l_ert_quote_fee_amount,l_rulv_tbl(1).rule_information2);
            l_ert_quote_fee_formula  := NVL(l_ert_quote_fee_formula,l_rulv_tbl(1).rule_information3);
            l_ert_quote_fee_prorate  := NVL(l_ert_quote_fee_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_ert_quote_fee_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_ert_quote_fee_opt;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_quote_fee_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_quote_fee_amount;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_quote_fee_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_quote_fee_formula;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_quote_fee_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_ert_quote_fee_prorate;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMCQFE processed');
      l_rulv_rec := NULL;

      l_ert_return_fee_option   := p_header_rec.ert_return_fee_option;
      l_ert_return_fee_amount   := TO_CHAR(p_header_rec.ert_return_fee_amount);
      l_ert_return_fee_formula  := p_header_rec.ert_return_fee_formula;
      l_ert_return_fee_prorate  := p_header_rec.ert_return_fee_prorate;

      IF (l_ert_return_fee_option IS NULL
          OR
          l_ert_return_fee_amount IS NULL
          OR
          l_ert_return_fee_formula IS NULL
          OR
          l_ert_return_fee_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMCRFE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_return_fee_option   := NVL(l_ert_return_fee_option,l_rulv_tbl(1).rule_information1);
            l_ert_return_fee_amount   := NVL(l_ert_return_fee_amount,l_rulv_tbl(1).rule_information2);
            l_ert_return_fee_formula  := NVL(l_ert_return_fee_formula,l_rulv_tbl(1).rule_information3);
            l_ert_return_fee_prorate  := NVL(l_ert_return_fee_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_ert_return_fee_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_ert_return_fee_option;
         l_rulv_rec.rule_information_category := 'AMCRFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_return_fee_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_return_fee_amount;
         l_rulv_rec.rule_information_category := 'AMCRFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_return_fee_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_return_fee_formula;
         l_rulv_rec.rule_information_category := 'AMCRFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_return_fee_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_ert_return_fee_prorate;
         l_rulv_rec.rule_information_category := 'AMCRFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMCRFE processed');
      l_rulv_rec := NULL;

      l_ert_roll_inctv_option   := p_header_rec.ert_roll_inctv_option;
      l_ert_roll_inctv_amount   := TO_CHAR(p_header_rec.ert_roll_inctv_amount);
      l_ert_roll_inctv_formula  := p_header_rec.ert_roll_inctv_formula;
      l_ert_roll_inctv_prorate  := p_header_rec.ert_roll_inctv_prorate;

      IF (l_ert_roll_inctv_option IS NULL
          OR
          l_ert_roll_inctv_amount IS NULL
          OR
          l_ert_roll_inctv_formula IS NULL
          OR
          l_ert_roll_inctv_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMCRIN',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_roll_inctv_option   := NVL(l_ert_roll_inctv_option,l_rulv_tbl(1).rule_information1);
            l_ert_roll_inctv_amount   := NVL(l_ert_roll_inctv_amount,l_rulv_tbl(1).rule_information2);
            l_ert_roll_inctv_formula  := NVL(l_ert_roll_inctv_formula,l_rulv_tbl(1).rule_information3);
            l_ert_roll_inctv_prorate  := NVL(l_ert_roll_inctv_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_ert_roll_inctv_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_ert_roll_inctv_option;
         l_rulv_rec.rule_information_category := 'AMCRIN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_roll_inctv_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_roll_inctv_amount;
         l_rulv_rec.rule_information_category := 'AMCRIN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_roll_inctv_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_roll_inctv_formula;
         l_rulv_rec.rule_information_category := 'AMCRIN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_roll_inctv_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_ert_roll_inctv_prorate;
         l_rulv_rec.rule_information_category := 'AMCRIN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMCRIN processed');
      l_rulv_rec := NULL;

      l_ert_secu_dep_dispo_option   := p_header_rec.ert_secu_dep_dispo_option;
      l_ert_secu_dep_dispo_amount   := TO_CHAR(p_header_rec.ert_secu_dep_dispo_amount);
      l_ert_secu_dep_dispo_formula  := p_header_rec.ert_secu_dep_dispo_formula;
      l_ert_secu_dep_dispo_prorate  := p_header_rec.ert_secu_dep_dispo_prorate;

      IF (l_ert_secu_dep_dispo_option IS NULL
          OR
          l_ert_secu_dep_dispo_amount IS NULL
          OR
          l_ert_secu_dep_dispo_formula IS NULL
          OR
          l_ert_secu_dep_dispo_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMCSDD',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_secu_dep_dispo_option   := NVL(l_ert_secu_dep_dispo_option,l_rulv_tbl(1).rule_information1);
            l_ert_secu_dep_dispo_amount   := NVL(l_ert_secu_dep_dispo_amount,l_rulv_tbl(1).rule_information2);
            l_ert_secu_dep_dispo_formula  := NVL(l_ert_secu_dep_dispo_formula,l_rulv_tbl(1).rule_information3);
            l_ert_secu_dep_dispo_prorate  := NVL(l_ert_secu_dep_dispo_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_ert_secu_dep_dispo_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_ert_secu_dep_dispo_option;
         l_rulv_rec.rule_information_category := 'AMCSDD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_secu_dep_dispo_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_secu_dep_dispo_amount;
         l_rulv_rec.rule_information_category := 'AMCSDD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_secu_dep_dispo_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_secu_dep_dispo_formula;
         l_rulv_rec.rule_information_category := 'AMCSDD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_secu_dep_dispo_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_ert_secu_dep_dispo_prorate;
         l_rulv_rec.rule_information_category := 'AMCSDD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMCSDD processed');
      l_rulv_rec := NULL;

      l_ert_term_penalty_option       := p_header_rec.ert_term_penalty_option;
      l_ert_term_penalty_amount       := TO_CHAR(p_header_rec.ert_term_penalty_amount);
      l_ert_term_penalty_formula      := p_header_rec.ert_term_penalty_formula;
      l_ert_term_penalty_prorate      := p_header_rec.ert_term_penalty_prorate;
      l_ert_term_penalty_cap_option   := p_header_rec.ert_term_penalty_cap_option;
      l_ert_term_penalty_cap_amount   := TO_CHAR(p_header_rec.ert_term_penalty_cap_amount);
      l_ert_term_penalty_cap_formula  := p_header_rec.ert_term_penalty_cap_formula;

      IF (l_ert_term_penalty_option IS NULL
          OR
          l_ert_term_penalty_amount IS NULL
          OR
          l_ert_term_penalty_formula IS NULL
          OR
          l_ert_term_penalty_prorate IS NULL
          OR
          l_ert_term_penalty_cap_option IS NULL
          OR
          l_ert_term_penalty_cap_amount IS NULL
          OR
          l_ert_term_penalty_cap_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMCTPE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_term_penalty_option       := NVL(l_ert_term_penalty_option,l_rulv_tbl(1).rule_information1);
            l_ert_term_penalty_amount       := NVL(l_ert_term_penalty_amount,l_rulv_tbl(1).rule_information2);
            l_ert_term_penalty_formula      := NVL(l_ert_term_penalty_formula,l_rulv_tbl(1).rule_information3);
            l_ert_term_penalty_prorate      := NVL(l_ert_term_penalty_prorate,l_rulv_tbl(1).rule_information4);
            l_ert_term_penalty_cap_option   := NVL(l_ert_term_penalty_cap_option,l_rulv_tbl(1).rule_information5);
            l_ert_term_penalty_cap_amount   := NVL(l_ert_term_penalty_cap_amount,l_rulv_tbl(1).rule_information6);
            l_ert_term_penalty_cap_formula  := NVL(l_ert_term_penalty_cap_formula,l_rulv_tbl(1).rule_information7);
         END IF;
      END IF;

      IF (l_ert_term_penalty_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_ert_term_penalty_option;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_term_penalty_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_term_penalty_amount;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_term_penalty_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_term_penalty_formula;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_term_penalty_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_ert_term_penalty_prorate;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_term_penalty_cap_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion5         := l_ert_term_penalty_cap_option;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_term_penalty_cap_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information6         := l_ert_term_penalty_cap_amount;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_term_penalty_cap_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information7         := l_ert_term_penalty_cap_formula;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMCTPE processed');
      l_rulv_rec := NULL;

      l_ert_est_prop_tax_option   := p_header_rec.ert_est_prop_tax_option;
      l_ert_est_prop_tax_amount   := TO_CHAR(p_header_rec.ert_est_prop_tax_amount);
      l_ert_est_prop_tax_formula  := p_header_rec.ert_est_prop_tax_formula;
      l_ert_est_prop_tax_prorate  := p_header_rec.ert_est_prop_tax_prorate;

      IF (l_ert_est_prop_tax_option IS NULL
          OR
          l_ert_est_prop_tax_amount IS NULL
          OR
          l_ert_est_prop_tax_formula IS NULL
          OR
          l_ert_est_prop_tax_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMPRTX',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_est_prop_tax_option   := NVL(l_ert_est_prop_tax_option,l_rulv_tbl(1).rule_information1);
            l_ert_est_prop_tax_amount   := NVL(l_ert_est_prop_tax_amount,l_rulv_tbl(1).rule_information2);
            l_ert_est_prop_tax_formula  := NVL(l_ert_est_prop_tax_formula,l_rulv_tbl(1).rule_information3);
            l_ert_est_prop_tax_prorate  := NVL(l_ert_est_prop_tax_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_ert_est_prop_tax_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_ert_est_prop_tax_option;
         l_rulv_rec.rule_information_category := 'AMPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_est_prop_tax_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_est_prop_tax_amount;
         l_rulv_rec.rule_information_category := 'AMPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_est_prop_tax_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_est_prop_tax_formula;
         l_rulv_rec.rule_information_category := 'AMPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_est_prop_tax_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_ert_est_prop_tax_prorate;
         l_rulv_rec.rule_information_category := 'AMPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMPRTX processed');
      l_rulv_rec := NULL;

      l_ert_contr_fees_option := p_header_rec.ert_contr_fees_option;

      IF (l_ert_contr_fees_option IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMYFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_contr_fees_option   := NVL(l_ert_contr_fees_option,l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_ert_contr_fees_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_ert_contr_fees_option;
         l_rulv_rec.rule_information_category := 'AMYFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMYFEE processed');
      l_rulv_rec := NULL;

      l_ert_outstnd_bal_option := p_header_rec.ert_outstnd_bal_option;

      IF (l_ert_outstnd_bal_option IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMYOUB',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_outstnd_bal_option   := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_ert_outstnd_bal_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_ert_outstnd_bal_option;
         l_rulv_rec.rule_information_category := 'AMYOUB';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTEWC/AMYOUB processed');
      l_rulv_rec := NULL;

      l_ert_serv_mant_option := p_header_rec.ert_serv_mant_option;
      l_ert_serv_mant_frml   := p_header_rec.ert_serv_mant_frml;

      IF ((l_ert_serv_mant_option IS NULL
           OR
           l_ert_serv_mant_frml IS NULL
          )
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMYSAM',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_serv_mant_option   := NVL(l_ert_serv_mant_option,l_rulv_tbl(1).rule_information1);
            l_ert_serv_mant_frml     := NVL(l_ert_serv_mant_frml,l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_ert_serv_mant_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_ert_serv_mant_option;
         l_rulv_rec.rule_information_category := 'AMYSAM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_ert_serv_mant_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_ert_serv_mant_frml;
         l_rulv_rec.rule_information_category := 'AMYSAM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEWC/AMYSAM processed');

      /**** AKP Copied from here for AMTEWC 4067094 ***/
      l_rulv_rec := NULL;

      l_ert_absorbed_fee_frml := p_header_rec.ert_absorbed_fee_frml;

      IF (l_ert_absorbed_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMAFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_absorbed_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_ert_absorbed_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_absorbed_fee_frml;
         l_rulv_rec.rule_information_category := 'AMAFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEWC/AMAFEE processed');

      l_rulv_rec := NULL;

      l_ert_expense_fee_frml := p_header_rec.ert_expense_fee_frml;

      IF (l_ert_expense_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMEFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_expense_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_ert_expense_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_expense_fee_frml;
         l_rulv_rec.rule_information_category := 'AMEFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEWC/AMEFEE processed');

      l_rulv_rec := NULL;

      l_ert_financed_fee_frml := p_header_rec.ert_financed_fee_frml;

      IF (l_ert_financed_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMFFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_financed_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_ert_financed_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_financed_fee_frml;
         l_rulv_rec.rule_information_category := 'AMFFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEWC/AMFFEE processed');

      l_rulv_rec := NULL;

      l_ert_general_fee_frml := p_header_rec.ert_general_fee_frml;

      IF (l_ert_general_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMGFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_general_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_ert_general_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_general_fee_frml;
         l_rulv_rec.rule_information_category := 'AMGFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEWC/AMGFEE processed');

      l_rulv_rec := NULL;

      l_ert_income_fee_frml := p_header_rec.ert_income_fee_frml;

      IF (l_ert_income_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMIFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_income_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_ert_income_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_income_fee_frml;
         l_rulv_rec.rule_information_category := 'AMIFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEWC/AMIFEE processed');

      l_rulv_rec := NULL;

      l_ert_misc_fee_frml := p_header_rec.ert_misc_fee_frml;

      IF (l_ert_misc_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMMFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_misc_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_ert_misc_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_misc_fee_frml;
         l_rulv_rec.rule_information_category := 'AMMFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEWC/AMMFEE processed');

      l_rulv_rec := NULL;

      l_ert_passthru_fee_frml := p_header_rec.ert_passthru_fee_frml;

      IF (l_ert_passthru_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMPFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_passthru_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_ert_passthru_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_passthru_fee_frml;
         l_rulv_rec.rule_information_category := 'AMPFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEWC/AMPFEE processed');

      l_rulv_rec := NULL;

      l_ert_rollover_fee_frml := p_header_rec.ert_rollover_fee_frml;

      IF (l_ert_rollover_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTEWC',
                            p_rule_code      => 'AMRFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_ert_rollover_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_ert_rollover_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_ert_rollover_fee_frml;
         l_rulv_rec.rule_information_category := 'AMRFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTEWC/AMRFEE processed');
      /**** AKP Copied to here for AMTEWC 4067094 ***/

      -- Rule Group AMTFWC

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMTFWC';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec := NULL;

      l_eot_quote_calc_term_option  := p_header_rec.eot_quote_calc_term_option;
      l_eot_quote_calc_term_formula := p_header_rec.eot_quote_calc_term_formula;

      IF (l_eot_quote_calc_term_option IS NULL
          OR
          l_eot_quote_calc_term_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMATQC',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_quote_calc_term_option  := NVL(l_eot_quote_calc_term_option,l_rulv_tbl(1).rule_information1);
            l_eot_quote_calc_term_formula := NVL(l_eot_quote_calc_term_formula,l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_eot_quote_calc_term_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_quote_calc_term_option;
         l_rulv_rec.rule_information_category := 'AMATQC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_quote_calc_term_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_quote_calc_term_formula;
         l_rulv_rec.rule_information_category := 'AMATQC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMATQC processed');
      l_rulv_rec := NULL;

      l_eot_contract_oblig_opt      := p_header_rec.eot_contract_oblig_opt;
      l_eot_contract_oblig_amount   := TO_CHAR(p_header_rec.eot_contract_oblig_amount);
      l_eot_contract_oblig_formula  := p_header_rec.eot_contract_oblig_formula;
      l_eot_contract_oblig_prorate  := p_header_rec.eot_contract_oblig_prorate;

      IF (l_eot_contract_oblig_opt IS NULL
          OR
          l_eot_contract_oblig_amount IS NULL
          OR
          l_eot_contract_oblig_formula IS NULL
          OR
          l_eot_contract_oblig_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMBCOC',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_contract_oblig_opt      := NVL(l_eot_contract_oblig_opt,l_rulv_tbl(1).rule_information1);
            l_eot_contract_oblig_amount   := NVL(l_eot_contract_oblig_amount,l_rulv_tbl(1).rule_information2);
            l_eot_contract_oblig_formula  := NVL(l_eot_contract_oblig_formula,l_rulv_tbl(1).rule_information3);
            l_eot_contract_oblig_prorate  := NVL(l_eot_contract_oblig_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_eot_contract_oblig_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_contract_oblig_opt;
         l_rulv_rec.rule_information_category := 'AMBCOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_contract_oblig_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_contract_oblig_amount;
         l_rulv_rec.rule_information_category := 'AMBCOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_contract_oblig_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_contract_oblig_formula;
         l_rulv_rec.rule_information_category := 'AMBCOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_contract_oblig_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_eot_contract_oblig_prorate;
         l_rulv_rec.rule_information_category := 'AMBCOC';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMBCOC processed');
      l_rulv_rec := NULL;

      l_eot_disc_rate_opt      := p_header_rec.eot_disc_rate_opt;
      l_eot_disc_rate_amount   := TO_CHAR(p_header_rec.eot_disc_rate_amount);
      l_eot_disc_rate_formula  := p_header_rec.eot_disc_rate_formula;
      l_eot_disc_rate_prorate  := p_header_rec.eot_disc_rate_prorate;

      IF (l_eot_disc_rate_opt IS NULL
          OR
          l_eot_disc_rate_amount IS NULL
          OR
          l_eot_disc_rate_formula IS NULL
          OR
          l_eot_disc_rate_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMCQDR',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_disc_rate_opt      := NVL(l_eot_disc_rate_opt,l_rulv_tbl(1).rule_information1);
            l_eot_disc_rate_amount   := NVL(l_eot_disc_rate_amount,l_rulv_tbl(1).rule_information2);
            l_eot_disc_rate_formula  := NVL(l_eot_disc_rate_formula,l_rulv_tbl(1).rule_information3);
            l_eot_disc_rate_prorate  := NVL(l_eot_disc_rate_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_eot_disc_rate_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_disc_rate_opt;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_disc_rate_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_disc_rate_amount;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_disc_rate_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_disc_rate_formula;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_disc_rate_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_eot_disc_rate_prorate;
         l_rulv_rec.rule_information_category := 'AMCQDR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMCQDR processed');
      l_rulv_rec := NULL;

      l_eot_quote_fee_opt      := p_header_rec.eot_quote_fee_opt;
      l_eot_quote_fee_amount   := TO_CHAR(p_header_rec.eot_quote_fee_amount);
      l_eot_quote_fee_formula  := p_header_rec.eot_quote_fee_formula;
      l_eot_quote_fee_prorate  := p_header_rec.eot_quote_fee_prorate;

      IF (l_eot_quote_fee_opt IS NULL
          OR
          l_eot_quote_fee_amount IS NULL
          OR
          l_eot_quote_fee_formula IS NULL
          OR
          l_eot_quote_fee_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMCQFE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_quote_fee_opt      := NVL(l_eot_quote_fee_opt,l_rulv_tbl(1).rule_information1);
            l_eot_quote_fee_amount   := NVL(l_eot_quote_fee_amount,l_rulv_tbl(1).rule_information2);
            l_eot_quote_fee_formula  := NVL(l_eot_quote_fee_formula,l_rulv_tbl(1).rule_information3);
            l_eot_quote_fee_prorate  := NVL(l_eot_quote_fee_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_eot_quote_fee_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_quote_fee_opt;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_quote_fee_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_quote_fee_amount;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_quote_fee_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_quote_fee_formula;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_quote_fee_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_eot_quote_fee_prorate;
         l_rulv_rec.rule_information_category := 'AMCQFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMCQFE processed');
      l_rulv_rec := NULL;

      l_eot_return_fee_option   := p_header_rec.eot_return_fee_option;
      l_eot_return_fee_amount   := TO_CHAR(p_header_rec.eot_return_fee_amount);
      l_eot_return_fee_formula  := p_header_rec.eot_return_fee_formula;
      l_eot_return_fee_prorate  := p_header_rec.eot_return_fee_prorate;

      IF (l_eot_return_fee_option IS NULL
          OR
          l_eot_return_fee_amount IS NULL
          OR
          l_eot_return_fee_formula IS NULL
          OR
          l_eot_return_fee_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMCRFE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_return_fee_option   := NVL(l_eot_return_fee_option,l_rulv_tbl(1).rule_information1);
            l_eot_return_fee_amount   := NVL(l_eot_return_fee_amount,l_rulv_tbl(1).rule_information2);
            l_eot_return_fee_formula  := NVL(l_eot_return_fee_formula,l_rulv_tbl(1).rule_information3);
            l_eot_return_fee_prorate  := NVL(l_eot_return_fee_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_eot_return_fee_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_eot_return_fee_option;
         l_rulv_rec.rule_information_category := 'AMCRFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_return_fee_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_return_fee_amount;
         l_rulv_rec.rule_information_category := 'AMCRFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_return_fee_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_return_fee_formula;
         l_rulv_rec.rule_information_category := 'AMCRFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_return_fee_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_eot_return_fee_prorate;
         l_rulv_rec.rule_information_category := 'AMCRFE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMCRFE processed');
      l_rulv_rec := NULL;

      l_eot_roll_inctv_option   := p_header_rec.eot_roll_inctv_option;
      l_eot_roll_inctv_amount   := TO_CHAR(p_header_rec.eot_roll_inctv_amount);
      l_eot_roll_inctv_formula  := p_header_rec.eot_roll_inctv_formula;
      l_eot_roll_inctv_prorate  := p_header_rec.eot_roll_inctv_prorate;

      IF (l_eot_roll_inctv_option IS NULL
          OR
          l_eot_roll_inctv_amount IS NULL
          OR
          l_eot_roll_inctv_formula IS NULL
          OR
          l_eot_roll_inctv_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMCRIN',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_roll_inctv_option   := NVL(l_eot_roll_inctv_option,l_rulv_tbl(1).rule_information1);
            l_eot_roll_inctv_amount   := NVL(l_eot_roll_inctv_amount,l_rulv_tbl(1).rule_information2);
            l_eot_roll_inctv_formula  := NVL(l_eot_roll_inctv_formula,l_rulv_tbl(1).rule_information3);
            l_eot_roll_inctv_prorate  := NVL(l_eot_roll_inctv_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_eot_roll_inctv_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_eot_roll_inctv_option;
         l_rulv_rec.rule_information_category := 'AMCRIN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_roll_inctv_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_roll_inctv_amount;
         l_rulv_rec.rule_information_category := 'AMCRIN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_roll_inctv_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_roll_inctv_formula;
         l_rulv_rec.rule_information_category := 'AMCRIN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_roll_inctv_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_eot_roll_inctv_prorate;
         l_rulv_rec.rule_information_category := 'AMCRIN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMCRIN processed');
      l_rulv_rec := NULL;

      l_eot_secu_dep_dispo_option   := p_header_rec.eot_secu_dep_dispo_option;
      l_eot_secu_dep_dispo_amount   := TO_CHAR(p_header_rec.eot_secu_dep_dispo_amount);
      l_eot_secu_dep_dispo_formula  := p_header_rec.eot_secu_dep_dispo_formula;
      l_eot_secu_dep_dispo_prorate  := p_header_rec.eot_secu_dep_dispo_prorate;

      IF (l_eot_secu_dep_dispo_option IS NULL
          OR
          l_eot_secu_dep_dispo_amount IS NULL
          OR
          l_eot_secu_dep_dispo_formula IS NULL
          OR
          l_eot_secu_dep_dispo_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMCSDD',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_secu_dep_dispo_option   := NVL(l_eot_secu_dep_dispo_option,l_rulv_tbl(1).rule_information1);
            l_eot_secu_dep_dispo_amount   := NVL(l_eot_secu_dep_dispo_amount,l_rulv_tbl(1).rule_information2);
            l_eot_secu_dep_dispo_formula  := NVL(l_eot_secu_dep_dispo_formula,l_rulv_tbl(1).rule_information3);
            l_eot_secu_dep_dispo_prorate  := NVL(l_eot_secu_dep_dispo_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_eot_secu_dep_dispo_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_eot_secu_dep_dispo_option;
         l_rulv_rec.rule_information_category := 'AMCSDD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_secu_dep_dispo_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_secu_dep_dispo_amount;
         l_rulv_rec.rule_information_category := 'AMCSDD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_secu_dep_dispo_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_secu_dep_dispo_formula;
         l_rulv_rec.rule_information_category := 'AMCSDD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_secu_dep_dispo_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_eot_secu_dep_dispo_prorate;
         l_rulv_rec.rule_information_category := 'AMCSDD';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMCSDD processed');
      l_rulv_rec := NULL;

      l_eot_term_penalty_option       := p_header_rec.eot_term_penalty_option;
      l_eot_term_penalty_amount       := TO_CHAR(p_header_rec.eot_term_penalty_amount);
      l_eot_term_penalty_formula      := p_header_rec.eot_term_penalty_formula;
      l_eot_term_penalty_prorate      := p_header_rec.eot_term_penalty_prorate;
      l_eot_term_penalty_cap_option   := p_header_rec.eot_term_penalty_cap_option;
      l_eot_term_penalty_cap_amount   := TO_CHAR(p_header_rec.eot_term_penalty_cap_amount);
      l_eot_term_penalty_cap_formula  := p_header_rec.eot_term_penalty_cap_formula;

      IF (l_eot_term_penalty_option IS NULL
          OR
          l_eot_term_penalty_amount IS NULL
          OR
          l_eot_term_penalty_formula IS NULL
          OR
          l_eot_term_penalty_prorate IS NULL
          OR
          l_eot_term_penalty_cap_option IS NULL
          OR
          l_eot_term_penalty_cap_amount IS NULL
          OR
          l_eot_term_penalty_cap_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMCTPE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_term_penalty_option       := NVL(l_eot_term_penalty_option,l_rulv_tbl(1).rule_information1);
            l_eot_term_penalty_amount       := NVL(l_eot_term_penalty_amount,l_rulv_tbl(1).rule_information2);
            l_eot_term_penalty_formula      := NVL(l_eot_term_penalty_formula,l_rulv_tbl(1).rule_information3);
            l_eot_term_penalty_prorate      := NVL(l_eot_term_penalty_prorate,l_rulv_tbl(1).rule_information4);
            l_eot_term_penalty_cap_option   := NVL(l_eot_term_penalty_cap_option,l_rulv_tbl(1).rule_information5);
            l_eot_term_penalty_cap_amount   := NVL(l_eot_term_penalty_cap_amount,l_rulv_tbl(1).rule_information6);
            l_eot_term_penalty_cap_formula  := NVL(l_eot_term_penalty_cap_formula,l_rulv_tbl(1).rule_information7);
         END IF;
      END IF;

      IF (l_eot_term_penalty_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_eot_term_penalty_option;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_term_penalty_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_term_penalty_amount;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_term_penalty_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_term_penalty_formula;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_term_penalty_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_eot_term_penalty_prorate;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_term_penalty_cap_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion5         := l_eot_term_penalty_cap_option;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_term_penalty_cap_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information6         := l_eot_term_penalty_cap_amount;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_term_penalty_cap_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information7         := l_eot_term_penalty_cap_formula;
         l_rulv_rec.rule_information_category := 'AMCTPE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMCTPE processed');
      l_rulv_rec := NULL;

      l_eot_est_prop_tax_option   := p_header_rec.eot_est_prop_tax_option;
      l_eot_est_prop_tax_amount   := TO_CHAR(p_header_rec.eot_est_prop_tax_amount);
      l_eot_est_prop_tax_formula  := p_header_rec.eot_est_prop_tax_formula;
      l_eot_est_prop_tax_prorate  := p_header_rec.eot_est_prop_tax_prorate;

      IF (l_eot_est_prop_tax_option IS NULL
          OR
          l_eot_est_prop_tax_amount IS NULL
          OR
          l_eot_est_prop_tax_formula IS NULL
          OR
          l_eot_est_prop_tax_prorate IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMPRTX',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_est_prop_tax_option   := NVL(l_eot_est_prop_tax_option,l_rulv_tbl(1).rule_information1);
            l_eot_est_prop_tax_amount   := NVL(l_eot_est_prop_tax_amount,l_rulv_tbl(1).rule_information2);
            l_eot_est_prop_tax_formula  := NVL(l_eot_est_prop_tax_formula,l_rulv_tbl(1).rule_information3);
            l_eot_est_prop_tax_prorate  := NVL(l_eot_est_prop_tax_prorate,l_rulv_tbl(1).rule_information4);
         END IF;
      END IF;

      IF (l_eot_est_prop_tax_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_informaTion1         := l_eot_est_prop_tax_option;
         l_rulv_rec.rule_information_category := 'AMPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_est_prop_tax_amount IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_est_prop_tax_amount;
         l_rulv_rec.rule_information_category := 'AMPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_est_prop_tax_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_est_prop_tax_formula;
         l_rulv_rec.rule_information_category := 'AMPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_est_prop_tax_prorate IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_eot_est_prop_tax_prorate;
         l_rulv_rec.rule_information_category := 'AMPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMPRTX processed');
      l_rulv_rec := NULL;

      l_eot_contr_fees_option := p_header_rec.eot_contr_fees_option;

      IF (l_eot_contr_fees_option IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMYFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_contr_fees_option   := NVL(l_eot_contr_fees_option,l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_eot_contr_fees_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_contr_fees_option;
         l_rulv_rec.rule_information_category := 'AMYFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMYFEE processed');
      l_rulv_rec := NULL;

      l_eot_outstnd_bal_option := p_header_rec.eot_outstnd_bal_option;

      IF (l_eot_outstnd_bal_option IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMYOUB',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_outstnd_bal_option   := l_rulv_tbl(1).rule_information1;
         END IF;
      END IF;

      IF (l_eot_outstnd_bal_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_outstnd_bal_option;
         l_rulv_rec.rule_information_category := 'AMYOUB';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMTFWC/AMYOUB processed');
      l_rulv_rec := NULL;

      l_eot_serv_mant_option := p_header_rec.eot_serv_mant_option;
      l_eot_serv_mant_frml   := p_header_rec.eot_serv_mant_frml;

      IF ((l_eot_serv_mant_option IS NULL
           OR
           l_eot_serv_mant_frml IS NULL
          )
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMYSAM',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_serv_mant_option   := NVL(l_eot_serv_mant_option,l_rulv_tbl(1).rule_information1);
            l_eot_serv_mant_frml     := NVL(l_eot_serv_mant_frml,l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_eot_serv_mant_option IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_eot_serv_mant_option;
         l_rulv_rec.rule_information_category := 'AMYSAM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_eot_serv_mant_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_eot_serv_mant_frml;
         l_rulv_rec.rule_information_category := 'AMYSAM';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFWC/AMYSAM processed');

      /**** AKP Copied from here for AMTFWC 4067094 ***/
      l_rulv_rec := NULL;

      l_eot_absorbed_fee_frml := p_header_rec.eot_absorbed_fee_frml;

      IF (l_eot_absorbed_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMAFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_absorbed_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_eot_absorbed_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_absorbed_fee_frml;
         l_rulv_rec.rule_information_category := 'AMAFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFWC/AMAFEE processed');

      l_rulv_rec := NULL;

      l_eot_expense_fee_frml := p_header_rec.eot_expense_fee_frml;

      IF (l_eot_expense_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMEFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_expense_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_eot_expense_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_expense_fee_frml;
         l_rulv_rec.rule_information_category := 'AMEFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFWC/AMEFEE processed');

      l_rulv_rec := NULL;

      l_eot_financed_fee_frml := p_header_rec.eot_financed_fee_frml;

      IF (l_eot_financed_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMFFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_financed_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_eot_financed_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_financed_fee_frml;
         l_rulv_rec.rule_information_category := 'AMFFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFWC/AMFFEE processed');

      l_rulv_rec := NULL;

      l_eot_general_fee_frml := p_header_rec.eot_general_fee_frml;

      IF (l_eot_general_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMGFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_general_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_eot_general_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_general_fee_frml;
         l_rulv_rec.rule_information_category := 'AMGFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFWC/AMGFEE processed');

      l_rulv_rec := NULL;

      l_eot_income_fee_frml := p_header_rec.eot_income_fee_frml;

      IF (l_eot_income_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMIFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_income_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_eot_income_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_income_fee_frml;
         l_rulv_rec.rule_information_category := 'AMIFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFWC/AMIFEE processed');

      l_rulv_rec := NULL;

      l_eot_misc_fee_frml := p_header_rec.eot_misc_fee_frml;

      IF (l_eot_misc_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMMFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_misc_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_eot_misc_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_misc_fee_frml;
         l_rulv_rec.rule_information_category := 'AMMFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFWC/AMMFEE processed');

      l_rulv_rec := NULL;

      l_eot_passthru_fee_frml := p_header_rec.eot_passthru_fee_frml;

      IF (l_eot_passthru_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMPFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_passthru_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_eot_passthru_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_passthru_fee_frml;
         l_rulv_rec.rule_information_category := 'AMPFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFWC/AMPFEE processed');

      l_rulv_rec := NULL;

      l_eot_rollover_fee_frml := p_header_rec.eot_rollover_fee_frml;

      IF (l_eot_rollover_fee_frml IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMTFWC',
                            p_rule_code      => 'AMRFEE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_eot_rollover_fee_frml   := l_rulv_tbl(1).rule_information3;
         END IF;
      END IF;

      IF (l_eot_rollover_fee_frml IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_eot_rollover_fee_frml;
         l_rulv_rec.rule_information_category := 'AMRFEE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;

      debug_message('------>Rule: AMTFWC/AMRFEE processed');
      /**** AKP Copied to here for AMTFWC 4067094 ***/

/*
 * Adding Lien and Title Rules at contract header
 *
*/
      -- Rule Group LAAFLG

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LAAFLG';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec := NULL;

      IF (p_header_rec.lien_holder_name IS NOT NULL
          OR
          p_header_rec.lien_holder_id IS NOT NULL) THEN

          l_lien_holder_id := get_lien_holder(
                                              x_return_status    => x_return_status,
                                              p_lien_holder_name => p_header_rec.lien_holder_name,
                                              p_lien_holder_id   => p_header_rec.lien_holder_id
                                             );
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                    G_APP_NAME,
                    G_INVALID_VALUE,
                    'CONTRACT_NUM',
                    p_header_rec.contract_number_old,
                    'COL_NAME',
                    'LIEN_HOLDER_NAME, ID',
                    'COL_VALUE',
                    p_header_rec.lien_holder_name||', '||p_header_rec.lien_holder_id
                   );
             RAISE header_rule_failed;
          END IF;

      END IF;

      l_lien_type                := p_header_rec.lien_type;
      l_filing_number            := p_header_rec.filing_number;
      l_filing_date              := get_canonicaL_date(p_header_rec.filing_date);
      l_filing_status            := p_header_rec.filing_status ;
      l_jurisdiction             := p_header_rec.jurisdiction ;
      l_sub_jurisdiction         := p_header_rec.sub_jurisdiction ;
      l_lien_expiration_date     := get_canonicaL_date(p_header_rec.lien_expiration_date);
      l_lien_continuation_number := p_header_rec.lien_continuation_number;
      l_lien_continuation_date   := get_canonicaL_date(p_header_rec.lien_continuation_date);

      IF (l_lien_type IS NULL
          OR
          l_filing_number IS NULL
          OR
          l_filing_date IS NULL
          OR
          l_filing_status IS NULL
          OR
          l_lien_holder_id IS NULL
          OR
          l_jurisdiction IS NULL
          OR
          l_sub_jurisdiction IS NULL
          OR
          l_lien_expiration_date IS NULL
          OR
          l_lien_continuation_number IS NULL
          OR
          l_lien_continuation_date IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN

         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAAFLG',
                            p_rule_code      => 'LAFLLN',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_lien_type                := NVL(l_lien_type, l_Rulv_tbl(1).rule_information1);
            l_filing_number            := NVL(l_filing_number, l_rulv_tbl(1).rule_information2);
            l_filing_date              := NVL(l_filing_date, l_rulv_tbl(1).rule_information3);
            l_filing_status            := NVL(l_filing_status, l_rulv_tbl(1).rule_information4);
            l_jurisdiction             := NVL(l_jurisdiction, l_rulv_tbl(1).rule_information5);
            l_sub_jurisdiction         := NVL(l_sub_jurisdiction, l_rulv_tbl(1).rule_information6);
            l_lien_expiration_date     := NVL(l_lien_expiration_date, l_rulv_tbl(1).rule_information7);
            l_lien_continuation_number := NVL(l_lien_continuation_number, l_rulv_tbl(1).rule_information8);
            l_lien_continuation_date   := NVL(l_lien_continuation_date, l_rulv_tbl(1).rule_information9);
            l_lien_holder_id           := NVL(l_lien_holder_id, l_rulv_tbl(1).object1_id1);
         END IF;
      END IF;

      IF (l_lien_type IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_lien_type;
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_filing_number IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_filing_number;
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_filing_date IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_filing_date;
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_filing_status IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_filing_status;
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_jurisdiction IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_jurisdiction;
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_sub_jurisdiction IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information6         := l_sub_jurisdiction;
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_lien_expiration_date IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information7         := l_lien_expiration_date;
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_lien_continuation_number IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information8         := l_lien_continuation_number;
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_lien_continuation_date IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information9         := l_lien_continuation_date;
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_lien_holder_id  IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.jtot_object1_code         := 'OKX_PARTY';
         l_rulv_rec.object1_id1               := l_lien_holder_id;
         l_rulv_rec.object1_id2               := '#';
         l_rulv_rec.rule_information_category := 'LAFLLN';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: LAAFLG/LAFLLN processed');
      l_rulv_rec := NULL;

      l_title_type               := p_header_rec.title_type ;
      l_title_issuer_name        := p_header_rec.title_issuer_name ;
      l_title_issuer_id          := p_header_rec.title_issuer_id ;
      l_title_date               := get_canonicaL_date(p_header_rec.title_date);
      l_title_number             := p_header_rec.title_number ;
      l_registration_number      := p_header_rec.registration_number ;
      l_location                 := p_header_rec.location ;
      l_title_custodian_name     := p_header_rec.title_custodian_name ;
      l_title_custodian_id       := p_header_rec.title_custodian_id ;
      l_payee_site               := p_header_rec.payee_site ;
      l_registration_location    := p_header_rec.registration_location ;
      l_reg_expiration_date      := get_canonicaL_date(p_header_rec.reg_expiration_date);

      x_title_issuer_id := NULL;
      IF (l_title_issuer_name IS NOT NULL
          OR
          l_title_issuer_id IS NOT NULL) THEN

              get_party_id(
                  x_return_status     => x_return_status,
                  x_msg_count         => x_msg_count,
                  x_msg_data          => x_msg_data,
                  p_contract_number   => p_header_rec.contract_number_old,
                  p_line_number       => NULL,
                  p_party_id          => l_title_issuer_id,
                  p_party_number      => l_title_issuer_name,
                  x_party_id          => x_title_issuer_id
                 );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                RAISE header_rule_failed;
             END IF;
      END IF;

      x_title_custodian_id := NULL;
      IF (l_title_custodian_name IS NOT NULL
          OR
          l_title_custodian_id IS NOT NULL) THEN

              get_party_id(
                  x_return_status     => x_return_status,
                  x_msg_count         => x_msg_count,
                  x_msg_data          => x_msg_data,
                  p_contract_number   => p_header_rec.contract_number_old,
                  p_line_number       => NULL,
                  p_party_id          => l_title_custodian_id,
                  p_party_number      => l_title_custodian_name,
                  x_party_id          => x_title_custodian_id
                 );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                RAISE header_rule_failed;
             END IF;
      END IF;

      IF (l_title_type IS NULL
          OR
          x_title_issuer_id IS NULL
          OR
          l_title_date IS NULL
          OR
          l_title_number IS NULL
          OR
          l_registration_number IS NULL
          OR
          l_location IS NULL
          OR
          x_title_custodian_id IS NULL
          OR
          l_payee_site IS NULL
          OR
          l_registration_location IS NULL
          OR
          l_reg_expiration_date IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAAFLG',
                            p_rule_code      => 'LAFLTL',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_title_type               := NVL(l_title_type, l_rulv_tbl(1).rule_information1);
            l_title_issuer_id          := NVL(x_title_issuer_id, l_rulv_tbl(1).object1_id1);
            l_title_date               := NVL(l_title_date, l_rulv_tbl(1).rule_information2);
            l_title_number             := NVL(l_title_number, l_rulv_tbl(1).rule_information3);
            l_registration_number      := NVL(l_registration_number, l_rulv_tbl(1).rule_information4);
            l_location                 := NVL(l_location, l_rulv_tbl(1).rule_information5);
            l_title_custodian_id       := NVL(x_title_custodian_id, l_rulv_tbl(1).object2_id1);
            l_payee_site               := NVL(l_payee_site, l_rulv_tbl(1).rule_information6);
            l_registration_location    := NVL(l_registration_location, l_rulv_tbl(1).rule_information7);
            l_reg_expiration_date      := NVL(l_reg_expiration_date, l_rulv_tbl(1).rule_information8);
         END IF;
      END IF;

      IF (l_title_type IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_title_type;
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_title_date IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_title_date;
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_title_number IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_title_number;
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_registration_number IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_registration_number;
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_location IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_location;
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_payee_site IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information6         := l_payee_site;
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_registration_location IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information7         := l_registration_location;
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_reg_expiration_date IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information8         := l_reg_expiration_date;
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_title_issuer_id  IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.jtot_object1_code         := 'OKX_PARTY';
         l_rulv_rec.object1_id1               := x_title_issuer_id;
         l_rulv_rec.object1_id2               := '#';
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_title_custodian_id  IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.jtot_object1_code         := 'OKX_PARTY';
         l_rulv_rec.object2_id1               := x_title_custodian_id;
         l_rulv_rec.object2_id2               := '#';
         l_rulv_rec.rule_information_category := 'LAFLTL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: LAAFLG/LAFLTL processed');

/*
 * Adding Contract Portfolio Rules at contract header
 *
*/
      -- Rule Group AMCOPO

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'AMCOPO';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec := NULL;

      l_prtfl_approval_req := p_header_rec.prtfl_approval_req;

      IF (l_prtfl_approval_req IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMCOPO',
                            p_rule_code      => 'AMAPRE',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_prtfl_approval_req       := NVL(l_prtfl_approval_req, l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_prtfl_approval_req IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_prtfl_approval_req;
         l_rulv_rec.rule_information_category := 'AMAPRE';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      debug_message('------>Rule: AMCOPO/AMAPRE processed');

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      l_rulv_rec := NULL;

      l_prtfl_assgn_group := p_header_rec.prtfl_assgn_group;

      IF (l_prtfl_assgn_group IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMCOPO',
                            p_rule_code      => 'AMPRAG',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_prtfl_assgn_group       := NVL(l_prtfl_assgn_group, l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_prtfl_assgn_group IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_prtfl_assgn_group;
         l_rulv_rec.rule_information_category := 'AMPRAG';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMCOPO/AMPRAG processed');
      l_rulv_rec := NULL;

      l_prtfl_budget_amt_opt     := p_header_rec.prtfl_budget_amt_opt;
      l_prtfl_budget_fixed_amt   := TO_CHAR(p_header_rec.prtfl_budget_fixed_amt);
      l_prtfl_budget_amt_formula := p_header_rec.prtfl_budget_amt_formula;

      IF (l_prtfl_budget_amt_opt IS NULL
          OR
          l_prtfl_budget_fixed_amt IS NULL
          OR
          l_prtfl_budget_amt_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMCOPO',
                            p_rule_code      => 'AMPRBA',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_prtfl_budget_amt_opt     := NVL(l_prtfl_budget_amt_opt, l_rulv_tbl(1).rule_information1);
            l_prtfl_budget_fixed_amt   := NVL(l_prtfl_budget_fixed_amt, l_rulv_tbl(1).rule_information2);
            l_prtfl_budget_amt_formula := NVL(l_prtfl_budget_amt_formula, l_rulv_tbl(1).rule_information3);
         END IF;
      END IF;

      IF (l_prtfl_budget_amt_opt = 'NOT_APPLICABLE') THEN -- 4912795
        l_prtfl_budget_fixed_amt   := NULL;
        l_prtfl_budget_amt_formula := NULL;
      END IF;

      IF (l_prtfl_budget_amt_opt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_prtfl_budget_amt_opt;
         l_rulv_rec.rule_information_category := 'AMPRBA';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_prtfl_budget_fixed_amt IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_prtfl_budget_fixed_amt;
         l_rulv_rec.rule_information_category := 'AMPRBA';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_prtfl_budget_amt_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_prtfl_budget_amt_formula;
         l_rulv_rec.rule_information_category := 'AMPRBA';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMCOPO/AMPRBA processed');
      l_rulv_rec := NULL;

      l_prtfl_days_from_con_expr := p_header_rec.prtfl_days_from_con_expr;

      IF (l_prtfl_days_from_con_expr IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMCOPO',
                            p_rule_code      => 'AMPRED',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_prtfl_days_from_con_expr := NVL(l_prtfl_days_from_con_expr, l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_prtfl_days_from_con_expr IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_prtfl_days_from_con_expr;
         l_rulv_rec.rule_information_category := 'AMPRED';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      l_rulv_rec := NULL;

      l_prtfl_strategy := p_header_rec.prtfl_strategy;

      IF (l_prtfl_strategy IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'AMCOPO',
                            p_rule_code      => 'AMPRST',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_prtfl_strategy := NVL(l_prtfl_strategy, l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_prtfl_strategy IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_prtfl_strategy;
         l_rulv_rec.rule_information_category := 'AMPRST';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: AMCOPO/AMPRST processed');
      l_rulv_rec := NULL;

/*
 * Adding Taxes and Duties rule at contract header
 *
*/
      -- Rule Group LAHDTX

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;
      l_rgpv_rec.rgd_code   := 'LAHDTX';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec := NULL;

      l_prop_tax_applicable           := p_header_rec.prop_tax_applicable;
      l_prop_tax_lease_rep            := p_header_rec.prop_tax_lease_rep;
-- Added by rravikir (Fix for Bug 3947959)
      l_prop_tax_bill_method          := p_header_rec.prop_tax_bill_method;
-- End

      IF (l_prop_tax_applicable IS NULL
          OR
          l_prop_tax_lease_rep IS NULL
-- Added by rravikir (Fix for Bug 3947959)
          OR
          l_prop_tax_bill_method IS NULL
-- End
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAHDTX',
                            p_rule_code      => 'LAPRTX',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_prop_tax_applicable := NVL(l_prop_tax_applicable, l_rulv_tbl(1).rule_information1);
            l_prop_tax_lease_rep  := NVL(l_prop_tax_lease_rep, l_rulv_tbl(1).rule_information2);
-- Added by rravikir (Fix for Bug 3947959)
            l_prop_tax_bill_method := NVL(l_prop_tax_bill_method, l_rulv_tbl(1).rule_information3);
-- End
         END IF;
      END IF;

      IF (l_prop_tax_applicable IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_prop_tax_applicable;
         l_rulv_rec.rule_information_category := 'LAPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_prop_tax_lease_rep IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_prop_tax_lease_rep;
         l_rulv_rec.rule_information_category := 'LAPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

-- Added by rravikir (Fix for Bug 3947959)
      IF (l_prop_tax_bill_method IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_prop_tax_bill_method;
         l_rulv_rec.rule_information_category := 'LAPRTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;
-- End
      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: LAHDTX/LAPRTX processed');
      l_rulv_rec := NULL;

      l_mex_tax_sub_basic_wthld       := p_header_rec.mex_tax_sub_basic_wthld;
      l_mex_tax_calc_formula          := p_header_rec.mex_tax_calc_formula;


      IF (l_mex_tax_sub_basic_wthld IS NULL
          OR
          l_mex_tax_calc_formula IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAHDTX',
                            p_rule_code      => 'LAMETX',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_mex_tax_sub_basic_wthld := NVL(l_mex_tax_sub_basic_wthld, l_rulv_tbl(1).rule_information1);
            l_mex_tax_calc_formula  := NVL(l_mex_tax_calc_formula, l_rulv_tbl(1).rule_information2);
         END IF;
      END IF;

      IF (l_mex_tax_sub_basic_wthld IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_mex_tax_sub_basic_wthld;
         l_rulv_rec.rule_information_category := 'LAMETX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_mex_tax_calc_formula IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_mex_tax_calc_formula;
         l_rulv_rec.rule_information_category := 'LAMETX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: LAHDTX/LAMETX processed');
      l_rulv_rec := NULL;

      l_aus_tax_stamp_duty            := p_header_rec.aus_tax_stamp_duty;

      IF (l_aus_tax_stamp_duty IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAHDTX',
                            p_rule_code      => 'LAAUTX',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_aus_tax_stamp_duty := NVL(l_aus_tax_stamp_duty, l_rulv_tbl(1).rule_information1);
         END IF;
      END IF;

      IF (l_aus_tax_stamp_duty IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_aus_tax_stamp_duty;
         l_rulv_rec.rule_information_category := 'LAAUTX';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: LAHDTX/LAAUTX processed');
      l_rulv_rec := NULL;

      l_st_upd_lines_from_contract           := p_header_rec.st_update_lines_from_contract;
      l_st_interest_disclosed                := p_header_rec.st_interest_disclosed;
      l_st_transfer_of_title                 := p_header_rec.st_transfer_of_title;
      l_st_sale_and_lease_back               := p_header_rec.st_sale_and_lease_back;
      l_st_purchase_of_lease                 := p_header_rec.st_purchase_of_lease;
      l_st_equipment_usage                   := p_header_rec.st_equipment_usage;
      l_st_equipment_age                     := p_header_rec.st_equipment_age;


      IF (l_st_upd_lines_from_contract IS NULL
          OR
          l_st_interest_disclosed IS NULL
          OR
          l_st_transfer_of_title IS NULL
          OR
          l_st_sale_and_lease_back IS NULL
          OR
          l_st_purchase_of_lease IS NULL
          OR
          l_st_equipment_usage IS NULL
          OR
          l_st_equipment_age IS NULL
          AND
          p_header_rec.template_number IS NOT NULL) THEN
         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAHDTX',
                            p_rule_code      => 'LASTCL',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_st_upd_lines_from_contract    := NVL(l_st_upd_lines_from_contract, l_rulv_tbl(1).rule_information1);
            l_st_interest_disclosed         := NVL(l_st_interest_disclosed, l_rulv_tbl(1).rule_information2);
            l_st_transfer_of_title          := NVL(l_st_transfer_of_title, l_rulv_tbl(1).rule_information3);
            l_st_sale_and_lease_back        := NVL(l_st_sale_and_lease_back, l_rulv_tbl(1).rule_information4);
            l_st_purchase_of_lease          := NVL(l_st_purchase_of_lease, l_rulv_tbl(1).rule_information5);
            l_st_equipment_usage            := NVL(l_st_equipment_usage, l_rulv_tbl(1).rule_information6);
            l_st_equipment_age              := NVL(l_st_equipment_age, l_rulv_tbl(1).rule_information7);
         END IF;
      END IF;

      IF (l_st_upd_lines_from_contract IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_st_upd_lines_from_contract;
         l_rulv_rec.rule_information_category := 'LASTCL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_st_interest_disclosed IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_st_interest_disclosed;
         l_rulv_rec.rule_information_category := 'LASTCL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_st_transfer_of_title IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_st_transfer_of_title;
         l_rulv_rec.rule_information_category := 'LASTCL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_st_sale_and_lease_back IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_st_sale_and_lease_back;
         l_rulv_rec.rule_information_category := 'LASTCL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_st_purchase_of_lease IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_st_purchase_of_lease;
         l_rulv_rec.rule_information_category := 'LASTCL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_st_equipment_usage IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information6         := l_st_equipment_usage;
         l_rulv_rec.rule_information_category := 'LASTCL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_st_equipment_age IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information7         := l_st_equipment_age;
         l_rulv_rec.rule_information_category := 'LASTCL';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: LAHDTX/LASTCL processed');
      l_rulv_rec := NULL;

      l_st_asset_upfront_tax                    := p_header_rec.st_asset_upfront_tax;
      l_st_bill_stream_type_code                := p_header_rec.st_bill_stream_type_code;
      l_st_bill_stream_purpose_code             := p_header_rec.st_bill_stream_purpose_code;
      l_st_bill_stream_id                       := NULL;
      l_st_fin_stream_type_code                 := p_header_rec.st_fin_stream_type_code;
      l_st_fin_stream_purpose_code              := p_header_rec.st_fin_stream_purpose_code;
      l_st_fin_stream_id                        := NULL;
      l_st_cap_stream_type_code                 := p_header_rec.st_cap_stream_type_code;
      l_st_cap_stream_purpose_code              := p_header_rec.st_cap_stream_purpose_code;
      l_st_cap_stream_id                        := NULL;

      --R12B ebTax change
      l_st_tax_schedule_applies_flag            := p_header_rec.st_tax_schedule_applies_flag;

      IF (l_st_bill_stream_type_code IS NOT NULL
          AND
          l_st_bill_stream_purpose_code IS NOT NULL) THEN
         check_stream_type_code(
                                x_return_status    => x_return_status,
                                x_msg_count        => x_msg_count,
                                x_msg_data         => x_msg_data,
                                p_stream_type_code => l_st_bill_stream_type_code,
                                p_stream_purpose   => l_st_bill_stream_purpose_code,
                                x_id1              => l_id1,
                                x_name             => l_st_stream_name
                               );
         l_st_bill_stream_id := l_id1;

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_header_rec.contract_number_old,
                                'COL_NAME',
                                'ST_BILL_STREAM_TYPE_CODE, ST_BILL_STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                 l_st_bill_stream_type_code||', '||l_st_bill_stream_purpose_code
                                );
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE header_rule_failed;
         END IF;
      END IF;

      IF (l_st_fin_stream_type_code IS NOT NULL
          AND
          l_st_fin_stream_purpose_code IS NOT NULL) THEN
         check_stream_type_code(
                                x_return_status    => x_return_status,
                                x_msg_count        => x_msg_count,
                                x_msg_data         => x_msg_data,
                                p_stream_type_code => l_st_fin_stream_type_code,
                                p_stream_purpose   => l_st_fin_stream_purpose_code,
                                x_id1              => l_id1,
                                x_name             => l_st_stream_name
                               );
         l_st_fin_stream_id := l_id1;

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_header_rec.contract_number_old,
                                'COL_NAME',
                                'ST_FIN_STREAM_TYPE_CODE, ST_FIN_STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                 l_st_fin_stream_type_code||', '||l_st_fin_stream_purpose_code
                                );
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE header_rule_failed;
         END IF;
      END IF;

      IF (l_st_cap_stream_type_code IS NOT NULL
          AND
          l_st_cap_stream_purpose_code IS NOT NULL) THEN
         check_stream_type_code(
                                x_return_status    => x_return_status,
                                x_msg_count        => x_msg_count,
                                x_msg_data         => x_msg_data,
                                p_stream_type_code => l_st_cap_stream_type_code,
                                p_stream_purpose   => l_st_cap_stream_purpose_code,
                                x_id1              => l_id1,
                                x_name             => l_st_stream_name
                               );
         l_st_cap_stream_id := l_id1;

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_header_rec.contract_number_old,
                                'COL_NAME',
                                'ST_CAP_STREAM_TYPE_CODE, ST_CAP_STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                 l_st_cap_stream_type_code||', '||l_st_cap_stream_purpose_code
                                );
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE header_rule_failed;
         END IF;
      END IF;

      IF (l_st_asset_upfront_tax IS NULL
          OR
          l_st_bill_stream_ID IS NULL
          OR
          l_st_fin_stream_ID IS NULL
          OR
          l_st_cap_stream_ID IS NULL
          OR
          l_st_tax_schedule_applies_flag is NULL -- R12B ebTax change
          AND
          p_header_rec.template_number IS NOT NULL) THEN

         get_contract_rules(
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_chr_id         => p_template_id,
                            p_cle_id         => NULL,
                            p_rgd_code       => 'LAHDTX',
                            p_rule_code      => 'LASTPR',
                            x_rulv_tbl       => l_rulv_tbl,
                            x_rule_count     => l_rule_count
                           );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE header_rule_failed;
         END IF;

         IF (l_rule_count > 0) THEN
            l_st_asset_upfront_tax          := NVL(l_st_asset_upfront_tax, l_rulv_tbl(1).rule_information1);
            l_st_bill_stream_id             := NVL(l_st_bill_stream_id, l_rulv_tbl(1).rule_information2);
            l_st_fin_stream_id              := NVL(l_st_fin_stream_id, l_rulv_tbl(1).rule_information3);
            l_st_cap_stream_id              := NVL(l_st_cap_stream_id, l_rulv_tbl(1).rule_information4);
            --R12B ebtax change
            l_st_tax_schedule_applies_flag  := NVL(l_st_tax_schedule_applies_flag, l_rulv_tbl(1).rule_information5);
         END IF;
      END IF;

      IF (l_st_asset_upfront_tax IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information1         := l_st_asset_upfront_tax;
         l_rulv_rec.rule_information_category := 'LASTPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_st_bill_stream_id IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information2         := l_st_bill_stream_id;
         l_rulv_rec.rule_information_category := 'LASTPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_st_fin_stream_id IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information3         := l_st_fin_stream_id;
         l_rulv_rec.rule_information_category := 'LASTPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      IF (l_st_cap_stream_id IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information4         := l_st_cap_stream_id;
         l_rulv_rec.rule_information_category := 'LASTPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      -- R12 ebtax change - START

      IF (l_st_tax_schedule_applies_flag IS NOT NULL) THEN
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_st_tax_schedule_applies_flag;
         l_rulv_rec.rule_information_category := 'LASTPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      ELSIF (l_st_tax_schedule_applies_flag IS NULL) THEN

         -- R12B ebTax: Fetch Tax Schedule Flag from system options
         -- if it was not supplied during import

         OPEN c_tax_schedule_yn;
         FETCH c_tax_schedule_yn INTO l_tax_schedule_yn;
         CLOSE c_tax_schedule_yn;

          l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information5         := l_tax_schedule_yn;
         l_rulv_rec.rule_information_category := 'LASTPR';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';
      END IF;

      -- R12 ebtax change - END

      create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise header_rule_failed;
      END IF;

      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
         l_rgp_id := x_rgpv_rec.id;
      END IF;
      debug_message('------>Rule: LAHDTX/LASTPR processed');
      l_rulv_rec := NULL;
      return;

   EXCEPTION

     WHEN header_rule_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         debug_message('------>Error with: '||l_rgpv_rec.rgd_code);
         debug_message('------>Rule Catg: '|| l_rulv_rec.rule_information_category);

      WHEN OTHERS THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;
        debug_message('Others : '||l_progress);

   END create_header_rules;

------------------------------------------------------------------------------
-- PROCEDURE create_contact
-- It creates contact and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE create_contact(
                            x_return_status       OUT NOCOPY VARCHAR2,
                            x_msg_count           OUT NOCOPY NUMBER,
                            x_msg_data            OUT NOCOPY VARCHAR2,
                            p_contract_header_id  IN  okc_k_headers_v.id%TYPE,
                            p_contract_number_old IN  okl_header_interface.contract_number_old%TYPE,
                            p_salesperson_id      IN  okl_header_interface.salesperson_id%TYPE,
                            p_salesperson_name    IN  okl_header_interface.salesperson_name%TYPE,
                            p_authoring_org_id    IN  okl_header_interface.authoring_org_id%TYPE,
                            p_lessor_id           IN  NUMBER
                           ) IS

   l_proc_name      VARCHAR2(35) := 'CREATE_CONTRACT';
   x_salesperson_id NUMBER;
   l_ctcv_rec       OKL_OKC_MIGRATION_PVT.ctcv_rec_type;
   x_ctcv_rec       OKL_OKC_MIGRATION_PVT.ctcv_rec_type;
   l_id             NUMBER;
   contact_failed   EXCEPTION;

   CURSOR sale_csr (p_salesrep_id   NUMBER,
                    p_salesrep_name VARCHAR2,
                    p_org_id        NUMBER) IS
   SELECT id1
   FROM   okx_salesreps_v
   WHERE  (( id1 = p_salesrep_id
             AND
             p_salesrep_id IS NOT NULL
           )
           OR
           ( name = p_salesrep_name
             AND
             p_salesrep_name IS NOT NULL
           )
          )
   AND    org_id = p_org_id;

   BEGIN

     IF (p_salesperson_id   IS NOT NULL
         OR
         p_salesperson_name IS NOT NULL) THEN
        OPEN sale_csr (p_salesperson_id,
                       p_salesperson_name,
                       p_authoring_org_id);
        FETCH sale_csr INTO l_id;
        IF sale_csr%NOTFOUND THEN
         okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'COL_NAME',
                            'SALESPERSON_NAME, ID',
                            'COL_VALUE',
                            p_salesperson_name||', '||p_salesperson_id,
                            'CONTRACT_NUM',
                            p_contract_number_old
                           );
           RAISE contact_failed;
        END IF;
        CLOSE sale_csr;

        x_salesperson_id := l_id;
     END IF;


     IF (x_salesperson_id IS NOT NULL) THEN
        l_ctcv_rec.cpl_id            := p_lessor_id;
        l_ctcv_rec.dnz_chr_id        := p_contract_header_id;
        l_ctcv_rec.cro_code          := 'SALESPERSON';
        l_ctcv_rec.jtot_object1_code := 'OKX_SALEPERS';
        l_ctcv_rec.object1_id1       := x_salesperson_id;
        l_ctcv_rec.object1_id2       := '#';

        OKL_OKC_MIGRATION_PVT.create_contact(
                                              p_api_version   => 1.0,
                                              x_return_status => x_return_status,
                                              x_msg_count     => x_msg_count,
                                              x_msg_data      => x_msg_data,
                                              p_ctcv_rec      => l_ctcv_rec,
                                              x_ctcv_rec      => x_ctcv_rec);
        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            raise contact_failed;
        END IF;

     END IF;

     return;

   EXCEPTION
     WHEN contact_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;

     WHEN OTHERS THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_UNEXPECTED_ERROR,
                            'OKL_SQLCODE',
                            SQLCODE,
                            'OKL_SQLERRM',
                            SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                           );

        x_return_status := OKL_API.G_RET_STS_ERROR;


   END create_contact;

------------------------------------------------------------------------------
-- PROCEDURE get_ship_to_site
-- It gets Ship to site id from number and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  process_party_role
------------------------------------------------------------------------------
   PROCEDURE get_ship_to_site(
                              x_return_status                OUT NOCOPY VARCHAR2,
                              x_msg_count                    OUT NOCOPY NUMBER,
                              x_msg_data                     OUT NOCOPY VARCHAR2,
                              p_contract_number              IN  okc_k_headers_v.contract_number%TYPE,
                              p_line_number                  IN  okc_k_lines_v.line_number%TYPE,
                              p_auth_org_id                  IN  NUMBER,
                              p_ship_to_site_number          IN  okx_party_site_uses_v.party_site_number%TYPE,
                              p_ship_to_site_id              IN  okx_party_site_uses_v.party_site_id%TYPE,
                              x_ship_to_site_id              OUT NOCOPY okx_party_site_uses_v.party_site_id%TYPE
                             ) IS

   CURSOR ship_csr (p_site_id      NUMBER,
                    p_site_number  VARCHAR2,
                    p_customer_id  NUMBER) IS
   SELECT party_site_id
   FROM   okx_party_site_uses_v
   WHERE  ((party_site_number = p_site_number
            AND
            p_site_number IS NOT NULL)
            OR
            (id1 = p_site_id
             AND
             p_site_id IS NOT NULL
            )
           )
   AND    site_use_type = 'SHIP_TO'
   AND    party_id      = p_customer_id
   AND    status        = 'A';

   CURSOR cust_ship_csr (p_party_site_id NUMBER,
                         p_cust_acct_id  NUMBER,
                         p_org_id        NUMBER) IS
   SELECT site_use.id1
   FROM   okx_cust_site_uses_v site_use,
          hz_cust_acct_sites_all site
   WHERE  site.cust_acct_site_id = site_use.cust_acct_site_id
   AND    site_use.party_site_id         = p_party_site_id
   AND    site_use.org_id                = p_org_id
   AND    site.org_id                    = p_org_id
   AND    site_use.site_use_code         = 'SHIP_TO'
   AND    site_use.cust_account_id       = p_cust_acct_id
   AND    site_use.b_status              = 'A'
   AND    site.status                    = 'A';

   l_proc_name     VARCHAR2(35) := 'GET_SHIP_TO_SITE';
   l_cust_site_id  NUMBER;
   l_party_site_id NUMBER;
   ship_failed     EXCEPTION;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      debug_message(l_proc_name);
      debug_message('Customer: '|| g_customer_id);
      debug_message('Cust Acc: '|| g_customer_account_id);
      debug_message('p_ship_to_site_id: '|| p_ship_to_site_id);

      OPEN ship_csr (p_ship_to_site_id,
                     p_ship_to_site_number,
                     g_customer_id);
      FETCH ship_csr INTO l_party_site_id;
      IF (ship_csr%NOTFOUND) THEN
         RAISE ship_failed;
      END IF;
      CLOSE ship_csr;

      debug_message('Party Site: '||l_party_site_id);
      debug_message('Org : '||p_auth_org_id);
      OPEN cust_ship_csr (l_party_site_id,
                          g_customer_account_id,
                          p_auth_org_id);
      FETCH cust_ship_csr INTO l_cust_site_id;
      IF (cust_ship_csr%NOTFOUND) THEN
         RAISE ship_failed;
      END IF;
      CLOSE cust_ship_csr;

      debug_message('Cust Site: ' || l_cust_site_id);
      x_ship_to_site_id := l_cust_site_id;

      RETURN;

  EXCEPTION
     WHEN ship_failed THEN
        IF (ship_csr%ISOPEN) THEN
           CLOSE ship_csr;
        END IF;
        IF (cust_ship_csr%ISOPEN) THEN
           CLOSE cust_ship_csr;
        END IF;
        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'COL_NAME',
                            'SHIP_TO_SITE, ID',
                            'COL_VALUE',
                            p_ship_to_site_number||', '||p_ship_to_site_id,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||p_line_number
                           );
        x_return_status := OKL_API.G_RET_STS_ERROR;

   END get_ship_to_site;

------------------------------------------------------------------------------
-- PROCEDURE get_guarantor_address
-- It gets Gurarantor Address ID from given address and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  process_party_role
------------------------------------------------------------------------------
   PROCEDURE get_guarantor_address(
                                   x_return_status                OUT NOCOPY VARCHAR2,
                                   x_msg_count                    OUT NOCOPY NUMBER,
                                   x_msg_data                     OUT NOCOPY VARCHAR2,
                                   p_contract_number              IN  okc_k_headers_v.contract_number%TYPE,
                                   p_line_number                  IN  okc_k_lines_v.line_number%TYPE,
                                   p_guarantor_site_number        IN  okl_party_roles_interface.guarantor_site_number%TYPE,
                                   p_guarantor_site_id            IN  okl_party_roles_interface.guarantor_site_id%TYPE,
                                   x_guarantor_site_id            OUT NOCOPY okl_party_roles_interface.guarantor_site_id%TYPE
                                  ) IS

   CURSOR gaddr_csr (p_site_id      NUMBER,
                     p_site_number  VARCHAR2) IS
   SELECT id1
   FROM   okx_party_sites_v
   WHERE  ( party_site_number = p_site_number
            AND
            p_site_number IS NOT NULL)
   OR     ( id1 = p_site_id
            AND
            p_site_id IS NOT NULL);

   l_id         NUMBER;
   gaddr_failed EXCEPTION;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      OPEN gaddr_csr (p_guarantor_site_id,
                      p_guarantor_site_number);
      FETCH gaddr_csr INTO l_id;
      IF (gaddr_csr%NOTFOUND) THEN
         RAISE gaddr_failed;
      END IF;

      CLOSE gaddr_csr;
      x_guarantor_site_id := l_id;

      RETURN;

  EXCEPTION
     WHEN gaddr_failed THEN
        IF (gaddr_csr%ISOPEN) THEN
           CLOSE gaddr_csr;
        END IF;
        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'COL_NAME',
                            'GUARANTOR_SITE, ID',
                            'COL_VALUE',
                            p_guarantor_site_number||', '||p_guarantor_site_id,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||p_line_number
                           );
        x_return_status := OKL_API.G_RET_STS_ERROR;

   END get_guarantor_address;

------------------------------------------------------------------------------
-- PROCEDURE get_rrd_id
-- It gets RRD_ID for Guarantor and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  process_party_role
------------------------------------------------------------------------------
   PROCEDURE get_rrd_id(
                        x_return_status OUT NOCOPY VARCHAR2,
                        p_rgd_code      IN  VARCHAR2,
                        p_rle_code      IN  VARCHAR2,
                        x_rrd_id        OUT NOCOPY NUMBER
                       ) IS
   CURSOR rrd_csr (p_rgd_code VARCHAR2,
                   p_rle_code VARCHAR2) IS
   SELECT rrd.id
   FROM   okc_rg_role_defs rrd,
          okc_subclass_rg_defs srd,
          okc_subclass_roles   srl
   WHERE  rrd.srd_id    = srd.id
   AND    rrd.sre_id    = srl.id
   AND    srd.scs_code  = 'LEASE'
   AND    srd.rgd_code  = p_rgd_code --'LAGRDT'
   AND    srl.scs_code  = 'LEASE'
   AND    srl.rle_code  = p_rle_code; --'GUARANTOR'

   l_id NUMBER:= NULL;

   BEGIN

      OPEN rrd_csr (p_rgd_code,
                    p_rle_code);
      FETCH rrd_csr INTO l_id;
      IF rrd_csr%NOTFOUND THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
      END IF;
      CLOSE rrd_csr;

      x_rrd_id := l_id;
      return;

   EXCEPTION
     WHEN OTHERS THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
   END get_rrd_id;



------------------------------------------------------------------------------
-- PROCEDURE create_private_label
-- It create party roles and rules for PRIVATE_LABEL information and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE create_private_label (
                                   x_return_status   OUT NOCOPY VARCHAR2,
                                   x_msg_count       OUT NOCOPY NUMBER,
                                   x_msg_data        OUT NOCOPY VARCHAR2,
                                   p_chr_id          IN  NUMBER,
                                   p_contract_number IN okc_k_headers_v.contract_number%TYPE,
                                   p_label_number    IN  VARCHAR2,
                                   p_label_id        IN  NUMBER,
                                   p_label_url       IN  VARCHAR2
                                  ) IS

   CURSOR party_csr (p_private_label_number VARCHAR2,
                     p_private_label_id     NUMBER) IS
   SELECT id1
   FROM   okx_parties_v
   WHERE  ((party_number = p_private_label_number
            AND
            p_private_label_number IS NOT NULL)
            OR
            (id1  = p_private_label_id
             AND
             p_private_label_id IS NOT NULL
            )
           );

   l_proc_name  VARCHAR2(35) := 'CREATE_PRIVATE_LABEL';
   p_cplv_rec   cplv_rec_type;
   x_cplv_rec   cplv_rec_type;
   l_rgpv_rec   rgpv_rec_type;
   x_rgpv_rec   rgpv_rec_type;
   l_rulv_rec   rulv_rec_type;
   x_rulv_rec   rulv_rec_type;
   l_rmpv_rec   rmpv_rec_type;
   x_rmpv_rec   rmpv_rec_type;

   l_rgp_id     NUMBER;
   x_rrd_id     NUMBER;
   l_id         NUMBER;

   party_failed EXCEPTION;

   l_kplv_rec   kplv_rec_type;
   x_kplv_rec   kplv_rec_type;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      IF (p_label_number IS NOT NULL
          OR
          p_label_id IS NOT NULL) THEN

         OPEN party_csr (p_label_number,
                         p_label_id);
         FETCH party_csr INTO l_id;

         IF party_csr%NOTFOUND THEN
            RAISE party_failed;
         END IF;
         CLOSE party_csr;

         p_cplv_rec                   := NULL;
         p_cplv_rec.chr_id            := p_chr_id;
         p_cplv_rec.dnz_chr_id        := p_chr_id;
         p_cplv_rec.cle_id            := NULL; -- always at header level
         p_cplv_rec.object1_id1       := TO_CHAR(l_id);
         p_cplv_rec.object1_id2       := '#';
         p_cplv_rec.jtot_object1_code := 'OKX_PARTY';
         p_cplv_rec.rle_code          := 'PRIVATE_LABEL';

         OKL_K_PARTY_ROLES_PVT.create_k_party_role(
                                                p_api_version   => 1.0,
                                                p_init_msg_list => OKL_API.G_FALSE,
                                                x_return_status => x_return_status,
                                                x_msg_count     => x_msg_count,
                                                x_msg_data      => x_msg_data,
                                                p_cplv_rec      => p_cplv_rec,
                                                p_kplv_rec      => l_kplv_rec,
                                                x_cplv_rec      => x_cplv_rec,
                                                x_kplv_rec      => x_kplv_rec
                                               );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE party_failed;
         END IF;

         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LALABL';
         l_rgpv_rec.chr_id     := p_chr_id;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := NULL; -- always at header level
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec            := NULL;

         IF (p_label_url IS NOT NULL) THEN

            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information1         := p_label_url;
            l_rulv_rec.rule_information_category := 'LALOGO';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

            create_rule_group_and_rule(
                                       x_return_status => x_return_status,
                                       x_msg_count     => x_msg_count,
                                       x_msg_data      => x_msg_data,
                                       p_rgp_id        => l_rgp_id,
                                       p_rgpv_rec      => l_rgpv_rec,
                                       p_rulv_rec      => l_rulv_rec,
                                       x_rgpv_rec      => x_rgpv_rec,
                                       x_rulv_rec      => x_rulv_rec
                                      );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                raise party_failed;
            END IF;

            get_rrd_id(
                       x_return_status => x_return_status,
                       p_rgd_code      => 'LALABL',
                       p_rle_code      => 'PRIVATE_LABEL',
                       x_rrd_id        => x_rrd_id
                      );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 okl_api.set_message(
                                     G_APP_NAME,
                                     G_LABEL_SETUP_ERROR,
                                     'CONTRACT_NUM',
                                     p_contract_number
                                    );
                 x_return_status := OKL_API.G_RET_STS_ERROR;
                 RAISE party_failed;
            END IF;

            l_rmpv_rec.rgp_id     := x_rgpv_rec.id;
            l_rmpv_rec.cpl_id     := x_cplv_rec.id;
            l_rmpv_rec.rrd_id     := x_rrd_id;
            l_rmpv_rec.dnz_chr_id := p_chr_id;

            okl_rule_pub.create_rg_mode_pty_role(
                                                 p_api_version   => 1.0,
                                                 p_init_msg_list => OKL_API.G_FALSE,
                                                 x_return_status => x_return_status,
                                                 x_msg_count     => x_msg_count,
                                                 x_msg_data      => x_msg_data,
                                                 p_rmpv_rec      => l_rmpv_rec,
                                                 x_rmpv_rec      => x_rmpv_rec
                                                );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                raise party_failed;
            END IF;

         END IF; --label_url

      END IF;  --private_label

   EXCEPTION
      WHEN party_failed THEN
         IF party_csr%ISOPEN THEN
            CLOSE party_csr;
         END IF;
         okl_api.set_message(
                             G_APP_NAME,
                             G_INVALID_VALUE,
                             'COL_NAME',
                             'PRIVATE_LABEL_NUMBER, ID',
                             'COL_VALUE',
                             p_label_number||', '||p_label_id,
                             'CONTRACT_NUM',
                             p_contract_number
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;

   END create_private_label;

-- strat cklee 02/16/2004  bug# 3440442
------------------------------------------------------------------------------
-- PROCEDURE validate_3rd_party_insurance
-- It validate 3rd party insurence policy and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
------------------------------------------------------------------------------

   PROCEDURE validate_3rd_party_insurance (
                                   x_return_status   OUT NOCOPY VARCHAR2,
                                   x_msg_count       OUT NOCOPY NUMBER,
                                   x_msg_data        OUT NOCOPY VARCHAR2,
                                   p_intf_header     IN  intf_h_rec_type,
                                   x_intf_header     OUT NOCOPY intf_h_rec_type
                                  ) IS
   v_3rd_party_insurance_failed EXCEPTION;

  l_proc_name varchar2(150) := 'OKL_HEADER_INTERFACE: validate_3rd_party_insurance';
  l_progress  varchar2(150);

  l_intf_header intf_h_rec_type := p_intf_header;

  intf_party_rec intf_party_rec_type;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
--
-- 1. validation
--
     -- 3rd party insurace
     -- 1. insurance company name/site
      IF ((p_intf_header.insurance_company_name IS NOT NULL OR
           p_intf_header.insurance_company_id IS NOT NULL OR
           p_intf_header.insurance_company_number IS NOT NULL)
          AND
          (p_intf_header.insurance_company_site_name IS NOT NULL OR
           p_intf_header.insurance_company_site_id IS NOT NULL OR
           p_intf_header.insurance_company_site_number IS NOT NULL)) THEN


              intf_party_rec.contract_number       := p_intf_header.contract_number_old;
              intf_party_rec.line_number           := NULL;
              intf_party_rec.party_category_code   := G_INSURER;

              intf_party_rec.party_id              := p_intf_header.insurance_company_id;
              intf_party_rec.party_name            := p_intf_header.insurance_company_name;
              intf_party_rec.party_number          := p_intf_header.insurance_company_number;
              intf_party_rec.party_site_id         := p_intf_header.insurance_company_site_id;
              intf_party_rec.party_site_name       := p_intf_header.insurance_company_site_name;
              intf_party_rec.party_site_number     := p_intf_header.insurance_company_site_number;
              intf_party_rec.intf_party_id         := G_INSURANCE_COMPANY_ID;
              intf_party_rec.intf_party_name       := G_INSURANCE_COMPANY_NAME;
              intf_party_rec.intf_party_number     := G_INSURANCE_COMPANY_NUMBER;
              intf_party_rec.intf_party_site_id    := G_INSURANCE_COMPANY_SITE_ID;
              intf_party_rec.intf_party_site_name  := G_INSURANCE_COMPANY_SITE_NAME;
              intf_party_rec.intf_party_site_number:= G_INSURANCE_COMPANY_SITE_NUM;


              get_party(
                  x_return_status     => x_return_status,
                  x_msg_count         => x_msg_count,
                  x_msg_data          => x_msg_data,
                  p_intf_party_rec    => intf_party_rec,
                  x_party_id          => l_intf_header.insurance_company_id,
                  x_party_site_id     => l_intf_header.insurance_company_site_id
                 );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                RAISE v_3rd_party_insurance_failed;
             END IF;
      END IF;
      l_progress := 'validate insurance company name/site';

     -- 3. agent name/site
      IF ((p_intf_header.agent_name IS NOT NULL OR
           p_intf_header.agent_id IS NOT NULL OR
           p_intf_header.agent_number IS NOT NULL)
          AND
          (p_intf_header.agent_address_site_name IS NOT NULL OR
           p_intf_header.agent_address_site_id IS NOT NULL OR
           p_intf_header.agent_address_site_number IS NOT NULL)) THEN


              intf_party_rec.contract_number       := p_intf_header.contract_number_old;
              intf_party_rec.line_number           := NULL;
              intf_party_rec.party_category_code   := G_INSURANCE_AGENT;

              intf_party_rec.party_id              := p_intf_header.agent_id;
              intf_party_rec.party_name            := p_intf_header.agent_name;
              intf_party_rec.party_number          := p_intf_header.agent_number;
              intf_party_rec.party_site_id         := p_intf_header.agent_address_site_id;
              intf_party_rec.party_site_name       := p_intf_header.agent_address_site_name;
              intf_party_rec.party_site_number     := p_intf_header.agent_address_site_number;
              intf_party_rec.intf_party_id         := G_AGENT_ID;
              intf_party_rec.intf_party_name       := G_AGENT_NAME;
              intf_party_rec.intf_party_number     := G_AGENT_NUMBER;
              intf_party_rec.intf_party_site_id    := G_AGENT_ADDRESS_SITE_ID;
              intf_party_rec.intf_party_site_name  := G_AGENT_ADDRESS_SITE_NAME;
              intf_party_rec.intf_party_site_number:= G_AGENT_ADDRESS_SITE_NUMBER;


              get_party(
                  x_return_status     => x_return_status,
                  x_msg_count         => x_msg_count,
                  x_msg_data          => x_msg_data,
                  p_intf_party_rec    => intf_party_rec,
                  x_party_id          => l_intf_header.agent_id,
                  x_party_site_id     => l_intf_header.agent_address_site_id
                 );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                RAISE v_3rd_party_insurance_failed;
             END IF;
      END IF;
      l_progress := 'validate insurance agent name/address site';


      IF (NVL(p_intf_header.LESSOR_INSURED_FLAG,'N') NOT IN ('Y','N')) THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_VALUE,
                               'CONTRACT_NUM',
                               p_intf_header.contract_number_old,
                               'COL_NAME',
                               'LESSOR_INSURED_FLAG',
                               'COL_VALUE',
                               p_intf_header.LESSOR_INSURED_FLAG
                              );

        x_return_status := OKL_API.G_RET_STS_ERROR;

        RAISE v_3rd_party_insurance_failed;
      END IF;
      l_progress := 'validate LESSOR_INSURED_FLAG';

      IF (NVL(p_intf_header.LESSOR_PAYEE_FLAG,'N') NOT IN ('Y','N')) THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_VALUE,
                               'CONTRACT_NUM',
                               p_intf_header.contract_number_old,
                               'COL_NAME',
                               'LESSOR_PAYEE_FLAG',
                               'COL_VALUE',
                               p_intf_header.LESSOR_PAYEE_FLAG
                              );

        x_return_status := OKL_API.G_RET_STS_ERROR;

        RAISE v_3rd_party_insurance_failed;
      END IF;
      l_progress := 'validate LESSOR_PAYEE_FLAG';

      -- assign to out record
      x_intf_header := l_intf_header;

   EXCEPTION
      WHEN v_3rd_party_insurance_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        debug_message(l_proc_name ||': '||l_progress);

      WHEN OTHERS THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        debug_message(l_proc_name ||': '||l_progress);

   END validate_3rd_party_insurance;

------------------------------------------------------------------------------
-- PROCEDURE create_3rd_party_insurance
-- It create 3rd party insurence policy and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
------------------------------------------------------------------------------

   PROCEDURE create_3rd_party_insurance (
                                   x_return_status   OUT NOCOPY VARCHAR2,
                                   x_msg_count       OUT NOCOPY NUMBER,
                                   x_msg_data        OUT NOCOPY VARCHAR2,
                                   p_intf_header     IN  intf_h_rec_type,
                                   p_chr_id          IN  NUMBER
                                  ) IS
   e_3rd_party_insurance_failed EXCEPTION;

  l_proc_name varchar2(150) := 'OKL_HEADER_INTERFACE: create_3rd_party_insurance';
  l_progress  varchar2(150);

  x_intf_header intf_h_rec_type;

  l_ipyv_rec okl_ipy_pvt.ipyv_rec_type;
  x_ipyv_rec okl_ipy_pvt.ipyv_rec_type;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
--
-- 1. validation
--
      validate_3rd_party_insurance(x_return_status  => x_return_status,
                                   x_msg_count      => x_msg_count,
                                   x_msg_data       => x_msg_data,
                                   p_intf_header    => p_intf_header,
                                   x_intf_header    => x_intf_header
                                  );


      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        raise e_3rd_party_insurance_failed;
      END IF;

--
-- 2. create record
--

      l_ipyv_rec.ipy_type            := 'THIRD_PARTY_POLICY';
      l_ipyv_rec.khr_id              := p_chr_id;

      l_ipyv_rec.policy_number       := x_intf_header.POLICY_NUMBER;
      l_ipyv_rec.date_from           := x_intf_header.POLICY_EFFECTIVE_FROM;
      l_ipyv_rec.date_to             := x_intf_header.POLICY_EFFECTIVE_TO;
      l_ipyv_rec.covered_amount      := x_intf_header.COVERED_AMOUNT;
      l_ipyv_rec.deductible          := x_intf_header.DEDUCTIBLE_AMOUNT;
      l_ipyv_rec.endorsement         := x_intf_header.ENDORSEMENT;
      l_ipyv_rec.name_of_insured     := x_intf_header.NAME_OF_INSURED;
      l_ipyv_rec.lessor_insured_yn   := x_intf_header.LESSOR_INSURED_FLAG;
      l_ipyv_rec.lessor_payee_yn     := x_intf_header.LESSOR_PAYEE_FLAG;

      l_ipyv_rec.isu_id              := x_intf_header.insurance_company_id;
      l_ipyv_rec.agency_site_id      := x_intf_header.insurance_company_site_id;

      l_ipyv_rec.int_id              := x_intf_header.agent_id;
      l_ipyv_rec.agent_site_id       := x_intf_header.agent_address_site_id;

      l_ipyv_rec.date_proof_required := x_intf_header.PROOF_DUE_DATE;
      l_ipyv_rec.date_proof_provided := x_intf_header.PROOF_PROVIDED_DATE;

      OKL_INS_POLICIES_PUB.INSERT_INS_POLICIES(
                                                p_api_version   => 1.0,
                                                p_init_msg_list => OKL_API.G_FALSE,
                                                x_return_status => x_return_status,
                                                x_msg_count     => x_msg_count,
                                                x_msg_data      => x_msg_data,
                                                p_ipyv_rec      => l_ipyv_rec,
                                                x_ipyv_rec      => x_ipyv_rec
                                               );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        RAISE e_3rd_party_insurance_failed;
      END IF;
      l_progress := 'Create 3rd insurance record';

   EXCEPTION
      WHEN e_3rd_party_insurance_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        debug_message(l_proc_name ||': '||l_progress);

      WHEN OTHERS THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        debug_message(l_proc_name ||': '||l_progress);

   END create_3rd_party_insurance;

-- end cklee 02/16/2004 bug# 3440442
------------------------------------------------------------------------------
-- PROCEDURE get_vendor_paygroup
-- It returns vendor Pay-group info and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
------------------------------------------------------------------------------
   FUNCTION get_vendor_paygroup(
                               x_return_status       OUT NOCOPY VARCHAR2,
                               p_contract_number     IN  OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                               p_line_number         IN  OKL_LINES_INTERFACE.LINE_NUMBER%TYPE,
			       p_auth_org_id         IN  OKL_HEADER_INTERFACE.authoring_org_id%TYPE,
                               p_vendor_paysite_id   IN  OKL_LINES_INTERFACE.VENDOR_PAYSITE_ID%TYPE
                              )
   RETURN NUMBER IS
   CURSOR paygroup_csr (p_paysite_id NUMBER,
                         p_org_id   NUMBER) IS
   SELECT pay_group_lookup_code
   FROM   po_vendor_sites_all
   WHERE  vendor_site_id = p_vendor_paysite_id
   AND    org_id = p_auth_org_id;

   l_paygroup po_vendor_sites_all.pay_group_lookup_code%TYPE;
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN paygroup_csr (p_vendor_paysite_id,
                         p_auth_org_id);
     FETCH paygroup_csr INTO l_paygroup;
     IF paygroup_csr%NOTFOUND THEN
       CLOSE paygroup_csr;
       RETURN NULL;
     ELSE
       CLOSE paygroup_csr;
       RETURN l_paygroup;
     END IF;


   END get_vendor_paygroup;

------------------------------------------------------------------------------
-- PROCEDURE process_party_role
-- It Process Party Role Interafce Records at Contract Line level and Header Level as well and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  get_vendor_id
--  get_party_id
--  get_rrd_id
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE  process_party_role(
                                 x_return_status        OUT NOCOPY VARCHAR2,
                                 x_msg_count            OUT NOCOPY NUMBER,
                                 x_msg_data             OUT NOCOPY VARCHAR2,
                                 p_contract_number      IN  okl_header_interface.contract_number_old%TYPE,
                                 p_chr_id               IN  okc_k_headers_v.id%TYPE,
                                 p_auth_org_id          IN  okl_header_interface.authoring_org_id%TYPE,
                                 p_line_number          IN  okc_k_lines_v.line_number%TYPE,
                                 p_line_type            IN  okl_lines_interface.line_type%TYPE,
                                 p_fin_cle_id           IN  NUMBER,
                                 p_model_cle_id         IN  NUMBER,
                                 p_service_line_id      IN  NUMBER,
                                 p_fee_line_id          IN  NUMBER,
                                 p_usage_line_id        IN  NUMBER,
                                 p_asset_vendor_name    IN  okl_party_roles_interface.asset_vendor_name%TYPE,
                                 p_asset_vendor_id      IN  okl_party_roles_interface.asset_vendor_id%TYPE,
                                 p_service_vendor_name  IN  okl_party_roles_interface.service_vendor_name%TYPE,
                                 p_service_vendor_id    IN  okl_party_roles_interface.service_vendor_id%TYPE,
                                 p_fees_vendor_name     IN  okl_party_roles_interface.fees_vendor_name%TYPE,
                                 p_fees_vendor_id       IN  okl_party_roles_interface.fees_vendor_id%TYPE,
                                 p_guarantor_number     IN  okl_party_roles_interface.guarantor_number%TYPE,
                                 p_guarantor_id         IN  okl_party_roles_interface.guarantor_id%TYPE,
                                 p_dealer_name          IN  okl_party_roles_interface.dealer_name%TYPE,
                                 p_dealer_id            IN  okl_party_roles_interface.dealer_id%TYPE,
                                 p_guarantor_type       IN  okl_party_roles_interface.guarantor_type%TYPE,
                                 p_guarantee_type       IN  okl_party_roles_interface.guarantee_type%TYPE,
                                 p_guaranteed_amount    IN  okl_party_roles_interface.guaranteed_amount%TYPE,
                                 p_guarantee_date       IN  okl_party_roles_interface.guarantee_date%TYPE,
                                 p_guarantee_comment    IN  okl_party_roles_interface.guarantee_comment%TYPE,
                                 p_guarantor_site_number IN okl_party_roles_interface.guarantor_site_number%TYPE,
                                 p_guarantor_site_id     IN okl_party_roles_interface.guarantor_site_id%TYPE,
                                 p_payment_term          IN okl_lines_interface.payment_term%TYPE,
                                 p_payment_term_id       IN okl_lines_interface.payment_term_id%TYPE,
                                 p_vendor_paysite_id     IN okl_lines_interface.vendor_paysite_id%TYPE,
                                 p_vendor_paysite_name   IN okl_lines_interface.vendor_paysite_name%TYPE,
                                 p_vendor_payment_method IN okl_lines_interface.vendor_payment_method%TYPE,
                                 p_passthrough_percent      IN okl_lines_interface.passthrough_percent%TYPE,
                                 p_passthrough_basis_code   IN okl_lines_interface.passthrough_basis_code%TYPE,
                                 p_billable_vendor_id       IN okl_party_roles_interface.billable_vendor_id%TYPE,
                                 p_billable_vendor_name     IN okl_party_roles_interface.billable_vendor_name%TYPE,
                                 p_vend_as_customer_number  IN okl_party_roles_interface.vend_as_customer_number%TYPE,
                                 p_vend_as_customer_id      IN okl_party_roles_interface.vend_as_customer_id%TYPE,
                                 p_vend_as_cust_acc_id      IN okl_party_roles_interface.vend_as_customer_acc_id%TYPE,
                                 p_vend_as_cust_acc_number  IN okl_party_roles_interface.vend_as_customer_acc_number%TYPE,
                                 p_vend_bill_to_addr_id     IN okl_party_roles_interface.vend_bill_to_addr_id%TYPE,
                                 p_vend_bill_to_addr        IN okl_party_roles_interface.vend_bill_to_addr%TYPE,
                                 p_vend_payment_method_id   IN okl_party_roles_interface.vend_payment_method_id%TYPE,
                                 p_vend_payment_method      IN okl_party_roles_interface.vend_payment_method%TYPE,
                                 p_vend_bank_acc_id         IN okl_party_roles_interface.vend_bank_acc_id%TYPE,
                                 p_vend_bank_acc_number     IN okl_party_roles_interface.vend_bank_acc_number%TYPE,
                                 p_vend_invoice_format_id      IN okl_party_roles_interface.vend_invoice_format_id%TYPE,
                                 p_vend_invoice_format_code    IN okl_party_roles_interface.vend_invoice_format_code%TYPE,
                                 p_vend_review_invoice_flag    IN okl_party_roles_interface.vend_review_invoice_flag%TYPE,
                                 p_vend_reason_for_inv_review  IN okl_party_roles_interface.vend_reason_for_inv_review%TYPE,
                                 p_vend_inv_review_until_date  IN okl_party_roles_interface.vend_inv_review_until_date%TYPE,
                                 p_pth_base_vendor_site_code   IN okl_party_roles_interface.pth_base_vendor_site_code%TYPE,
                                 p_pth_base_vendor_site_id     IN okl_party_roles_interface.pth_base_vendor_site_id%TYPE,
                                 p_pth_base_paygroup_code      IN okl_party_roles_interface.pth_base_paygroup_code%TYPE,
                                 p_pth_base_pmnt_term_code     IN okl_party_roles_interface.pth_base_pmnt_term_code%TYPE,
                                 p_pth_base_pmnt_term_id       IN okl_party_roles_interface.pth_base_pmnt_term_id%TYPE,
                                 p_pth_base_pmnt_basis         IN okl_party_roles_interface.pth_base_pmnt_basis%TYPE,
                                 p_pth_base_pmnt_start_date    IN okl_party_roles_interface.pth_base_pmnt_start_date%TYPE,
                                 p_pth_base_pmnt_method_code   IN okl_party_roles_interface.pth_base_pmnt_method_code%TYPE,
                                 p_pth_base_pmnt_freq          IN okl_party_roles_interface.pth_base_pmnt_freq%TYPE,
                                 p_pth_base_pmnt_remit_days    IN okl_party_roles_interface.pth_base_pmnt_remit_days%TYPE,
                                 p_pth_base_disb_basis         IN okl_party_roles_interface.pth_base_disb_basis%TYPE,
                                 p_pth_base_disb_fixed_amount  IN okl_party_roles_interface.pth_base_disb_fixed_amount%TYPE,
                                 p_pth_base_disb_pct           IN okl_party_roles_interface.pth_base_disb_pct%TYPE,
                                 p_pth_base_proc_fee_basis     IN okl_party_roles_interface.pth_base_proc_fee_basis%TYPE,
                                 p_pth_base_proc_fee_fixed_amt IN okl_party_roles_interface.pth_base_proc_fee_fixed_amt%TYPE,
                                 p_pth_base_proc_pct           IN okl_party_roles_interface.pth_base_proc_pct%TYPE,
                                 p_pth_evg_vendor_site_code    IN okl_party_roles_interface.pth_evg_vendor_site_code%TYPE,
                                 p_pth_evg_vendor_site_id      IN okl_party_roles_interface.pth_evg_vendor_site_id%TYPE,
                                 p_pth_evg_paygroup_code       IN okl_party_roles_interface.pth_evg_paygroup_code%TYPE,
                                 p_pth_evg_pmnt_term_code      IN okl_party_roles_interface.pth_evg_pmnt_term_code%TYPE,
                                 p_pth_evg_pmnt_term_id        IN okl_party_roles_interface.pth_evg_pmnt_term_id%TYPE,
                                 p_pth_evg_pmnt_basis          IN okl_party_roles_interface.pth_evg_pmnt_basis%TYPE,
                                 p_pth_evg_pmnt_start_date     IN okl_party_roles_interface.pth_evg_pmnt_start_date%TYPE,
                                 p_pth_evg_pmnt_method_code    IN okl_party_roles_interface.pth_evg_pmnt_method_code%TYPE,
                                 p_pth_evg_pmnt_freq           IN okl_party_roles_interface.pth_evg_pmnt_freq%TYPE,
                                 p_pth_evg_pmnt_remit_days     IN okl_party_roles_interface.pth_evg_pmnt_remit_days%TYPE,
                                 p_pth_evg_disb_basis          IN okl_party_roles_interface.pth_evg_disb_basis%TYPE,
                                 p_pth_evg_disb_fixed_amount   IN okl_party_roles_interface.pth_evg_disb_fixed_amount%TYPE,
                                 p_pth_evg_disb_pct            IN okl_party_roles_interface.pth_evg_disb_pct%TYPE,
                                 p_pth_evg_proc_fee_basis      IN okl_party_roles_interface.pth_evg_proc_fee_basis%TYPE,
                                 p_pth_evg_proc_fee_fixed_amt  IN okl_party_roles_interface.pth_evg_proc_fee_fixed_amt%TYPE,
                                 p_pth_evg_proc_pct            IN okl_party_roles_interface.pth_evg_proc_pct%TYPE,
                                 p_attribute_category          IN okl_party_roles_interface.attribute_category%TYPE,
                                 p_attribute1                  IN okl_party_roles_interface.attribute1%TYPE,
                                 p_attribute2                  IN okl_party_roles_interface.attribute2%TYPE,
                                 p_attribute3                  IN okl_party_roles_interface.attribute3%TYPE,
                                 p_attribute4                  IN okl_party_roles_interface.attribute4%TYPE,
                                 p_attribute5                  IN okl_party_roles_interface.attribute5%TYPE,
                                 p_attribute6                  IN okl_party_roles_interface.attribute6%TYPE,
                                 p_attribute7                  IN okl_party_roles_interface.attribute7%TYPE,
                                 p_attribute8                  IN okl_party_roles_interface.attribute8%TYPE,
                                 p_attribute9                  IN okl_party_roles_interface.attribute9%TYPE,
                                 p_attribute10                 IN okl_party_roles_interface.attribute10%TYPE,
                                 p_attribute11                 IN okl_party_roles_interface.attribute11%TYPE,
                                 p_attribute12                 IN okl_party_roles_interface.attribute12%TYPE,
                                 p_attribute13                 IN okl_party_roles_interface.attribute13%TYPE,
                                 p_attribute14                 IN okl_party_roles_interface.attribute14%TYPE,
                                 p_attribute15                 IN okl_party_roles_interface.attribute15%TYPE
                                ) IS
   l_proc_name         VARCHAR2(35) := 'PROCESS_PARTY_ROLE';
   party_role_failed   EXCEPTION;
   l_progress          VARCHAR2(10);

   p_cplv_rec          cplv_rec_type;
   x_cplv_rec          cplv_rec_type;
   l_rgpv_rec          rgpv_rec_type;
   x_rgpv_rec          rgpv_rec_type;
   l_rulv_rec          rulv_rec_type;
   x_rulv_rec          rulv_rec_type;
   l_rmpv_rec          rmpv_rec_type;
   x_rmpv_rec          rmpv_rec_type;
   l_rgp_id            NUMBER;

   x_asset_vendor_id   NUMBER := NULL;
   x_service_vendor_id NUMBER := NULL;
   x_fees_vendor_id    NUMBER := NULL;
   x_guarantor_id      NUMBER := NULL;
   x_rrd_id            NUMBER := NULL;
   x_guarantor_site_id NUMBER;
   x_payment_term_id1   VARCHAR2(240);
   x_pay_site_id1       VARCHAR2(240);
   x_payment_method_id1 VARCHAR2(240);

   CURSOR customer_csr (p_customer_number OKX_PARTIES_V.PARTY_NUMBER%TYPE,
                        p_customer_id     OKX_PARTIES_V.ID1%TYPE) IS
   SELECT id1
   FROM   okx_parties_v
   WHERE  ((party_number = p_customer_number
            AND
            p_customer_number IS NOT NULL
           )
           OR
           (id1          = p_customer_id
            AND
            p_customer_id IS NOT NULL
           )
          );

   CURSOR pmnt_basis_csr (p_payment_basis OKL_PARTY_PAYMENT_DTLS.payment_basis%TYPE) IS
   SELECT 'Y'
   FROM  FND_LOOKUPS
   WHERE lookup_type = 'OKL_PAYMENT_BASIS'
   AND   nvl(enabled_flag,'N') = 'Y'
   AND   sysdate between nvl(start_date_active,sysdate) and nvl(end_date_active,sysdate)
   AND   lookup_code = p_payment_basis;

   CURSOR disb_basis_csr (p_disbursement_basis OKL_PARTY_PAYMENT_DTLS.disbursement_basis%TYPE) IS
   SELECT 'Y'
   FROM  FND_LOOKUPS
   WHERE lookup_type = 'OKL_DISBURSE_BASIS'
   AND   nvl(enabled_flag,'N') = 'Y'
   AND   sysdate between nvl(start_date_active,sysdate) and nvl(end_date_active,sysdate)
   AND   lookup_code = p_disbursement_basis;

   CURSOR proc_fee_basis_csr (p_processing_fee_basis OKL_PARTY_PAYMENT_DTLS.disbursement_basis%TYPE) IS
   SELECT 'Y'
   FROM  FND_LOOKUPS
   WHERE lookup_type = 'OKL_PROC_FEE_BASIS'
   AND   nvl(enabled_flag,'N') = 'Y'
   AND   sysdate between nvl(start_date_active,sysdate) and nvl(end_date_active,sysdate)
   AND   lookup_code = p_processing_fee_basis;

   l_vend_cust_id           NUMBER;
   l_vend_cust_acc_id       NUMBER;
   x_billable_vendor_id     NUMBER;
   l_vend_bill_to_addr_id   NUMBER;
   l_vend_payment_method_id NUMBER;
   l_vend_bank_acc_id       NUMBER;
   l_vend_invoice_format_id NUMBER;
   l_vend_invoice_format_name VARCHAR2(450);

   -- pass through
   l_paygroup_code      po_vendor_sites_all.pay_group_lookup_code%TYPE;
   l_base_pmnt_dtls_rec    ppydv_rec_type;
   l_evg_pmnt_dtls_rec     ppydv_rec_type;
   l_pmnt_dtls_tbl_in      ppydv_tbl_type;
   l_pmnt_dtls_tbl_out     ppydv_tbl_type;
   l_counter               NUMBER := 0;
   rec_exists_yn           VARCHAR2(1);

   l_kplv_rec              kplv_rec_type;
   x_kplv_rec              kplv_rec_type;

   l_evg_cont_pmnt_dtls_rec  ppydv_rec_type;
   l_cont_pmnt_dtls_tbl_in   ppydv_tbl_type;
   l_cont_pmnt_dtls_tbl_out  ppydv_tbl_type;
   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      debug_message(l_proc_name);

      IF (p_asset_vendor_id IS NOT NULL) THEN
        x_asset_vendor_id := p_asset_vendor_id;
      ELSIF (p_asset_vendor_name IS NOT NULL) THEN
        get_vendor_id (
                       x_return_status     => x_return_status,
                       x_msg_count         => x_msg_count,
                       x_msg_data          => x_msg_data,
                       p_contract_number   => p_contract_number,
                       p_line_number       => p_line_number,
                       x_vendor_id         => x_asset_vendor_id,
                       p_vendor_name       => p_asset_vendor_name
                      );
        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           RAISE party_role_failed;
        END IF;
      END IF;

      IF (p_billable_vendor_id IS NOT NULL
          OR
          p_billable_vendor_name IS NOT NULL) THEN

         IF (p_vend_as_customer_id IS NOT NULL
             OR
             p_vend_as_customer_number IS NOT NULL) THEN

             OPEN customer_csr(p_vend_as_customer_number,
                               p_vend_as_customer_id);

             FETCH customer_csr INTO l_vend_cust_id;
             IF customer_csr%NOTFOUND THEN
                okl_api.set_message(
                             G_APP_NAME,
                             G_INVALID_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number,
                             'COL_NAME',
                             'VENDOR AS CUSTOMER ACCOUNT',
                             'COL_VALUE',
                              p_vend_as_customer_id||', '||p_vend_as_customer_number
                             );
                 x_return_status := OKL_API.G_RET_STS_ERROR;
                 RAISE party_role_failed;
             END IF;

             CLOSE customer_csr;
         ELSE
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_MISSING_VALUE,
                                 'CONTRACT_NUM',
                                 p_contract_number,
                                 'COL_NAME',
                                 'VENDOR AS CUSTOMER'
                                );
              x_return_status := OKL_API.G_RET_STS_ERROR;
              RAISE party_role_failed;
         END IF; -- Vend as customer

         IF (p_vend_as_cust_acc_id IS NOT NULL
             OR
             p_vend_as_cust_acc_number IS NOT NULL) THEN

             get_customer_account_id(
                                  x_return_status           => x_return_status,
                                  x_msg_count               => x_msg_count,
                                  x_msg_data                => x_msg_data,
                                  p_contract_number         => p_contract_number,
                                  p_customer_id             => l_vend_cust_id,
                                  p_customer_account_id     => p_vend_as_cust_acc_id,
                                  p_customer_account_number => p_vend_as_cust_acc_number,
                                  x_customer_account_id     => l_vend_cust_acc_id
                                 );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                raise party_role_failed;
             END IF;

             debug_message('------>l_vend_cust_acc_id : '||l_vend_cust_acc_id);
         ELSE
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_MISSING_VALUE,
                                 'CONTRACT_NUM',
                                 p_contract_number,
                                 'COL_NAME',
                                 'VENDOR AS CUSTOMER ACCOUNT'
                                );
              x_return_status := OKL_API.G_RET_STS_ERROR;
              RAISE party_role_failed;
         END IF; -- vend as cust acct

         IF (p_vend_bill_to_addr_id IS NOT NULL
             OR
             p_vend_bill_to_addr IS NOT NULL) THEN
            get_bill_to_address_id(
                             x_return_status           => x_return_status,
                             x_msg_count               => x_msg_count,
                             x_msg_data                => x_msg_data,
                             p_contract_number         => p_contract_number,
                             p_auth_org_id             => p_auth_org_id,
                             p_bill_to_address_id      => p_vend_bill_to_addr_id,
                             p_bill_to_address         => p_vend_bill_to_addr,
                             p_customer_account_id     => l_vend_cust_acc_id,
                             x_bill_to_address_id      => l_vend_bill_to_addr_id
                            );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               x_return_status := OKL_API.G_RET_STS_ERROR;
               raise party_role_failed;
            END IF;
         ELSE
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_MISSING_VALUE,
                                 'CONTRACT_NUM',
                                 p_contract_number,
                                 'COL_NAME',
                                 'VENDOR BILL TO ADDRESS'
                                );
              x_return_status := OKL_API.G_RET_STS_ERROR;
              RAISE party_role_failed;
         END IF; -- vend bill to addr

      END IF; -- billable vendor info

      debug_message('------>l_vend_bill_to_addr_id : '||l_vend_bill_to_addr_id);
      debug_message('------> Asset Vendor id: '||x_asset_vendor_id);

      IF (x_asset_vendor_id IS NOT NULL) THEN
         p_cplv_rec                   := NULL;

         IF (p_line_number IS NOT NULL) THEN
            p_cplv_rec.chr_id            := NULL;
            p_cplv_rec.dnz_chr_id        := p_chr_id;
	    IF ((p_pth_evg_vendor_site_code is NOT NULL) OR
	        (p_pth_evg_vendor_site_id is NOT NULL)) THEN
                p_cplv_rec.cle_id            := p_fin_cle_id;   -- PASS THROUGH VENDOR
	    ELSE
                p_cplv_rec.cle_id            := p_model_cle_id; -- ASSET VENDOR
	    END IF;
         ELSE
            p_cplv_rec.chr_id            := p_chr_id;
            p_cplv_rec.dnz_chr_id        := p_chr_id;
            p_cplv_rec.cle_id            := NULL;

            -- Contract addl field, Bug 4558486, for party role at header level and asset vendor only

            debug_message('Party role DFF...'||'Vendor name/id: '||p_asset_vendor_name||'/'||p_asset_vendor_id);

            l_kplv_rec.validate_dff_yn          := 'Y';  -- always validate DFF
            l_kplv_rec.attribute_category       := p_attribute_category;
            debug_message('attribute_category: '||l_kplv_rec.attribute_category);
            l_kplv_rec.attribute1               := p_attribute1;
            debug_message('attribute1: '||l_kplv_rec.attribute1);
            l_kplv_rec.attribute2               := p_attribute2;
            debug_message('attribute2: '||l_kplv_rec.attribute2);
            l_kplv_rec.attribute3               := p_attribute3;
            l_kplv_rec.attribute4               := p_attribute4;
            l_kplv_rec.attribute5               := p_attribute5;
            l_kplv_rec.attribute6               := p_attribute6;
            l_kplv_rec.attribute7               := p_attribute7;
            l_kplv_rec.attribute8               := p_attribute8;
            l_kplv_rec.attribute9               := p_attribute9;
            l_kplv_rec.attribute10              := p_attribute10;
            l_kplv_rec.attribute11              := p_attribute11;
            l_kplv_rec.attribute12              := p_attribute12;
            l_kplv_rec.attribute13              := p_attribute13;
            l_kplv_rec.attribute14              := p_attribute14;
            l_kplv_rec.attribute15              := p_attribute15;
            -- Contract addl field, Bug 4558486

         END IF;

         p_cplv_rec.object1_id1       := TO_CHAR(x_asset_vendor_id);
         p_cplv_rec.object1_id2       := '#';
         p_cplv_rec.jtot_object1_code := 'OKX_VENDOR';
         p_cplv_rec.rle_code          := 'OKL_VENDOR';

         p_cplv_rec.bill_to_site_use_id := l_vend_bill_to_addr_id;
         p_cplv_rec.cust_acct_id        := l_vend_cust_acc_id;

         --OKL_OKC_MIGRATION_PVT.create_k_party_role( -- Bug 4558486
         OKL_K_PARTY_ROLES_PVT.create_k_party_role(
                                                p_api_version   => 1.0,
                                                p_init_msg_list => OKL_API.G_FALSE,
                                                x_return_status => x_return_status,
                                                x_msg_count     => x_msg_count,
                                                x_msg_data      => x_msg_data,
                                                p_cplv_rec      => p_cplv_rec,
                                                p_kplv_rec      => l_kplv_rec,
                                                x_cplv_rec      => x_cplv_rec,
                                                x_kplv_rec      => x_kplv_rec
                                               );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE party_role_failed;
         END IF;
      END IF; -- asset vendor

      debug_message('------>Asset vendor processed');

      -- Evergreen Passthru at header
      IF (g_evg_cont_pmnt_hdr.id IS NOT NULL) THEN
        NULL;
      END IF;

      -- Evergreen Passthru at header

      IF (p_line_type = 'SERVICE') THEN
      IF (p_service_vendor_id IS NOT NULL) THEN
          x_service_vendor_id := p_service_vendor_id;
      ELSIF (p_service_vendor_name IS NOT NULL) THEN
          get_vendor_id (
                       x_return_status     => x_return_status,
                       x_msg_count         => x_msg_count,
                       x_msg_data          => x_msg_data,
                       p_contract_number   => p_contract_number,
                       p_line_number       => p_line_number,
                       x_vendor_id         => x_service_vendor_id,
                       p_vendor_name       => p_service_vendor_name
                      );
           IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              RAISE party_role_failed;
           END IF;
      END IF;

      IF (x_service_vendor_id IS NOT NULL) THEN
           p_cplv_rec                   := NULL;
           l_kplv_rec                   := NULL;

           IF (p_line_number IS NOT NULL) THEN
              p_cplv_rec.chr_id            := NULL;
              p_cplv_rec.dnz_chr_id        := p_chr_id;
              p_cplv_rec.cle_id            := p_service_line_id;
           ELSE
              p_cplv_rec.chr_id            := p_chr_id;
              p_cplv_rec.dnz_chr_id        := p_chr_id;
              p_cplv_rec.cle_id            := NULL;
           END IF;
           p_cplv_rec.object1_id1       := TO_CHAR(x_service_vendor_id);
           p_cplv_rec.object1_id2       := '#';
           p_cplv_rec.jtot_object1_code := 'OKX_VENDOR';
           p_cplv_rec.rle_code          := 'OKL_VENDOR';

           p_cplv_rec.bill_to_site_use_id := l_vend_bill_to_addr_id;
           p_cplv_rec.cust_acct_id        := l_vend_cust_acc_id;

           OKL_K_PARTY_ROLES_PVT.create_k_party_role(
                                                p_api_version   => 1.0,
                                                p_init_msg_list => OKL_API.G_FALSE,
                                                x_return_status => x_return_status,
                                                x_msg_count     => x_msg_count,
                                                x_msg_data      => x_msg_data,
                                                p_cplv_rec      => p_cplv_rec,
                                                p_kplv_rec      => l_kplv_rec,
                                                x_cplv_rec      => x_cplv_rec,
                                                x_kplv_rec      => x_kplv_rec
                                               );

           IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE party_role_failed;
           END IF;

           debug_message('------>Party Roles Created');

/* Passthru is moved to OKL table,do not need rule group LAPSTH

           okl_contract_top_line_pub.validate_passthru_rule(
                                  p_api_version         => 1.0,
                                  p_init_msg_list       => OKL_API.G_FALSE,
                                  x_return_status       => x_return_status,
                                  x_msg_count           => x_msg_count,
                                  x_msg_data            => x_msg_data,
                                  p_line_id             => p_service_line_id,
                                  p_vendor_id           => x_service_vendor_id,
                                  p_payment_term        => p_payment_term,
                                  p_payment_term_id     => p_payment_term_id,
                                  p_pay_to_site         => p_vendor_paysite_name,
                                  p_pay_to_site_id      => p_vendor_paysite_id,
                                  p_payment_method_code => p_vendor_payment_method,
                                  x_payment_term_id1    => x_payment_term_id1,
                                  x_pay_site_id1        => x_pay_site_id1,
                                  x_payment_method_id1  => x_payment_method_id1
                                 );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE party_role_failed;
            END IF;
         -- Rule Group LAPSTH
         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAPSTH';
         l_rgpv_rec.chr_id     := NULL;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := p_service_line_id;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec := NULL;

         --debug_message('Term: '||x_payment_term_id1);

         IF (x_payment_term_id1 IS NOT NULL) THEN

            l_rulv_rec.jtot_object1_code         := 'OKX_PPAYTERM';
            l_rulv_rec.object1_id1               := x_payment_term_id1;
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTR';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );
         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Rule: LAPSTH/LAPTR processed');

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;
         --debug_message('Site: '||x_pay_site_id1);
         IF (x_pay_site_id1 IS NOT NULL) THEN

            l_rulv_rec.jtot_object1_code         := 'OKX_PAYTO';
            l_rulv_rec.object1_id1               := x_pay_site_id1;
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTO';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );
         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Rule: LAPSTH/LAPTO processed');
         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;
         --debug_message('Pay method: '||x_payment_method_id1);
         IF (x_payment_method_id1 IS NOT NULL) THEN


            --l_rulv_rec.jtot_object1_code         := 'OKX_PPAYTERM';
            --l_rulv_rec.object1_id1               := x_payment_method_id1;
            --l_rulv_rec.object1_id2               := '#';

            l_rulv_rec.rule_information1         := x_payment_method_id1;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAVPMT';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );
         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Rule: LAPSTH/LAVPMT processed');
         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;

         IF (p_passthrough_percent IS NOT NULL) THEN
            l_rulv_rec.rule_information1         := p_passthrough_percent;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTPR';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.5';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Rule: LAPSTH/LAPTRP processed');

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec            := NULL;
         IF (p_passthrough_basis_code IS NOT NULL) THEN
            l_rulv_rec.rule_information1         := p_passthrough_basis_code;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTBC';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.6';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Rule: LAPSTH/LAPTBC processed');
         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;
*/
      END IF; -- service vendor

      END IF;

      --debug_message('Fees vendor: '||p_fees_vendor_name);
      --debug_message('Line Type: '|| p_line_type);

      IF (p_line_type = 'FEE') THEN
         --debug_message('Inside FEE line type');
      IF (p_fees_vendor_id IS NOT NULL) THEN
           x_fees_vendor_id := p_fees_vendor_id;
      ELSIF (p_fees_vendor_name IS NOT NULL) THEN
           get_vendor_id (
                       x_return_status     => x_return_status,
                       x_msg_count         => x_msg_count,
                       x_msg_data          => x_msg_data,
                       p_contract_number   => p_contract_number,
                       p_line_number       => p_line_number,
                       x_vendor_id         => x_fees_vendor_id,
                       p_vendor_name       => p_fees_vendor_name
                      );
           IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              RAISE party_role_failed;
           END IF;
      END IF;

      debug_message('------>FEE Vendor ID: '||x_fees_vendor_id);
      IF (x_fees_vendor_id IS NOT NULL) THEN

           p_cplv_rec                   := NULL;
           l_kplv_rec                   := NULL;

           IF (p_line_number IS NOT NULL) THEN
              p_cplv_rec.chr_id            := NULL;
              p_cplv_rec.dnz_chr_id        := p_chr_id;
              p_cplv_rec.cle_id            := p_fee_line_id;
           ELSE
              p_cplv_rec.chr_id            := p_chr_id;
              p_cplv_rec.dnz_chr_id        := p_chr_id;
              p_cplv_rec.cle_id            := NULL;
           END IF;
           p_cplv_rec.object1_id1       := TO_CHAR(x_fees_vendor_id);
           p_cplv_rec.object1_id2       := '#';
           p_cplv_rec.jtot_object1_code := 'OKX_VENDOR';
           p_cplv_rec.rle_code          := 'OKL_VENDOR';

           p_cplv_rec.bill_to_site_use_id := l_vend_bill_to_addr_id;
           p_cplv_rec.cust_acct_id        := l_vend_cust_acc_id;

           OKL_K_PARTY_ROLES_PVT.create_k_party_role(
                                                p_api_version   => 1.0,
                                                p_init_msg_list => OKL_API.G_FALSE,
                                                x_return_status => x_return_status,
                                                x_msg_count     => x_msg_count,
                                                x_msg_data      => x_msg_data,
                                                p_cplv_rec      => p_cplv_rec,
                                                p_kplv_rec      => l_kplv_rec,
                                                x_cplv_rec      => x_cplv_rec,
                                                x_kplv_rec      => x_kplv_rec
                                               );

           IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE party_role_failed;
           END IF;

           debug_message('------>Fee Vendor Processed');

/* Passthru is moved to OKL table,do not need rule group LAPSTH

           okl_contract_top_line_pub.validate_passthru_rule(
                                  p_api_version         => 1.0,
                                  p_init_msg_list       => OKL_API.G_FALSE,
                                  x_return_status       => x_return_status,
                                  x_msg_count           => x_msg_count,
                                  x_msg_data            => x_msg_data,
                                  p_line_id             => p_fee_line_id,
                                  p_vendor_id           => x_fees_vendor_id,
                                  p_payment_term        => p_payment_term,
                                  p_payment_term_id     => p_payment_term_id,
                                  p_pay_to_site         => p_vendor_paysite_name,
                                  p_pay_to_site_id      => p_vendor_paysite_id,
                                  p_payment_method_code => p_vendor_payment_method,
                                  x_payment_term_id1    => x_payment_term_id1,
                                  x_pay_site_id1        => x_pay_site_id1,
                                  x_payment_method_id1  => x_payment_method_id1
                                 );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE party_role_failed;
            END IF;

         -- Rule Group LAPSTH
         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAPSTH';
         l_rgpv_rec.chr_id     := NULL;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := p_fee_line_id;
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec := NULL;

         --debug_message('Term: '||x_payment_term_id1);

         IF (x_payment_term_id1 IS NOT NULL) THEN

            l_rulv_rec.jtot_object1_code         := 'OKX_PPAYTERM';
            l_rulv_rec.object1_id1               := x_payment_term_id1;
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTR';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );
         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Fee Rule: LAPSTH/LAPTR processed');
         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;
         l_rulv_rec := NULL;
         --debug_message('Site: '||x_pay_site_id1);
         IF (x_pay_site_id1 IS NOT NULL) THEN

            l_rulv_rec.jtot_object1_code         := 'OKX_PAYTO';
            l_rulv_rec.object1_id1               := x_pay_site_id1;
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTO';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );
         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Fee Rule: LAPSTH/LAPTO processed');
         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;
         --debug_message('Pay method: '||x_payment_method_id1);
         IF (x_payment_method_id1 IS NOT NULL) THEN


            --l_rulv_rec.jtot_object1_code         := 'OKX_PPAYTERM';
            --l_rulv_rec.object1_id1               := x_payment_method_id1;
            --l_rulv_rec.object1_id2               := '#';

            l_rulv_rec.rule_information1         := x_payment_method_id1;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAVPMT';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );
         l_progress := '1.2';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Fee Rule: LAPSTH/LAVPMT processed');
         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec := NULL;

         IF (p_passthrough_percent IS NOT NULL) THEN
            l_rulv_rec.rule_information1         := p_passthrough_percent;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTPR';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.5';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Fee Rule: LAPSTH/LAPTPR processed');
         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         l_rulv_rec            := NULL;
         IF (p_passthrough_basis_code IS NOT NULL) THEN
            l_rulv_rec.rule_information1         := p_passthrough_basis_code;
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAPTBC';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         l_progress := '1.6';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Fee Rule: LAPSTH/LAPTBC processed');
         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;
*/
      END IF; -- Fees vendor
      END IF;

      x_guarantor_id := NULL;
      IF (p_guarantor_id IS NOT NULl
          OR
          p_guarantor_number IS NOT NULL) THEN
         get_party_id(
                      x_return_status     => x_return_status,
                      x_msg_count         => x_msg_count,
                      x_msg_data          => x_msg_data,
                      p_contract_number   => p_contract_number,
                      p_line_number       => p_line_number,
                      p_party_id          => p_guarantor_id,
                      p_party_number      => p_guarantor_number,
                      x_party_id          => x_guarantor_id
                     );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE party_role_failed;
         END IF;
      END IF;

      debug_message('------>Guarantor id: '||x_guarantor_id);

      IF (x_guarantor_id IS NOT NULL) THEN

         -- Contract addl field, Bug 4558486, for party role at header level and asset vendor only

         debug_message('Guarantor DFF...'||x_guarantor_id);

         l_kplv_rec.validate_dff_yn          := 'Y';  -- always validate DFF
         l_kplv_rec.attribute_category       := p_attribute_category;
         debug_message('attribute_category: '||l_kplv_rec.attribute_category);
         l_kplv_rec.attribute1               := p_attribute1;
         debug_message('attribute1: '||l_kplv_rec.attribute1);
         l_kplv_rec.attribute2               := p_attribute2;
         debug_message('attribute2: '||l_kplv_rec.attribute2);
         l_kplv_rec.attribute3               := p_attribute3;
         l_kplv_rec.attribute4               := p_attribute4;
         l_kplv_rec.attribute5               := p_attribute5;
         l_kplv_rec.attribute6               := p_attribute6;
         l_kplv_rec.attribute7               := p_attribute7;
         l_kplv_rec.attribute8               := p_attribute8;
         l_kplv_rec.attribute9               := p_attribute9;
         l_kplv_rec.attribute10              := p_attribute10;
         l_kplv_rec.attribute11              := p_attribute11;
         l_kplv_rec.attribute12              := p_attribute12;
         l_kplv_rec.attribute13              := p_attribute13;
         l_kplv_rec.attribute14              := p_attribute14;
         l_kplv_rec.attribute15              := p_attribute15;
         -- Contract addl field, Bug 4558486

         p_cplv_rec                   := NULL;
         p_cplv_rec.chr_id            := p_chr_id;
         p_cplv_rec.dnz_chr_id        := p_chr_id;
         p_cplv_rec.cle_id            := NULL; -- always at header level
         p_cplv_rec.object1_id1       := TO_CHAR(x_guarantor_id);
         p_cplv_rec.object1_id2       := '#';
         p_cplv_rec.jtot_object1_code := 'OKX_PARTY';
         p_cplv_rec.rle_code          := 'GUARANTOR';

         OKL_K_PARTY_ROLES_PVT.create_k_party_role(
                                                p_api_version   => 1.0,
                                                p_init_msg_list => OKL_API.G_FALSE,
                                                x_return_status => x_return_status,
                                                x_msg_count     => x_msg_count,
                                                x_msg_data      => x_msg_data,
                                                p_cplv_rec      => p_cplv_rec,
                                                p_kplv_rec      => l_kplv_rec,
                                                x_cplv_rec      => x_cplv_rec,
                                                x_kplv_rec      => x_kplv_rec
                                               );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE party_role_failed;
         END IF;

         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAGRDT';
         l_rgpv_rec.chr_id     := p_chr_id;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := NULL; -- always at header level
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec            := NULL;
         IF (p_guarantor_type IS NOT NULL) THEN

            l_progress := 'P1.2';

            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information1         := p_guarantor_type;
            l_rulv_rec.rule_information_category := 'LAGRNP';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_guarantor_site_number IS NOT NULL
             OR
             p_guarantor_site_id IS NOT NULL
            ) THEN
            get_guarantor_address(
                                  x_return_status                => x_return_status,
                                  x_msg_count                    => x_msg_count,
                                  x_msg_data                     => x_msg_data,
                                  p_contract_number              => p_contract_number,
                                  p_line_number                  => p_line_number,
                                  p_guarantor_site_number        => p_guarantor_site_number,
                                  p_guarantor_site_id            => p_guarantor_site_id,
                                  x_guarantor_site_id            => x_guarantor_site_id
                                 );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               RAISE party_role_failed;
            END IF;

            l_rulv_rec.jtot_object1_code         := 'OKL_PARTYSITE'; -- Bug 5024651 'OKX_PARTSITE';
            l_rulv_rec.object1_id1               := TO_CHAR(x_guarantor_site_id);
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAGRNP';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

         END IF;

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Fee Rule: LAGRDT/LAGRNP processed');
         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

         IF (p_guarantor_type IS NOT NULL) THEN

            l_progress := 'P1.4';
            get_rrd_id(
                        x_return_status => x_return_status,
                        p_rgd_code      => 'LAGRDT',
                        p_rle_code      => 'GUARANTOR',
                        x_rrd_id        => x_rrd_id
                       );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 okl_api.set_message(
                                     G_APP_NAME,
                                     G_GUARANTOR_SETUP_ERROR,
                                     'CONTRACT_NUM',
                                     p_contract_number
                                    );
                 x_return_status := OKL_API.G_RET_STS_ERROR;
                 RAISE party_role_failed;
            END IF;

            l_rmpv_rec.rgp_id     := x_rgpv_rec.id;
            l_rmpv_rec.cpl_id     := x_cplv_rec.id;
            l_rmpv_rec.rrd_id     := x_rrd_id;
            l_rmpv_rec.dnz_chr_id := p_chr_id;

            okl_rule_pub.create_rg_mode_pty_role(
                                                   p_api_version   => 1.0,
                                                   p_init_msg_list => OKL_API.G_FALSE,
                                                   x_return_status => x_return_status,
                                                   x_msg_count     => x_msg_count,
                                                   x_msg_data      => x_msg_data,
                                                   p_rmpv_rec      => l_rmpv_rec,
                                                   x_rmpv_rec      => x_rmpv_rec
                                                  );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                raise party_role_failed;
            END IF;

            debug_message('------>Guaraontor type processed');

         END IF; -- guarantor_type

         l_rulv_rec := NULL;
         IF (p_guarantee_type IS NOT NULL) THEN

             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information1         := p_guarantee_type;
             l_rulv_rec.rule_information_category := 'LAGRNT';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

         END IF; -- guarantee_type

         IF (p_guaranteed_amount IS NOT NULL) THEN

             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information2         := TO_CHAR(p_guaranteed_amount);
             l_rulv_rec.rule_information_category := 'LAGRNT';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';
         END IF; -- guaranteed_amount

         IF (p_guarantee_date IS NOT NULL) THEN

             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information3         := get_canonicaL_date(p_guarantee_date);
             l_rulv_rec.rule_information_category := 'LAGRNT';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

         END IF; -- guarantee_date

         IF (p_guarantee_comment IS NOT NULL) THEN

             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information4         := p_guarantee_comment;
             l_rulv_rec.rule_information_category := 'LAGRNT';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

         END IF; -- guarantee_comment

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise party_role_failed;
         END IF;

         debug_message('------>Rule: LAGRDT/LAGRNT processed');

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;

      END IF; -- guarantor_id

      -- Create Vendor Billing info, if any
      IF (p_billable_vendor_id IS NOT NULL) THEN
          x_billable_vendor_id := p_billable_vendor_id;
      ELSIF
          (p_billable_vendor_name IS NOT NULL) THEN
        get_vendor_id (
                       x_return_status     => x_return_status,
                       x_msg_count         => x_msg_count,
                       x_msg_data          => x_msg_data,
                       p_contract_number   => p_contract_number,
                       p_line_number       => p_line_number,
                       x_vendor_id         => x_billable_vendor_id,
                       p_vendor_name       => p_billable_vendor_name
                      );
        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           RAISE party_role_failed;
        END IF;
      END IF;

      debug_message('------>Billable Vendor id: '||x_billable_vendor_id);

      IF (x_billable_vendor_id IS NOT NULL) THEN

         -- Create billing detail
         IF (x_billable_vendor_id <> x_asset_vendor_id) THEN
             okl_api.set_message(
                             G_APP_NAME,
                             G_BILL_VENDOR_INVALID,
                             'CONTRACT_NUM',
                             p_contract_number,
                             'VENDOR',
                             p_billable_vendor_id||', '||p_billable_vendor_name
                             );
              x_return_status := OKL_API.G_RET_STS_ERROR;
              RAISE party_role_failed;
         END IF;

         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LAVENB';
         l_rgpv_rec.chr_id     := p_chr_id;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := NULL; -- always at header level
         l_rgpv_rec.rgp_type   := 'KRG';

         l_rulv_rec            := NULL;

/* Check above , Rule migration impact
         IF (p_vend_as_customer_id IS NOT NULL
             OR
             p_vend_as_customer_number IS NOT NULL) THEN

             OPEN customer_csr(p_vend_as_customer_number,
                               p_vend_as_customer_id);

             FETCH customer_csr INTO l_vend_cust_id;
             IF customer_csr%NOTFOUND THEN
                okl_api.set_message(
                             G_APP_NAME,
                             G_INVALID_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number,
                             'COL_NAME',
                             'VENDOR AS CUSTOMER ACCOUNT',
                             'COL_VALUE',
                              p_vend_as_customer_id||', '||p_vend_as_customer_number
                             );
                 x_return_status := OKL_API.G_RET_STS_ERROR;
                 RAISE party_role_failed;
             END IF;

             CLOSE customer_csr;
*/
          IF (l_vend_cust_id IS NOT NULL) THEN

             l_rulv_rec.jtot_object1_code         := 'OKX_PARTY';
             l_rulv_rec.object1_id1               := TO_CHAR(l_vend_cust_id);
             l_rulv_rec.object1_id2               := '#';
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'LAVENC';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

             create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 raise party_role_failed;
             END IF;

             IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
                l_rgp_id := x_rgpv_rec.id;
             END IF;
             l_rulv_rec := NULL;

         ELSE
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_MISSING_VALUE,
                                 'CONTRACT_NUM',
                                 p_contract_number,
                                 'COL_NAME',
                                 'VENDOR AS CUSTOMER'
                                );
              x_return_status := OKL_API.G_RET_STS_ERROR;
              RAISE party_role_failed;
         END IF;

/* Rule Migration
         IF (p_vend_as_cust_acc_id IS NOT NULL
             OR
             p_vend_as_cust_acc_number IS NOT NULL) THEN

             get_customer_account_id(
                                  x_return_status           => x_return_status,
                                  x_msg_count               => x_msg_count,
                                  x_msg_data                => x_msg_data,
                                  p_contract_number         => p_contract_number,
                                  p_customer_id             => l_vend_cust_id,
                                  p_customer_account_id     => p_vend_as_cust_acc_id,
                                  p_customer_account_number => p_vend_as_cust_acc_number,
                                  x_customer_account_id     => l_vend_cust_acc_id
                                 );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                raise party_role_failed;
             END IF;

             debug_message('------>l_vend_cust_acc_id : '||l_vend_cust_acc_id);

             l_rulv_rec.jtot_object1_code         := 'OKX_CUSTACCT';
             l_rulv_rec.object1_id1               := TO_CHAR(l_vend_cust_acc_id);
             l_rulv_rec.object1_id2               := '#';
             l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
             l_rulv_rec.dnz_chr_id                := p_chr_id;
             l_rulv_rec.rule_information_category := 'CAN';
             l_rulv_rec.std_template_yn           := 'N';
             l_rulv_rec.warn_yn                   := 'N';

             create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 raise party_role_failed;
             END IF;

             IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
                l_rgp_id := x_rgpv_rec.id;
             END IF;
             l_rulv_rec := NULL;
         ELSE
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_MISSING_VALUE,
                                 'CONTRACT_NUM',
                                 p_contract_number,
                                 'COL_NAME',
                                 'VENDOR AS CUSTOMER ACCOUNT'
                                );
              x_return_status := OKL_API.G_RET_STS_ERROR;
              RAISE party_role_failed;
         END IF;
*/

/* Rule Migration
         IF (p_vend_bill_to_addr_id IS NOT NULL
             OR
             p_vend_bill_to_addr IS NOT NULL) THEN
            get_bill_to_address_id(
                             x_return_status           => x_return_status,
                             x_msg_count               => x_msg_count,
                             x_msg_data                => x_msg_data,
                             p_contract_number         => p_contract_number,
                             p_auth_org_id             => p_auth_org_id,
                             p_bill_to_address_id      => p_vend_bill_to_addr_id,
                             p_bill_to_address         => p_vend_bill_to_addr,
                             p_customer_account_id     => l_vend_cust_acc_id,
                             x_bill_to_address_id      => l_vend_bill_to_addr_id
                            );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               x_return_status := OKL_API.G_RET_STS_ERROR;
               raise party_role_failed;
            END IF;

            debug_message('------>l_vend_bill_to_addr_id : '||l_vend_bill_to_addr_id);
            l_rulv_rec.jtot_object1_code         := 'OKX_BILLTO';
            l_rulv_rec.object1_id1               := TO_CHAR(l_vend_bill_to_addr_id);
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'BTO';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

            create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                raise party_role_failed;
            END IF;

            IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
               l_rgp_id := x_rgpv_rec.id;
            END IF;
            l_rulv_rec := NULL;
         ELSE
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_MISSING_VALUE,
                                 'CONTRACT_NUM',
                                 p_contract_number,
                                 'COL_NAME',
                                 'VENDOR BILL TO ADDRESS'
                                );
              x_return_status := OKL_API.G_RET_STS_ERROR;
              RAISE party_role_failed;
         END IF;
*/

         IF (p_vend_payment_method_id IS NOT NULL
             OR
             p_vend_payment_method IS NOT NULL) THEN
             get_payment_method_id(
                               x_return_status           => x_return_status,
                               x_msg_count               => x_msg_count,
                               x_msg_data                => x_msg_data,
                               p_contract_number         => p_contract_number,
                               p_customer_account_id     => l_vend_cust_acc_id,
                               p_bill_to_address_id      => l_vend_bilL_to_addr_id,
                               p_payment_method_id       => p_vend_payment_method_id,
                               p_payment_method          => p_vend_payment_method,
                               x_payment_method_id       => l_vend_payment_method_id
                              );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                  x_return_status := OKL_API.G_RET_STS_ERROR;
                  raise party_role_failed;
             END IF;

             IF (l_vend_payment_method_id IS NOT NULL) THEN
                l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
                l_rulv_rec.dnz_chr_id                := p_chr_id;
                l_rulv_rec.jtot_object1_code         := 'OKX_RCPTMTH';
                l_rulv_rec.object1_id1               := TO_CHAR(l_vend_payment_method_id);
                l_rulv_rec.object1_id2               := '#';
                l_rulv_rec.rule_information_category := 'LAPMTH';
                l_rulv_rec.std_template_yn           := 'N';
                l_rulv_rec.warn_yn                   := 'N';
             END IF;

             --debug_message('Payment Method: '||l_vend_payment_method_id);

             create_rule_group_and_rule(
                                        x_return_status => x_return_status,
                                        x_msg_count     => x_msg_count,
                                        x_msg_data      => x_msg_data,
                                        p_rgp_id        => l_rgp_id,
                                        p_rgpv_rec      => l_rgpv_rec,
                                        p_rulv_rec      => l_rulv_rec,
                                        x_rgpv_rec      => x_rgpv_rec,
                                        x_rulv_rec      => x_rulv_rec
                                       );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                  x_return_status := OKL_API.G_RET_STS_ERROR;
                  raise party_role_failed;
             END IF;

             IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
                l_rgp_id := x_rgpv_rec.id;
             END IF;

             l_rulv_rec := NULL;

         END IF;

         IF (p_vend_bank_acc_id IS NOT NULL
             OR
             p_vend_bank_acc_number IS NOT NULL) THEN
            get_bank_account_id(
                                x_return_status           => x_return_status,
                                x_msg_count               => x_msg_count,
                                x_msg_data                => x_msg_data,
                                p_contract_number         => p_contract_number,
                                p_auth_org_id             => p_auth_org_id,
                                p_bank_account_id         => p_vend_bank_acc_id,
                                p_bank_account_number     => p_vend_bank_acc_number,
                                p_customer_account_id     => l_vend_cust_acc_id,
                                p_cust_site_id            => l_vend_bill_to_addr_id,
                                x_bank_account_id         => l_vend_bank_acc_id
                               );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                raise party_role_failed;
            END IF;

            IF (l_vend_bank_acc_id IS NOT NULL) THEN
                l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
                l_rulv_rec.dnz_chr_id                := p_chr_id;
                l_rulv_rec.jtot_object1_code         := 'OKX_CUSTBKAC';
                l_rulv_rec.object1_id1               := TO_CHAR(l_vend_bank_acc_id);
                l_rulv_rec.object1_id2               := '#';
                l_rulv_rec.rule_information_category := 'LABACC';
                l_rulv_rec.std_template_yn           := 'N';
                l_rulv_rec.warn_yn                   := 'N';
             END IF;

             debug_message('Bank Acc: '|| l_vend_bank_acc_id);

             create_rule_group_and_rule(
                                        x_return_status => x_return_status,
                                        x_msg_count     => x_msg_count,
                                        x_msg_data      => x_msg_data,
                                        p_rgp_id        => l_rgp_id,
                                        p_rgpv_rec      => l_rgpv_rec,
                                        p_rulv_rec      => l_rulv_rec,
                                        x_rgpv_rec      => x_rgpv_rec,
                                        x_rulv_rec      => x_rulv_rec
                                       );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                  x_return_status := OKL_API.G_RET_STS_ERROR;
                  raise party_role_failed;
             END IF;

             IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
                l_rgp_id := x_rgpv_rec.id;
             END IF;
             l_rulv_rec := NULL;

          END IF; -- vend_bank_account

          IF (p_vend_invoice_format_id IS NOT NULL
              OR
              p_vend_invoice_format_code IS NOT NULL) THEN
              get_invoice_format_id(
                            x_return_status           => x_return_status,
                            x_msg_count               => x_msg_count,
                            x_msg_data                => x_msg_data,
                            p_contract_number         => p_contract_number,
                            p_invoice_format_id       => p_vend_invoice_format_id,
                            p_invoice_format_code     => p_vend_invoice_format_code,
                            x_invoice_format_id       => l_vend_invoice_format_id,
                            x_invoice_format_name     => l_vend_invoice_format_name
                           );

              IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                  x_return_status := OKL_API.G_RET_STS_ERROR;
                  raise party_role_failed;
              END IF;

              debug_message('Invoice Format: '||l_vend_invoice_format_name);

              IF (l_vend_invoice_format_name IS NOT NULL) THEN
                 l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
                 l_rulv_rec.dnz_chr_id                := p_chr_id;

                 --sechawla 13-may-09 6826580 : Use ID instead of name
                 --l_rulv_rec.rule_information1         := l_vend_invoice_format_name;
                 l_rulv_rec.rule_information1         := l_vend_invoice_format_id;

                 l_rulv_rec.rule_information_category := 'LAINVD';
                 l_rulv_rec.std_template_yn           := 'N';
                 l_rulv_rec.warn_yn                   := 'N';
              END IF;
          END IF;

          IF (p_vend_review_invoice_flag IS NOT NULL) THEN
              l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
              l_rulv_rec.dnz_chr_id                := p_chr_id;
              l_rulv_rec.rule_information4         := p_vend_review_invoice_flag;
              l_rulv_rec.rule_information_category := 'LAINVD';
              l_rulv_rec.std_template_yn           := 'N';
              l_rulv_rec.warn_yn                   := 'N';
          END IF;

          create_rule_group_and_rule(
                                     x_return_status => x_return_status,
                                     x_msg_count     => x_msg_count,
                                     x_msg_data      => x_msg_data,
                                     p_rgp_id        => l_rgp_id,
                                     p_rgpv_rec      => l_rgpv_rec,
                                     p_rulv_rec      => l_rulv_rec,
                                     x_rgpv_rec      => x_rgpv_rec,
                                     x_rulv_rec      => x_rulv_rec
                                    );

          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               x_return_status := OKL_API.G_RET_STS_ERROR;
               raise party_role_failed;
          END IF;

          IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
             l_rgp_id := x_rgpv_rec.id;
          END IF;
          l_rulv_rec := NULL;

         IF (p_vend_reason_for_inv_review IS NOT NULL) THEN
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information1         := p_vend_reason_for_inv_review;
            l_rulv_rec.rule_information_category := 'LAINPR';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (p_vend_inv_review_until_date IS NOT NULL) THEN
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information2         := get_canonical_date(p_vend_inv_review_until_date);
            l_rulv_rec.rule_information_category := 'LAINPR';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              x_return_status := OKL_API.G_RET_STS_ERROR;
              raise party_role_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;
         l_rulv_rec := NULL;

         IF (l_rgp_id IS NOT NULL) THEN
            get_rrd_id(
                        x_return_status => x_return_status,
                        p_rgd_code      => 'LAVENB',
                        p_rle_code      => 'OKL_VENDOR',
                        x_rrd_id        => x_rrd_id
                       );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 okl_api.set_message(
                                     G_APP_NAME,
                                     G_GUARANTOR_SETUP_ERROR,
                                     'CONTRACT_NUM',
                                     p_contract_number
                                    );
                 x_return_status := OKL_API.G_RET_STS_ERROR;
                 RAISE party_role_failed;
            END IF;

            p_cplv_rec                   := NULL;
            p_cplv_rec.chr_id            := p_chr_id;
            p_cplv_rec.dnz_chr_id        := p_chr_id;
            p_cplv_rec.cle_id            := NULL; -- always at header level
            p_cplv_rec.object1_id1       := TO_CHAR(x_billable_vendor_id);
            p_cplv_rec.object1_id2       := '#';
            p_cplv_rec.jtot_object1_code := 'OKX_PARTY';
            p_cplv_rec.rle_code          := 'OKL_VENDOR';

            p_cplv_rec.bill_to_site_use_id := l_vend_bill_to_addr_id;
            p_cplv_rec.cust_acct_id        := l_vend_cust_acc_id;

            debug_message('------>Vendor Bill to :'||l_vend_bill_to_addr_id);
            debug_message('------>Vendor Cust Acct :'||l_vend_cust_acc_id);

            l_rmpv_rec.rgp_id     := l_rgp_id;
            l_rmpv_rec.cpl_id     := x_cplv_rec.id;
            l_rmpv_rec.rrd_id     := x_rrd_id;
            l_rmpv_rec.dnz_chr_id := p_chr_id;

            okl_rule_pub.create_rg_mode_pty_role(
                                                   p_api_version   => 1.0,
                                                   p_init_msg_list => OKL_API.G_FALSE,
                                                   x_return_status => x_return_status,
                                                   x_msg_count     => x_msg_count,
                                                   x_msg_data      => x_msg_data,
                                                   p_rmpv_rec      => l_rmpv_rec,
                                                   x_rmpv_rec      => x_rmpv_rec
                                                  );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                raise party_role_failed;
            END IF;
         END IF;
      END IF; -- Billable Vendor process


      -- Assume that the existence of pay thru is driven by vendor pay site information
      IF (p_line_number is NOT NULL) THEN
         debug_message ('Processing passthrough for line number : '||p_line_number);
      IF (g_base_pmnt_hdr.id IS NOT NULL) THEN
           IF (p_line_type in  ('SERVICE', 'FEE')) THEN
	       IF ((p_pth_base_vendor_site_code IS NOT NULL) OR
                   (p_pth_base_vendor_site_id IS NOT NULL)) THEN

		      IF (p_line_type = 'SERVICE') THEN
                         l_base_pmnt_dtls_rec.vendor_id := x_service_vendor_id;
		      ELSIF (p_line_type = 'FEE') THEN
                         l_base_pmnt_dtls_rec.vendor_id := x_fees_vendor_id;
		      END IF;
                      l_base_pmnt_dtls_rec.cpl_id := x_cplv_rec.id;
	              l_base_pmnt_dtls_rec.pay_site_id := get_vendor_paysite( x_return_status       => x_return_status,
	                                                                 p_contract_number     => p_contract_number,
			                                                 p_line_number         => p_line_number,
			                                                 p_vendor_paysite_name => p_pth_base_vendor_site_code,
			                                                 p_vendor_paysite_id   => p_pth_base_vendor_site_id
                                                                       );
                      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                          raise party_role_failed;
                      END IF;

		      IF (p_pth_base_pmnt_term_code is NOT NULL OR
		          p_pth_base_pmnt_term_id IS NOT NULL ) THEN
                          l_base_pmnt_dtls_rec.payment_term_id := get_payment_term(
                                                                x_return_status   => x_return_status,
                                                                p_contract_number => p_contract_number,
                                                                p_line_number     => p_line_number,
                                                                p_payment_term    => p_pth_base_pmnt_term_code,
                                                                p_payment_term_id => p_pth_base_pmnt_term_id
                                                               );

                          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                              raise party_role_failed;
                          END IF;

                      ELSE
                          okl_api.set_message(
                                              G_APP_NAME,
                                              G_MISSING_VALUE,
                                              'CONTRACT_NUM',
                                              p_contract_number,
                                              'COL_NAME',
                                              'PASSTHROUGH PAYMENT TERM'
                                              );
                      END IF;
                      l_paygroup_code := NULL;
		      IF (p_pth_base_paygroup_code IS NULL) THEN
                          l_paygroup_code := get_vendor_paygroup(
                                                                x_return_status   => x_return_status,
                                                                p_contract_number => p_contract_number,
                                                                p_line_number     => p_line_number,
                                                                p_auth_org_id     => p_auth_org_id,
                                                                p_vendor_paysite_id => p_pth_base_vendor_site_id
                                                               );

                          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                              raise party_role_failed;
                          END IF;

			  IF (l_paygroup_code IS NOT NULL) THEN
                             l_base_pmnt_dtls_rec.pay_group_code := l_paygroup_code;
			  ELSE
			     okl_api.set_message(
                                                 G_APP_NAME,
                                                 G_MISSING_VALUE_FOR_LINE,
                                                 'CONTRACT_NUM',
                                                 p_contract_number||'/'||TO_CHAR(p_line_number),
                                                 'COL_NAME',
                                                 'PTH_BASE_PAYGROUP_CODE',
                                                 'LINE',
                                                 p_line_type
                                                );
			     raise party_role_failed;
                          END IF;


                      ELSE
                          l_base_pmnt_dtls_rec.pay_group_code := p_pth_base_paygroup_code;
                      END IF;

                      IF (p_pth_base_pmnt_basis is NULL) THEN
                         l_base_pmnt_dtls_rec.payment_basis := 'PROCESS_DATE';
                      ELSE
                         OPEN  pmnt_basis_csr(p_pth_base_pmnt_basis);
                         FETCH pmnt_basis_csr INTO rec_exists_yn;
                         IF (pmnt_basis_csr%NOTFOUND) THEN
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_INVALID_VALUE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_BASE_PMNT_BASIS',
                                                'COL_VALUE',
                                                p_pth_base_pmnt_basis
                                               );
                            CLOSE pmnt_basis_csr;
                            raise party_role_failed;
                         ELSE
                            l_base_pmnt_dtls_rec.payment_basis := p_pth_base_pmnt_basis;
			    CLOSE pmnt_basis_csr;
                         END IF;
                      END IF;

		      IF ((p_pth_base_pmnt_basis = 'SCHEDULED') AND
                           (p_pth_base_pmnt_start_date IS NULL)) THEN
        	          okl_api.set_message(
                                              G_APP_NAME,
                                              G_MISSING_VALUE_FOR_LINE,
                                              'CONTRACT_NUM',
                                              p_contract_number||'/'||TO_CHAR(p_line_number),
                                              'COL_NAME',
                                              'PTH_BASE_PMNT_START_DATE',
                                              'LINE',
                                              p_line_type
                                             );
			  raise party_role_failed;
                      ELSE
		         l_base_pmnt_dtls_rec.payment_start_date := p_pth_base_pmnt_start_date;
                      END IF;

		      IF ((p_pth_base_pmnt_basis = 'SCHEDULED') AND
                           (p_pth_base_pmnt_freq IS NULL)) THEN
        	          okl_api.set_message(
                                              G_APP_NAME,
                                              G_MISSING_VALUE_FOR_LINE,
                                              'CONTRACT_NUM',
                                              p_contract_number||'/'||TO_CHAR(p_line_number),
                                              'COL_NAME',
                                              'PTH_BASE_PMNT_FREQ',
                                              'LINE',
                                              p_line_type
                                             );
			  raise party_role_failed;
                      ELSE
		         l_base_pmnt_dtls_rec.payment_frequency := p_pth_base_pmnt_freq;
                      END IF;
                      l_base_pmnt_dtls_rec.payment_hdr_id := g_base_pmnt_hdr.id;
		      l_base_pmnt_dtls_rec.payment_method_code := p_pth_base_pmnt_method_code;

		      IF ((p_pth_base_pmnt_basis = 'PROCESS_DATE') AND
                           (p_pth_base_pmnt_remit_days IS NULL)) THEN
        	          okl_api.set_message(
                                              G_APP_NAME,
                                              G_MISSING_VALUE_FOR_LINE,
                                              'CONTRACT_NUM',
                                              p_contract_number||'/'||TO_CHAR(p_line_number),
                                              'COL_NAME',
                                              'PTH_BASE_PMNT_REMIT_DAYS',
                                              'LINE',
                                              p_line_type
                                             );
			  raise party_role_failed;
                      ELSE
		         l_base_pmnt_dtls_rec.remit_days := p_pth_base_pmnt_remit_days;
                      END IF;

                      IF (p_pth_base_disb_basis is NOT NULL) THEN
                         OPEN  disb_basis_csr(p_pth_base_disb_basis);
                         FETCH disb_basis_csr INTO rec_exists_yn;
                         IF (disb_basis_csr%NOTFOUND) THEN
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_INVALID_VALUE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_BASE_DISB_BASIS',
                                                'COL_VALUE',
                                                p_pth_base_disb_basis
                                               );
                            CLOSE disb_basis_csr;
                            raise party_role_failed;
                         ELSE
                            l_base_pmnt_dtls_rec.disbursement_basis := p_pth_base_disb_basis;
                            CLOSE disb_basis_csr;
                         END IF;
                      ELSE
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_BASE_DISB_BASIS',
                                                'LINE',
                                                p_line_type
                                               );
                      END IF;

                      IF ((p_pth_base_disb_basis = 'AMOUNT')) THEN
                         IF (p_pth_base_disb_fixed_amount IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_BASE_DISB_FIXED_AMOUNT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_base_pmnt_dtls_rec.disbursement_fixed_amount := p_pth_base_disb_fixed_amount;
                         END IF;
		      END IF;

		      IF ((p_pth_base_disb_basis = 'PERCENT')) THEN
                         IF (p_pth_base_disb_pct IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_BASE_DISB_PCT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_base_pmnt_dtls_rec.disbursement_percent := p_pth_base_disb_pct;
                         END IF;
		      END IF;

                      IF (p_pth_base_proc_fee_basis is NOT NULL) THEN
                         OPEN  proc_fee_basis_csr(p_pth_base_proc_fee_basis);
                         FETCH proc_fee_basis_csr INTO rec_exists_yn;
                         IF (proc_fee_basis_csr%NOTFOUND) THEN
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_INVALID_VALUE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_BASE_PROC_FEE_BASIS',
                                                'COL_VALUE',
                                                p_pth_base_proc_fee_basis
                                               );
                            CLOSE proc_fee_basis_csr;
                            raise party_role_failed;
                         ELSE
                            l_base_pmnt_dtls_rec.processing_fee_basis := p_pth_base_proc_fee_basis;
                            CLOSE proc_fee_basis_csr;
                         END IF;
                      END IF;

		      IF ((p_pth_base_proc_fee_basis = 'AMOUNT')) THEN
                         IF (p_pth_base_proc_fee_fixed_amt IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_BASE_PROC_FEE_FIXED_AMT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_base_pmnt_dtls_rec.processing_fee_fixed_amount := p_pth_base_proc_fee_fixed_amt;
                         END IF;
		      END IF;

		      IF ((p_pth_base_proc_fee_basis = 'PERCENT')) THEN
                         IF (p_pth_base_proc_pct IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_BASE_PROC_PCT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_base_pmnt_dtls_rec.processing_fee_percent := p_pth_base_proc_pct;
                         END IF;
		      END IF;
                      l_counter := l_counter + 1;
                      l_pmnt_dtls_tbl_in(l_counter) := l_base_pmnt_dtls_rec;

               END IF;
      END IF;
      END IF;


      IF (g_evg_pmnt_hdr.id IS NOT NULL) THEN
           IF (p_line_type in  ('ASSET', 'SERVICE', 'FEE')) THEN
	       IF ((p_pth_evg_vendor_site_code IS NOT NULL) OR
                   (p_pth_evg_vendor_site_id IS NOT NULL)) THEN
		      IF (p_line_type = 'ASSET') THEN
                         l_evg_pmnt_dtls_rec.vendor_id := x_asset_vendor_id;
		      ELSIF (p_line_type = 'SERVICE') THEN
                         l_evg_pmnt_dtls_rec.vendor_id := x_service_vendor_id;
		      ELSE
                         l_evg_pmnt_dtls_rec.vendor_id := x_fees_vendor_id;
		      END IF;
                      l_evg_pmnt_dtls_rec.cpl_id := x_cplv_rec.id;
	              l_evg_pmnt_dtls_rec.pay_site_id := get_vendor_paysite( x_return_status       => x_return_status,
	                                                                 p_contract_number     => p_contract_number,
			                                                 p_line_number         => p_line_number,
			                                                 p_vendor_paysite_name => p_pth_evg_vendor_site_code,
			                                                 p_vendor_paysite_id   => p_pth_evg_vendor_site_id
                                                                       );
                      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                          raise party_role_failed;
                      END IF;

		      IF (p_pth_evg_pmnt_term_code is NOT NULL OR
		          p_pth_evg_pmnt_term_id IS NOT NULL ) THEN
                          l_evg_pmnt_dtls_rec.payment_term_id := get_payment_term(
                                                                x_return_status   => x_return_status,
                                                                p_contract_number => p_contract_number,
                                                                p_line_number     => p_line_number,
                                                                p_payment_term    => p_pth_evg_pmnt_term_code,
                                                                p_payment_term_id => p_pth_evg_pmnt_term_id
                                                               );

                          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                              raise party_role_failed;
                          END IF;

                      ELSE
                          okl_api.set_message(
                                              G_APP_NAME,
                                              G_MISSING_VALUE,
                                              'CONTRACT_NUM',
                                              p_contract_number,
                                              'COL_NAME',
                                              'PTH_EVG_PMNT_TERM_CODE'
                                              );
                      END IF;
                      l_paygroup_code := NULL;
		      IF (p_pth_evg_paygroup_code IS NULL) THEN
                          l_paygroup_code := get_vendor_paygroup(
                                                                x_return_status   => x_return_status,
                                                                p_contract_number => p_contract_number,
                                                                p_line_number     => p_line_number,
                                                                p_auth_org_id     => p_auth_org_id,
                                                                p_vendor_paysite_id => p_pth_evg_vendor_site_id
                                                               );

                          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                              raise party_role_failed;
                          END IF;

			  IF (l_paygroup_code IS NOT NULL) THEN
                             l_evg_pmnt_dtls_rec.pay_group_code := l_paygroup_code;
			  ELSE
			     okl_api.set_message(
                                                 G_APP_NAME,
                                                 G_MISSING_VALUE_FOR_LINE,
                                                 'CONTRACT_NUM',
                                                 p_contract_number||'/'||TO_CHAR(p_line_number),
                                                 'COL_NAME',
                                                 'PTH_EVG_PAYGROUP_CODE',
                                                 'LINE',
                                                 p_line_type
                                                );
			     raise party_role_failed;
                          END IF;
                      ELSE
                          l_evg_pmnt_dtls_rec.pay_group_code := p_pth_evg_paygroup_code;
                      END IF;
                      IF (p_pth_evg_pmnt_basis is NULL) THEN
                         l_evg_pmnt_dtls_rec.payment_basis := 'PROCESS_DATE';
                      ELSE
                         OPEN  pmnt_basis_csr(p_pth_evg_pmnt_basis);
                         FETCH pmnt_basis_csr INTO rec_exists_yn;
                         IF (pmnt_basis_csr%NOTFOUND) THEN
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_INVALID_VALUE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_PMNT_BASIS',
                                                'COL_VALUE',
                                                p_pth_evg_pmnt_basis
                                               );
                            CLOSE pmnt_basis_csr;
                            raise party_role_failed;
                         ELSE
                            l_evg_pmnt_dtls_rec.payment_basis := p_pth_evg_pmnt_basis;
                            CLOSE pmnt_basis_csr;
                         END IF;
                      END IF;
                      l_evg_pmnt_dtls_rec.payment_hdr_id := g_evg_pmnt_hdr.id;
		      l_evg_pmnt_dtls_rec.payment_method_code := p_pth_evg_pmnt_method_code;

		      IF ((p_pth_evg_pmnt_basis = 'PROCESS_DATE') AND
                           (p_pth_evg_pmnt_remit_days IS NULL)) THEN
        	          okl_api.set_message(
                                              G_APP_NAME,
                                              G_MISSING_VALUE_FOR_LINE,
                                              'CONTRACT_NUM',
                                              p_contract_number||'/'||TO_CHAR(p_line_number),
                                              'COL_NAME',
                                              'PTH_EVG_PMNT_REMIT_DAYS',
                                              'LINE',
                                              p_line_type
                                             );
			  raise party_role_failed;
                      ELSE
		         l_evg_pmnt_dtls_rec.remit_days := p_pth_evg_pmnt_remit_days;
                      END IF;
                      IF (p_pth_evg_disb_basis is NOT NULL) THEN
                         OPEN  disb_basis_csr(p_pth_evg_disb_basis);
                         FETCH disb_basis_csr INTO rec_exists_yn;
                         IF (disb_basis_csr%NOTFOUND) THEN
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_INVALID_VALUE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_DISB_BASIS',
                                                'COL_VALUE',
                                                p_pth_evg_disb_basis
                                               );
                            CLOSE disb_basis_csr;
                            raise party_role_failed;
                         ELSE
                            l_evg_pmnt_dtls_rec.disbursement_basis := p_pth_evg_disb_basis;
                            CLOSE disb_basis_csr;
                         END IF;
                      ELSE
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_DISB_BASIS',
                                                'LINE',
                                                p_line_type
                                               );
                      END IF;
		      IF ((p_pth_evg_disb_basis = 'AMOUNT')) THEN
                         IF (p_pth_evg_disb_fixed_amount IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_DISB_FIXED_AMOUNT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_evg_pmnt_dtls_rec.disbursement_fixed_amount := p_pth_evg_disb_fixed_amount;
                         END IF;
		      END IF;
		      IF ((p_pth_evg_disb_basis = 'PERCENT')) THEN
                         IF (p_pth_evg_disb_pct IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_DISB_PCT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_evg_pmnt_dtls_rec.disbursement_percent := p_pth_evg_disb_pct;
                         END IF;
		      END IF;

                      IF (p_pth_evg_proc_fee_basis is NOT NULL) THEN
                         OPEN  proc_fee_basis_csr(p_pth_evg_proc_fee_basis);
                         FETCH proc_fee_basis_csr INTO rec_exists_yn;
                         IF (proc_fee_basis_csr%NOTFOUND) THEN
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_INVALID_VALUE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_PROC_FEE_BASIS',
                                                'COL_VALUE',
                                                p_pth_evg_proc_fee_basis
                                               );
                            CLOSE proc_fee_basis_csr;
                            raise party_role_failed;
                         ELSE
                            l_evg_pmnt_dtls_rec.processing_fee_basis := p_pth_evg_proc_fee_basis;
                            CLOSE proc_fee_basis_csr;
                         END IF;
                      END IF;
		      IF ((p_pth_evg_proc_fee_basis = 'AMOUNT')) THEN
                         IF (p_pth_evg_proc_fee_fixed_amt IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_PROC_FEE_FIXED_AMT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_evg_pmnt_dtls_rec.processing_fee_fixed_amount := p_pth_evg_proc_fee_fixed_amt;
                         END IF;
		      END IF;

		      IF ((p_pth_evg_proc_fee_basis = 'PERCENT')) THEN
                         IF (p_pth_evg_proc_pct IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_PROC_PCT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_evg_pmnt_dtls_rec.processing_fee_percent := p_pth_evg_proc_pct;
                         END IF;
		      END IF;
               l_counter := l_counter + 1;
               l_pmnt_dtls_tbl_in(l_counter) := l_evg_pmnt_dtls_rec;

               END IF;
      END IF;
      END IF;
      END IF;
      debug_message ('No. of records in payment dtls table : '||l_pmnt_dtls_tbl_in.count);

      IF (l_pmnt_dtls_tbl_in.COUNT > 0) THEN
         okl_party_payments_pvt.create_party_payment_dtls(
                                                         p_api_version    => 1.0,
                                                         x_return_status  => x_return_status,
                                                         x_msg_count      => x_msg_count,
                                                         x_msg_data       => x_msg_data,
                                                         p_ppydv_tbl       => l_pmnt_dtls_tbl_in,
                                                         x_ppydv_tbl       => l_pmnt_dtls_tbl_out
						        );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            RAISE party_role_failed;
         END IF;
      END IF;

      -- Create evergreen payment dtls if header exists
      debug_message('Create evergreen payment dtls if header exists');
      debug_message('Cont Evg pmnt hdr id: '||g_evg_cont_pmnt_hdr.id);
      l_evg_cont_pmnt_dtls_rec := NULL;
      IF (g_evg_cont_pmnt_hdr.id IS NOT NULL) THEN
           IF (p_line_number IS NULL) THEN -- header only
	       IF ((p_pth_evg_vendor_site_code IS NOT NULL) OR
                   (p_pth_evg_vendor_site_id IS NOT NULL)) THEN
                      l_evg_cont_pmnt_dtls_rec.vendor_id := x_asset_vendor_id;
                      l_evg_cont_pmnt_dtls_rec.cpl_id := x_cplv_rec.id;
	              l_evg_cont_pmnt_dtls_rec.pay_site_id := get_vendor_paysite( x_return_status       => x_return_status,
	                                                                 p_contract_number     => p_contract_number,
			                                                 p_line_number         => p_line_number,
			                                                 p_vendor_paysite_name => p_pth_evg_vendor_site_code,
			                                                 p_vendor_paysite_id   => p_pth_evg_vendor_site_id
                                                                       );
                      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                          raise party_role_failed;
                      END IF;

		      IF (p_pth_evg_pmnt_term_code is NOT NULL OR
		          p_pth_evg_pmnt_term_id IS NOT NULL ) THEN
                          l_evg_cont_pmnt_dtls_rec.payment_term_id := get_payment_term(
                                                                x_return_status   => x_return_status,
                                                                p_contract_number => p_contract_number,
                                                                p_line_number     => p_line_number,
                                                                p_payment_term    => p_pth_evg_pmnt_term_code,
                                                                p_payment_term_id => p_pth_evg_pmnt_term_id
                                                               );

                          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                              raise party_role_failed;
                          END IF;

                      ELSE
                          okl_api.set_message(
                                              G_APP_NAME,
                                              G_MISSING_VALUE,
                                              'CONTRACT_NUM',
                                              p_contract_number,
                                              'COL_NAME',
                                              'PTH_EVG_PMNT_TERM_CODE'
                                              );
                      END IF;
                      l_paygroup_code := NULL;
		      IF (p_pth_evg_paygroup_code IS NULL) THEN
                          l_paygroup_code := get_vendor_paygroup(
                                                                x_return_status   => x_return_status,
                                                                p_contract_number => p_contract_number,
                                                                p_line_number     => p_line_number,
                                                                p_auth_org_id     => p_auth_org_id,
                                                                p_vendor_paysite_id => p_pth_evg_vendor_site_id
                                                               );

                          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                              raise party_role_failed;
                          END IF;

			  IF (l_paygroup_code IS NOT NULL) THEN
                             l_evg_cont_pmnt_dtls_rec.pay_group_code := l_paygroup_code;
			  ELSE
			     okl_api.set_message(
                                                 G_APP_NAME,
                                                 G_MISSING_VALUE_FOR_LINE,
                                                 'CONTRACT_NUM',
                                                 p_contract_number||'/'||TO_CHAR(p_line_number),
                                                 'COL_NAME',
                                                 'PTH_EVG_PAYGROUP_CODE',
                                                 'LINE',
                                                 p_line_type
                                                );
			     raise party_role_failed;
                          END IF;
                      ELSE
                          l_evg_cont_pmnt_dtls_rec.pay_group_code := p_pth_evg_paygroup_code;
                      END IF;
                      IF (p_pth_evg_pmnt_basis is NULL) THEN
                         l_evg_cont_pmnt_dtls_rec.payment_basis := 'PROCESS_DATE';
                      ELSE
                         OPEN  pmnt_basis_csr(p_pth_evg_pmnt_basis);
                         FETCH pmnt_basis_csr INTO rec_exists_yn;
                         IF (pmnt_basis_csr%NOTFOUND) THEN
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_INVALID_VALUE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_PMNT_BASIS',
                                                'COL_VALUE',
                                                p_pth_evg_pmnt_basis
                                               );
                            CLOSE pmnt_basis_csr;
                            raise party_role_failed;
                         ELSE
                            l_evg_cont_pmnt_dtls_rec.payment_basis := p_pth_evg_pmnt_basis;
                            CLOSE pmnt_basis_csr;
                         END IF;
                      END IF;
                      l_evg_cont_pmnt_dtls_rec.payment_hdr_id := g_evg_cont_pmnt_hdr.id;
		      l_evg_cont_pmnt_dtls_rec.payment_method_code := p_pth_evg_pmnt_method_code;

		      IF ((p_pth_evg_pmnt_basis = 'PROCESS_DATE') AND
                           (p_pth_evg_pmnt_remit_days IS NULL)) THEN
        	          okl_api.set_message(
                                              G_APP_NAME,
                                              G_MISSING_VALUE_FOR_LINE,
                                              'CONTRACT_NUM',
                                              p_contract_number||'/'||TO_CHAR(p_line_number),
                                              'COL_NAME',
                                              'PTH_EVG_PMNT_REMIT_DAYS',
                                              'LINE',
                                              p_line_type
                                             );
			  raise party_role_failed;
                      ELSE
		         l_evg_cont_pmnt_dtls_rec.remit_days := p_pth_evg_pmnt_remit_days;
                      END IF;
                      IF (p_pth_evg_disb_basis is NOT NULL) THEN
                         OPEN  disb_basis_csr(p_pth_evg_disb_basis);
                         FETCH disb_basis_csr INTO rec_exists_yn;
                         IF (disb_basis_csr%NOTFOUND) THEN
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_INVALID_VALUE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_DISB_BASIS',
                                                'COL_VALUE',
                                                p_pth_evg_disb_basis
                                               );
                            CLOSE disb_basis_csr;
                            raise party_role_failed;
                         ELSE
                            l_evg_cont_pmnt_dtls_rec.disbursement_basis := p_pth_evg_disb_basis;
                            CLOSE disb_basis_csr;
                         END IF;
                      ELSE
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_DISB_BASIS',
                                                'LINE',
                                                p_line_type
                                               );
                      END IF;
		      IF ((p_pth_evg_disb_basis = 'AMOUNT')) THEN
                         IF (p_pth_evg_disb_fixed_amount IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_DISB_FIXED_AMOUNT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_evg_cont_pmnt_dtls_rec.disbursement_fixed_amount := p_pth_evg_disb_fixed_amount;
                         END IF;
		      END IF;
		      IF ((p_pth_evg_disb_basis = 'PERCENT')) THEN
                         IF (p_pth_evg_disb_pct IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_DISB_PCT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_evg_cont_pmnt_dtls_rec.disbursement_percent := p_pth_evg_disb_pct;
                         END IF;
		      END IF;

                      IF (p_pth_evg_proc_fee_basis is NOT NULL) THEN
                         OPEN  proc_fee_basis_csr(p_pth_evg_proc_fee_basis);
                         FETCH proc_fee_basis_csr INTO rec_exists_yn;
                         IF (proc_fee_basis_csr%NOTFOUND) THEN
                            okl_api.set_message(
                                                G_APP_NAME,
                                                G_INVALID_VALUE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_PROC_FEE_BASIS',
                                                'COL_VALUE',
                                                p_pth_evg_proc_fee_basis
                                               );
                            CLOSE proc_fee_basis_csr;
                            raise party_role_failed;
                         ELSE
                            l_evg_cont_pmnt_dtls_rec.processing_fee_basis := p_pth_evg_proc_fee_basis;
                            CLOSE proc_fee_basis_csr;
                         END IF;
                      END IF;
		      IF ((p_pth_evg_proc_fee_basis = 'AMOUNT')) THEN
                         IF (p_pth_evg_proc_fee_fixed_amt IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_PROC_FEE_FIXED_AMT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_evg_cont_pmnt_dtls_rec.processing_fee_fixed_amount := p_pth_evg_proc_fee_fixed_amt;
                         END IF;
		      END IF;

		      IF ((p_pth_evg_proc_fee_basis = 'PERCENT')) THEN
                         IF (p_pth_evg_proc_pct IS NULL) THEN
        	            okl_api.set_message(
                                                G_APP_NAME,
                                                G_MISSING_VALUE_FOR_LINE,
                                                'CONTRACT_NUM',
                                                p_contract_number||'/'||TO_CHAR(p_line_number),
                                                'COL_NAME',
                                                'PTH_EVG_PROC_PCT',
                                                'LINE',
                                                p_line_type
                                               );
			    raise party_role_failed;
                         ELSE
		         l_evg_cont_pmnt_dtls_rec.processing_fee_percent := p_pth_evg_proc_pct;
                         END IF;
		      END IF;
                      l_counter := l_counter + 1;
                      l_cont_pmnt_dtls_tbl_in(l_counter) := l_evg_cont_pmnt_dtls_rec;

               END IF; -- vendor_site_code is not null
           END IF; -- p_line_number is null
      END IF; -- g_evg_cont_pmnt_hdr.id is not null

      debug_message ('No. of records in payment dtls table : '||l_cont_pmnt_dtls_tbl_in.count);

      IF (l_cont_pmnt_dtls_tbl_in.COUNT > 0) THEN
         okl_party_payments_pvt.create_party_payment_dtls(
                                                         p_api_version    => 1.0,
                                                         x_return_status  => x_return_status,
                                                         x_msg_count      => x_msg_count,
                                                         x_msg_data       => x_msg_data,
                                                         p_ppydv_tbl       => l_cont_pmnt_dtls_tbl_in,
                                                         x_ppydv_tbl       => l_cont_pmnt_dtls_tbl_out
						        );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            RAISE party_role_failed;
         END IF;
      END IF;
      debug_message('Contract evergreen dtls end.');
      -- Create evergreen payment dtls if header exists

      debug_message('------>Party role done');
      return;

   EXCEPTION

     WHEN party_role_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        debug_message(l_proc_name ||': '||l_progress);

     WHEN OTHERS THEN
       debug_message(l_proc_name ||': '||l_progress);

  END process_party_role;

------------------------------------------------------------------------------
-- PROCEDURE process_term
-- It Process Terms Interafce Records at Contract Line level and Header Level as well and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  get_bill_to_address_id
--  get_bank_account_id
--  get_invoice_format_id
--  get_payment_method_id
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE process_term(
                          x_return_status             OUT NOCOPY VARCHAR2,
                          x_msg_count                 OUT NOCOPY NUMBER,
                          x_msg_data                  OUT NOCOPY VARCHAR2,
                          p_contract_number           IN  okc_k_headers_v.contract_number%TYPE,
                          p_chr_id                    IN  okc_k_headers_v.id%TYPE,
                          p_auth_org_id               IN  okl_header_interface.authoring_org_id%TYPE,
                          p_line_number               IN  okc_k_lines_v.line_number%TYPE,
                          p_line_type                 IN  okl_lines_interface.line_type%TYPE,
                          p_cle_id                    IN  okc_k_lines_v.id%TYPE,
                          p_bill_to_address_id        IN  okl_terms_interface.bill_to_address_id%TYPE,
                          p_bill_to_address           IN  okl_terms_interface.bill_to_address%TYPE,
                          p_bank_account_id           IN  okl_terms_interface.bank_account_id%TYPE,
                          p_bank_account_number       IN  okl_terms_interface.bank_account_number%TYPE,
                          p_reason_for_invoice_review IN  okl_terms_interface.reason_for_invoice_review%TYPE,
                          p_invoice_review_until_date IN  okl_terms_interface.invoice_review_until_date%TYPE,
                          p_invoice_format_id         IN  okl_terms_interface.invoice_format_id%TYPE,
                          p_invoice_format_code       IN  okl_terms_interface.invoice_format_code%TYPE,
                          p_review_invoice_flag       IN  okl_terms_interface.review_invoice_flag%TYPE,
                          p_payment_method_id         IN  okl_terms_interface.payment_method_id%TYPE,
                          p_payment_method            IN  okl_terms_interface.payment_method%TYPE,
                          p_prescribed_asset_flag     IN  okl_terms_interface.prescribed_asset_flag%TYPE,
                          p_cash_appl_rule_name       IN  okl_terms_interface.cash_appl_rule_name%TYPE
                         ) IS

   l_proc_name VARCHAR2(35) := 'PROCESS_TERM';
   term_failed EXCEPTION;

   -- Rule Rec
   x_rgpv_rec         rgpv_rec_type;
   l_rgpv_rec         rgpv_rec_type;

   l_rulv_rec         rulv_rec_type;
   x_rulv_rec         rulv_rec_type;

   l_clev_rec         clev_rec_type;
   x_clev_rec         clev_rec_type;
   l_klev_rec         klev_rec_type;
   x_klev_rec         klev_rec_type;

   x_bank_account_id    NUMBER := NULL;
   x_bill_to_address_id NUMBER := NULL;
   x_invoice_format_id  NUMBER := NULL;
   x_payment_method_id  NUMBER := NULL;
   x_invoice_format_name okl_invoice_formats_v.name%TYPE;
   l_rgp_id              NUMBER;

   x_cash_appl_rule_id  OKL_BPD_ACTIVE_CSH_RLS_V.ID1%TYPE;
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);

     IF (p_line_type = 'ASSET') THEN

         l_rgpv_rec            := NULL;
         l_rgp_id              := NULL;
         l_rgpv_rec.rgd_code   := 'LABILL';
         l_rgpv_rec.chr_id     := NULL;
         l_rgpv_rec.dnz_chr_id := p_chr_id;
         l_rgpv_rec.cle_id     := p_cle_id;
         l_rgpv_rec.rgp_type   := 'KRG';

     debug_message('------>Cust Acct: '||g_customer_account_id);

     IF (g_customer_account_id IS NOT NULL) THEN -- customer account is provided at header interface
        get_bill_to_address_id(
                               x_return_status           => x_return_status,
                               x_msg_count               => x_msg_count,
                               x_msg_data                => x_msg_data,
                               p_contract_number         => p_contract_number,
                               p_auth_org_id             => p_auth_org_id,
                               p_bill_to_address_id      => p_bill_to_address_id,
                               p_bill_to_address         => p_bill_to_address,
                               p_customer_account_id     => g_customer_account_id,
                               x_bill_to_address_id      => x_bill_to_address_id
                              );

        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            raise term_failed;
        END IF;

     END IF; --g_customer_account_id

     l_rulv_rec := NULL;

-- cklee bug# 3440442 bug# 3440442
       debug_message('------>prescribed_asset_flag: '||p_prescribed_asset_flag);
       IF (p_prescribed_asset_flag IS NOT NULL) THEN

         IF (NVL(p_prescribed_asset_flag,'N') NOT IN ('Y','N')) THEN
            okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_VALUE,
                               'CONTRACT_NUM',
                               p_contract_number,
                               'COL_NAME',
                               'PRESCRIBED_ASSET_FLAG',
                               'COL_VALUE',
                               p_prescribed_asset_flag
                              );

            x_return_status := OKL_API.G_RET_STS_ERROR;
            raise term_failed;

         END IF;

         -- Update prescribed_asset_flag
         l_clev_rec.id                    := p_cle_id;
--         l_clev_rec.dnz_chr_id            := p_chr_id;
         l_klev_rec.prescribed_asset_yn := p_prescribed_asset_flag;

         okl_contract_pub.update_contract_line(
                                  p_api_version     => 1.0,
                                  p_init_msg_list   => OKL_API.G_FALSE,
                                  x_return_status   => x_return_status,
                                  x_msg_count       => x_msg_count,
                                  x_msg_data        => x_msg_data,
                                  p_clev_rec        => l_clev_rec,
                                  p_klev_rec        => l_klev_rec,
                                  x_clev_rec        => x_clev_rec,
                                  x_klev_rec        => x_klev_rec
                                 );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             raise term_failed;
         END IF;

       debug_message('------>prescribed_asset_flag updated: '||x_klev_rec.prescribed_asset_yn);
       END IF;
-- cklee bug# 3440442 bug# 3440442


     debug_message('------>Bill to ID: '||x_bill_to_address_id);

     IF (x_bill_to_address_id IS NOT NULL) THEN

         -- Update asset line with BTO information
         l_clev_rec.id                  := p_cle_id;
         --l_clev_rec.dnz_chr_id          := p_chr_id;
         l_clev_rec.bill_to_site_use_id := x_bill_to_address_id;

         okl_contract_pub.update_contract_line(
                                  p_api_version     => 1.0,
                                  p_init_msg_list   => OKL_API.G_FALSE,
                                  x_return_status   => x_return_status,
                                  x_msg_count       => x_msg_count,
                                  x_msg_data        => x_msg_data,
                                  p_clev_rec        => l_clev_rec,
                                  p_klev_rec        => l_klev_rec,
                                  x_clev_rec        => x_clev_rec,
                                  x_klev_rec        => x_klev_rec
                                 );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             raise term_failed;
         END IF;

         debug_message('------>Bill to updated: '||x_clev_rec.bill_to_site_use_id);

/* Rule Migration

         l_rulv_rec.jtot_object1_code         := 'OKX_BILLTO';
         l_rulv_rec.object1_id1               := TO_CHAR(x_bill_to_address_id);
         l_rulv_rec.object1_id2               := '#';
         l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
         l_rulv_rec.dnz_chr_id                := p_chr_id;
         l_rulv_rec.rule_information_category := 'BTO';
         l_rulv_rec.std_template_yn           := 'N';
         l_rulv_rec.warn_yn                   := 'N';

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise term_failed;
         END IF;

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;
*/
         IF (p_bank_account_id IS NOT NULL
             OR
             p_bank_account_number IS NOT NULL) THEN
            get_bank_account_id(
                                x_return_status           => x_return_status,
                                x_msg_count               => x_msg_count,
                                x_msg_data                => x_msg_data,
                                p_contract_number         => p_contract_number,
                                p_auth_org_id             => p_auth_org_id,
                                p_bank_account_id         => p_bank_account_id,
                                p_bank_account_number     => p_bank_account_number,
                                p_customer_account_id     => g_customer_account_id,
                                p_cust_site_id            => x_bill_to_address_id,
                                x_bank_account_id         => x_bank_account_id
                               );
            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                raise term_failed;
            END IF;
         END IF;

         l_rulv_rec := NULL;
         IF (x_bank_account_id IS NOT NULL) THEN

            l_rulv_rec.jtot_object1_code         := 'OKX_CUSTBKAC';
            l_rulv_rec.object1_id1               := TO_CHAR(x_bank_account_id);
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LABACC';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

            create_rule_group_and_rule(
                                       x_return_status => x_return_status,
                                       x_msg_count     => x_msg_count,
                                       x_msg_data      => x_msg_data,
                                       p_rgp_id        => l_rgp_id,
                                       p_rgpv_rec      => l_rgpv_rec,
                                       p_rulv_rec      => l_rulv_rec,
                                       x_rgpv_rec      => x_rgpv_rec,
                                       x_rulv_rec      => x_rulv_rec
                                      );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               raise term_failed;
            END IF;

            IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
               l_rgp_id := x_rgpv_rec.id;
            END IF;

         END IF; --bank_account

         IF (p_reason_for_invoice_review IS NOT NULL) THEN -- Bug# 3650522
            OKL_API.SET_MESSAGE(
                                G_APP_NAME,
                                G_VALUE_NOT_ALLOWED,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'LINE_NUM',
                                p_line_number,
                                'COL_NAME',
                                'REASON_FOR_INVOICE_REVIEW'
                               );

            x_return_status := OKL_API.G_RET_STS_ERROR;

         END IF;

         IF (p_invoice_review_until_date IS NOT NULL) THEN -- Bug# 3650522
            OKL_API.SET_MESSAGE(
                                G_APP_NAME,
                                G_VALUE_NOT_ALLOWED,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'LINE_NUM',
                                p_line_number,
                                'COL_NAME',
                                'INVOICE_REVIEW_UNTIL_DATE'
                               );

            x_return_status := OKL_API.G_RET_STS_ERROR;

         END IF;

/* not required, Bug# 3650522
         debug_message('------>Before review invoice');
         l_rulv_rec := NULL;
         IF (p_reason_for_invoice_review IS NOT NULL) THEN

            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information1         := p_reason_for_invoice_review;
            l_rulv_rec.rule_information_category := 'LAINPR';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

         END IF; --reason for invoice review

         IF (p_invoice_review_until_date IS NOT NULL) THEN

            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information2         := get_canonical_date(p_invoice_review_until_date);
            l_rulv_rec.rule_information_category := 'LAINPR';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

         END IF; -- invoice review until date

         create_rule_group_and_rule(
                                    x_return_status => x_return_status,
                                    x_msg_count     => x_msg_count,
                                    x_msg_data      => x_msg_data,
                                    p_rgp_id        => l_rgp_id,
                                    p_rgpv_rec      => l_rgpv_rec,
                                    p_rulv_rec      => l_rulv_rec,
                                    x_rgpv_rec      => x_rgpv_rec,
                                    x_rulv_rec      => x_rulv_rec
                                   );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            raise term_failed;
         END IF;
*/
/* Bug# 4284166 : not required

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;
*/

         IF (p_invoice_format_id IS NOT NULL
             OR
             p_invoice_format_code IS NOT NULL) THEN -- Bug# 3650522
            OKL_API.SET_MESSAGE(
                                G_APP_NAME,
                                G_VALUE_NOT_ALLOWED,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'LINE_NUM',
                                p_line_number,
                                'COL_NAME',
                                'INVOICE_FORMAT_ID/_CODE'
                               );

            x_return_status := OKL_API.G_RET_STS_ERROR;

         END IF;

/* not required, Bug# 3650522
         debug_message('------>Before invoice format');

         IF (p_invoice_format_id IS NOT NULL
             OR
             p_invoice_format_code IS NOT NULL) THEN
             get_invoice_format_id(
                                 x_return_status           => x_return_status,
                                 x_msg_count               => x_msg_count,
                                 x_msg_data                => x_msg_data,
                                 p_contract_number         => p_contract_number,
                                 p_invoice_format_id       => p_invoice_format_id,
                                 p_invoice_format_code     => p_invoice_format_code,
                                 x_invoice_format_id       => x_invoice_format_id,
                                 x_invoice_format_name     => x_invoice_format_name
                                );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               x_return_status := OKL_API.G_RET_STS_ERROR;
               raise term_failed;
            END IF;
         END IF;

         debug_message('------>Invoice format ID: '||x_invoice_format_id);
*/

         IF (p_cash_appl_rule_name IS NOT NULL) THEN -- Bug# 3650522
            OKL_API.SET_MESSAGE(
                                G_APP_NAME,
                                G_VALUE_NOT_ALLOWED,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'LINE_NUM',
                                p_line_number,
                                'COL_NAME',
                                'CASH_APPL_RULE_NAME'
                               );

            x_return_status := OKL_API.G_RET_STS_ERROR;

         END IF;

         IF (p_review_invoice_flag IS NOT NULL) THEN -- Bug# 3650522
            OKL_API.SET_MESSAGE(
                                G_APP_NAME,
                                G_VALUE_NOT_ALLOWED,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'LINE_NUM',
                                p_line_number,
                                'COL_NAME',
                                'REVIEW_INVOICE_FLAG'
                               );

            x_return_status := OKL_API.G_RET_STS_ERROR;

         END IF;

/* Not required, Bug# 3650522
         IF (p_cash_appl_rule_name IS NOT NULL) THEN
             get_cash_appl_rule_id (
                                    x_return_status           => x_return_status,
                                    x_msg_count               => x_msg_count,
                                    x_msg_data                => x_msg_data,
                                    p_contract_number         => p_contract_number||'/'||p_line_number,
                                    p_org_id                  => p_auth_org_id,
                                    p_cash_appl_rule_name     => p_cash_appl_rule_name,
                                    x_cash_appl_rule_id       => x_cash_appl_rule_id
                                   );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 x_return_status := OKL_API.G_RET_STS_ERROR;
                 raise term_failed;
             END IF;
         END IF;

         l_rulv_rec := NULL;

         IF (x_cash_appl_rule_id IS NOT NULL) THEN
            l_rulv_rec.jtot_object1_code         := 'OKL_CASHAPPL';
            l_rulv_rec.object1_id1               := TO_CHAR(x_cash_appl_rule_id);
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.rule_information_category := 'LAINVD';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';
         END IF;

         IF (x_invoice_format_id IS NOT NULL) THEN

            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            --l_rulv_rec.rule_information4         := TO_CHAR(x_invoice_format_id);
          --  l_rulv_rec.rule_information1         := x_invoice_format_name; --TO_CHAR(x_invoice_format_id); ----sechawla 13-may09 6826580
            l_rulv_rec.rule_information1   := x_invoice_format_id; --sechawla 13-may09 6826580
            l_rulv_rec.rule_information_category := 'LAINVD';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

         END IF; -- invoice format id

         IF (p_review_invoice_flag IS NOT NULL) THEN

            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            --l_rulv_rec.rule_information1         := p_review_invoice_flag;
            l_rulv_rec.rule_information4         := NVL(p_review_invoice_flag, 'N');
            l_rulv_rec.rule_information_category := 'LAINVD';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

         END IF; -- reveiew invoice flag

         create_rule_group_and_rule(
                                 x_return_status => x_return_status,
                                 x_msg_count     => x_msg_count,
                                 x_msg_data      => x_msg_data,
                                 p_rgp_id        => l_rgp_id,
                                 p_rgpv_rec      => l_rgpv_rec,
                                 p_rulv_rec      => l_rulv_rec,
                                 x_rgpv_rec      => x_rgpv_rec,
                                 x_rulv_rec      => x_rulv_rec
                                );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise term_failed;
         END IF;
*/
/* Bug# 4284166 : not required

         IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
            l_rgp_id := x_rgpv_rec.id;
         END IF;
*/
         --
         -- status set to error if the following billing parameters are
         -- populated.
         --  1. Cash Application Rule
         --  2. Invoice Format
         --  3. Review Invoice
         --  4. Reason for Review
         --  5. Review until Date
         --
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN -- Bug# 3650522
            RAISE term_failed;
         END IF;

         debug_message('------>Before Payment Method');
         IF (p_payment_method_id IS NOT NULL
             OR
             p_payment_method IS NOT NULL) THEN
            get_payment_method_id(
                                  x_return_status           => x_return_status,
                                  x_msg_count               => x_msg_count,
                                  x_msg_data                => x_msg_data,
                                  p_contract_number         => p_contract_number,
                                  p_customer_account_id     => g_customer_account_id,
                                  p_bill_to_address_id      => x_bill_to_address_id, -- got from get_bill_to_address_id() above
                                  p_payment_method_id       => p_payment_method_id,
                                  p_payment_method          => p_payment_method,
                                  x_payment_method_id       => x_payment_method_id
                                 );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                raise term_failed;
            END IF;
         END IF;

         l_rulv_rec := NULL;
         IF (x_payment_method_id IS NOT NULL) THEN

            l_rulv_rec.rgp_id                    := x_rgpv_rec.id;
            l_rulv_rec.dnz_chr_id                := p_chr_id;
            l_rulv_rec.jtot_object1_code         := 'OKX_RCPTMTH';
            l_rulv_rec.object1_id1               := TO_CHAR(x_payment_method_id);
            l_rulv_rec.object1_id2               := '#';
            l_rulv_rec.rule_information_category := 'LAPMTH';
            l_rulv_rec.std_template_yn           := 'N';
            l_rulv_rec.warn_yn                   := 'N';

            create_rule_group_and_rule(
                                       x_return_status => x_return_status,
                                       x_msg_count     => x_msg_count,
                                       x_msg_data      => x_msg_data,
                                       p_rgp_id        => l_rgp_id,
                                       p_rgpv_rec      => l_rgpv_rec,
                                       p_rulv_rec      => l_rulv_rec,
                                       x_rgpv_rec      => x_rgpv_rec,
                                       x_rulv_rec      => x_rulv_rec
                                      );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                raise term_failed;
            END IF;

            IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136
               l_rgp_id := x_rgpv_rec.id;
            END IF;

         END IF; -- payment method id

         debug_message('------>After payment method');
      END IF; -- bill_to_address
      END IF; -- Line type

      return;

   EXCEPTION

      WHEN term_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;

   END process_term;

------------------------------------------------------------------------------
-- PROCEDURE create_payment_rule_group
-- It creates Rule Group and Rule related to Payments and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  check_stream_type_code
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE create_payment_rule_group(
                                       x_return_status     OUT NOCOPY VARCHAR2,
                                       x_msg_count         OUT NOCOPY NUMBER,
                                       x_msg_data          OUT NOCOPY VARCHAR2,
                                       p_contract_number   IN  okl_header_interface.contract_number_old%TYPE,
                                       p_line_number       IN  okl_lines_interface.line_number%TYPE,
                                       p_payment_type_code IN  VARCHAR2,
                                       p_stream_purpose    IN  okl_payments_interface.stream_purpose_code%TYPE,
                                       p_chr_id            IN  NUMBER,
                                       p_cle_id            IN  NUMBER,
                                       p_rg_id             IN  NUMBER,
                                       x_rgp_id            OUT NOCOPY NUMBER,
                                       x_slh_rulv_rec      OUT NOCOPY rulv_rec_type
                                      ) IS
   l_proc_name     VARCHAR2(35) := 'CREATE_PAYMENT_RULE_GROUP';
   x_id1           okl_strmtyp_source_v.id1%TYPE;
   pay_rule_failed EXCEPTION;

   l_rulv_rec      rulv_rec_type;
   l_rgpv_rec      rgpv_rec_type;
   x_rgpv_rec      rgpv_rec_type;

   l_present_yn VARCHAR2(1);
   l_payment_stream_name OKL_STRMTYP_SOURCE_V.NAME%TYPE;

   --Bug# 6112766:Start
   CURSOR get_rule_group_info(p_chr_id  okc_k_headers_b.id%TYPE,
                              p_cle_id  okc_k_lines_v.id%TYPE) IS
   SELECT rgp.id
   FROM okc_rule_groups_b rgp
   WHERE rgp.dnz_chr_id = p_chr_id
   AND rgp.cle_id = p_cle_id
   AND rgp.rgd_code = 'LALEVL'
   AND rgp.rgp_type = 'KRG';
   ln_rgp_id    OKC_RULE_GROUPS_V.ID%TYPE;

   rule_group_failed  EXCEPTION;
   l_rgp_id  OKC_RULE_GROUPS_V.ID%TYPE;

--Bug# 6112766: End

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      debug_message('------>create_payment_rule_group'); --cklee

      check_stream_type_code(
                              x_return_status    => x_return_status,
                              x_msg_count        => x_msg_count,
                              x_msg_data         => x_msg_data,
                              p_stream_type_code => p_payment_type_code,
                              p_stream_purpose   => p_stream_purpose,
                              x_id1              => x_id1,
                              x_name             => l_payment_stream_name
                             );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_INVALID_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number||'/'||p_line_number,
                             'COL_NAME',
                             'PAYMENT_TYPE_CODE, STREAM_PURPOSE_CODE',
                             'COL_VALUE',
                              p_payment_type_code||', '||p_stream_purpose
                             );
          x_return_status := OKL_API.G_RET_STS_ERROR;
          RAISE pay_rule_failed;
      END IF;

      --
      -- UDS 10/27
      -- Check whether the stream is present in template for this contract
      --
      l_present_yn := '?';
      l_present_yn := OKL_STREAMS_UTIL.strm_tmpt_contains_strm_type
                                   (p_khr_id  => p_chr_id,
                                    p_sty_id  => x_id1
                                   );

      IF (l_present_yn <> 'Y') THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_NO_STRM_TMPL,
                             'CONTRACT_NUM',
                             p_contract_number||'/'||p_line_number,
                             'COL_NAME',
                             'PAYMENT_TYPE_CODE, STREAM_PURPOSE_CODE',
                             'COL_VALUE',
                             p_payment_type_code||', '||p_stream_purpose
                           );

          raise pay_rule_failed;

      END IF;
--Bug# 6112766
        l_rgp_id :=p_rg_id;
      --check for the property tax code
      IF ((p_stream_purpose IN ('DOWN_PAYMENT', 'ESTIMATED_PROPERTY_TAX'))
                  AND (l_rgp_id IS NULL)) THEN
        OPEN get_rule_group_info(p_chr_id, p_cle_id);
         FETCH get_rule_group_info into l_rgp_id;
         IF get_rule_group_info%NOTFOUND THEN
--start:| 04-Jun-08 cklee Fixed bug: 7152082                                         |
--         RAISE rule_group_failed; -- cklee
           l_rgp_id := NULL;
--end:| 04-Jun-08 cklee Fixed bug: 7152082                                         |
         END IF;
         CLOSE get_rule_group_info;
      END IF;
      --Bug# 6112766: End
--      IF (p_rg_id IS NULL) THEN
      IF (l_rgp_id IS NULL OR l_rgp_id = OKC_API.G_MISS_NUM) THEN -- cklee bug #7429136  --Bug# 6112766
         IF (p_line_number IS NOT NULL) THEN -- line level rule group
            l_rgpv_rec            := NULL;
            l_rgpv_rec.rgd_code   := 'LALEVL';
            l_rgpv_rec.chr_id     := NULL;
            l_rgpv_rec.dnz_chr_id := p_chr_id;
            l_rgpv_rec.cle_id     := p_cle_id;
            l_rgpv_rec.rgp_type   := 'KRG';
         ELSE -- header level rule group
            l_rgpv_rec            := NULL;
            l_rgpv_rec.rgd_code   := 'LALEVL';
            l_rgpv_rec.chr_id     := p_chr_id;
            l_rgpv_rec.dnz_chr_id := p_chr_id;
            l_rgpv_rec.cle_id     := NULL;
            l_rgpv_rec.rgp_type   := 'KRG';
         END IF;

         OKL_RULE_PUB.create_rule_group(
                                     p_api_version     => 1.0,
                                     p_init_msg_list   => OKL_API.G_FALSE,
                                     x_return_status   => x_return_status,
                                     x_msg_count       => x_msg_count,
                                     x_msg_data        => x_msg_data,
                                     p_rgpv_rec        => l_rgpv_rec,
                                     x_rgpv_rec        => x_rgpv_rec
                                   );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             raise pay_rule_failed;
         END IF;

         x_rgp_id := x_rgpv_rec.id;
      ELSE
      --Bug# 6112766 :Start
       -- x_rgp_id := p_rg_id;
         x_rgp_id := l_rgp_id;
      --Bug# 6112766: End
      END IF;

      l_rulv_rec                           := NULL;
      l_rulv_rec.jtot_object1_code         := 'OKL_STRMTYP';
      l_rulv_rec.object1_id1               := TO_CHAR(x_id1);
      l_rulv_rec.object1_id2               := '#';
      l_rulv_rec.rgp_id                    := x_rgp_id;
      l_rulv_rec.dnz_chr_id                := p_chr_id;
      l_rulv_rec.rule_information_category := 'LASLH';
      l_rulv_rec.std_template_yn           := 'N';
      l_rulv_rec.warn_yn                   := 'N';

      OKL_RULE_PUB.create_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec,
                               x_rulv_rec        => x_slh_rulv_rec
                              );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         raise pay_rule_failed;
      END IF;

      RETURN;

   EXCEPTION
      --Bug# 6112766 :Start
     WHEN rule_group_failed THEN
       IF get_rule_group_info%ISOPEN THEN
         CLOSE get_rule_group_info;
       END IF;
       x_return_status := OKL_API.G_RET_STS_ERROR;
     --Bug# 6112766: End
     WHEN pay_rule_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
   END create_payment_rule_group;


------------------------------------------------------------------------------
-- PROCEDURE create_payment_other_rules
-- It creates some more rules for payment under rule group created by procedure: create_payment_rule_group and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  check_payment_frequency_code
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE create_payment_other_rules(
                                        x_return_status      OUT NOCOPY VARCHAR2,
                                        x_msg_count          OUT NOCOPY NUMBER,
                                        x_msg_data           OUT NOCOPY VARCHAR2,
                                        p_contract_number    IN  okl_header_interface.contract_number_old%TYPE,
                                        p_line_number        IN  okl_lines_interface.line_number%TYPE,
                                        p_payment_sch_number IN  okl_payments_interface.payment_schedule_number%TYPE,
                                        p_payment_freq_code  IN  okl_payments_interface.payment_frequency_code%TYPE,
                                        p_arrears_flag       IN  okl_payments_interface.arrears_flag%TYPE,
                                        p_advance_payments   IN  okl_payments_interface.advance_payments%TYPE,
                                        p_payment_amount     IN  okl_payments_interface.payment_amount%TYPE,
                                        p_start_date         IN  okl_payments_interface.start_date%TYPE,
                                        p_number_of_periods  IN  okl_payments_interface.number_of_periods%TYPE,
                                        p_rate               IN  okl_payments_interface.rate%TYPE,
                                        p_comments           IN  okl_payments_interface.comments%TYPE,
                                        p_stub_days          IN  okl_payments_interface.stub_days%TYPE,
                                        p_stub_amount        IN  okl_payments_interface.stub_amount%TYPE,
                                        p_slh_rulv_rec       IN  rulv_rec_type,
                                        p_chr_id             IN  NUMBER,
                                        p_cle_id             IN  NUMBER,
                                        p_rgp_id             IN  NUMBER
                                       ) IS

   l_proc_name      VARCHAR2(35) := 'CREATE_PAYMENT_OTHER_RULES';
   x_id1            okx_tuom_v.ID1%TYPE;
   x_uom_code       okx_tuom_v.uom_code%TYPE;
   pay_other_failed EXCEPTION;

   l_rulv_rec       rulv_rec_type;
   x_rulv_rec       rulv_rec_type;

   l_rulv_tbl       rulv_tbl_type;
   x_rulv_tbl       rulv_tbl_type;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_ERROR;

      l_rulv_rec                           := NULL;
      l_rulv_rec.rgp_id                    := p_rgp_id;
      l_rulv_rec.dnz_chr_id                := p_chr_id;
      l_rulv_rec.rule_information1         := TO_CHAR(p_payment_sch_number);
      l_rulv_rec.rule_information_category := 'LASLL';
      l_rulv_rec.std_template_yn           := 'N';
      l_rulv_rec.warn_yn                   := 'N';

      check_payment_frequency_code(
                                   x_return_status     => x_return_status,
                                   x_msg_count         => x_msg_count,
                                   x_msg_data          => x_msg_data,
                                   p_payment_freq_code => p_payment_freq_code,
                                   x_id1               => x_id1,
                                   x_uom_code          => x_uom_code
                                  );
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_INVALID_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number||'/'||p_line_number,
                             'COL_NAME',
                             'PAYMENT_FREQUENCY_CODE',
                             'COL_VALUE',
                              p_payment_freq_code
                             );
         x_return_status := OKL_API.G_RET_STS_ERROR;
         RAISE pay_other_failed;
      END IF;

      l_rulv_rec.jtot_object1_code         := 'OKL_TUOM';
      l_rulv_rec.object1_id1               := x_id1;
      l_rulv_rec.object1_id2               := '#';

      l_rulv_rec.rule_information10        := p_arrears_flag;
      l_rulv_rec.rule_information5         := TO_CHAR(p_advance_payments);

      IF (p_payment_amount IS NULL) THEN
         l_rulv_rec.rule_information6      := TO_CHAR(p_rate * p_number_of_periods);
      ELSE
         l_rulv_rec.rule_information6      := TO_CHAR(p_payment_amount);
      END IF;

      -- l_rulv_rec.rule_information2         := get_canonicaL_date(p_start_date);
      l_rulv_rec.rule_information2         := NULL; -- for stub logic
      l_rulv_rec.rule_information3         := TO_CHAR(p_number_of_periods);

      IF (p_comments IS NOT NULL) THEN
         l_rulv_rec.rule_information9      := p_comments;
      END IF;

      l_rulv_rec.rule_information7         := p_stub_days;
      l_rulv_rec.rule_information8         := p_stub_amount;

      -- link with SLH
      l_rulv_rec.jtot_object2_code         := 'OKL_STRMHDR';
      l_rulv_rec.object2_id1               := p_slh_rulv_rec.id;
      l_rulv_rec.object2_id2               := '#';

/* Not needed now
      --
      -- populate rulv_tbl structure and call
      -- new payment stub routine to create LASLLs
      --
      l_rulv_tbl(1).rgp_id                    := l_rulv_rec.rgp_id;
      l_rulv_tbl(1).dnz_chr_id                := l_rulv_rec.dnz_chr_id;
      l_rulv_tbl(1).rule_information1         := l_rulv_rec.rule_information1;
      l_rulv_tbl(1).rule_information_category := l_rulv_rec.rule_information_category;
      l_rulv_tbl(1).std_template_yn           := l_rulv_rec.std_template_yn;
      l_rulv_tbl(1).warn_yn                   := l_rulv_rec.warn_yn;
      l_rulv_tbl(1).jtot_object1_code         := l_rulv_rec.jtot_object1_code;
      l_rulv_tbl(1).object1_id1               := l_rulv_rec.object1_id1;
      l_rulv_tbl(1).object1_id2               := l_rulv_rec.object1_id2;

      l_rulv_tbl(1).rule_information10        := l_rulv_rec.rule_information10;
      l_rulv_tbl(1).rule_information5         := l_rulv_rec.rule_information5;
      l_rulv_tbl(1).rule_information6         := l_rulv_rec.rule_information6;
      l_rulv_tbl(1).rule_information2         := l_rulv_rec.rule_information2;
      l_rulv_tbl(1).rule_information3         := l_rulv_rec.rule_information3;
      l_rulv_tbl(1).rule_information9         := l_rulv_rec.rule_information9;

      l_rulv_tbl(1).rule_information7         := l_rulv_rec.rule_information7;
      l_rulv_tbl(1).rule_information8         := l_rulv_rec.rule_information8;

      l_rulv_tbl(1).jtot_object2_code         := l_rulv_rec.jtot_object2_code;
      l_rulv_tbl(1).object2_id1               := l_rulv_rec.object2_id1;
      l_rulv_tbl(1).object2_id2               := l_rulv_rec.object2_id2;

      okl_la_payments_pvt_1.create_rule(
                                        p_api_version      => 1.0,
                                        p_init_msg_list    => OKL_API.G_FALSE,
                                        x_return_status    => x_return_status,
                                        x_msg_count        => x_msg_count,
                                        x_msg_data         => x_msg_data,
                                        p_rulv_tbl         => l_rulv_tbl,
                                        x_rulv_tbl         => x_rulv_tbl
                                       );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         RAISE pay_other_failed;
      END IF;
*/

      OKL_RULE_PUB.create_rule(
                               p_api_version     => 1.0,
                               p_init_msg_list   => OKL_API.G_FALSE,
                               x_return_status   => x_return_status,
                               x_msg_count       => x_msg_count,
                               x_msg_data        => x_msg_data,
                               p_rulv_rec        => l_rulv_rec,
                               x_rulv_rec        => x_rulv_rec
                              );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         RAISE pay_other_failed;
      END IF;

      -- Now calculate payment start date
      OKL_LA_PAYMENTS_PVT.calculate_details(
                                            p_api_version      => 1.0,
                                            p_init_msg_list    => OKL_API.G_FALSE,
                                            x_return_status    => x_return_status,
                                            x_msg_count        => x_msg_count,
                                            x_msg_data         => x_msg_data,
                                            p_chr_id           => p_chr_id,
                                            p_rgp_id           => p_rgp_id,
                                            p_slh_id           => p_slh_rulv_rec.id,
                                            structure          => NULL,
                                            frequency          => NULL,
                                            arrears            => NULL,
                                            -- Bug# 6438785
                                            p_validate_date_yn => 'N'
                                           );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         RAISE pay_other_failed;
      END IF;

      RETURN;

   EXCEPTION
      WHEN pay_other_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;

   END create_payment_other_rules;

------------------------------------------------------------------------------
-- PROCEDURE get_inventory_org_item_id
-- It retrives Inventory Organization and Item Id and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  process_other_line
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE get_inventory_org_item_id(
                                      x_return_status       OUT NOCOPY VARCHAR2,
                                      x_msg_count           OUT NOCOPY NUMBER,
                                      x_msg_data            OUT NOCOPY VARCHAR2,
                                      p_contract_number     IN  okl_header_interface.contract_number_old%TYPE,
                                      p_line_number         IN  okl_lines_interface.line_number%TYPE,
                                      p_line_type           IN  okl_lines_interface.line_type%TYPE,
                                      p_inventory_org_id    IN  okl_header_interface.inventory_organization_id%TYPE,
                                      p_inventory_item_id   IN  okl_lines_interface.inventory_item_id%TYPE,
                                      p_inventory_item_name IN  okl_lines_interface.inventory_item_name%TYPE,
                                      x_inventory_org_id    OUT NOCOPY NUMBER,
                                      x_inventory_item_id   OUT NOCOPY NUMBER
                                     ) IS
   l_proc_name    VARCHAR2(35) := 'GET_INVENTORY_ORG_ITEM_ID';
   inv_org_failed EXCEPTION;
   l_org_id       NUMBER;
   l_item_id      NUMBER;

   CURSOR org_csr (p_inventory_org_id NUMBER) IS
   SELECT organization_id
   FROM   hr_all_organization_units
   WHERE  organization_id = p_inventory_org_id
   AND    SYSDATE BETWEEN NVL(date_from, SYSDATE) AND NVL(date_to, SYSDATE);

   /*
   CURSOR org_csr (p_inventory_org_name VARCHAR2,
                   p_inventory_org_id   NUMBER) IS
   SELECT organization_id
   FROM   hr_all_organization_units
   WHERE  ((name = p_inventory_org_name
            AND
            p_inventory_org_name IS NOT NULL)
            OR
            (organization_id = p_inventory_org_id
             AND
             p_inventory_org_id IS NOT NULL
            )
           )
   AND    SYSDATE BETWEEN NVL(date_from, SYSDATE) AND NVL(date_to, SYSDATE);
   */
   CURSOR item_csr (p_inventory_org_id    NUMBER,
                    p_inventory_item_id   NUMBER,
                    p_inventory_item_name VARCHAR2) IS
   SELECT inventory_item_id
   FROM   mtl_system_items
   WHERE  ((segment1        = p_inventory_item_name
            AND
            p_inventory_item_name IS NOT NULL)
            OR
            (inventory_item_id = p_inventory_item_id
             AND
             p_inventory_item_id IS NOT NULL
            )
           )
   AND    organization_id = p_inventory_org_id
   AND    SYSDATE BETWEEN NVL(start_date_active, SYSDATE) AND NVL(end_date_active, SYSDATE);

   CURSOR service_item_csr (p_inventory_org_id    NUMBER,
                            p_inventory_item_id   NUMBER,
                            p_inventory_item_name VARCHAR2) IS
   SELECT id1
   FROM   okx_system_items_v
   WHERE  ((name = p_inventory_item_name
            AND
            p_inventory_item_name IS NOT NULL)
            OR
            (id1 = p_inventory_item_id
             AND
             p_inventory_item_id IS NOT NULL
            )
           )
   AND    service_item_flag    = 'Y'
   AND    vendor_warranty_flag = 'N'
   AND    organization_id      = p_inventory_org_id
   AND    SYSDATE BETWEEN NVL(start_date_active, SYSDATE) AND NVL(end_date_active, SYSDATE);

   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN org_csr(p_inventory_org_id);
     FETCH org_csr INTO l_org_id;

     IF org_csr%NOTFOUND THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'COL_NAME',
                            'INVENTORY_ORGANIZATION_ID',
                            'COL_VALUE',
                            p_inventory_org_id
                           );
        RAISE inv_org_failed;
     END IF;
     CLOSE org_csr;
     x_inventory_org_id := l_org_id;

     IF (p_line_type = 'ASSET') or (p_line_type = 'ASSET_ADDON') THEN
        OPEN item_csr (x_inventory_org_id,
                       p_inventory_item_id,
                       p_inventory_item_name);
        FETCH item_csr into l_item_id;
        IF item_csr%NOTFOUND THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_VALUE,
                               'CONTRACT_NUM',
                               p_contract_number||'/'||p_line_number,
                               'COL_NAME',
                               'INVENTORY_ITEM_ID, NAME: ',
                               'COL_VALUE',
                               p_inventory_item_id||', '||p_inventory_item_name
                              );
           RAISE inv_org_failed;
        END IF;
        CLOSE item_csr;
      ELSIF (p_line_type = 'SERVICE') THEN
         OPEN service_item_csr (x_inventory_org_id,
                                p_inventory_item_id,
                                p_inventory_item_name);
         FETCH service_item_csr into l_item_id;
         IF service_item_csr%NOTFOUND THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||p_line_number,
                                'COL_NAME',
                                'INVENTORY_ITEM_ID, NAME: ',
                                'COL_VALUE',
                                p_inventory_item_id||', '||p_inventory_item_name
                               );
            RAISE inv_org_failed;
         END IF;
         CLOSE service_item_csr;
     END IF; --line type
     x_inventory_item_id := l_item_id;

     return;

   EXCEPTION

      WHEN inv_org_failed THEN
         IF org_csr%ISOPEN THEN
            CLOSE org_csr;
         END IF;
         IF item_csr%ISOPEN THEN
            CLOSE item_csr;
         END IF;
         IF service_item_csr%ISOPEN THEN
            CLOSE service_item_csr;
         END IF;
         x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_UNEXPECTED_ERROR,
                             'OKL_SQLCODE',
                             SQLCODE,
                             'OKL_SQLERRM',
                             SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;

   END get_inventory_org_item_id;

------------------------------------------------------------------------------
-- PROCEDURE get_asset_id
-- It retrives Asset ID for given asset number and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE get_asset_id(
                          x_return_status   OUT NOCOPY VARCHAR2,
                          x_msg_count       OUT NOCOPY NUMBER,
                          x_msg_data        OUT NOCOPY VARCHAR2,
                          p_contract_number IN  okl_header_interface.contract_number_old%TYPE,
                          p_line_number     IN  okl_lines_interface.line_number%TYPE,
                          p_asset_number    IN  okl_lines_interface.asset_number%TYPE,
                          x_id1             OUT NOCOPY okx_assets_v.id1%TYPE,
                          x_id2             OUT NOCOPY okx_assets_v.id2%TYPE
                         ) IS

   l_proc_name  VARCHAR2(35) := 'GET_ASSET_ID';
   asset_failed EXCEPTION;
   l_id1        okx_assets_v.id1%TYPE;
   l_id2        okx_assets_v.id2%TYPE;

   CURSOR asset_csr (p_asset_number VARCHAR2) IS
   SELECT id1,
          id2
   FROM   okx_assets_v
   WHERE  asset_number = p_asset_number
   AND    SYSDATE BETWEEN NVL(start_date_active, SYSDATE) AND NVL(end_date_active, SYSDATE);

   BEGIN
     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     OPEN asset_csr (p_asset_number);
     FETCH asset_csr INTO l_id1,
                          l_id2;
     IF asset_csr%NOTFOUND THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||p_line_number,
                            'COL_NAME',
                            'ASSET_NUMBER',
                            'COL_VALUE',
                            p_asset_number
                           );
           RAISE asset_failed;
     END IF;

     CLOSE asset_csr;

     x_id1 := l_id1;
     x_id2 := l_id2;

     return;

   EXCEPTION
     WHEN asset_failed THEN

        IF asset_csr%ISOPEN THEN
           CLOSE asset_csr;
        END IF;

        x_return_status := OKL_API.G_RET_STS_ERROR;

   END get_asset_id;

------------------------------------------------------------------------------
-- PROCEDURE get_asset_key_id
-- It retrives ASSET_KEY segments
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------

   PROCEDURE get_asset_key_id(
                        x_return_status   OUT NOCOPY VARCHAR2,
                        x_msg_count       OUT NOCOPY NUMBER,
                        x_msg_data        OUT NOCOPY VARCHAR2,
                        p_contract_number IN  okc_k_headers_v.contract_number%TYPE,
                        p_line_number     IN  okc_k_lines_v.line_number%TYPE,
                        p_comb_id         IN  NUMBER,
                        p_segment1        IN  VARCHAR2,
                        p_segment2        IN  VARCHAR2,
                        p_segment3        IN  VARCHAR2,
                        p_segment4        IN  VARCHAR2,
                        p_segment5        IN  VARCHAR2,
                        p_segment6        IN  VARCHAR2,
                        p_segment7        IN  VARCHAR2,
                        p_segment8        IN  VARCHAR2,
                        p_segment9        IN  VARCHAR2,
                        p_segment10       IN  VARCHAR2,
                        x_comb_id         OUT NOCOPY NUMBER
                       ) IS

   CURSOR flex_asset_key_csr (p_segment1 VARCHAR2,
                              p_segment2 VARCHAR2,
                              p_segment3 VARCHAR2,
                              p_segment4 VARCHAR2,
                              p_segment5 VARCHAR2,
                              p_segment6 VARCHAR2,
                              p_segment7 VARCHAR2,
                              p_segment8 VARCHAR2,
                              p_segment9 VARCHAR2,
                              p_segment10 VARCHAR2 ) IS
   SELECT code_combination_id
   FROM   fa_asset_keywords
   WHERE  (segment1 = p_segment1
           OR
           p_segment1 IS NULL)
   AND    (segment2 = p_segment2
           OR
           p_segment2 IS NULL)
   AND    (segment2 = p_segment2
           OR
           p_segment2 IS NULL)
   AND    (segment3 = p_segment3
           OR
           p_segment3 IS NULL)
   AND    (segment4 = p_segment4
           OR
           p_segment4 IS NULL)
   AND    (segment5 = p_segment5
           OR
           p_segment5 IS NULL)
   AND    (segment6 = p_segment6
           OR
           p_segment6 IS NULL)
   AND    (segment7 = p_segment7
           OR
           p_segment7 IS NULL)
   AND    (segment8 = p_segment8
           OR
           p_segment8 IS NULL)
   AND    (segment9 = p_segment9
           OR
           p_segment9 IS NULL)
   AND    (segment10 = p_segment10
           OR
           p_segment10 IS NULL)
   AND    enabled_flag <> 'N'
   AND    TRUNC(SYSDATE) BETWEEN NVL(TRUNC(start_date_active), TRUNC(SYSDATE)) AND NVL(TRUNC(end_date_active), TRUNC(SYSDATE));

   l_id NUMBER;
   asset_key_failed EXCEPTION;
   l_proc_name      VARCHAR2(35) := 'GET_ASSET_KEY_ID';

  BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);

     IF (p_comb_id IS NOT NULL) THEN
        x_comb_id := p_comb_id;
     ELSIF (p_segment1 IS NOT NULL
            OR
            p_segment2 IS NOT NULL
            OR
            p_segment3 IS NOT NULL
            OR
            p_segment4 IS NOT NULL
            OR
            p_segment5 IS NOT NULL
            OR
            p_segment6 IS NOT NULL
            OR
            p_segment7 IS NOT NULL
            OR
            p_segment8 IS NOT NULL
            OR
            p_segment9 IS NOT NULL
            OR
            p_segment10 IS NOT NULL) THEN

           debug_message('Asset key segment1: '||p_segment1);
           OPEN flex_asset_key_csr(
                             p_segment1,
                             p_segment2,
                             p_segment3,
                             p_segment4,
                             p_segment5,
                             p_segment6,
                             p_segment7,
                             p_segment8,
                             p_segment9,
                             p_segment10);
            FETCH flex_asset_key_csr INTO l_id;
            IF flex_asset_key_csr%NOTFOUND THEN
               raise asset_key_failed;
            END IF;
            x_comb_id := l_id;
     END IF;

   EXCEPTION
      WHEN asset_key_failed THEN
        IF flex_asset_key_csr%ISOPEN THEN
           CLOSE flex_asset_key_csr;
        END IF;

        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_COMBINATION,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||p_line_number,
                            'COMB_TYPE',
                            'ASSET_KEY'
                           );
        x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_UNEXPECTED_ERROR,
                             'OKL_SQLCODE',
                             SQLCODE,
                             'OKL_SQLERRM',
                             SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;

  END get_asset_key_id;

------------------------------------------------------------------------------
-- PROCEDURE get_flexid
-- It retrives Flex Value ID from Segments value for ASSET_CATEGORY and ASSET_LOCATION and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------

   PROCEDURE get_flexid(
                        x_return_status   OUT NOCOPY VARCHAR2,
                        x_msg_count       OUT NOCOPY NUMBER,
                        x_msg_data        OUT NOCOPY VARCHAR2,
                        p_contract_number IN  okc_k_headers_v.contract_number%TYPE,
                        p_line_number     IN  okc_k_lines_v.line_number%TYPE,
                        p_type            IN  VARCHAR2,
                        p_comb_id         IN  NUMBER,
                        p_segment1        IN  VARCHAR2,
                        p_segment2        IN  VARCHAR2,
                        p_segment3        IN  VARCHAR2,
                        p_segment4        IN  VARCHAR2,
                        p_segment5        IN  VARCHAR2,
                        p_segment6        IN  VARCHAR2,
                        p_segment7        IN  VARCHAR2,
                        x_comb_id         OUT NOCOPY NUMBER
                       ) IS
   CURSOR flex_cat_csr (p_segment1 VARCHAR2,
                        p_segment2 VARCHAR2,
                        p_segment3 VARCHAR2,
                        p_segment4 VARCHAR2,
                        p_segment5 VARCHAR2,
                        p_segment6 VARCHAR2,
                        p_segment7 VARCHAR2 ) IS
   SELECT category_id
   FROM   FA_CATEGORIES_B
   WHERE  (segment1 = NVL(p_segment1,'NULL') OR segment1 IS NULL)
   AND    (segment2 = NVL(p_segment2,'NULL') OR segment2 is NULL)
   AND    (segment3 = NVL(p_segment3,'NULL') OR segment3 IS NULL)
   AND    (segment4 = NVL(p_segment4,'NULL') OR segment4 IS NULL)
   AND    (segment5 = NVL(p_segment5,'NULL') OR segment5 IS NULL)
   AND    (segment6 = NVL(p_segment6,'NULL') OR segment6 IS NULL)
   AND    (segment7 = NVL(p_segment7,'NULL') OR segment7 IS NULL)
   AND    enabled_flag <> 'N'
   AND    SYSDATE BETWEEN NVL(start_date_active, SYSDATE) AND NVL(end_date_active, SYSDATE);

   CURSOR flex_loc_csr (p_segment1 VARCHAR2,
                        p_segment2 VARCHAR2,
                        p_segment3 VARCHAR2,
                        p_segment4 VARCHAR2,
                        p_segment5 VARCHAR2,
                        p_segment6 VARCHAR2,
                        p_segment7 VARCHAR2 ) IS
   SELECT location_id
   FROM   okx_ast_locs_v
   WHERE  (segment1 = NVL(P_segment1,'NULL') OR segment1 IS NULL)
   AND    (segment2 = NVL(p_segment2,'NULL') OR segment2 is NULL)
   AND    (segment3 = NVL(p_segment3,'NULL') OR segment3 IS NULL)
   AND    (segment4 = NVL(p_segment4,'NULL') OR segment4 IS NULL)
   AND    (segment5 = NVL(p_segment5,'NULL') OR segment5 IS NULL)
   AND    (segment6 = NVL(p_segment6,'NULL') OR segment6 IS NULL)
   AND    (segment7 = NVL(p_segment7,'NULL') OR segment7 IS NULL)
   AND    enabled_flag <> 'N'
   AND    SYSDATE BETWEEN NVL(start_date_active, SYSDATE) AND NVL(end_date_active, SYSDATE);

   l_id        NUMBER;
   flex_failed EXCEPTION;

   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     IF (p_comb_id IS NOT NULL) THEN
        x_comb_id := p_comb_id;
     ELSIF (p_segment1 IS NOT NULL
            OR
            p_segment2 IS NOT NULL
            OR
            p_segment3 IS NOT NULL
            OR
            p_segment4 IS NOT NULL
            OR
            p_segment5 IS NOT NULL
            OR
            p_segment6 IS NOT NULL
            OR
            p_segment7 IS NOT NULL) THEN
        IF (p_type = 'ASSET_CATEGORY') THEN
           OPEN flex_cat_csr(
                             p_segment1,
                             p_segment2,
                             p_segment3,
                             p_segment4,
                             p_segment5,
                             p_segment6,
                             p_segment7);
            FETCH flex_cat_csr INTO l_id;
            IF flex_cat_csr%NOTFOUND THEN
               raise flex_failed;
            END IF;
            x_comb_id := l_id;
         ELSIF (p_type = 'ASSET_LOCATION') THEN
           OPEN flex_loc_csr(
                             p_segment1,
                             p_segment2,
                             p_segment3,
                             p_segment4,
                             p_segment5,
                             p_segment6,
                             p_segment7);
            FETCH flex_loc_csr INTO l_id;
            IF flex_loc_csr%NOTFOUND THEN
               raise flex_failed;
            END IF;
            x_comb_id := l_id;
         END IF;
     END IF;

     RETURN;
   EXCEPTION
      WHEN flex_failed THEN
        IF flex_cat_csr%ISOPEN THEN
           CLOSE flex_cat_csr;
        ELSIF flex_loc_csr%ISOPEN THEN
           CLOSE flex_loc_csr;
        END IF;

        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_COMBINATION,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||p_line_number,
                            'COMB_TYPE',
                            p_type
                           );
        x_return_status := OKL_API.G_RET_STS_ERROR;

     WHEN OTHERS THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;

   END get_flexid;

------------------------------------------------------------------------------
-- PROCEDURE get_install_site_id
-- It retrives Install Site Id from Install Site Name and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE get_install_site_id(
                                 x_return_status       OUT NOCOPY VARCHAR2,
                                 x_msg_count           OUT NOCOPY NUMBER,
                                 x_msg_data            OUT NOCOPY VARCHAR2,
                                 p_contract_number     IN  okl_header_interface.contract_number_old%TYPE,
                                 p_line_number         IN  okl_lines_interface.line_number%TYPE,
                                 p_install_site_id     IN  okl_lines_interface.install_site_id%TYPE,
                                 p_install_site_number IN  okl_lines_interface.install_site_number%TYPE,
                                 x_install_site_id     OUT NOCOPY okl_lines_interface.install_site_id%TYPE
                                ) IS
   l_proc_name    VARCHAR2(35) := 'GET_INSTALL_SITE_ID';
   install_failed EXCEPTION;
   l_id1          okx_party_site_uses_v.id1%TYPE;

   CURSOR install_csr (p_install_site_name okx_party_site_uses_v.name%TYPE,
                       p_install_site_id   okx_party_site_uses_v.id1%TYPE) IS
   SELECT id1
   FROM   okx_party_site_uses_v
   WHERE  ((party_site_number = p_install_site_name
            AND
            p_install_site_number IS NOT NULL)
            OR
            (id1  = p_install_site_id
             AND
             p_install_site_id IS NOT NULL
            )
           )
   AND    site_use_type = 'INSTALL_AT'
   AND    party_id      = g_customer_id
   AND    status        = 'A';

   BEGIN
      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      OPEN install_csr (p_install_site_number,
                        p_install_site_id);
      FETCH install_csr INTO l_id1;

      IF install_csr%NOTFOUND THEN
         RAISE install_failed;
      END IF;

      CLOSE install_csr;
      x_install_site_id := l_id1;

   EXCEPTION
     WHEN install_failed THEN
        IF install_csr%ISOPEN THEN
           CLOSE install_csr;
        END IF;
        okl_api.set_message(
                            G_APP_NAME,
                            G_INVALID_VALUE,
                            'CONTRACT_NUM',
                            p_contract_number||'/'||p_line_number,
                            'COL_NAME',
                            'INSTALL_SITE_ID, NAME: ',
                            'COL_VALUE',
                            p_install_site_id||', '||p_install_site_number
                           );
        x_return_status := OKL_API.G_RET_STS_ERROR;

   END get_install_site_id;

------------------------------------------------------------------------------
-- PROCEDURE get_lse_id
-- It retrives Line Style id for Contract Lines and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
-- Called By:
--  process_other_line
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE get_lse_id(
                        x_return_status     OUT NOCOPY VARCHAR2,
                        x_msg_count         OUT NOCOPY NUMBER,
                        x_msg_data          OUT NOCOPY VARCHAR2,
                        p_contract_number   IN  okl_header_interface.contract_number_old%TYPE,
                        p_line_number       IN  okl_lines_interface.line_number%TYPE,
                        p_lty_code          IN  VARCHAR2,
                        p_top_line_lty_code IN  VARCHAR2,
                        x_lse_id            OUT NOCOPY NUMBER
                       ) IS

   l_proc_name VARCHAR2(35) := 'GET_LSE_ID';
   lse_failed  EXCEPTION;
   l_id        NUMBER;

   CURSOR top_lse_csr (p_lty_code VARCHAR2) IS
   SELECT id
   FROM   OKC_LINE_STYLES_B ols,
          okc_subclass_top_line ostl
   WHERE  LTY_CODE      = p_lty_code
   AND    ostl.scs_code = 'LEASE'
   AND    ols.id        = ostl.lse_id;

   CURSOR sub_lse_csr (p_lty_code          VARCHAR2,
                       p_top_line_lty_code VARCHAR2) IS
   SELECT ols2.id
   FROM   okc_line_styles_v ols1,
          okc_line_styles_v ols2,
          okc_subclass_top_line ostl
   WHERE  ostl.scs_code      = 'LEASE'
   AND    ostl.lse_id        = ols1.id
   AND    ols1.lty_code      = p_top_line_lty_code
   AND    ols2.lty_code      = p_lty_code
   AND    ols2.lse_parent_id = ostl.lse_id;

   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     IF (p_top_line_lty_code IS NULL) THEN
        OPEN top_lse_csr(p_lty_code);
        FETCH top_lse_csr INTO l_id;
        IF top_lse_csr%NOTFOUND THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_LTY_CODE,
                               'LTY_CODE',
                               p_lty_code,
                               'CONTRACT_NUM',
                               p_contract_number||'/'||p_line_number
                              );
           RAISE lse_failed;
        END IF;
        CLOSE top_lse_csr;

        x_lse_id := l_id;
     ELSE
        OPEN sub_lse_csr(p_lty_code,
                         p_top_line_lty_code);
        FETCH sub_lse_csr INTO l_id;
        IF sub_lse_csr%NOTFOUND THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_LTY_CODE,
                               'LTY_CODE',
                               p_lty_code,
                               'CONTRACT_NUM',
                               p_contract_number||'/'||p_line_number
                              );
           RAISE lse_failed;
        END IF;
        CLOSE sub_lse_csr;

        x_lse_id := l_id;
     END IF;

     return;

   EXCEPTION
     WHEN lse_failed THEN
        IF top_lse_csr%ISOPEN THEN
           CLOSE top_lse_csr;
        END IF;
        IF sub_lse_csr%ISOPEN THEN
           CLOSE sub_lse_csr;
        END IF;
        x_return_status := OKL_API.G_RET_STS_ERROR;
   END get_lse_id;

------------------------------------------------------------------------------
-- PROCEDURE validate_real_est
-- It validates real estate record if applicable and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
-- Called By:
--  process_other_line
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE validate_real_est(
                        x_return_status     OUT NOCOPY VARCHAR2,
                        x_msg_count         OUT NOCOPY NUMBER,
                        x_msg_data          OUT NOCOPY VARCHAR2,
                        p_intf_line         IN  OKL_LINES_INTERFACE%ROWTYPE
                       ) IS

   l_proc_name VARCHAR2(150) := 'OKL_LINES_INTERFACE: validate_real_est';
   l_progress  varchar2(150);
   l_dummy number;
   l_prc boolean := false;

   validate_real_est_failed  EXCEPTION;

  cursor c_prc (p_prc_code VARCHAR2) is
    select 1
  from fnd_lookups lok
  where lok.lookup_type = 'OKL_PROPERTY_CLASS_OPTIONS'
  and lok.lookup_code = p_prc_code;


   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     -- real estate required columns check
     IF ((p_intf_line.real_est_init_direct_cost IS NOT NULL or
          p_intf_line.real_est_refinance_amt IS NOT NULL or
          p_intf_line.real_est_net_footage_rentable IS NOT NULL or
          p_intf_line.real_est_gross_footage IS NOT NULL or
          p_intf_line.real_est_property_class_code IS NOT NULL)
          AND
         NOT(p_intf_line.real_est_init_direct_cost IS NOT NULL and
           p_intf_line.real_est_refinance_amt IS NOT NULL and
           p_intf_line.real_est_net_footage_rentable IS NOT NULL and
           p_intf_line.real_est_property_class_code IS NOT NULL and
           p_intf_line.real_est_gross_footage IS NOT NULL)) THEN


        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_LINE,
                            'CONTRACT_NUM',
                            p_intf_line.contract_number_old||'/'||TO_CHAR(p_intf_line.line_number),
                            'COL_NAME',
--
                            'REAL_EST_INIT_DIRECT_COST OR '||
                            'REAL_EST_REFINANCE_AMT OR '||
                            'REAL_EST_GROSS_FOOTAGE OR '||
                            'REAL_EST_NET_FOOTAGE_RENTABLE OR '||
                            'REAL_EST_PROPERTY_CLASS_CODE',
--
                            'LINE',
                            p_intf_line.line_type
                            );

         raise validate_real_est_failed;

     END IF;
     l_progress := 'Check required columns for real estate';

     IF (p_intf_line.real_est_property_class_code IS NOT NULL) THEN

       OPEN c_prc(p_intf_line.real_est_property_class_code);
       FETCH c_prc INTO l_dummy;
       l_prc := c_prc%NOTFOUND;
       CLOSE c_prc;

       IF (l_prc) THEN

           okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_VALUE,
                               'CONTRACT_NUM',
                               p_intf_line.contract_number_old,
                               'COL_NAME',
                               'REAL_EST_PROPERTY_CLASS_CODE',
                               'COL_VALUE',
                               p_intf_line.REAL_EST_PROPERTY_CLASS_CODE
                              );

         raise validate_real_est_failed;
       END IF;
     END IF;
     l_progress := 'Check property class code';

     return;

   EXCEPTION
     WHEN validate_real_est_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        debug_message(l_proc_name ||': '||l_progress);
     WHEN OTHERS THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        debug_message(l_proc_name ||': '||l_progress);

   END validate_real_est;

------------------------------------------------------------------------------
-- PROCEDURE get_link_asset_id
-- It gets line id for Financial Asset Line (TOP) corrsponding to ASSET_NUMBER provided and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  None
-- Called By:
--  process_other_line
------------------------------------------------------------------------------
   PROCEDURE get_link_asset_id(
                               x_return_status   OUT NOCOPY VARCHAR2,
                               x_msg_count       OUT NOCOPY NUMBER,
                               x_msg_data        OUT NOCOPY VARCHAR2,
                               p_asset_number    IN  okl_lines_interface.asset_number%TYPE,
                               p_contract_number IN  okc_k_headers_v.contract_number%TYPE,
                               p_chr_id          IN  okc_k_headers_v.id%TYPE,
                               p_line_number     IN  okc_k_lines_v.line_number%TYPE,
                               x_asset_line_id   OUT NOCOPY okc_k_lines_v.id%TYPE
                             ) IS

   l_proc_name VARCHAR2(35) := 'GET_LINK_ASSET_ID';
   fin_failed  EXCEPTION;
   l_line_id   okc_k_lines_v.id%TYPE;

   CURSOR fin_csr (p_chr_id       NUMBER,
                   p_asset_number VARCHAR2) IS
   SELECT id
   FROM   okc_k_lines_v
   WHERE  name = p_asset_number
   AND    chr_id = p_chr_id
   AND    lse_id = (
                    SELECT id
                    FROM   okc_line_styles_v
                    WHERE  lty_code = 'FREE_FORM1' -- to determine TOP line
                   );
   BEGIN
      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      OPEN fin_csr (p_chr_id,
                    p_asset_number);
      FETCH fin_csr INTO l_line_id;

      IF fin_csr%NOTFOUND THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_FIN_ASSET_ERROR,
                            'CONTRACT_NUM',
                            p_contract_number,
                            'LINE_NUM',
                            p_line_number,
                            'ASSET_NUM',
                            p_asset_number
                           );
         raise fin_failed;
      END IF;

      CLOSE fin_csr;

      x_asset_line_id := l_line_id;
      --debug_message('ID: '||x_asset_line_id);
      RETURN;

   EXCEPTION
      WHEN fin_failed THEN
         IF fin_csr%ISOPEN THEN
            CLOSE fin_csr;
         END IF;
         x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_UNEXPECTED_ERROR,
                             'OKL_SQLCODE',
                             SQLCODE,
                             'OKL_SQLERRM',
                             SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;
   END get_link_asset_id;

------------------------------------------------------------------------------
-- PROCEDURE validate_usage_other_line
-- It validates association between Usage Line Item and Inventory Item at Model Line and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE  validate_usage_item_assoc(
                                        x_return_status   OUT NOCOPY VARCHAR2,
                                        x_msg_count       OUT NOCOPY NUMBER,
                                        x_msg_data        OUT NOCOPY VARCHAR2,
                                        p_contract_number IN  VARCHAR2,
                                        p_line_number     IN  NUMBER,
                                        p_asset_line_id   IN  NUMBER,
                                        p_usage_item_id   IN  okl_lines_interface.usage_item_id%TYPE,
                                        p_usage_item_name IN  VARCHAR2,
                                        p_inv_org_id      IN  NUMBER
                                       ) IS
   l_proc_name VARCHAR2(35) := 'VALIDATE_USAGE_ITEM_ASSOC';
   CURSOR assoc_csr (p_usage_item_id NUMBER,
                     p_asset_line_id NUMBER) IS
   SELECT 'Y'
   FROM   okc_k_items_v item,
          okl_k_lines_full_v model,
          okc_line_styles_v style,
          cs_counters cc,
          cs_ctr_associations assoc
   WHERE  model.lse_id           = style.id
   AND    model.id               = item.cle_id
   AND    model.cle_id           = p_asset_line_id
   AND    style.lty_code         = 'ITEM'
   AND    cc.counter_group_id    = assoc.counter_group_id
   AND    cc.usage_item_id       = p_usage_item_id
   AND    assoc.source_object_id = item.object1_id1;

   assoc_failed    EXCEPTION;
   l_dummy         VARCHAR2(1);
   BEGIN

      debug_message(l_proc_name);
      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      l_dummy := 'N';
      OPEN assoc_csr(p_usage_item_id,
                     p_asset_line_id);
      FETCH assoc_csr INTO l_dummy;
      IF (assoc_csr%NOTFOUND
          OR
          l_dummy = 'N')  THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_INVALID_USAGE_ITEM_ASSOC,
                             'CONTRACT_NUM',
                             p_contract_number||'/'||p_line_number,
                             'USAGE_ITEM',
                             p_usage_item_name||', '||p_usage_item_id
                            );
         RAISE assoc_failed;
      END IF;
      CLOSE assoc_csr;

      RETURN;

   EXCEPTION
      WHEN assoc_failed THEN
         IF assoc_csr%ISOPEN THEN
            CLOSE assoc_csr;
         END IF;
         x_return_status := OKL_API.G_RET_STS_ERROR;
   END validate_usage_item_assoc;

------------------------------------------------------------------------------
-- PROCEDURE validate_term_quote
-- It validates termination quote used for Rollover fee line and returns
-- quote ID to caller and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE validate_term_quote(
                                 x_return_status     OUT NOCOPY VARCHAR2,
                                 x_msg_count         OUT NOCOPY NUMBER,
                                 x_msg_data          OUT NOCOPY VARCHAR2,
                                 p_chr_id            IN  NUMBER,
                                 p_contract_number   IN  VARCHAR2,
                                 p_line_number       IN  NUMBER,
                                 p_term_quote_id     IN  okl_lines_interface.termination_quote_id%TYPE,
                                 p_term_quote_number IN  okl_lines_interface.termination_quote_number%TYPE,
                                 x_term_quote_id     OUT NOCOPY okl_lines_interface.termination_quote_id%TYPE
                                ) IS

  l_proc_name   VARCHAR2(35) := 'VALIDATE_TERM_QUOTE';
  l_quote_id    NUMBER;
  quote_failed  EXCEPTION;

  CURSOR qte_csr (p_qte_number VARCHAR2) IS
  SELECT id
  FROM   okl_trx_quotes_b
  WHERE  quote_number = p_qte_number;

  BEGIN

    x_return_status := OKL_API.G_RET_STS_SUCCESS;

    IF (p_term_quote_number IS NOT NULL) THEN
       OPEN qte_csr (p_term_quote_number);
       FETCH qte_csr INTO l_quote_id;
       IF (qte_csr%NOTFOUND) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number||'/'||p_line_number,
                                'COL_NAME',
                                'TERMINATION_QUOTE_NUMBER',
                                'COL_VALUE',
                                p_term_quote_number
                               );

            RAISE quote_failed;
       END IF;
       CLOSE qte_csr;
    ELSE
       l_quote_id := p_term_quote_id;
    END IF;

    -- validate quote
    okl_maintain_fee_pvt.validate_rollover_feeLine(
            p_api_version     => 1.0,
            p_init_msg_list   => OKL_API.G_FALSE,
            x_return_status   => x_return_status,
            x_msg_count       => x_msg_count,
            x_msg_data        => x_msg_data,
            p_chr_id          => p_chr_id,
            p_qte_id          => l_quote_id
            --p_for_qa_check    => 'T'
           );

    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
       RAISE quote_failed;
    END IF;

    x_term_quote_id := l_quote_id;

    RETURN;

  EXCEPTION
    WHEN quote_failed THEN
      x_return_status := OKL_API.G_RET_STS_ERROR;
      IF (qte_csr%ISOPEN) THEN
         CLOSE qte_csr;
      END IF;

  END validate_term_quote;

------------------------------------------------------------------------------
-- PROCEDURE create_party_payment_hdr
-- This procedure creates payment headers for pass throughs associated with Asset, Serive, and Fee lines
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--
-- Called By:
--
------------------------------------------------------------------------------
   PROCEDURE create_party_payment_hdr(
                                        x_return_status                OUT NOCOPY VARCHAR2,
                                        x_msg_count                    OUT NOCOPY NUMBER,
                                        x_msg_data                     OUT NOCOPY VARCHAR2,
                                        p_contract_id                  IN  okc_k_headers_b.id%TYPE,
                                        p_line_id                      IN  okc_k_lines_b.id%TYPE,
                                        p_line_type                    IN  okl_lines_interface.line_type%TYPE,
                                        p_pth_start_date               IN  okl_party_payment_hdr.passthru_start_date%TYPE,
                                        p_pth_base_payout_basis        IN  okl_party_payment_hdr.payout_basis%TYPE,
                                        p_pth_base_stream_code         IN  okl_lines_interface.pth_base_stream_code%TYPE,
                                        p_pth_base_stream_purpose_code IN  okl_lines_interface.pth_base_stream_purpose_code%TYPE,
                                        p_pth_evg_payout_basis         IN  okl_party_payment_hdr.payout_basis%TYPE,
                                        p_pth_payout_basis_formula     IN  okl_party_payment_hdr.payout_basis_formula%TYPE,
                                        p_pth_evg_stream_code          IN  okl_lines_interface.pth_evg_stream_code%TYPE,
                                        p_pth_evg_stream_purpose_code  IN  okl_lines_interface.pth_evg_stream_purpose_code%TYPE,
                                        x_party_pmnt_hdr_tbl           OUT NOCOPY okl_party_payments_pvt.pphv_tbl_type
                                       ) IS

   l_proc_name                  VARCHAR2(35) := 'CREATE_PARTY_PAYMENT_HDR';
   l_return_status              VARCHAR2(1);
   l_base_stream_type_id         okl_strmtyp_source_v.id1%TYPE;
   l_evg_stream_type_id         okl_strmtyp_source_v.id1%TYPE;
   l_yn                         VARCHAR2(1) := 'N';
   l_base_pmnt_hdr              pphv_rec_type := NULL;
   l_evg_pmnt_hdr               pphv_rec_type := NULL;
   l_pmnt_hdr_tbl_in            pphv_tbl_type;
   l_pmnt_hdr_tbl_out           pphv_tbl_type;
   l_counter                    NUMBER := 0;
   l_contract_number            okc_k_headers_b.contract_number%TYPE;
   l_contract_start_date        okc_k_headers_b.start_date%TYPE;
   party_pmnt_header_failed     EXCEPTION;
   l_stream_name                OKL_STRMTYP_SOURCE_V.NAME%TYPE;

   CURSOR contract_csr (p_contract_id NUMBER) is
   SELECT contract_number, start_date
   FROM   okl_k_headers_full_v
   WHERE  id = p_contract_id;

   CURSOR passthru_stream_csr (p_sty_id number, p_contract_start_date date) IS
   SELECT 'Y'
   FROM   okl_stream_types_uv STL
   WHERE  STL.id = p_sty_id
   AND    STL.start_date <= p_contract_start_date
   AND   (STL.end_date >= p_contract_start_date OR STL.end_date IS NULL);

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      OPEN contract_csr(p_contract_id);
      FETCH contract_csr INTO l_contract_number,l_contract_start_date;

      IF contract_csr%NOTFOUND THEN
          x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
          CLOSE contract_csr;
          OKL_API.SET_MESSAGE(p_app_name     => g_app_name,
                              p_msg_name     => G_LLA_CHR_ID);
          RAISE party_pmnt_header_failed;
      END IF;

      CLOSE contract_csr;

      IF (p_pth_base_stream_code IS NOT NULL AND
          p_pth_base_stream_purpose_code IS NOT NULL) THEN
         -- Derive the stream type ID
         check_stream_type_code(
                                x_return_status    => l_return_status,
                                x_msg_count        => x_msg_count,
                                x_msg_data         => x_msg_data,
                                p_stream_type_code => p_pth_base_stream_code,
                                p_stream_purpose   => p_pth_base_stream_purpose_code,
                                x_id1              => l_base_stream_type_id,
                                x_name             => l_stream_name
                               );
         IF (l_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_INVALID_VALUE,
                                 'CONTRACT_NUM',
                                 l_contract_number, --||'/'||TO_CHAR(p_line_number),
                                'COL_NAME',
                                'PTH_BASE_STREAM_CODE, PTH_BASE_STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                p_pth_base_stream_code||', '||p_pth_base_stream_purpose_code
                               );
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE party_pmnt_header_failed;
         END IF;

         -- Check if the stream type is ID is effective
         OPEN passthru_stream_csr (l_base_stream_type_id, l_contract_start_date);
         FETCH passthru_stream_csr INTO l_yn;

         IF passthru_stream_csr%NOTFOUND THEN
            CLOSE passthru_stream_csr;
            okl_api.set_message(
                                G_APP_NAME,
                                G_NO_STRM_TMPL,
                                'CONTRACT_NUM',
                                l_contract_number, --||'/'||p_line_number,
                                'COL_NAME',
                                'PTH_BASE_STREAM_CODE, PTH_BASE_STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                p_pth_base_stream_code||', '||p_pth_base_stream_purpose_code
                              );
            RAISE party_pmnt_header_failed;
         ELSE
            CLOSE passthru_stream_csr;
         END IF;
      END IF;

      IF (p_pth_evg_stream_code IS NOT NULL AND
          p_pth_evg_stream_purpose_code IS NOT NULL) THEN
          -- Derive the stream type ID
         check_stream_type_code(
                                x_return_status    => l_return_status,
                                x_msg_count        => x_msg_count,
                                x_msg_data         => x_msg_data,
                                p_stream_type_code => p_pth_evg_stream_code,
                                p_stream_purpose   => p_pth_evg_stream_purpose_code,
                                x_id1              => l_evg_stream_type_id,
                                x_name             => l_stream_name
                               );
         IF (l_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_INVALID_VALUE,
                                 'CONTRACT_NUM',
                                 l_contract_number, --||'/'||TO_CHAR(p_line_number),
                                'COL_NAME',
                                'PTH_EVG_STREAM_CODE, PTH_EVG_STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                p_pth_evg_stream_code||', '||p_pth_evg_stream_purpose_code
                               );
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE party_pmnt_header_failed;
         END IF;

         -- Check if the stream type is ID is effective
         OPEN passthru_stream_csr (l_evg_stream_type_id, l_contract_start_date);
         FETCH passthru_stream_csr INTO l_yn;

         IF passthru_stream_csr%NOTFOUND THEN
            CLOSE passthru_stream_csr;
            okl_api.set_message(
                                G_APP_NAME,
                                G_NO_STRM_TMPL,
                                'CONTRACT_NUM',
                                l_contract_number, --||'/'||p_line_number,
                                'COL_NAME',
                                'PTH_EVG_STREAM_CODE, PTH_EVG_STREAM_PURPOSE_CODE',
                                'COL_VALUE',
                                p_pth_evg_stream_code||', '||p_pth_evg_stream_purpose_code
                              );
            RAISE party_pmnt_header_failed;
         ELSE
            CLOSE passthru_stream_csr;
         END IF;
      END IF;

      IF ((p_line_type = 'ASSET') AND (p_pth_evg_payout_basis IS NOT NULL)) THEN
          l_evg_pmnt_hdr.dnz_chr_id              := p_contract_id;
          l_evg_pmnt_hdr.cle_id                  := p_line_id;
          l_evg_pmnt_hdr.payout_basis            := p_pth_evg_payout_basis;
          l_evg_pmnt_hdr.payout_basis_formula    := p_pth_payout_basis_formula;
          l_evg_pmnt_hdr.passthru_term           := 'EVERGREEN';
          l_evg_pmnt_hdr.passthru_stream_type_id := l_evg_stream_type_id;

      ELSIF (p_line_type in ('SERVICE','FEE'))  THEN
         IF (p_pth_base_payout_basis IS NOT NULL) THEN
             l_base_pmnt_hdr.passthru_start_date     := p_pth_start_date;
             l_base_pmnt_hdr.dnz_chr_id              := p_contract_id;
             l_base_pmnt_hdr.cle_id                  := p_line_id;
             l_base_pmnt_hdr.payout_basis            := p_pth_base_payout_basis;
             l_base_pmnt_hdr.passthru_term           := 'BASE';
             l_base_pmnt_hdr.passthru_stream_type_id := l_base_stream_type_id;
	 END IF;

         IF (p_pth_evg_payout_basis IS NOT NULL) THEN
            l_evg_pmnt_hdr.dnz_chr_id              := p_contract_id;
            l_evg_pmnt_hdr.cle_id                  := p_line_id;
            l_evg_pmnt_hdr.payout_basis            := p_pth_evg_payout_basis;
            l_evg_pmnt_hdr.payout_basis_formula    := p_pth_payout_basis_formula;
            l_evg_pmnt_hdr.passthru_term           := 'EVERGREEN';
            l_evg_pmnt_hdr.passthru_stream_type_id := l_evg_stream_type_id;

	 END IF;

      ELSIF (p_line_type IS NULL) THEN -- Evergreen pth at contract header
            l_evg_pmnt_hdr.dnz_chr_id              := p_contract_id;
            l_evg_pmnt_hdr.cle_id                  := NULL;
            l_evg_pmnt_hdr.payout_basis            := p_pth_evg_payout_basis;
            l_evg_pmnt_hdr.payout_basis_formula    := p_pth_payout_basis_formula;
            l_evg_pmnt_hdr.passthru_term           := 'EVERGREEN';
            l_evg_pmnt_hdr.passthru_stream_type_id := l_evg_stream_type_id;
      END IF;

      IF (l_base_pmnt_hdr.dnz_chr_id IS NOT NULL) THEN
         l_counter := l_counter + 1;
         l_pmnt_hdr_tbl_in(l_counter) := l_base_pmnt_hdr;
      END IF;

      IF (l_evg_pmnt_hdr.dnz_chr_id IS NOT NULL) THEN
         l_counter := l_counter + 1;
         l_pmnt_hdr_tbl_in(l_counter) := l_evg_pmnt_hdr;
      END IF;

      IF (l_pmnt_hdr_tbl_in.COUNT > 0) THEN
         okl_party_payments_pvt.create_party_payment_hdr(
                                                         p_api_version    => 1.0,
                                                         x_return_status  => x_return_status,
                                                         x_msg_count      => x_msg_count,
                                                         x_msg_data       => x_msg_data,
                                                         p_pphv_tbl       => l_pmnt_hdr_tbl_in,
                                                         x_pphv_tbl       => l_pmnt_hdr_tbl_out
						        );
	  x_party_pmnt_hdr_tbl := l_pmnt_hdr_tbl_out;

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            RAISE party_pmnt_header_failed;
         END IF;
      END IF;

      RETURN;

   EXCEPTION
      WHEN party_pmnt_header_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;

   END create_party_payment_hdr;

------------------------------------------------------------------------------
-- PROCEDURE process_other_line
-- It process SERVICE, FEE lines and calls API to create reecord in respective tables and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  get_link_asset_id
--  get_lse_id
--  get_inventory_org_item_id
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE process_other_line(
                                  x_return_status     OUT NOCOPY VARCHAR2,
                                  x_msg_count         OUT NOCOPY NUMBER,
                                  x_msg_data          OUT NOCOPY VARCHAR2,
                                  p_contract_number   IN  okl_header_interface.contract_number_old%TYPE,
                                  p_chr_id            IN  okc_k_headers_v.id%TYPE,
                                  p_line_number       IN  okl_lines_interface.line_number%TYPE,
                                  p_line_type         IN  okl_lines_interface.line_type%TYPE,
                                  p_line_type_prev    IN  okl_lines_interface.line_type%TYPE,
                                  p_inv_item_id       IN  okl_lines_interface.inventory_item_id%TYPE,
                                  p_inv_org_id        IN  okl_header_interface.inventory_organization_id%TYPE,
                                  p_line_amount       IN  okl_lines_interface.amount%TYPE,
                                  p_link_asset_amount IN  okl_lines_interface.link_asset_amount%TYPE,
                                  p_init_direct_cost  IN  okl_lines_interface.initial_direct_cost%TYPE,
                                  p_fee_code          IN  okl_lines_interface.fee_code%TYPE,
                                  p_stream_purpose    IN  okl_lines_interface.stream_purpose_code%TYPE,
                                  p_fee_type          IN  okl_lines_interface.fee_type%TYPE,
                                  p_asset_number      IN  okl_lines_interface.asset_number%TYPE,
                                  p_currency_code     IN  okl_lines_interface.currency_code%TYPE,
                                  p_usage_item_name   IN  okl_lines_interface.usage_item_name%TYPE,
                                  p_usage_item_id     IN  okl_lines_interface.usage_item_id%TYPE,
                                  p_header_start_date IN  DATE,
                                  p_header_end_date   IN  DATE,
                                  p_line_start_date   IN  DATE,
                                  p_line_end_date     IN  DATE,
                                  p_inv_item_id_prev  IN  okl_lines_interface.inventory_item_id%TYPE,
                                  p_term_quote_id     IN  OKL_LINES_INTERFACE.TERMINATION_QUOTE_ID%TYPE,
                                  p_term_quote_number IN  OKL_LINES_INTERFACE.TERMINATION_QUOTE_NUMBER%TYPE,
                                  x_inv_item_id_prev  OUT NOCOPY okl_lines_interface.inventory_item_id%TYPE,
                                  p_cle_id            IN  okl_k_lines_v.id%TYPE,
                                  x_cle_id            OUT NOCOPY okc_k_lines_v.id%TYPE,
                                  x_sub_cle_id        OUT NOCOPY okc_k_lines_v.id%TYPE,       -- Bug# 3110115
                                  p_new_line_flag     IN  okl_lines_interface.explicit_new_line_flag%TYPE,
                                  p_pth_base_payout_basis        IN okl_lines_interface.pth_base_payout_basis%TYPE,
                                  p_pth_base_stream_code         IN okl_lines_interface.pth_base_stream_code%TYPE,
                                  p_pth_base_stream_purpose_code IN okl_lines_interface.pth_base_stream_purpose_code%TYPE,
                                  p_pth_start_date               IN okl_lines_interface.pth_start_date%TYPE,
                                  p_pth_evg_payout_basis         IN okl_lines_interface.pth_evg_payout_basis%TYPE,
                                  p_pth_payout_basis_formula     IN okl_lines_interface.pth_payout_basis_formula%TYPE,
                                  p_pth_evg_stream_code          IN okl_lines_interface.pth_evg_stream_code%TYPE,
                                  p_pth_evg_stream_purpose_code  IN okl_lines_interface.pth_evg_stream_purpose_code%TYPE,
                                  p_fee_purpose_code             IN okl_lines_interface.fee_purpose_code%TYPE
                                 ) IS
   l_proc_name     VARCHAR2(35) := 'PROCESS_OTHER_LINE';
   x_lse_id        okc_line_styles_v.id%TYPE;
   x_inv_org_id    NUMBER;
   x_inv_item_id   NUMBER;
   x_asset_line_id okc_k_lines_v.id%TYPE;
   l_lty_code      okc_line_styles_v.lty_code%TYPE;
   l_link_lty_code okc_line_styles_v.lty_code%TYPE;
   l_link_top_code VARCHAR2(35);
   x_stream_type_id NUMBER;
   x_usage_item_id NUMBER;
   x_usage_id2     NUMBER;

   p_klev_rec      klev_rec_type;
   p_clev_rec      clev_rec_type;
   x_klev_rec      klev_rec_type;
   x_clev_rec      clev_rec_type;

   l_klev_rec      klev_rec_type;
   l_clev_rec      clev_rec_type;
   l_capital_amount okl_k_lines.capital_amount%type;

   p_cimv_rec      okl_okc_migration_pvt.cimv_rec_type;
   x_cimv_rec      okl_okc_migration_pvt.cimv_rec_type;

   service_failed  EXCEPTION;
   l_progress      VARCHAR2(10) := '100.1';

   l_fee_types_rec fee_types_rec_type;
   x_fee_types_rec fee_types_rec_type;

   x_term_quote_id NUMBER;

   CURSOR fee_vendor_csr (p_contract_number OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                          p_line_number     OKL_LINES_INTERFACE.LINE_NUMBER%TYPE) IS
   SELECT fees_vendor_name,
          fees_vendor_id
   FROM   okl_party_roles_interface
   WHERE  contract_number_old = p_contract_number
   AND    line_number         = p_line_number;

   CURSOR capital_amount(p_line_id OKL_K_LINES.ID%TYPE)
   IS
             SELECT nvl(capital_amount , 0)
             from   okl_k_lines
             where id = p_line_id;

   CURSOR service_item_csr (p_inv_item_id OKX_SYSTEM_ITEMS_V.ID1%TYPE,
                            p_inv_org_id  OKX_SYSTEM_ITEMS_V.ID2%TYPE) IS
   SELECT name
   FROM   okx_system_items_v
   WHERE  id1 = p_inv_item_id
   AND    id2 = p_inv_org_id;

   l_fee_vendor_name OKL_PARTY_ROLES_INTERFACE.FEES_VENDOR_NAME%TYPE;
   l_fee_vendor_id   OKL_PARTY_ROLES_INTERFACE.FEES_VENDOR_ID%TYPE;

   l_service_item_name OKX_SYSTEM_ITEMS_V.NAME%TYPE;

   -- passthrough
   x_party_pmnt_hdr_tbl_out pphv_tbl_type;
   l_counter                NUMBER;
   -- passthrough

   l_stream_name           OKL_STRMTYP_SOURCE_V.NAME%TYPE;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      p_klev_rec := NULL;
      p_clev_rec := NULL;

      -- Set line_type based parameters

      IF (p_line_type = 'SERVICE') THEN             -- SERVICE line
         l_lty_code      := 'SOLD_SERVICE';
         l_link_lty_code := 'LINK_SERV_ASSET';
         l_link_top_code := 'OKX_SERVICE';
      ELSIF (p_line_type = 'FEE') THEN              -- FEE line
         l_lty_code      := 'FEE';
         l_link_lty_code := 'LINK_FEE_ASSET';
         l_link_top_code := 'OKL_STRMTYP';
      ELSIF (p_line_type = 'USAGE') THEN            -- USAGE line
         l_lty_code      := 'USAGE';
         l_link_lty_code := 'LINK_USAGE_ASSET';
         l_link_top_code := NULL; --'OKL_USAGE';
      END IF;

      l_progress := '100.2';
      x_inv_item_id := p_inv_item_id;
      x_inv_org_id  := p_inv_org_id;

      IF (p_line_type = 'FEE') THEN

         check_stream_type_code(
                                x_return_status    => x_return_status,
                                x_msg_count        => x_msg_count,
                                x_msg_data         => x_msg_data,
                                p_stream_type_code => p_fee_code,
                                p_stream_purpose   => p_stream_purpose,
                                x_id1              => x_stream_type_id,
                                x_name             => l_stream_name
                               );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE service_failed;
         END IF;


         --
         -- UDS 10/27
         -- Check whether the stream is present in template for this contract
         --

         x_inv_item_id := x_stream_type_id;

/* Added on check_line_literal
         validate_fee_type(
                           x_return_status   => x_return_status,
                           p_fee_type        => p_fee_type
                          );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'COL_NAME',
                                'FEE_TYPE',
                                'COL_VALUE',
                                p_fee_type
                               );
            RAISE service_failed;
         END IF;
*/

      ELSIF (p_line_type = 'USAGE') THEN
         get_usage_item_id(
                           x_return_status   => x_return_status,
                           p_usage_item_name => p_usage_item_name,
                           p_usage_item_id   => p_usage_item_id,
                           p_org_id          => p_inv_org_id,
                           x_usage_item_id   => x_usage_item_id,
                           x_usage_id2       => x_usage_id2
                          );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'COL_NAME',
                                'USAGE_ITEM_NAME, ID',
                                'COL_VALUE',
                                p_usage_item_name||', '||p_usage_item_id
                               );
            RAISE service_failed;
         END IF;

         x_inv_item_id := x_usage_item_id;
      END IF;

      l_progress := '100.3';

      debug_message('------>Line number: '||p_line_number);
      debug_message('------>Prev Line type: '||p_line_type_prev);
      debug_message('------>Curr Line type: '||p_line_type);
      debug_message('------>Prec Item id  : '||p_inv_item_id_prev);
      debug_message('------>Curr Item id  : '||x_inv_item_id);
      -- Dont' create Top Line for same Item and Line type, create link_asset line only
      -- Bug 4092764: creaet top line if explicit_new_line_flag = 'Y'
      --
      -- Check for validity of the same flag
      -- If item and/or line type does not match
      -- but explicit_new_line_flag = 'N'
      -- raise error

      IF ( (p_inv_item_id_prev <> x_inv_item_id
            OR
            p_line_type_prev <> p_line_type)
           AND
           p_new_line_flag = 'N') THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_NEW_LINE_REQ,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'LINE_TYPE',
                                p_line_type||'/'||p_line_number,
                                'NEW_LINE_FLAG',
                                p_new_line_flag
                               );
            RAISE service_failed;
      END IF;

      IF (p_inv_item_id_prev <> x_inv_item_id
          OR
          p_line_type_prev <> p_line_type
          OR
          NVL(p_new_line_flag, 'N') = 'Y'
         ) THEN -- for same inventory item create link asset line only

      --create a blank TOP line

        get_lse_id(
                   x_return_status   => x_return_status,
                   x_msg_count       => x_msg_count,
                   x_msg_data        => x_msg_data,
                   p_contract_number => p_contract_number,
                   p_line_number     => p_line_number,
                   p_lty_code        => l_lty_code,
                   p_top_line_lty_code => NULL,
                   x_lse_id          => x_lse_id
                   );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            RAISE service_failed;
         END IF;
         p_clev_rec.chr_id              := p_chr_id;
         p_clev_rec.dnz_chr_id          := p_chr_id;
         p_clev_rec.lse_id              := x_lse_id;
         p_clev_rec.line_number         := p_line_number;
         p_clev_rec.sts_code            := 'NEW';
         p_clev_rec.exception_yn        := 'N';
         p_clev_rec.display_sequence    := 1;
         p_clev_rec.currency_code       := p_currency_code;
         p_klev_rec.amount              := p_line_amount;
         p_klev_rec.initial_direct_cost := p_init_direct_cost;
         p_klev_rec.fee_type            := p_fee_type;

         --
         -- Populate capital amount for CAPITALIZED FEE line
         -- Bug 3449762
         --
         IF ( p_line_type = 'FEE'
              AND
              p_fee_type = 'CAPITALIZED' ) THEN
              p_klev_rec.capital_amount := p_line_amount;
         END IF; -- capitalized fee

         IF ( p_line_type = 'FEE'
              AND
              p_klev_rec.initial_direct_cost IS NOT NULL
              AND
              p_klev_rec.initial_direct_cost > p_klev_rec.amount) THEN

            OKL_API.SET_MESSAGE(
                                G_APP_NAME,
                                G_INIT_DIRC_COST,
                                'CONTRACT_NUM',
                                p_contract_number,
                                'LINE_NUM',
                                p_line_number
                               );

            x_return_status := OKL_API.G_RET_STS_ERROR;
            RAISE service_failed;

         END IF;

         p_clev_rec.start_date := NVL(p_line_start_date, p_header_start_date);
         p_clev_rec.end_date   := NVL(p_line_end_date,p_header_end_date);

/*
         --
         -- Rollover Fee line validation
         --
         IF (p_line_type = 'FEE'
             AND
             p_fee_type = 'ROLLOVER') THEN

             validate_term_quote(
                                 x_return_status     => x_return_status,
                                 x_msg_count         => x_msg_count,
                                 x_msg_data          => x_msg_data,
                                 p_chr_id            => p_chr_id,
                                 p_contract_number   => p_contract_number,
                                 p_line_number       => p_line_number,
                                 p_term_quote_id     => p_term_quote_id,
                                 p_term_quote_number => p_term_quote_number,
                                 x_term_quote_id     => x_term_quote_id
                                );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                RAISE service_failed;
             END IF;

             p_klev_rec.qte_id := x_term_quote_id;

         END IF; -- end Rollover
*/
         -- service name
         IF (p_line_type = 'SERVICE') THEN
              l_service_item_name := NULL;

              OPEN service_item_csr(p_inv_item_id,
                                    p_inv_org_id);
              FETCH service_item_csr INTO l_service_item_name;
              CLOSE service_item_csr;

              p_clev_rec.name := l_service_item_name;
         ELSIF (p_line_type = 'FEE') THEN
              p_klev_rec.fee_purpose_code := p_fee_purpose_code;
              p_clev_rec.name := l_stream_name;
         END IF;
         -- Fee type validation
         IF (p_line_type = 'FEE') THEN


              debug_message('------>Validate Fee TYpe');

              l_fee_types_rec.dnz_chr_id          := p_chr_id;
              l_fee_types_rec.fee_type            := p_fee_type;
              l_fee_types_rec.item_id1            := x_inv_item_id;
              l_fee_types_rec.item_id2            := '#';
              l_fee_types_rec.effective_from      := p_clev_rec.start_date;
              l_fee_types_rec.effective_to        := p_clev_rec.end_date;
              l_fee_types_rec.amount              := p_line_amount;
              l_fee_types_rec.initial_direct_cost := p_init_direct_cost;

              l_fee_vendor_name := NULL;
              l_fee_vendor_id   := NULL;

              OPEN fee_vendor_csr(p_contract_number,
                                  p_line_number);
              FETCH fee_vendor_csr INTO l_fee_vendor_name,
                                        l_fee_vendor_id;
              CLOSE fee_vendor_csr;

              IF (l_fee_vendor_name IS NOT NULL) THEN

                  get_vendor_id (
                       x_return_status     => x_return_status,
                       x_msg_count         => x_msg_count,
                       x_msg_data          => x_msg_data,
                       p_contract_number   => p_contract_number,
                       p_line_number       => p_line_number,
                       x_vendor_id         => l_fee_vendor_id,
                       p_vendor_name       => l_fee_vendor_name
                      );

                  IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                     RAISE service_failed;
                  END IF;
              END IF;

              l_fee_types_rec.party_id1 := l_fee_vendor_id;
              l_fee_types_rec.party_id2 := '#';

              l_fee_types_rec.roll_qt   := p_term_quote_number;
              l_fee_types_rec.qte_id    := p_term_quote_id;

              okl_maintain_fee_pvt.validate_fee_type(
                        p_api_version    => 1.0,
                        p_init_msg_list  => OKL_API.G_FALSE,
                        x_return_status  => x_return_status,
                        x_msg_count      => x_msg_count,
                        x_msg_data       => x_msg_data,
                        p_fee_types_rec  => l_fee_types_rec,
                        x_fee_types_rec  => x_fee_types_rec
                       );

              IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 RAISE service_failed;
              END IF;

              debug_message('=====> Qte ID: '||x_fee_types_rec.qte_id);
              p_klev_rec.qte_id := x_fee_types_rec.qte_id;

         END IF; -- fee type validation

         okl_contract_pub.create_contract_line(
                                               p_api_version   => 1.0,
                                               p_init_msg_list => OKL_API.G_FALSE,
                                               x_return_status => x_return_status,
                                               x_msg_count     => x_msg_count,
                                               x_msg_data      => x_msg_data,
                                               p_clev_rec      => p_clev_rec,
                                               p_klev_rec      => p_klev_rec,
                                               x_clev_rec      => x_clev_rec,
                                               x_klev_rec      => x_klev_rec
                                              );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            RAISE service_failed;
         END IF;

         x_cle_id := x_clev_rec.id;
      l_progress := '100.4';

         -- create item line to link TOP line, created above, to MTL_SYSTEM_ITEMS

         p_cimv_rec                   := NULL;
         p_cimv_rec.cle_id            := x_cle_id;
         p_cimv_rec.chr_id            := p_chr_id;
         p_cimv_rec.dnz_chr_id        := p_chr_id;

         IF (p_line_type = 'USAGE') THEN
            p_cimv_rec.object1_id1       := NULL;
            p_cimv_rec.object1_id2       := NULL;
            p_cimv_rec.jtot_object1_code := NULL;
         ELSIF (p_line_type = 'FEE') THEN
            p_cimv_rec.object1_id1       := x_stream_type_id;
            p_cimv_rec.object1_id2       := '#';
            p_cimv_rec.jtot_object1_code := l_link_top_code;
         ELSE
            p_cimv_rec.object1_id1       := x_inv_item_id;
            p_cimv_rec.object1_id2       := x_inv_org_id;
            p_cimv_rec.jtot_object1_code := l_link_top_code;
         END IF;

         p_cimv_rec.exception_yn := 'N';

         OKL_OKC_MIGRATION_PVT.create_contract_item(
                                                    p_api_version   => 1.0,
                                                    p_init_msg_list => OKL_API.G_FALSE,
                                                    x_return_status => x_return_status,
                                                    x_msg_count     => x_msg_count,
                                                    x_msg_data	 => x_msg_data,
                                                    p_cimv_rec	 => p_cimv_rec,
                                                    x_cimv_rec	 => x_cimv_rec
                                                   );
      l_progress := '100.5';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE service_failed;
         END IF;

         debug_message('Top line created for line# : '|| p_line_number);
         -- passthrough
         IF ((p_pth_base_payout_basis is NOT NULL) OR (p_pth_evg_payout_basis is NOT NULL)) THEN
	    IF ((p_line_type = 'SERVICE') OR
	        ((p_line_type = 'FEE') AND (p_fee_type = 'PASSTHROUGH'))) THEN
               debug_message('------>Create party payment starts for SERVICE / FEE : ' || p_line_type || '/'|| p_line_number);
               create_party_payment_hdr(
                                        x_return_status                   => x_return_status,
                                        x_msg_count                       => x_msg_count,
                                        x_msg_data                        => x_msg_data,
                                        p_contract_id                     => x_clev_rec.dnz_chr_id,
                                        p_line_id                         => x_clev_rec.id,
                                        p_line_type                       => p_line_type,
                                        p_pth_start_date                  => p_pth_start_date,
                                        p_pth_base_payout_basis           => p_pth_base_payout_basis,
                                        p_pth_base_stream_code            => p_pth_base_stream_code,
                                        p_pth_base_stream_purpose_code    => p_pth_base_stream_purpose_code,
                                        p_pth_evg_payout_basis            => p_pth_evg_payout_basis,
                                        p_pth_payout_basis_formula        => p_pth_payout_basis_formula,
                                        p_pth_evg_stream_code             => p_pth_evg_stream_code,
                                        p_pth_evg_stream_purpose_code     => p_pth_evg_stream_purpose_code,
                                        x_party_pmnt_hdr_tbl              => x_party_pmnt_hdr_tbl_out
                                       );
               debug_message('------>Create party payment ends '||x_return_status);
               IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                  x_return_status := OKL_API.G_RET_STS_ERROR;
                  RAISE service_failed;
               END IF;
         END IF;
	    IF (x_party_pmnt_hdr_tbl_out.COUNT > 0 )THEN
	       l_counter := x_party_pmnt_hdr_tbl_out.FIRST;
	       LOOP
                  IF (x_party_pmnt_hdr_tbl_out(l_counter).passthru_term = 'BASE') THEN
		     g_base_pmnt_hdr := x_party_pmnt_hdr_tbl_out(l_counter);
		  ELSIF (x_party_pmnt_hdr_tbl_out(l_counter).passthru_term = 'EVERGREEN') THEN
		     g_evg_pmnt_hdr := x_party_pmnt_hdr_tbl_out(l_counter);
		  END IF;
	       EXIT WHEN (l_counter = x_party_pmnt_hdr_tbl_out.LAST);
               l_counter := x_party_pmnt_hdr_tbl_out.NEXT(l_counter);
	       END LOOP;
            END IF;
	 END IF;
     ELSE
         x_cle_id := p_cle_id; -- use previous TOP line ID
     END IF; --inv_item_id


     IF (p_asset_number IS NOT NULL) THEN

      -- create link asset line only in case asset link is present
      -- and link it to blank TOP line
      get_lse_id(
                x_return_status   => x_return_status,
                x_msg_count       => x_msg_count,
                x_msg_data        => x_msg_data,
                p_contract_number => p_contract_number,
                p_line_number     => p_line_number,
                p_lty_code        => l_link_lty_code,
                p_top_line_lty_code => l_lty_code,
                x_lse_id          => x_lse_id
               );
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        RAISE service_failed;
      END IF;

      p_clev_rec.cle_id           := x_cle_id;
      p_clev_rec.chr_id           := NULL;
      p_clev_rec.dnz_chr_id       := p_chr_id;
      p_clev_rec.lse_id           := x_lse_id;
      p_clev_rec.line_number      := p_line_number;
      p_clev_rec.name             := p_asset_number;
      p_clev_rec.sts_code         := 'NEW';
      p_clev_rec.exception_yn     := 'N';
      p_clev_rec.display_sequence := 1;
/*
      IF(p_line_start_date IS NULL) THEN
         p_clev_rec.start_date := p_line_start_date;
      ELSE
         p_clev_rec.start_date := p_header_start_date;
      END IF;
*/
      p_clev_rec.start_date := NVL(p_line_start_date, p_header_start_date);
      p_clev_rec.end_date   := NVL(p_line_end_date,p_header_end_date);
      p_clev_rec.currency_code    := p_currency_code;

      --Bug 4688098
      -- p_klev_rec.capital_amount            := p_link_asset_amount;
      IF ( p_line_type = 'FEE' AND  p_fee_type = 'CAPITALIZED' )
	 OR ( p_line_type = 'SERVICE')
	  THEN
         p_klev_rec.capital_amount            := p_link_asset_amount;
      ELSE
       p_klev_rec.amount :=p_link_asset_amount;
      END IF ;
      --Bug 4688098 : end


      okl_contract_pub.create_contract_line(
                                            p_api_version   => 1.0,
                                            p_init_msg_list => OKL_API.G_FALSE,
                                            x_return_status => x_return_status,
                                            x_msg_count     => x_msg_count,
                                            x_msg_data      => x_msg_data,
                                            p_clev_rec      => p_clev_rec,
                                            p_klev_rec      => p_klev_rec,
                                            x_clev_rec      => x_clev_rec,
                                            x_klev_rec      => x_klev_rec
                                           );
      l_progress := '100.6';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         RAISE service_failed;
      END IF;

      x_sub_cle_id := x_clev_rec.id; -- ID of the sub-line, Bug# 3110115

      --link this line to financial asset line
      get_link_asset_id(
                        x_return_status   => x_return_status,
                        x_msg_count       => x_msg_count,
                        x_msg_data        => x_msg_data,
                        p_asset_number    => p_asset_number,
                        p_contract_number => p_contract_number,
                        p_chr_id          => p_chr_id,
                        p_line_number     => p_line_number,
                        x_asset_line_id   => x_asset_line_id
                       );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         RAISE service_failed;
      END IF;

      --
      -- Validate Usage Item here
      -- check for association between Usage Item and Inventory Item for USAGE line
      --
      IF (p_line_type = 'USAGE') THEN
         validate_usage_item_assoc(
                                   x_return_status   => x_return_status,
                                   x_msg_count       => x_msg_count,
                                   x_msg_data        => x_msg_data,
                                   p_contract_number => p_contract_number,
                                   p_line_number     => p_line_number,
                                   p_asset_line_id   => x_asset_line_id,
                                   p_usage_item_name => p_usage_item_name,
                                   p_usage_item_id   => x_usage_item_id,
                                   p_inv_org_id      => x_inv_org_id
                                  );
      l_progress := '100.7';
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE  service_failed;
         END IF;
      END IF;

      p_cimv_rec                   := NULL;
      p_cimv_rec.cle_id            := x_clev_rec.id;
      p_cimv_rec.chr_id            := p_chr_id;
      p_cimv_rec.dnz_chr_id        := p_chr_id;
      p_cimv_rec.object1_id1       := x_asset_line_id;
      p_cimv_rec.object1_id2       := '#';
      p_cimv_rec.jtot_object1_code := 'OKX_COVASST';
      p_cimv_rec.exception_yn      := 'N';

      okl_okc_migration_pvt.create_contract_item(
                                                 p_api_version   => 1.0,
                                                 p_init_msg_list => OKL_API.G_FALSE,
                                                 x_return_status => x_return_status,
                                                 x_msg_count     => x_msg_count,
                                                 x_msg_data	 => x_msg_data,
                                                 p_cimv_rec	 => p_cimv_rec,
                                                 x_cimv_rec	 => x_cimv_rec
                                                );
      l_progress := '100.8';
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          x_return_status := OKL_API.G_RET_STS_ERROR;
          RAISE service_failed;
      END IF;

      -- Bug 4190051 Start

         IF ( p_line_type = 'FEE' AND p_fee_type = 'CAPITALIZED' ) THEN
           null; -- Update asset x_asset_line_id with p_link_asset_amount
           l_clev_rec.id                  := x_asset_line_id;
           l_klev_rec.id                  := x_asset_line_id;

           OPEN  capital_amount(x_asset_line_id);
           FETCH capital_amount into l_capital_amount;
           CLOSE capital_amount;

           /*begin
             select nvl(capital_amount , 0)
             into   l_capital_amount
             from   okl_k_lines
             where id = x_asset_line_id;
           end;*/
           l_klev_rec.capital_amount := p_link_asset_amount + l_capital_amount;

           okl_contract_pub.update_contract_line
                           (p_api_version    => 1.0,
                            p_init_msg_list => OKL_API.G_FALSE,
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_clev_rec       => l_clev_rec,
                            p_klev_rec       => l_klev_rec,
                            x_clev_rec       => x_clev_rec,
                            x_klev_rec       => x_klev_rec);
           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_ERROR;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
             RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
           END IF;

         END IF; -- capitalized fee

      -- Bug 4190051 Finish

      END IF; -- p_asset_number IS NOT NULL

      IF (p_line_type = 'FEE') THEN
         x_inv_item_id_prev := x_stream_type_id; -- to keep login in-line with SERVICE and USAGE line
      ELSIF (p_line_type = 'USAGE') THEN
         x_inv_item_id_prev := x_usage_item_id;
      ELSE
         x_inv_item_id_prev := x_inv_item_id; --copy current inventory item id to _prev
      END IF;

      RETURN;

   EXCEPTION
      WHEN service_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;

      WHEN OTHERS THEN
         debug_message(l_progress);

         okl_api.set_message(
                             G_APP_NAME,
                             G_UNEXPECTED_ERROR,
                             'OKL_SQLCODE',
                             SQLCODE,
                             'OKL_SQLERRM',
                             SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                            );
         x_return_status := OKL_API.G_RET_STS_ERROR;

   END process_other_line;

------------------------------------------------------------------------------
-- PROCEDURE get_qcl_id
-- It returns qcl_id for QA checker to run
-- Calls:
-- Called By:
------------------------------------------------------------------------------

   PROCEDURE get_qcl_id(
                        x_return_status OUT NOCOPY VARCHAR2,
                        p_qcl_name      IN  VARCHAR2,
                        x_qcl_id        OUT NOCOPY NUMBER) IS

   CURSOR qcl_csr (p_qcL_name VARCHAR2) IS
   SELECT id
   FROM   okc_qa_check_lists_v
   WHERE  name = p_qcl_name;

   l_id   NUMBER;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;

      OPEN qcl_csr(p_qcl_name);
      FETCH qcl_csr INTO l_id;
      CLOSE qcl_csr;

      x_qcl_id := l_id;

   END get_qcl_id;

------------------------------------------------------------------------------
-- PROCEDURE validate_credit_line
-- It validates credit line against customer and customer account of the
-- contract to be imported
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE validate_credit_line(
                              x_return_status           OUT NOCOPY VARCHAR2,
                              x_msg_count               OUT NOCOPY NUMBER,
                              x_msg_data                OUT NOCOPY VARCHAR2,
                              p_contract_number         IN  OKC_K_HEADERS_V.CONTRACT_NUMBER%TYPE,
                              p_template_id             IN  NUMBER,
                              p_credit_line_id          IN  NUMBER,
                              p_customer_id             IN  OKL_HEADER_INTERFACE.CUSTOMER_ID%TYPE,
                              p_customer_number         IN  OKL_HEADER_INTERFACE.CUSTOMER_NUMBER%TYPE,
                              p_customer_account_id     IN  OKL_HEADER_INTERFACE.CUSTOMER_ACCOUNT_ID%TYPE,
                              p_customer_account_number IN  OKL_HEADER_INTERFACE.CUSTOMER_ACCOUNT_NUMBER%TYPE,
                              p_start_date              IN  OKL_HEADER_INTERFACE.START_DATE%TYPE,
                              p_template_start_date     IN  OKL_HEADER_INTERFACE.START_DATE%TYPE
                             ) IS

   CURSOR customer_csr (p_customer_number OKX_PARTIES_V.PARTY_NUMBER%TYPE,
                        p_customer_id     OKX_PARTIES_V.ID1%TYPE) IS
   SELECT id1
   FROM   okx_parties_v
   WHERE  ((party_number = p_customer_number
            AND
            p_customer_number IS NOT NULL
           )
           OR
           (id1          = p_customer_id
            AND
            p_customer_id IS NOT NULL
           )
          );

   CURSOR temp_st_dt_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE) IS
   SELECT start_date
   FROM   okc_k_headers_v
   WHERE  id = p_chr_id;

   CURSOR temp_cust_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE) IS
   --Fixed Bug # 5484903
   SELECT object1_id1
   FROM   okc_k_party_roles_b
   WHERE  dnz_chr_id  = p_chr_id
      AND    chr_id          = dnz_chr_id
      AND    jtot_object1_code = 'OKX_PARTY'
      AND    rle_code          = 'LESSEE' ;

   CURSOR temp_cust_acc_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE) IS
   SELECT cust_acct_id
   FROM   okc_k_headers_b
   WHERE  id = p_chr_id;

   CURSOR credit_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE,
                      p_main_start_date OKC_K_HEADERS_V.START_DATE%TYPE) IS
   SELECT 'Y'
   FROM   okc_k_headers_v
   WHERE  id       = p_chr_id
   AND    end_date >= p_main_start_date;

   l_customer_id                OKX_PARTIES_V.ID1%TYPE;
   l_customer_account_id        OKX_CUSTOMER_ACCOUNTS_V.ID1%TYPE;
   l_credit_customer_id         OKX_PARTIES_V.ID1%TYPE;
   l_credit_customer_account_id OKX_CUSTOMER_ACCOUNTS_V.ID1%TYPE;
   l_rule_count                 NUMBER;
   l_rulv_tbl                   rulv_tbl_type;
   l_ok                         VARCHAR2(1) := '?';

   credit_line_failed EXCEPTION;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
/* 4414408
      IF (p_customer_id IS NULL
          AND
          p_customer_number IS NULL) THEN

          -- get from template

          l_customer_id := NULL;
          OPEN temp_cust_csr(p_template_id);
          FETCH temp_cust_csr INTO l_customer_id;
          CLOSE temp_cust_csr;

      ELSE
          l_customer_id := NULL;
          OPEN customer_csr (p_customer_number,
                             p_customer_id);
          FETCH customer_csr INTO l_customer_id;
          CLOSE customer_csr;

      END IF;
*/
      l_customer_id := p_customer_id;
      debug_message('----->customer: '||l_customer_id);

/* 4414408
      IF (p_customer_account_id IS NULL
          AND
          p_customer_account_number IS NULL) THEN

          -- get from template

          l_rule_count          := 0;
          l_customer_account_id := NULL;

-- Rule Migration
--          get_contract_rules(
--                             x_return_status  => x_return_status,
--                             x_msg_count      => x_msg_count,
--                             x_msg_data       => x_msg_data,
--                             p_chr_id         => p_template_id,
--                             p_cle_id         => NULL,
--                             p_rgd_code       => 'LACAN',
--                             p_rule_code      => 'CAN',
--                             x_rulv_tbl       => l_rulv_tbl,
--                             x_rule_count     => l_rule_count
--                            );

--          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
--             RAISE credit_line_failed;
--          END IF;

--          IF (l_rule_count > 0) THEN
--             l_customer_account_id := TO_NUMBER(l_rulv_tbl(1).object1_id1);
--          END IF;


      ELSE
          get_customer_account_id(
                           x_return_status           => x_return_status,
                           x_msg_count               => x_msg_count,
                           x_msg_data                => x_msg_data,
                           p_contract_number         => p_contract_number,
                           p_customer_account_id     => p_customer_account_id,
                           p_customer_account_number => p_customer_account_number,
                           x_customer_account_id     => l_customer_account_id
                          );

          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE credit_line_failed;
          END IF;
      END IF;
*/
      l_customer_account_id := p_customer_account_id;
      debug_message('----->customer Acc: '||l_customer_account_id);
      --
      -- get customer_id and customer_account_id
      -- for credit line contract
      --

      l_credit_customer_id := NULL;
      OPEN temp_cust_csr(p_credit_line_id);
      FETCH temp_cust_csr INTO l_credit_customer_id;
      CLOSE temp_cust_csr;

      l_rule_count          := 0;
      l_credit_customer_account_id := NULL;

      OPEN temp_cust_acc_csr (p_credit_line_id);
      FETCH temp_cust_acc_csr INTO l_credit_customer_account_id;
      CLOSE temp_cust_acc_csr;

/* Rule migration
      get_contract_rules(
                         x_return_status  => x_return_status,
                         x_msg_count      => x_msg_count,
                         x_msg_data       => x_msg_data,
                         p_chr_id         => p_credit_line_id,
                         p_cle_id         => NULL,
                         p_rgd_code       => 'LACAN',
                         p_rule_code      => 'CAN',
                         x_rulv_tbl       => l_rulv_tbl,
                         x_rule_count     => l_rule_count
                        );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         RAISE credit_line_failed;
      END IF;

      IF (l_rule_count > 0) THEN
         l_credit_customer_account_id := TO_NUMBER(l_rulv_tbl(1).object1_id1);
      END IF;
*/

      debug_message('----->Credit customer: '||l_credit_customer_id||', '||l_credit_customer_account_id);

      IF (l_customer_id <> NVL(l_credit_customer_id, -1)
          OR
          l_customer_account_id <> NVL(l_credit_customer_account_id, -1)) THEN
          RAISE credit_line_failed;
      END IF;

      -- check for end_date on credit line contract
      l_ok := '?';
      OPEN credit_csr (p_credit_line_id,
                       nvl(p_start_date,p_template_start_date));
      FETCH credit_csr INTO l_ok;
      CLOSE credit_csr;

      debug_message('Flag: '||l_ok);

      IF (l_ok <> 'Y') THEN
          RAISE credit_line_failed;
      END IF;

   EXCEPTION
      WHEN credit_line_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
   END validate_credit_line;

------------------------------------------------------------------------------
-- PROCEDURE contract_after_yield
-- Call this process after SuperTrump returns with yield. Call this process
-- from OKL_LA_STREAM_PVT.UPDATE_CONTRACT_YIELD for every contract
-- Calls:
-- Called By:
------------------------------------------------------------------------------
   PROCEDURE contract_after_yield(
                                  p_api_version   IN NUMBER,
                                  p_init_msg_list IN VARCHAR2,
                                  x_return_status OUT NOCOPY VARCHAR2,
                                  x_msg_count     OUT NOCOPY NUMBER,
                                  x_msg_data      OUT NOCOPY VARCHAR2,
                                  p_chr_id        IN  OKC_K_HEADERS_V.ID%TYPE
                                 ) IS

   l_api_name    VARCHAR2(35)    := 'contract_after_yield';
   l_proc_name   VARCHAR2(35)    := 'CONTRACT_AFTER_YIELD';
   l_api_version NUMBER          := 1.0;

   after_yield_failed EXCEPTION;

   CURSOR contract_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE) IS
   SELECT contract_number,
          orig_system_reference1
   FROM   okc_k_headers_v
   WHERE  id                      = p_chr_id
   AND    orig_system_source_code = 'OKL_IMPORT';

   CURSOR stage_csr (p_contract_number OKC_K_HEADERS_V.CONTRACT_NUMBER%TYPE) IS
   SELECT import_request_stage
   FROM   okl_header_interface
   WHERE  contract_number = p_contract_number
   AND    status          = 'INTERFACED';

   l_contract_number OKC_K_HEADERS_V.CONTRACT_NUMBER%TYPE;
   l_orig_contract   OKC_K_HEADERS_V.ORIG_SYSTEM_REFERENCE1%TYPE;
   l_import_stage    OKC_K_HEADERS_V.STS_CODE%TYPE;
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);
     x_return_status := OKL_API.START_ACTIVITY(
                                                p_api_name      => l_api_name,
                                                p_pkg_name      => G_PKG_NAME,
                                                p_init_msg_list => p_init_msg_list,
                                                l_api_version   => l_api_version,
                                                p_api_version   => p_api_version,
                                                p_api_type      => G_API_TYPE,
                                                x_return_status => x_return_status);

      -- check if activity started successfully
     IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) then
       raise OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
     ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) then
       raise OKL_API.G_EXCEPTION_ERROR;
     END IF;

     l_contract_number := '?';
     OPEN contract_csr (p_chr_id);
     FETCH contract_csr INTO l_contract_number,
                             l_orig_contract;
     IF contract_csr%NOTFOUND THEN
        RAISE after_yield_failed;
     END IF;
     CLOSE contract_csr;

     l_import_stage := '?';
     IF (l_contract_number <> '?') THEN
       OPEN stage_csr(l_contract_number);
       FETCH stage_csr INTO l_import_stage;
       CLOSE stage_csr;
     END IF;

     IF (l_import_stage IN ('COMPLETE','APPROVED', 'BOOKED')) THEN

        IF (l_import_stage = 'COMPLETE') THEN
           --
           -- Generate Journal Entries
           --
           debug_message('Calling : okl_contract_book_pub.generate_journal_entries');
           okl_contract_book_pub.generate_journal_entries(
                       p_api_version      => p_api_version,
                       p_init_msg_list    => p_init_msg_list,
                       p_commit           => Okl_Api.G_FALSE,
                       p_contract_id      => p_chr_id,
                       p_transaction_type => 'Booking',
                       p_draft_yn         => Okc_Api.G_TRUE,
                       x_return_status    => x_return_status,
                       x_msg_count        => x_msg_count,
                       x_msg_data         => x_msg_data
                     );
/*
 --
 Do not want to handle and throw exception
 which might cause Yield Generation to go for toss
 --
*/
           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE after_yield_failed;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE after_yield_failed;
           END IF;

       ELSIF (l_import_stage = 'APPROVED') THEN
           --
           -- Generate Journal Entries
           --
           debug_message('Calling : okl_contract_book_pub.generate_journal_entries');
           okl_contract_book_pub.generate_journal_entries(
                       p_api_version      => p_api_version,
                       p_init_msg_list    => p_init_msg_list,
                       p_commit           => Okl_Api.G_FALSE,
                       p_contract_id      => p_chr_id,
                       p_transaction_type => 'Booking',
                       p_draft_yn         => Okc_Api.G_TRUE,
                       x_return_status    => x_return_status,
                       x_msg_count        => x_msg_count,
                       x_msg_data         => x_msg_data
                     );

           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE after_yield_failed;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE after_yield_failed;
           END IF;

           --Bug# 2566822 : AME/WF integration in approval process
           --debug_message('Calling : okl_contract_book_pub.submit_for_approval');
           debug_message('Calling : okl_contract_book_pvt.approve_contract');
           --
           -- Submit for Approval
           --
           --Bug# 2566822 : AME/WF integration in approval process
           --okl_contract_book_pub.submit_for_approval(
           okl_contract_book_pvt.approve_contract(
             p_api_version     => p_api_version,
             p_init_msg_list   => p_init_msg_list,
             x_return_status   => x_return_status,
             x_msg_count       => x_msg_count,
             x_msg_data        => x_msg_data,
             p_chr_id          => p_chr_id
            );

           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE after_yield_failed;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE after_yield_failed;
           END IF;

       ELSIF (l_import_stage = 'BOOKED') THEN
           --
           -- Generate Journal Entries
           --
           debug_message('Calling : okl_contract_book_pub.generate_journal_entries');

           okl_contract_book_pub.generate_journal_entries(
                       p_api_version      => p_api_version,
                       p_init_msg_list    => p_init_msg_list,
                       p_commit           => Okl_Api.G_FALSE,
                       p_contract_id      => p_chr_id,
                       p_transaction_type => 'Booking',
                       p_draft_yn         => Okc_Api.G_TRUE,
                       x_return_status    => x_return_status,
                       x_msg_count        => x_msg_count,
                       x_msg_data         => x_msg_data
                     );

           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE after_yield_failed;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE after_yield_failed;
           END IF;


           --Bug# 2566822 : AME/WF integration in approval process
           --debug_message('Calling : okl_contract_book_pub.submit_for_approval');
           debug_message('Calling : okl_contract_book_pvt.approve_contract');
           --
           -- Submit for Approval
           --
           --Bug# 2566822 : AME/WF integration in approval process
           --okl_contract_book_pub.submit_for_approval(
           okl_contract_book_pvt.approve_contract(
             p_api_version     => p_api_version,
             p_init_msg_list   => p_init_msg_list,
             x_return_status   => x_return_status,
             x_msg_count       => x_msg_count,
             x_msg_data        => x_msg_data,
             p_chr_id          => p_chr_id
            );

           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE after_yield_failed;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE after_yield_failed;
           END IF;


           debug_message('Calling : okl_contract_book_pub.activate_contract');
           okl_contract_book_pub.activate_contract(
             p_api_version     => p_api_version,
             p_init_msg_list   => p_init_msg_list,
             x_return_status   => x_return_status,
             x_msg_count       => x_msg_count,
             x_msg_data        => x_msg_data,
             p_chr_id          => p_chr_id
            );

           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
              RAISE after_yield_failed;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
              RAISE after_yield_failed;
           END IF;

           -- R12B Authoring OA Migration
           -- Update the status of the Submit Contract task to Complete
           OKL_BOOK_CONTROLLER_PVT.update_book_controller_trx(
             p_api_version        => p_api_version,
             p_init_msg_list      => p_init_msg_list,
             x_return_status      => x_return_status,
             x_msg_count          => x_msg_count,
             x_msg_data           => x_msg_data,
             p_khr_id             => p_chr_id ,
             p_prog_short_name    => OKL_BOOK_CONTROLLER_PVT.G_SUBMIT_CONTRACT,
             p_progress_status    => OKL_BOOK_CONTROLLER_PVT.G_PROG_STS_COMPLETE);

           IF (x_return_status = OKL_API.G_RET_STS_UNEXP_ERROR) THEN
             RAISE after_yield_failed;
           ELSIF (x_return_status = OKL_API.G_RET_STS_ERROR) THEN
             RAISE after_yield_failed;
           END IF;

       END IF; -- import_stage

     END IF;

     Update_Interface_Status(
                             p_contract_number     => l_orig_contract,
                             p_new_contract_number => l_contract_number,
                             p_status              => 'FINAL',
                             x_return_status       => x_return_status
                            );

     IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        RAISE after_yield_failed;
     END IF;

     OKL_API.END_ACTIVITY(x_msg_count   => x_msg_count,
                          x_msg_data    => x_msg_data);


     RETURN;

   EXCEPTION
       when after_yield_failed THEN
          IF contract_csr%ISOPEN THEN
              CLOSE contract_csr;
          END IF;
          x_return_status := OKL_API.G_RET_STS_SUCCESS; -- to allow Yield process to complete SUCCESSFULLY

       when OKL_API.G_EXCEPTION_ERROR then
          x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                         p_api_name  => l_api_name,
                         p_pkg_name  => G_PKG_NAME,
                         p_exc_name  => 'OKL_API.G_RET_STS_ERROR',
                         x_msg_count => x_msg_count,
                         x_msg_data  => x_msg_data,
                         p_api_type  => G_API_TYPE);


       when OKL_API.G_EXCEPTION_UNEXPECTED_ERROR then
          x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                         p_api_name  => l_api_name,
                         p_pkg_name  => G_PKG_NAME,
                         p_exc_name  => 'OKL_API.G_RET_STS_UNEXP_ERROR',
                         x_msg_count => x_msg_count,
                         x_msg_data  => x_msg_data,
                         p_api_type  => G_API_TYPE);

       when OTHERS then
          x_return_status := OKL_API.HANDLE_EXCEPTIONS(
                         p_api_name  => l_api_name,
                         p_pkg_name  => G_PKG_NAME,
                         p_exc_name  => 'OTHERS',
                         x_msg_count => x_msg_count,
                         x_msg_data  => x_msg_data,
                         p_api_type  => G_API_TYPE);

   END contract_after_yield;

------------------------------------------------------------------------------
-- PROCEDURE contract_further_process
-- It process contract beyond status 'NEW'. It calls QA Checker and finally submits
-- request to generate streams and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
-- Called By:
--  process_record
------------------------------------------------------------------------------
  PROCEDURE contract_further_process(
                                     p_init_msg_list    IN  VARCHAR2,
                                     x_return_status    OUT NOCOPY VARCHAR2,
                                     x_msg_count        OUT NOCOPY NUMBER,
                                     x_msg_data         OUT NOCOPY VARCHAR2,
                                     p_chr_id           IN  OKC_K_HEADERS_V.ID%TYPE,
                                     p_import_stage     IN  VARCHAR2
                                    ) IS
  l_api_name             VARCHAR2(35)    := 'create_rebook_contract';
  l_proc_name            VARCHAR2(35)    := 'CREATE_REBOOK_CONTRACT';
  l_api_version          CONSTANT NUMBER := 1;
  l_qa_check_status      VARCHAR2(1)     := 'S';

  l_qcl_id               NUMBER;
  l_msg_tbl              Okl_Qa_Check_Pub.msg_tbl_type;
  x_trx_number           NUMBER;
  x_trx_status           VARCHAR2(100);

  -- R12B Authoring OA Migration
  l_upfront_tax_status   VARCHAR2(1)     := 'S';

  BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;

     IF (p_import_stage IN ('PASSED','COMPLETE','APPROVED','BOOKED')) THEN
/* 4414408
         get_qcl_id(
                    x_return_status => x_return_status,
                    p_qcl_name      => 'OKL LA QA CHECK LIST',
                    x_qcl_id        => l_qcl_id);

         debug_message('ID : '||l_qcl_id);
         IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
*/
            --fnd_file.put_line(fnd_file.output, 'Running QA Checker...');
            debug_message('ID : '||g_qcl_id);
            write_to_log('Running QA Checker...');
            okl_contract_book_pub.execute_qa_check_list(
                                                        p_api_version    => 1.0,
                                                        p_init_msg_list  => OKL_API.G_FALSE,
                                                        x_return_status  => x_return_status,
                                                        x_msg_count      => x_msg_count,
                                                        x_msg_data       => x_msg_data,
                                                        p_qcl_id         => g_qcl_id, -- 4414408
                                                        p_chr_id         => p_chr_id,
                                                        x_msg_tbl        => l_msg_tbl
                                                       );

            FOR i IN 1..l_msg_tbl.LAST
            LOOP
               IF (l_msg_tbl(i).error_status <> 'S') THEN

                  write_to_log('Name        : '||l_msg_tbl(i).name);
                  write_to_log('Description : '||l_msg_tbl(i).description);
                  write_to_log('Error Status: '||l_msg_tbl(i).error_status);
                  write_to_log('Data        : '||l_msg_tbl(i).data);

               END IF;

               IF (l_msg_tbl(i).error_status = 'E') THEN
                  l_qa_check_status := 'E';
               END IF;
            END LOOP;

            debug_message('After 1st Qa Checker '|| l_qa_check_status);
            commit;

--         END IF; -- Success

           -- R12B Authoring OA Migration
           -- Call API to calculate upfront tax if QA check is complete
           IF  (l_qa_check_status = 'S') THEN

             OKL_CONTRACT_BOOK_PVT.calculate_upfront_tax(
               p_api_version      =>  1.0,
               p_init_msg_list    =>  OKL_API.G_FALSE,
               x_return_status    =>  x_return_status,
               x_msg_count        =>  x_msg_count,
               x_msg_data         =>  x_msg_data,
               p_chr_id           =>  p_chr_id,
               x_process_status   =>  l_upfront_tax_status);

             IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
               commit;
             ELSE
               report_error(x_msg_count, x_msg_data);
               rollback;
               l_upfront_tax_status := 'E';
             END IF;

           END IF;

      END IF; -- Import Stage

      debug_message('QA Error Status: '||l_qa_check_status);

      IF (p_import_stage IN ('COMPLETE', 'APPROVED', 'BOOKED')) THEN
            -- R12B Authoring OA Migration
            -- If Upfront Tax is complete, then call API to generate streams
            IF (l_upfront_tax_status = 'S') THEN
            --IF (l_qa_check_status = 'S') THEN

               --fnd_file.put_line(fnd_file.output, 'Submitting Request to generate Streams....');
               write_to_log('Submitting Request to generate Streams....');

               --OKL_GENERATE_STREAMS_PUB.GENERATE_STREAMS(
               OKL_LA_STREAM_PUB.GEN_INTR_EXTR_STREAM (
                                                         p_api_version         => 1.0,
                                                         p_init_msg_list       => OKL_API.G_FALSE,
                                                         p_khr_id              => p_chr_id,
                                                         p_generation_ctx_code => 'AUTH',
                                                         x_trx_number          => x_trx_number,
                                                         x_trx_status          => x_trx_status,
                                                         x_return_status       => x_return_status,
                                                         x_msg_count           => x_msg_count,
                                                         x_msg_data            => x_msg_data
                                                        );

               IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
                 commit; -- required for stream generation
                 --fnd_file.put_line(fnd_file.output,'Req ID: '||x_trx_number);
                 write_to_log('Req ID: '||x_trx_number);
               ELSE
                 report_error(
                              x_msg_count, x_msg_data);
                 rollback;
               END IF;
            END IF; -- upfront tax status
        END IF; -- import_stage

    RETURN;

  EXCEPTION
    WHEN OTHERS THEN

      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;

      report_error (
                    x_msg_count => x_msg_count,
                    x_msg_data  => x_msg_data
                   );

  END contract_further_process;

  PROCEDURE get_tal_id(
                       x_return_status OUT NOCOPY VARCHAR2,
                       p_fa_line_id    IN  NUMBER,
                       x_tal_id        OUT NOCOPY NUMBER
                      ) IS

  CURSOR tal_csr (p_id NUMBER) IS
  SELECT id
  FROM   okl_txl_assets_v
  WHERE  kle_id = p_id;

  tal_failed EXCEPTION;
  l_id   NUMBER;

  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    OPEN tal_csr(p_fa_line_id);
    FETCH tal_csr INTO l_id;
    IF tal_csr%NOTFOUND THEN
       RAISE tal_failed;
    END IF;
    CLOSE tal_csr;
    x_tal_id := l_id;
    RETURN;
  EXCEPTION
    WHEN tal_failed THEN
       IF tal_csr%ISOPEN THEN
         CLOSE tal_csr;
       END IF;
       okl_api.set_message(
                           G_APP_NAME,
                           G_OKL_TXD_ID
                          );
       x_return_status := OKL_API.G_RET_STS_ERROR;
  END get_tal_id;

------------------------------------------------------------------------------
-- PROCEDURE populate_header_rec
-- It checks template contract and interface data to populate final header record and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--
-- Called By:
--
------------------------------------------------------------------------------
  PROCEDURE populate_header_rec(
                          x_return_status  OUT NOCOPY VARCHAR2,
                          x_msg_count      OUT NOCOPY NUMBER,
                          x_msg_data       OUT NOCOPY VARCHAR2,
                          p_temp_header    IN  template_h_rec_type,
                          p_intf_header    IN  intf_h_rec_type,
                          x_chrv_rec       OUT NOCOPY chrv_rec_type,
                          x_khrv_rec       OUT NOCOPY khrv_rec_type
                         ) IS
  l_proc_name            VARCHAR2(35)  := 'POPULATE_HEADER_REC';
--  l_qcl_id               NUMBER;
  x_program_agreement_id OKC_K_HEADERS_V.ID%TYPE;
  x_product_id           NUMBER;

    CURSOR customer_csr (p_customer_number OKX_PARTIES_V.PARTY_NUMBER%TYPE,
                         p_customer_id     OKX_PARTIES_V.ID1%TYPE) IS
    SELECT id1
    FROM   okx_parties_v
    WHERE  ((party_number = p_customer_number
             AND
             p_customer_number IS NOT NULL
            )
            OR
            (id1          = p_customer_id
             AND
             p_customer_id IS NOT NULL
            )
           );

  l_id1                  OKX_PARTIES_V.ID1%TYPE;
  x_customer_account_id  NUMBER;
  x_bill_to_address_id   NUMBER;
  pop_header_failed      EXCEPTION;

  BEGIN

     -- Bug 4350579 start
     -- Validation from check
     --
     x_return_status := check_header_literal (
                           p_contract_number             => p_intf_header.contract_number_old,
                           p_template_id                 => p_temp_header.id,
                           p_application_code            => p_intf_header.application_code,
                           p_contract_category           => NVL(p_intf_header.contract_category,p_temp_header.scs_code),
                           p_import_request_stage        => p_intf_header.import_request_stage,
                           p_converted_account           => NVL(p_intf_header.converted_account,
                                                                p_temp_header.converted_account_yn),
                           p_security_deposit_hold_flag  => p_intf_header.security_deposit_hold_flag,
                           p_security_deposit_net_flag   => p_intf_header.security_deposit_net_flag,
                           p_review_invoice_flag         => p_intf_header.review_invoice_flag,
                           p_date_signed                 => NVL(p_intf_header.date_signed,p_temp_header.date_signed),
                           p_start_date                  => NVL(p_intf_header.start_date,p_temp_header.start_date),
                           p_date_approved               => NVL(p_intf_header.date_approved,p_temp_header.date_approved),
                           p_term                        => NVL(p_intf_header.term,p_temp_header.term_duration),
                           p_accepted_date               => NVL(p_intf_header.accepted_date,p_temp_header.accepted_date),
                           p_deal_type_code              => NVL(p_intf_header.deal_type_code,p_temp_header.deal_type),
                           p_bill_to_address             => p_intf_header.bill_to_address,
                           p_bill_to_address_id          => p_intf_header.bill_to_address_id,
                           p_authoring_org_id            => NVL(p_intf_header.authoring_org_id,
                                                                p_temp_header.authoring_org_id),
			   p_inv_organization_id         => NVL(p_intf_header.inventory_organization_id,
			                                        p_temp_header.inv_organization_id),
                           p_customer_account_number     => p_intf_header.customer_account_number,
                           p_customer_account_id         => p_intf_header.customer_account_id,
                           p_eot_purchase_opt_type       => p_intf_header.eot_purchase_opt_type,
                           p_expected_delivery_date      => p_intf_header.expected_delivery_date,
                           p_currency_code               => NVL(p_intf_header.currency_code,
                                                                p_temp_header.currency_code)
                          );

     IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        RAISE pop_header_failed;
     END IF;


     -- Bug 4350579 end

     x_chrv_rec.sts_code                := 'NEW';
     x_chrv_rec.scs_code                := NVL(p_intf_header.contract_category, p_temp_header.scs_code);
     x_chrv_rec.contract_number         := p_intf_header.contract_number;
     x_chrv_rec.currency_code           := NVL(p_intf_header.currency_code, p_temp_header.currency_code);
     x_chrv_rec.cust_po_number          := NVL(p_intf_header.customer_po_number, p_temp_header.cust_po_number);
     x_chrv_rec.short_description       := NVL(p_intf_header.contract_description, p_temp_header.short_description);
     x_chrv_rec.description             := NVL(p_intf_header.contract_description, p_temp_header.description);
     x_chrv_rec.date_approved           := NVL(p_intf_header.date_approved, p_temp_header.date_approved);
     x_chrv_rec.archived_yn             := 'N';
     x_chrv_rec.deleted_yn              := 'N';
     x_chrv_rec.cust_po_number_req_yn   := 'N';
     x_chrv_rec.pre_pay_req_yn          := 'N';
     x_chrv_rec.template_yn             := 'N';
     x_chrv_rec.chr_type                := 'CYA';
     x_chrv_rec.date_signed             := NVL(p_intf_header.date_signed, p_temp_header.date_signed);
     x_chrv_rec.start_date              := NVL(p_intf_header.start_date, NVL(p_temp_header.start_date, SYSDATE));
     -- Added by asahoo for Bug#5416376
     x_chrv_rec.end_date                := OKL_LLA_UTIL_PVT.calculate_end_date(nvl(x_chrv_rec.start_date, SYSDATE),
                                                      nvl(p_intf_header.term,NVL(p_temp_header.term_duration, 0)));
     x_chrv_rec.authoring_org_id        := NVL(p_intf_header.authoring_org_id, p_temp_header.authoring_org_id);
     x_chrv_rec.inv_organization_id     := NVL(p_intf_header.inventory_organization_id, p_temp_header.inv_organization_id);
     x_chrv_rec.buy_or_sell             := 'S';
     x_chrv_rec.issue_or_receive        := 'I';
     x_chrv_rec.orig_system_source_code := 'OKL_IMPORT'; -- p_intf_header.contract_source; Only one source for 1st release
     x_chrv_rec.orig_system_reference1  := p_intf_header.contract_number_old;

     -- Validated customer
     l_id1 := NULL;
     OPEN customer_csr (p_intf_header.customer_number,
                        p_intf_header.customer_id);
     FETCH customer_csr INTO l_id1;
     CLOSE customer_csr;

     IF (l_id1 IS NOT NULL) THEN
        g_customer_id := l_id1;
     ELSE
       okl_api.set_message(
                           G_APP_NAME,
                           G_INVALID_VALUE,
                           'CONTRACT_NUM',
                           p_intf_header.contract_number_old,
                           'COL_NAME',
                           'CUSTOMER_ID, NUMBER: ',
                           'COL_VALUE',
                           p_intf_header.customer_id||', '||p_intf_header.customer_number
                          );

       x_return_status := OKL_API.G_RET_STS_ERROR;
       RAISE pop_header_failed;
     END IF;

     x_customer_account_id := NULL;
     IF (p_intf_header.customer_account_id IS NOT NULL
         OR
         p_intf_header.customer_account_number IS NOT NULL) THEN
          get_customer_account_id(
                                  x_return_status           => x_return_status,
                                  x_msg_count               => x_msg_count,
                                  x_msg_data                => x_msg_data,
                                  p_contract_number         => p_intf_header.contract_number_old,
                                  p_customer_id             => g_customer_id,
                                  p_customer_account_id     => p_intf_header.customer_account_id,
                                  p_customer_account_number => p_intf_header.customer_account_number,
                                  x_customer_account_id     => x_customer_account_id
                                 );
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE pop_header_failed;
          END IF;
     ELSIF (p_intf_header.template_number IS NOT NULL) THEN
         x_customer_account_id := p_temp_header.cust_acct_id;
     END IF;

     IF (x_customer_account_id IS NULL
         AND
         p_intf_header.import_request_stage <> 'NEW') THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_STAGE,
                            'CONTRACT_NUM',
                            p_intf_header.contract_number_old,
                            'COL_NAME',
                            'CUSTOMER_ACCOUNT',
                            'STAGE',
                            p_intf_header.import_request_stage
                           );
       x_return_status := OKL_API.G_RET_STS_ERROR;
       RAISE pop_header_failed;
     END IF;

     x_chrv_rec.cust_acct_id            := x_customer_account_id;
     g_customer_account_id              := x_customer_account_id;

     x_bill_to_address_id := NULL;
     IF (p_intf_header.bill_to_address_id IS NOT NULL
         OR
         p_intf_header.bill_to_address IS NOT NULL) THEN
          get_bill_to_address_id(
                             x_return_status           => x_return_status,
                             x_msg_count               => x_msg_count,
                             x_msg_data                => x_msg_data,
                             p_contract_number         => p_intf_header.contract_number,
                             p_auth_org_id             => p_intf_header.authoring_org_id,
                             p_bill_to_address_id      => p_intf_header.bill_to_address_id,
                             p_bill_to_address         => p_intf_header.bill_to_address,
                             p_customer_account_id     => x_customer_account_id,
                             x_bill_to_address_id      => x_bill_to_address_id
                            );
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE pop_header_failed;
          END IF;

     ELSIF (p_intf_header.template_number IS NOT NULL) THEN
         x_bill_to_address_id := p_temp_header.bill_to_site_use_id;
     END IF;

     IF (x_bill_to_address_id IS NULL
         AND
         p_intf_header.import_request_stage <> 'NEW') THEN
        okl_api.set_message(
                            G_APP_NAME,
                            G_MISSING_VALUE_FOR_STAGE,
                            'CONTRACT_NUM',
                            p_intf_header.contract_number_old,
                            'COL_NAME',
                            'BILL_TO_ADDRESS',
                            'STAGE',
                            p_intf_header.import_request_stage
                           );
         x_return_status := OKL_API.G_RET_STS_ERROR;
         RAISE pop_header_failed;
     END IF;

     g_bill_to_address_id               := x_bill_to_address_id;
     x_chrv_rec.bill_to_site_use_id     := x_bill_to_address_id;

/* 4414408
     get_qcl_id(
                 x_return_status => x_return_status,
                 p_qcl_name      => 'OKL LA QA CHECK LIST',
                 x_qcl_id        => l_qcl_id
                );
*/

     x_chrv_rec.qcl_id                  := g_qcl_id;

     --
     -- Bug 3990456
     -- For template import populate
     -- orig_system_id1 and template_used columns
     --
     IF (p_temp_header.id IS NOT NULL) THEN
        x_chrv_rec.orig_system_id1 := p_temp_header.id;
        x_chrv_rec.template_used   := p_temp_header.contract_number;
     END IF;

     IF (NVL(p_intf_header.program_agreement_id,p_temp_header.khr_id) IS NOT NULL
         OR
         p_intf_header.program_agreement_number IS NOT NULL) THEN

         x_return_status := get_prog_agreement_id(
                                             p_scs_code         => 'PROGRAM',
                                             p_agreement_number => p_intf_header.program_agreement_number,
                                             p_agreement_id     => NVL(p_intf_header.program_agreement_id,
                                                                       p_temp_header.khr_id),
                                             p_auth_org_id      => x_chrv_rec.authoring_org_id,
                                             x_agreement_id     => x_program_agreement_id
                                            );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_INVALID_VALUE,
                                 'CONTRACT_NUM',
                                 p_intf_header.contract_number_old,
                                 'COL_NAME',
                                 'PROGRAM_AGREEMENT_ID, NUMBER: ',
                                 'COL_VALUE',
                                 p_intf_header.program_agreement_id||', '||p_intf_header.program_agreement_number
                                );
            RAISE pop_header_failed;
         END IF;
         x_khrv_rec.khr_id := x_program_agreement_id;
     ELSE
         x_khrv_rec.khr_id := p_temp_header.khr_id;
     END IF;

     IF (p_intf_header.product_id IS NOT NULL
         OR
         p_intf_header.product_name IS NOT NULL) THEN
        x_return_status := get_product_id(p_product_id     => p_intf_header.product_id,
                                           p_product_name   => p_intf_header.product_name,
                                           x_product_id     => x_product_id );

        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              okl_api.set_message(
                                  G_APP_NAME,
                                  G_INVALID_VALUE,
                                  'CONTRACT_NUM',
                                  p_intf_header.contract_number_old,
                                  'COL_NAME',
                                  'PRODUCT_ID, NAME: ',
                                  'COL_VALUE',
                                  p_intf_header.product_id||', '||p_intf_header.product_name
                                 );

            x_return_status := OKL_API.G_RET_STS_ERROR;

           RAISE pop_header_failed;
        END IF;
        x_khrv_rec.pdt_id := x_product_id;
     ELSE
        x_khrv_rec.pdt_id := p_temp_header.pdt_id;
     END IF;

     IF (NVL(p_intf_header.assignable_yn,'N') NOT IN ('Y','N')) THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_VALUE,
                               'CONTRACT_NUM',
                               p_intf_header.contract_number_old,
                               'COL_NAME',
                               'ASSIGNABLE_YN',
                               'COL_VALUE',
                               p_intf_header.assignable_yn
                              );

         x_return_status := OKL_API.G_RET_STS_ERROR;

        RAISE pop_header_failed;
     END IF;

-- start cklee bug# 3440442
     IF (NVL(p_intf_header.prefunding_eligible_flag,'N') NOT IN ('Y','N')) THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_INVALID_VALUE,
                               'CONTRACT_NUM',
                               p_intf_header.contract_number_old,
                               'COL_NAME',
                               'PREFUNDING_ELIGIBLE_FLAG',
                               'COL_VALUE',
                               p_intf_header.prefunding_eligible_flag
                              );

         x_return_status := OKL_API.G_RET_STS_ERROR;

        RAISE pop_header_failed;
     END IF;
-- end cklee bug# 3440442

     x_khrv_rec.amd_code                 := NVL(p_intf_header.acceptance_method_code, p_temp_header.amd_code);
     x_khrv_rec.converted_account_yn     := NVL(p_intf_header.converted_account, p_temp_header.converted_account_yn);

/* Not used since 11.5.9, Product is defaulting deal_type_code
     x_khrv_rec.deal_type                := NVL(p_intf_header.deal_type_code, p_temp_header.deal_type);
*/
     x_khrv_rec.expected_delivery_date   := NVL(p_intf_header.expected_delivery_date, p_temp_header.expected_delivery_date);
     x_khrv_rec.accepted_date            := NVL(p_intf_header.accepted_date, p_temp_header.accepted_date);
     x_khrv_rec.term_duration            := NVL(p_intf_header.term, p_temp_header.term_duration);
     x_khrv_rec.currency_conversion_type := NVL(p_intf_header.currency_conversion_type,
                                                        p_temp_header.currency_conversion_type);
     x_khrv_rec.currency_conversion_rate := NVL(p_intf_header.currency_conversion_rate,
                                                        p_temp_header.currency_conversion_rate);
     x_khrv_rec.currency_conversion_date := NVL(p_intf_header.currency_conversion_date,
                                                        p_temp_header.currency_conversion_date);
     x_khrv_rec.assignable_yn            := NVL(p_intf_header.assignable_yn,p_temp_header.assignable_yn);
     x_khrv_rec.prefunding_eligible_yn   := NVL(p_intf_header.prefunding_eligible_flag,p_temp_header.prefunding_eligible_yn);
     x_khrv_rec.credit_act_yn            := NVL(p_intf_header.consumer_credit_act_deal_flag,
                                                        p_temp_header.credit_act_yn); -- dedey for bug 4637590

     -- Contract addl field, Bug 4558486

     debug_message('Contract DFF...');

     x_khrv_rec.validate_dff_yn          := 'Y';  -- always validate DFF
     x_khrv_rec.attribute_category       := NVL(p_intf_header.attribute_category,
                                                 p_temp_header.attribute_category);
     debug_message('attribute_category: '||x_khrv_rec.attribute_category);
     x_khrv_rec.attribute1               := NVL(p_intf_header.attribute1,
                                                 p_temp_header.attribute1);
     debug_message('attribute1: '||x_khrv_rec.attribute1);
     x_khrv_rec.attribute2               := NVL(p_intf_header.attribute2,
                                                 p_temp_header.attribute2);
     debug_message('attribute2: '||x_khrv_rec.attribute2);
     x_khrv_rec.attribute3               := NVL(p_intf_header.attribute3,
                                                 p_temp_header.attribute3);
     x_khrv_rec.attribute4               := NVL(p_intf_header.attribute4,
                                                 p_temp_header.attribute4);
     x_khrv_rec.attribute5               := NVL(p_intf_header.attribute5,
                                                 p_temp_header.attribute5);
     x_khrv_rec.attribute6               := NVL(p_intf_header.attribute6,
                                                 p_temp_header.attribute6);
     x_khrv_rec.attribute7               := NVL(p_intf_header.attribute7,
                                                 p_temp_header.attribute7);
     x_khrv_rec.attribute8               := NVL(p_intf_header.attribute8,
                                                 p_temp_header.attribute8);
     x_khrv_rec.attribute9               := NVL(p_intf_header.attribute9,
                                                 p_temp_header.attribute9);
     x_khrv_rec.attribute10              := NVL(p_intf_header.attribute10,
                                                 p_temp_header.attribute10);
     x_khrv_rec.attribute11              := NVL(p_intf_header.attribute11,
                                                 p_temp_header.attribute11);
     x_khrv_rec.attribute12              := NVL(p_intf_header.attribute12,
                                                 p_temp_header.attribute12);
     x_khrv_rec.attribute13              := NVL(p_intf_header.attribute13,
                                                 p_temp_header.attribute13);
     x_khrv_rec.attribute14              := NVL(p_intf_header.attribute14,
                                                 p_temp_header.attribute14);
     x_khrv_rec.attribute15              := NVL(p_intf_header.attribute15,
                                                 p_temp_header.attribute15);
     -- Contract addl field, Bug 4558486


    RETURN;

  EXCEPTION
    WHEN pop_header_failed THEN
      NULL; -- caller will handle appropriate exception
  END populate_header_rec;

------------------------------------------------------------------------------
-- PROCEDURE check_payment_level
-- This procedure determines payment level for SERVICE and FEE lines.
-- If asset_number column is populated at SERVICE and FEE lines, payment
-- will be attached to sub-line level.
--
-- If asset_number column is not populated at SERVICE and FEE lines, payment
-- will be attached to top-line level.
--
-- Calls:
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
  PROCEDURE  check_payment_level(
                                 x_return_status   OUT NOCOPY VARCHAR2,
                                 x_msg_count       OUT NOCOPY VARCHAR2,
                                 x_msg_data        OUT NOCOPY VARCHAR2,
                                 p_contract_number IN  OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                                 p_line_number     IN  OKL_LINES_INTERFACE.LINE_NUMBER%TYPE,
                                 x_payment_level   OUT NOCOPY VARCHAR2
                                ) IS

  l_proc_name VARCHAR2(35) := 'CHECK_PAYMENT_LEVEL';

  CURSOR line_csr (p_cont_number OKL_HEADER_INTERFACE.CONTRACT_NUMBER_OLD%TYPE,
                   p_line        OKL_LINES_INTERFACE.LINE_NUMBER%TYPE) IS
  SELECT line_type,
         asset_number
  FROM   okl_lines_interface
  WHERE  contract_number_old = p_cont_number
  AND    line_number         = p_line;

  l_line_type    OKL_LINES_INTERFACE.LINE_TYPE%TYPE;
  l_asset_number OKL_LINES_INTERFACE.ASSET_NUMBER%TYPE;

  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    debug_message(l_proc_name);

    x_payment_level := 'TOP'; -- default

    l_line_type    := NULL;
    l_asset_number := NULL;

    OPEN line_csr (p_contract_number,
                   p_line_number);
    FETCH line_csr INTO l_line_type,
                        l_asset_number;
    CLOSE line_csr;

    IF (l_line_type IN ('SERVICE', 'FEE')) THEN
       IF (l_asset_number IS NOT NULL) THEN
           x_payment_level := 'SUB';
       ELSE
           x_payment_level := 'TOP';
       END IF;
    ELSE
       x_payment_level := 'TOP'; -- For other lines attach payment at TOP level only
    END IF;

  EXCEPTION
    WHEN OTHERS THEN
      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;

  END check_payment_level;


------------------------------------------------------------------------------
-- PROCEDURE create_lessee_as_vendor
-- This procedure creates lessee as vendor and attach pay site to it
-- Calls:
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE create_lessee_as_vendor(
                                    x_return_status      OUT NOCOPY VARCHAR2,
                                    x_msg_count          OUT NOCOPY NUMBER,
                                    x_msg_data           OUT NOCOPY VARCHAR2,
                                    p_chr_id             IN  NUMBER,
                                    p_contract_num       IN  VARCHAR2,
                                    p_cpl_id             IN  NUMBER,
                                    p_lessee_vendor_id   IN  NUMBER,
                                    p_lessee_vendor_name IN  VARCHAR2,
                                    p_lessee_site_id     IN  NUMBER,
                                    p_lessee_site_code   IN  VARCHAR2,
                                    p_authoring_org_id   IN  NUMBER
                                   ) IS

  l_proc_name VARCHAR2(35) := 'CREATE_LESSEE_AS_VENDOR';
  CURSOR vendor_csr (p_vendor_id NUMBER,
                     p_vendor_name VARCHAR2) IS
  SELECT vendor_id
  FROM   po_vendors
  WHERE  ( (vendor_id = p_vendor_id
            AND
            p_vendor_id IS NOT NULL
           )
           OR (
               vendor_name = p_vendor_name
               AND
               p_vendor_name IS NOT NULL
              )
         );

  CURSOR vendor_site_csr (p_vendor_id   NUMBER,
                          p_site_id     NUMBER,
                          p_site_code   VARCHAR2,
                          p_auth_org_id NUMBER) IS
  select vendor_site_id
  from   po_vendor_sites_all
  where  ( (vendor_site_id = p_site_id
            AND
            p_site_id IS NOT NULL)
            OR
            (vendor_site_code = p_site_code
             AND
             p_site_code IS NOT NULL)
          )
  and     org_id    = p_auth_org_id
  and     vendor_id = p_vendor_id;

  l_vendor_id      po_vendors.vendor_id%TYPE;
  l_vendor_site_id po_vendor_sites_all.vendor_site_id%TYPE;
  l_ppydv_rec      ppydv_rec_type;
  x_ppydv_rec      ppydv_rec_type;

  lessee_failed    EXCEPTION;

  BEGIN

    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    debug_message(l_proc_name);

    debug_message('------>Vendor: '||p_lessee_vendor_id||', '||p_lessee_vendor_name);
    debug_message('------>Vendor Site: '||p_lessee_site_id||', '||p_lessee_site_code);

    IF (p_lessee_vendor_id IS NOT NULL
        OR
        p_lessee_vendor_name IS NOT NULL) THEN

       -- Check vendor
       OPEN vendor_csr (p_lessee_vendor_id,
                          p_lessee_vendor_name);
       FETCH vendor_csr INTO l_vendor_id;
       IF vendor_csr%NOTFOUND THEN
            okl_api.set_message(
                                G_APP_NAME,
                                G_INVALID_VALUE,
                                'CONTRACT_NUM',
                                p_contract_num,
                                'COL_NAME',
                                'LESSEE_AS_VENDOR_ID OR LESSEE_AS_VENDOR_NAME',
                                'COL_VALUE',
                                p_lessee_vendor_id||', '||p_lessee_vendor_name
                               );
          RAISE lessee_failed;
       END IF;
       CLOSE vendor_csr;

       debug_message('------> Vendor valid');
       -- Check vendor Pay site
       OPEN vendor_site_csr(l_vendor_id,
                            p_lessee_site_id,
                            p_lessee_site_code,
                            p_authoring_org_id);

       FETCH vendor_site_csr INTO l_vendor_site_id;
       IF vendor_site_csr%NOTFOUND THEN
          okl_api.set_message(
                              G_APP_NAME,
                              G_INVALID_VALUE,
                              'CONTRACT_NUM',
                              p_contract_num,
                              'COL_NAME',
                              'LESSEE_AS_VENDOR_SITE_ID OR LESSEE_AS_VENDOR_SITE_CODE',
                              'COL_VALUE',
                               p_lessee_site_id||', '||p_lessee_site_code
                            );
          RAISE lessee_failed;
       END IF;
       CLOSE vendor_site_csr;
       debug_message('------> Vendor site valid');

       -- create lessee as vendor here
       l_ppydv_rec.cpl_id      := p_cpl_id;
       l_ppydv_rec.vendor_id   := l_vendor_id;
       l_ppydv_rec.pay_site_id := l_vendor_site_id;

       debug_message('------> Before creation of lessee as vendor');
       okl_lessee_as_vendor_pvt.create_lessee_as_vendor(
                                                        p_api_version    => 1.0,
                                                        p_init_msg_list  => OKL_API.G_FALSE,
                                                        x_return_status  => x_return_status,
                                                        x_msg_count      => x_msg_count,
                                                        x_msg_data       => x_msg_data,
                                                        p_chr_id         => p_chr_id,
                                                        p_ppydv_rec      => l_ppydv_rec,
                                                        x_ppydv_rec      => x_ppydv_rec
                                                       );

       IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          RAISE lessee_failed;
       END IF;
       debug_message('------> After creation of lessee as vendor '||x_return_status);

    END IF; -- vendor_id NOT NULL

  EXCEPTION
    WHEN lessee_failed THEN
       IF vendor_csr%ISOPEN THEN
         CLOSE vendor_csr;
       END IF;
       IF vendor_site_csr%ISOPEN THEN
         CLOSE vendor_site_csr;
       END IF;
       x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OTHERS THEN
      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;

  END create_lessee_as_vendor;

------------------------------------------------------------------------------
-- PROCEDURE get_txd_id
-- This procedure gets okl_txd_assets_b.id, required to update in case of
-- released asset import with mutiple tax books.
-- Calls:
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE get_txd_id (
                         x_return_status   OUT NOCOPY VARCHAR2,
                         x_msg_count       OUT NOCOPY NUMBER,
                         x_msg_data        OUT NOCOPY VARCHAR2,
                         p_contract_number IN  VARCHAR2,
                         p_tal_id          IN  NUMBER,
                         p_tax_book        IN  VARCHAR2,
                         x_txd_id          OUT NOCOPY OKL_TXD_ASSETS_B.ID%TYPE
                        ) IS

   CURSOR txd_csr (p_tal_id   NUMBER,
                   p_tax_book VARCHAR2) IS
   SELECT id
   FROM   okl_txd_assets_b
   WHERE  tal_id = p_tal_id
   AND    tax_book = p_tax_book;

   l_proc_name VARCHAR2(35) := 'GET_TXD_ID';
   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);

     OPEN txd_csr (p_tal_id,
                   p_tax_book);
     FETCH txd_csr INTO x_txd_id;
     IF (txd_csr%NOTFOUND) THEN
         okl_api.set_message(
                             G_APP_NAME,
                             G_INVALID_VALUE,
                             'CONTRACT_NUM',
                             p_contract_number,
                             'COL_NAME',
                             'TAX_BOOK',
                             'COL_VALUE',
                             p_tax_book
                            );

        x_return_status := OKL_API.G_RET_STS_ERROR;
     END IF;
     CLOSE txd_csr;

   EXCEPTION

     WHEN OTHERS THEN

      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;
   END get_txd_id;

------------------------------------------------------------------------------
-- PROCEDURE create_release_asset_rule
-- This procedure creates release asset rule at contract header
-- Calls:
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE create_release_asset_rule(
                                       x_return_status      OUT NOCOPY VARCHAR2,
                                       x_msg_count          OUT NOCOPY NUMBER,
                                       x_msg_data           OUT NOCOPY VARCHAR2,
                                       p_chr_id             IN NUMBER,
                                       p_release_asset_flag IN VARCHAR2
                                      ) IS

   l_proc_name VARCHAR2(35) := 'CREATE_RELEASE_ASSET_RULE';

   l_rgpv_rec rgpv_rec_type;
   x_rgpv_rec rgpv_rec_type;

   l_rulv_rec rulv_rec_type;
   x_rulv_rec rulv_rec_type;

   l_rgp_id   NUMBER := NULL;
   rel_rule_failed EXCEPTION;

   BEGIN

      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      debug_message(l_proc_name);

      l_rgpv_rec            := NULL;
      l_rgp_id              := NULL;

      l_rgpv_rec.rgd_code   := 'LARLES';
      l_rgpv_rec.chr_id     := p_chr_id;
      l_rgpv_rec.dnz_chr_id := p_chr_id;
      l_rgpv_rec.cle_id     := NULL;
      l_rgpv_rec.rgp_type   := 'KRG';

      l_rulv_rec                           := NULL;

      l_rulv_rec.dnz_chr_id                := p_chr_id;
      l_rulv_rec.rule_information_category := 'LARLES';
      l_rulv_rec.rule_information1         := p_release_asset_flag;
      l_rulv_rec.std_template_yn           := 'N';
      l_rulv_rec.warn_yn                   := 'N';

      create_rule_group_and_rule(
                              x_return_status => x_return_status,
                              x_msg_count     => x_msg_count,
                              x_msg_data      => x_msg_data,
                              p_rgp_id        => l_rgp_id,
                              p_rgpv_rec      => l_rgpv_rec,
                              p_rulv_rec      => l_rulv_rec,
                              x_rgpv_rec      => x_rgpv_rec,
                              x_rulv_rec      => x_rulv_rec
                             );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          raise rel_rule_failed;
      END IF;

      debug_message('------>Rule: LARLES/LARLES processed');

   EXCEPTION

     WHEN rel_rule_failed THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OTHERS THEN
      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;
   END create_release_asset_rule;

------------------------------------------------------------------------------
-- PROCEDURE process_release_asset
-- This procedure creates asset line using released asset
-- Calls:
-- Called By:
--  load_input_record
------------------------------------------------------------------------------

   PROCEDURE process_release_asset(
                                   x_return_status      OUT NOCOPY VARCHAR2,
                                   x_msg_count          OUT NOCOPY NUMBER,
                                   x_msg_data           OUT NOCOPY VARCHAR2,
                                   p_chr_id             IN VARCHAR2,
                                   p_contract_number    IN VARCHAR2,
                                   p_asset_number       IN VARCHAR2,
                                   p_asset_id           IN OKL_LA_RELEASE_ASSETS_UV.ASSET_ID%TYPE,
                                   p_line_number        IN NUMBER,
                                   p_install_site_id    IN okl_lines_interface.install_site_id%TYPE,
                                   p_install_site_num   IN okl_lines_interface.install_site_number%TYPE,
                                   p_unit_price         IN okl_lines_interface.original_cost%TYPE,
                                   p_deprn_method       IN okl_lines_interface.depreciation_method_code%TYPE,
                                   p_life_in_months     IN okl_lines_interface.life_in_months%TYPE,
                                   p_deprn_rate         IN okl_lines_interface.depreciation_rate%TYPE,
                                   p_asset_location_id  IN okl_lines_interface.asset_location_id%TYPE,
                                   p_asset_loc_segment1 IN okl_lines_interface.asset_location_segment1%TYPE,
                                   p_asset_loc_segment2 IN okl_lines_interface.asset_location_segment2%TYPE,
                                   p_asset_loc_segment3 IN okl_lines_interface.asset_location_segment3%TYPE,
                                   p_asset_loc_segment4 IN okl_lines_interface.asset_location_segment4%TYPE,
                                   p_asset_loc_segment5 IN okl_lines_interface.asset_location_segment5%TYPE,
                                   p_asset_loc_segment6 IN okl_lines_interface.asset_location_segment6%TYPE,
                                   p_asset_loc_segment7 IN okl_lines_interface.asset_location_segment7%TYPE,
                                   p_salvage_value      IN okl_lines_interface.salvage_value%TYPE,
                                   p_salvage_ptg        IN okl_lines_interface.salvage_value_percent%TYPE,
                                   p_residual_grnty_amt IN okl_lines_interface.residual_amount_guarantee%TYPE,
                                   p_residual_code      IN okl_lines_interface.guarantor_type_code%TYPE,
                                   p_residual_ptg       IN okl_lines_interface.residual_percent%TYPE,
                                   p_residual_amt       IN okl_lines_interface.residual_amount%TYPE,
                                   p_tax_book           IN okl_lines_interface.tax_book%TYPE,
                                   p_tax_deprn          IN okl_lines_interface.deprn_method_tax%TYPE,
                                   p_tax_life_in_mnth   IN okl_lines_interface.life_in_months_tax%TYPE,
                                   p_tax_deprn_rate     IN okl_lines_interface.deprn_rate_tax%TYPE,
                                   p_pth_base_payout_basis        IN okl_lines_interface.pth_base_payout_basis%TYPE,
                                   p_pth_base_stream_code         IN okl_lines_interface.pth_base_stream_code%TYPE,
                                   p_pth_base_stream_purpose_code IN okl_lines_interface.pth_base_stream_purpose_code%TYPE,
                                   p_pth_start_date               IN okl_lines_interface.pth_start_date%TYPE,
                                   p_pth_evg_payout_basis         IN okl_lines_interface.pth_evg_payout_basis%TYPE,
                                   p_pth_payout_basis_formula     IN okl_lines_interface.pth_payout_basis_formula%TYPE,
                                   p_pth_evg_stream_code          IN okl_lines_interface.pth_evg_stream_code%TYPE,
                                   p_pth_evg_stream_purpose_code  IN okl_lines_interface.pth_evg_stream_purpose_code%TYPE,
                                   p_attribute_category           IN okl_lines_interface.attribute_category%TYPE,
                                   p_attribute1                   IN okl_lines_interface.attribute1%TYPE,
                                   p_attribute2                   IN okl_lines_interface.attribute2%TYPE,
                                   p_attribute3                   IN okl_lines_interface.attribute3%TYPE,
                                   p_attribute4                   IN okl_lines_interface.attribute4%TYPE,
                                   p_attribute5                   IN okl_lines_interface.attribute5%TYPE,
                                   p_attribute6                   IN okl_lines_interface.attribute6%TYPE,
                                   p_attribute7                   IN okl_lines_interface.attribute7%TYPE,
                                   p_attribute8                   IN okl_lines_interface.attribute8%TYPE,
                                   p_attribute9                   IN okl_lines_interface.attribute9%TYPE,
                                   p_attribute10                  IN okl_lines_interface.attribute10%TYPE,
                                   p_attribute11                  IN okl_lines_interface.attribute11%TYPE,
                                   p_attribute12                  IN okl_lines_interface.attribute12%TYPE,
                                   p_attribute13                  IN okl_lines_interface.attribute13%TYPE,
                                   p_attribute14                  IN okl_lines_interface.attribute14%TYPE,
                                   p_attribute15                  IN okl_lines_interface.attribute15%TYPE,
                                   x_clev_fin_rec                 OUT NOCOPY clev_rec_type,
                                   x_clev_model_rec               OUT NOCOPY clev_rec_type,
                                   x_clev_fa_rec                  OUT NOCOPY clev_rec_type,
                                   x_clev_ib_rec                  OUT NOCOPY clev_rec_type
                                  ) IS

   l_proc_name VARCHAR2(35) := 'PROCESS_RELEASE_ASSET';
   release_failed EXCEPTION;

   l_clev_fin_rec clev_rec_type;
   l_klev_fin_rec klev_rec_type;
   l_clev_fa_rec  clev_rec_type;
   l_cimv_fa_rec  cimv_rec_type;
   l_talv_fa_rec  talv_rec_type;
   l_itiv_ib_tbl  itiv_tbl_type;
   l_cimv_model_rec cimv_rec_type;
   x_lse_id       NUMBER;
   x_comb_id      NUMBER;
   x_install_site_id NUMBER;

   x_txd_id       NUMBER;
   l_tal_id       NUMBER;

   l_adpv_rec     adpv_rec_type;
   x_adpv_rec     adpv_rec_type;

   x_party_pmnt_hdr_tbl_out pphv_tbl_type;
   l_counter                NUMBER;

   BEGIN

     x_return_status := OKL_API.G_RET_STS_SUCCESS;
     debug_message(l_proc_name);

     debug_message('------> Contract id: '||p_chr_id);
     debug_message('------> Asset id: '||p_asset_id);

     debug_message('------> Residual : '||p_residual_ptg||'/'||p_residual_amt);
     debug_message('------> Unit Price : '||p_unit_price);
     l_cimv_fa_rec.object1_id1 := p_asset_id;
     l_cimv_fa_rec.object1_id2 := '#';
     l_clev_fin_rec.dnz_chr_id := p_chr_id;

     IF (p_unit_price IS NOT NULL) THEN
         l_clev_fin_rec.price_unit       := p_unit_price;
         l_talv_fa_rec.original_cost     := p_unit_price;
     END IF;

     IF (p_residual_grnty_amt IS NOT NULL) THEN
         l_klev_fin_rec.residual_grnty_amount     := p_residual_grnty_amt;
     END IF;

     IF (p_residual_ptg IS NOT NULL) THEN
        l_klev_fin_rec.residual_percentage       := p_residual_ptg;
     END IF;

     IF (p_residual_amt IS NOT NULL) THEN
        l_klev_fin_rec.residual_value            := p_residual_amt;
     END IF;
     l_klev_fin_rec.residual_code             := NVL(p_residual_code,'NONE');

     IF (p_deprn_method IS NOT NULL) THEN
        l_talv_fa_rec.deprn_method               := p_deprn_method;
     END IF;

     IF (p_life_in_months IS NOT NULL) THEN
        l_talv_fa_rec.life_in_months             := p_life_in_months;
     END IF;

     IF (p_deprn_rate IS NOT NULL) THEN
        l_talv_fa_rec.deprn_rate                 := p_deprn_rate;
     END IF;

     IF (p_salvage_value IS NOT NULL) THEN
        l_talv_fa_rec.salvage_value              := p_salvage_value;
     END IF;

     IF (p_salvage_value IS NOT NULL) THEN
        l_talv_fa_rec.percent_salvage_value      := p_salvage_ptg;
     END IF;

     x_comb_id := NULL;
     get_flexid(
                x_return_status   => x_return_status,
                x_msg_count       => x_msg_count,
                x_msg_data        => x_msg_data,
                p_type            => 'ASSET_LOCATION',
                p_contract_number => p_contract_number,
                p_line_number     => p_line_number,
                p_comb_id         => p_asset_location_id,
                p_segment1        => p_asset_loc_segment1,
                p_segment2        => p_asset_loc_segment2,
                p_segment3        => p_asset_loc_segment3,
                p_segment4        => p_asset_loc_segment4,
                p_segment5        => p_asset_loc_segment5,
                p_segment6        => p_asset_loc_segment6,
                p_segment7        => p_asset_loc_segment7,
                x_comb_id         => x_comb_id
               );
     IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        RAISE release_failed;
     END IF;

     IF (x_comb_id IS NOT NULL) THEN
        l_talv_fa_rec.fa_location_id        := x_comb_id;
     END IF;

     IF (p_install_site_id IS NOT NULL
         OR
         p_install_site_num IS NOT NULL) THEN
        get_install_site_id(
                            x_return_status       => x_return_status,
                            x_msg_count           => x_msg_count,
                            x_msg_data            => x_msg_data,
                            p_contract_number     => p_contract_number,
                            p_line_number         => p_line_number,
                            p_install_site_id     => p_install_site_id,
                            p_install_site_number => p_install_site_num,
                            x_install_site_id     => x_install_site_id
                           );

        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           RAISE release_failed;
        END IF;
        l_itiv_ib_tbl(1).object_id1_new := x_install_site_id;
     END IF;

     -- Contract addl field, Bug 4558486

     debug_message('Contract release Asset line DFF...'||'Line#: '||p_line_number);

     l_klev_fin_rec.validate_dff_yn          := 'Y';  -- always validate DFF
     l_klev_fin_rec.attribute_category       := p_attribute_category;
     debug_message('attribute_category: '||l_klev_fin_rec.attribute_category);
     l_klev_fin_rec.attribute1               := p_attribute1;
     debug_message('attribute1: '||l_klev_fin_rec.attribute1);
     l_klev_fin_rec.attribute2               := p_attribute2;
     debug_message('attribute2: '||l_klev_fin_rec.attribute2);
     l_klev_fin_rec.attribute3               := p_attribute3;
     l_klev_fin_rec.attribute4               := p_attribute4;
     l_klev_fin_rec.attribute5               := p_attribute5;
     l_klev_fin_rec.attribute6               := p_attribute6;
     l_klev_fin_rec.attribute7               := p_attribute7;
     l_klev_fin_rec.attribute8               := p_attribute8;
     l_klev_fin_rec.attribute9               := p_attribute9;
     l_klev_fin_rec.attribute10              := p_attribute10;
     l_klev_fin_rec.attribute11              := p_attribute11;
     l_klev_fin_rec.attribute12              := p_attribute12;
     l_klev_fin_rec.attribute13              := p_attribute13;
     l_klev_fin_rec.attribute14              := p_attribute14;
     l_klev_fin_rec.attribute15              := p_attribute15;
     -- Contract addl field, Bug 4558486

     debug_message('======>Before calling create_all_line');
     okl_create_kle_pvt.Create_all_line(
                                        p_api_version    => 1.0,
                                        p_init_msg_list  => OKL_API.G_FALSE,
                                        x_return_status  => x_return_status,
                                        x_msg_count      => x_msg_count,
                                        x_msg_data       => x_msg_data,
                                        p_new_yn         => 'N',
                                        p_asset_number   => NULL, --p_asset_number,
                                        p_clev_fin_rec   => l_clev_fin_rec,
                                        p_klev_fin_rec   => l_klev_fin_rec,
                                        p_cimv_model_rec => l_cimv_model_rec,
                                        p_clev_fa_rec    => l_clev_fa_rec,
                                        p_cimv_fa_rec    => l_cimv_fa_rec,
                                        p_talv_fa_rec    => l_talv_fa_rec,
                                        p_itiv_ib_tbl    => l_itiv_ib_tbl,
                                        x_clev_fin_rec   => x_clev_fin_rec,
                                        x_clev_model_rec => x_clev_model_rec,
                                        x_clev_fa_rec    => x_clev_fa_rec,
                                        x_clev_ib_rec    => x_clev_ib_rec
                                       );

     debug_message('======>After calling create_all_line '||x_return_status);

     IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        RAISE release_failed;
     END IF;

     debug_message('------> clev_fin_rec.id: '||x_clev_fin_rec.id);
     debug_message('------> clev_model_rec.id: '||x_clev_model_rec.id);
     debug_message('------> clev_fa_rec.id: '||x_clev_fa_rec.id);
     debug_message('------> clev_ib_rec.id: '||x_clev_ib_rec.id);

     debug_message('------>Line created');

     IF (p_pth_evg_payout_basis is NOT NULL) THEN
        debug_message('------>Create party payment starts for Released Asset: '||p_asset_number || '/ '|| p_line_number);
        create_party_payment_hdr(
                                 x_return_status                   => x_return_status,
                                 x_msg_count                       => x_msg_count,
                                 x_msg_data                        => x_msg_data,
                                 p_contract_id                     => x_clev_fin_rec.dnz_chr_id,
                                 p_line_id                         => x_clev_fin_rec.id,
                                 p_line_type                       => 'ASSET',
                                 p_pth_start_date                  => p_pth_start_date,
                                 p_pth_base_payout_basis           => p_pth_base_payout_basis,
                                 p_pth_base_stream_code            => p_pth_base_stream_code,
                                 p_pth_base_stream_purpose_code    => p_pth_base_stream_purpose_code,
                                 p_pth_evg_payout_basis            => p_pth_evg_payout_basis,
                                 p_pth_payout_basis_formula        => p_pth_payout_basis_formula,
                                 p_pth_evg_stream_code             => p_pth_evg_stream_code,
                                 p_pth_evg_stream_purpose_code     => p_pth_evg_stream_purpose_code,
                                 x_party_pmnt_hdr_tbl              => x_party_pmnt_hdr_tbl_out
                                );

        debug_message('------>Create party payment ends '||x_return_status);
        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           RAISE release_failed;
        END IF;
	IF (x_party_pmnt_hdr_tbl_out.COUNT > 0 )THEN
	   l_counter := x_party_pmnt_hdr_tbl_out.FIRST;
	   LOOP
              IF (x_party_pmnt_hdr_tbl_out(l_counter).passthru_term = 'BASE') THEN
 	         g_base_pmnt_hdr := x_party_pmnt_hdr_tbl_out(l_counter);
	      ELSIF (x_party_pmnt_hdr_tbl_out(l_counter).passthru_term = 'EVERGREEN') THEN
		 g_evg_pmnt_hdr := x_party_pmnt_hdr_tbl_out(l_counter);
	      END IF;
	   EXIT WHEN (l_counter = x_party_pmnt_hdr_tbl_out.LAST);
              l_counter := x_party_pmnt_hdr_tbl_out.NEXT(l_counter);
	   END LOOP;
        END IF;
     END IF;

     -- Update TXD record for tax book, only if tax book is present
     IF (p_tax_book IS NOT NULL) THEN
        get_tal_id(
                   x_return_status => x_return_status,
                   p_fa_line_id    => x_clev_fa_rec.id,
                   x_tal_id        => l_tal_id);

        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           RAISE release_failed;
        END IF;

        debug_message('------> tal_id : '||l_tal_id);

        get_txd_id (
                    x_return_status   => x_return_status,
                    x_msg_count       => x_msg_count,
                    x_msg_data        => x_msg_data,
                    p_contract_number => p_contract_number,
                    p_tal_id          => l_tal_id,
                    p_tax_book        => p_tax_book,
                    x_txd_id          => x_txd_id
                   );

        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           x_return_status := OKL_API.G_RET_STS_ERROR;
           RAISE release_failed;
        END IF;

        l_adpv_rec.id                 := x_txd_id;
        l_adpv_rec.asset_number       := p_asset_number;
        l_adpv_rec.tal_id             := l_tal_id;

        IF (p_tax_deprn IS NOT NULL) THEN
           l_adpv_rec.deprn_method_tax   := p_tax_deprn;
        END IF;

        IF (p_tax_deprn_rate IS NOT NULL) THEN
           l_adpv_rec.deprn_rate_tax     := p_tax_deprn_rate;
        END IF;

        IF (p_tax_life_in_mnth IS NOT NULL) THEN
           l_adpv_rec.life_in_months_tax := p_tax_life_in_mnth;
        END IF;

        okl_txd_assets_pub.update_txd_asset_def(
                                                p_api_version     => 1.0,
                                                p_init_msg_list   => OKL_API.G_FALSE,
                                                x_return_status   => x_return_status,
                                                x_msg_count       => x_msg_count,
                                                x_msg_data        => x_msg_data,
                                                p_adpv_rec        => l_adpv_rec,
                                                x_adpv_rec        => x_adpv_rec
                                               );

        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            RAISE release_failed;
        END IF;

        debug_message('------>TXD Line Updated');

     END IF; -- p_asset_number not null

   EXCEPTION

    WHEN release_failed THEN
       x_return_status := OKL_API.G_RET_STS_ERROR;

    WHEN OTHERS THEN
      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;

   END process_release_asset;

------------------------------------------------------------------------------
-- PROCEDURE process_addon
-- This procedure processes and creates addon line for each asset.
-- Calls:
-- Called By:
--  load_input_record
------------------------------------------------------------------------------

   PROCEDURE process_addon(
                             x_return_status OUT NOCOPY VARCHAR2,
                             x_msg_count     OUT NOCOPY NUMBER,
                             x_msg_data      OUT NOCOPY VARCHAR2,
                             p_auth_org_id   IN  NUMBER,
                             p_contract_num  IN  VARCHAR2,
                             p_chr_id        IN  NUMBER,
                             p_fa_cle_id     IN  NUMBER,
                             p_asset_num     IN  VARCHAR2,
                             p_model_line_id IN  NUMBER,
                             p_number_of_items IN  NUMBER
                            ) IS

   subtype clev_tbl_type is OKL_CREATE_KLE_PUB.clev_tbl_type;
   subtype klev_tbl_type is OKL_CREATE_KLE_PUB.klev_tbl_type;
   subtype cimv_tbl_type is OKL_CREATE_KLE_PUB.cimv_tbl_type;

   -- Not needed these following three lines : AKP
   /*subtype clev_rec_type is OKL_CREATE_KLE_PUB.clev_rec_type;
   subtype klev_rec_type is OKL_CREATE_KLE_PUB.klev_rec_type;
   subtype cimv_rec_type is OKL_CREATE_KLE_PUB.cimv_rec_type; */

   l_clev_tbl clev_tbl_type;
   l_klev_tbl klev_tbl_type;
   l_cimv_tbl cimv_tbl_type;

   x_clev_tbl clev_tbl_type;
   x_klev_tbl klev_tbl_type;
   x_cimv_tbl cimv_tbl_type;

   l_clev_rec clev_rec_type;
   l_klev_rec klev_rec_type;
   x_fin_clev_rec clev_rec_type;
   x_fin_klev_rec klev_rec_type;
   l_cimv_rec cimv_rec_type;

   l_proc_name VARCHAR2(35):= 'PROCESS_ADDON';
   addon_failed EXCEPTION;

   x_inventory_org_id    NUMBER;
   x_inventory_item_id   NUMBER;

   x_asset_vendor_id NUMBER;
   p_cplv_rec cplv_rec_type;
   x_cplv_rec cplv_rec_type;
   l_kplv_rec         kplv_rec_type;
   x_kplv_rec         kplv_rec_type;

   x_ship_to_site_id okx_party_site_uses_v.id1%TYPE;
   p_sidv_rec sidv_rec_type;
   x_sidv_rec sidv_rec_type;

   CURSOR addon_csr (p_contract_number VARCHAR2,
                     p_asset_number VARCHAR2) IS
   SELECT *
   FROM   okl_lines_interface
   WHERE  line_type = 'ASSET_ADDON'
   AND    contract_number_old = p_contract_number
   AND    asset_number = p_asset_number;

   CURSOR okl_party_csr (p_contract_number_old VARCHAR2,
                        p_line_number         NUMBER) IS
   SELECT *
   FROM   okl_party_roles_interface
   WHERE  contract_number_old = p_contract_number_old
   AND    ( (line_number        = p_line_number
            AND
            p_line_number IS NOT NULL
            )
            OR
            (line_number   IS NULL
             AND
             p_line_number IS NULL
            )
          );

BEGIN

  x_return_status := OKL_API.G_RET_STS_SUCCESS;
  debug_message(l_proc_name);

  FOR addon_rec IN addon_csr (p_contract_num,
                              p_asset_num)
  LOOP
    debug_message('Processing Addon line number: '||addon_rec.line_number);
    -- validate addon

    -- Get Item and Organization Info, for All line type
    IF (addon_rec.inventory_item_id IS NOT NULL
              OR
        addon_rec.inventory_item_name IS NOT NULL) THEN
      get_inventory_org_item_id(
                    x_return_status       => x_return_status,
                    x_msg_count           => x_msg_count,
                    x_msg_data            => x_msg_data,
                    p_contract_number     => p_contract_num,
                    p_line_number         => addon_rec.line_number,
                    p_line_type           => addon_rec.line_type,
                    p_inventory_org_id    => p_auth_org_id,
                    p_inventory_item_id   => addon_rec.inventory_item_id,
                    p_inventory_item_name => addon_rec.inventory_item_name,
                    x_inventory_org_id    => x_inventory_org_id,
                    x_inventory_item_id   => x_inventory_item_id
                 );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        x_return_status := OKL_API.G_RET_STS_ERROR;
        RAISE addon_failed;
      END IF;

      -- Populate records and call create addon api
      l_clev_rec.cle_id := p_model_line_id;
      l_clev_rec.dnz_chr_id := p_chr_id;
      l_clev_rec.comments := addon_rec.DESCRIPTION;
      l_clev_rec.price_unit := addon_rec.ORIGINAL_COST;
      l_clev_rec.exception_yn := 'N';

      l_klev_rec.MANUFACTURER_NAME := addon_rec.MAKE;
      l_klev_rec.MODEL_NUMBER := addon_rec.MODEL;
      l_klev_rec.YEAR_OF_MANUFACTURE := addon_rec.YEAR_OF_MANUFACTURE;

      l_cimv_rec.object1_id1 := x_inventory_item_id;
      l_cimv_rec.object1_id2 := x_inventory_org_id;
      l_cimv_rec.exception_yn := 'N';
      l_cimv_rec.number_of_items := p_number_of_items;

      l_clev_tbl(1) := l_clev_rec;
      l_klev_tbl(1) := l_klev_rec;
      l_cimv_tbl(1) := l_cimv_rec;

      okl_create_kle_pub.create_add_on_line(
          p_api_version => 1,
          p_init_msg_list => OKC_API.G_FALSE,
          x_return_status => x_return_status,
          x_msg_count    => x_msg_count,
          x_msg_data     => x_msg_data,
          p_new_yn       => 'Y',
          p_asset_number => p_asset_num,
          p_clev_tbl     => l_clev_tbl,
          p_klev_tbl     => l_klev_tbl,
          p_cimv_tbl     => l_cimv_tbl,
          x_clev_tbl     => x_clev_tbl,
          x_klev_tbl     => x_klev_tbl,
          x_fin_clev_rec => x_fin_clev_rec,
          x_fin_klev_rec => x_fin_klev_rec,
          x_cimv_tbl     => x_cimv_tbl);

      debug_message('x_clev_tbl(1).id=' || x_clev_tbl(1).ID);
      --debug_message('x_klev_tbl(1).id=' || x_klev_tbl(1).ID);
      --debug_message('x_fin_clev_tbl(1).id=' || x_fin_clev_tbl(1).ID);
      --debug_message('x_fin_klev_tbl(1).id=' || x_fin_klev_tbl(1).ID);
      --debug_message('x_cimv_tbl(1).id=' || x_cimv_tbl(1).ID);

      debug_message('After create_add_on_line: x_return_status=' || x_return_status);
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
        RAISE addon_failed;
      END IF;

      -- Do process party role
      FOR okl_party_rec IN okl_party_csr(p_contract_num, addon_rec.line_number)
      LOOP
        IF (okl_party_rec.ASSET_VENDOR_ID IS NOT NULL) THEN
          x_asset_vendor_id := okl_party_rec.ASSET_VENDOR_ID;
        ELSE
          get_vendor_id (
                       x_return_status     => x_return_status,
                       x_msg_count         => x_msg_count,
                       x_msg_data          => x_msg_data,
                       p_contract_number   => p_contract_num,
                       p_line_number       => addon_rec.line_number,
                       x_vendor_id         => x_asset_vendor_id,
                       p_vendor_name       => okl_party_rec.ASSET_VENDOR_NAME
                      );
          debug_message('Addon:x_asset_vendor_id=' || x_asset_vendor_id);
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             RAISE addon_failed;
          END IF;
        END IF;

        IF (x_asset_vendor_id IS NOT NULL) THEN
          p_cplv_rec := NULL;
          p_cplv_rec.chr_id := NULL;
          p_cplv_rec.dnz_chr_id := p_chr_id;
          p_cplv_rec.cle_id := x_clev_tbl(1).ID;
          p_cplv_rec.object1_id1       := TO_CHAR(x_asset_vendor_id);
          p_cplv_rec.object1_id2       := '#';
          p_cplv_rec.jtot_object1_code := 'OKX_VENDOR';
          p_cplv_rec.rle_code          := 'OKL_VENDOR';
          OKL_K_PARTY_ROLES_PVT.create_k_party_role(
                                  p_api_version   => 1.0,
                                  p_init_msg_list => OKL_API.G_FALSE,
                                  x_return_status => x_return_status,
                                  x_msg_count     => x_msg_count,
                                  x_msg_data      => x_msg_data,
                                  p_cplv_rec      => p_cplv_rec,
                                  p_kplv_rec      => l_kplv_rec,
                                  x_cplv_rec      => x_cplv_rec,
                                  x_kplv_rec      => x_kplv_rec
                                );

         debug_message('x_cplv_rec.id=' || x_cplv_rec.ID);
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE addon_failed;
         END IF;

        END IF;

      END LOOP; -- okl_party_csr

      -- Do create supp invoice details
      IF (x_asset_vendor_id is NOT NULL) THEN
        debug_message('x_clev_tbl(1).ID=' || x_clev_tbl(1).ID);
        debug_message('p_fa_cle_id=' || p_fa_cle_id);
        p_sidv_rec.cle_id                := x_clev_tbl(1).id;
        p_sidv_rec.fa_cle_id             := p_fa_cle_id;
        p_sidv_rec.invoice_number        := addon_rec.vendor_invoice_number;
        p_sidv_rec.date_invoiced         := addon_rec.vendor_invoice_date;
        IF (addon_rec.ship_to_site_id IS NOT NULL
                OR
            addon_rec.ship_to_site_number IS NOT NULL) THEN
          get_ship_to_site(
                           x_return_status       => x_return_status,
                           x_msg_count           => x_msg_count,
                           x_msg_data            => x_msg_data,
                           p_contract_number     => p_contract_num,
                           p_line_number         => addon_rec.line_number,
                           p_auth_org_id         => p_auth_org_id,
                           p_ship_to_site_number => addon_rec.ship_to_site_number,
                           p_ship_to_site_id     => addon_rec.ship_to_site_id,
                           x_ship_to_site_id     => x_ship_to_site_id
                         );
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE addon_failed;
            x_return_status := OKL_API.G_RET_STS_ERROR;
          END IF;

          debug_message('x_ship_to_site_id=' || x_ship_to_site_id);
          p_sidv_rec.shipping_address_id1  := x_ship_to_site_id;
          p_sidv_rec.shipping_address_id2  := '#';
          p_sidv_rec.shipping_address_code := 'OKX_CUSTSITE';
        END IF;

        okl_supp_invoice_dtls_pub.create_sup_inv_dtls(
                       p_api_version => 1.0,
                       x_return_status => x_return_status,
                       x_msg_count     => x_msg_count,
                       x_msg_data      => x_msg_data,
                       p_sidv_rec      => p_sidv_rec,
                       x_sidv_rec      => x_sidv_rec
                     );
        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          x_return_status := OKL_API.G_RET_STS_ERROR;
          RAISE addon_failed;
        END IF;
      ELSE
        IF (addon_rec.vendor_invoice_number IS NOT NULL OR
            addon_rec.vendor_invoice_date IS NOT NULL OR
            addon_rec.ship_to_site_id IS NOT NULL OR
            addon_rec.ship_to_site_number IS NOT NULL) THEN
           okl_api.set_message(
                               G_APP_NAME,
                               G_MISSING_VALUE_FOR_LINE,
                               'CONTRACT_NUM',
                               p_contract_num, --||'/'||addon_rec.line_number,
                               'COL_NAME',
                               'ADDON:ASSET_VENDOR_ID, ADDON:ASSET_VENDOR_NAME',
                               'LINE',
                               'Line Number ' || addon_rec.line_number || ' in party_roles_interface'
                              );
           RAISE addon_failed;
        END IF;
      END IF;


      -- Done processing. Now delete the tables.
      l_clev_tbl.delete;
      l_klev_tbl.delete;
      l_cimv_tbl.delete;

    END IF;


  END LOOP;

   EXCEPTION
      WHEN addon_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;

END process_addon;

------------------------------------------------------------------------------
-- PROCEDURE process_subsidy
-- This procedure processes and creates subsidy line for each asset.
-- Calls:
-- Called By:
--  load_input_record
------------------------------------------------------------------------------
   PROCEDURE process_subsidy(
                             x_return_status OUT NOCOPY VARCHAR2,
                             x_msg_count     OUT NOCOPY NUMBER,
                             x_msg_data      OUT NOCOPY VARCHAR2,
                             p_auth_org_id   IN  NUMBER,
                             p_contract_num  IN  VARCHAR2,
                             p_chr_id        IN  NUMBER,
                             p_asset_line_id IN  NUMBER,
                             p_asset_num     IN  VARCHAR2
                            ) IS
   l_proc_name VARCHAR2(35):= 'PROCESS_SUBSIDY';
   subsidy_failed EXCEPTION;

   CURSOR subsidy_csr (p_contract_number VARCHAR2,
                       p_asset_number VARCHAR2) IS
   SELECT *
   FROM   okl_lines_interface
   WHERE  line_type = 'ASSET_SUBSIDY'
   AND    contract_number_old = p_contract_number
   AND    asset_number = p_asset_number;

   l_subsidy_id okl_subsidies_b.id%TYPE;
   l_vendor_id  okl_subsidies_b.vendor_id%TYPE;
   l_paysite_id NUMBER;
   l_payterm_id NUMBER;

   l_asb_rec    okl_asset_subsidy_pvt.asb_rec_type;
   x_asb_rec    okl_asset_subsidy_pvt.asb_rec_type;

   l_srfvv_rec  okl_subsidy_rfnd_dtls_pvt.srfvv_rec_type;
   x_srfvv_rec  okl_subsidy_rfnd_dtls_pvt.srfvv_rec_type;

   CURSOR vendor_csr (p_name VARCHAR2) IS
   SELECT vendor_id
   FROM   po_vendors
   WHERE  vendor_name = p_name;

   CURSOR sub_id_csr (p_name okl_subsidies_b.name%TYPE,
                      p_org  NUMBER) IS
   SELECT id
   FROM   okl_subsidies_b
   WHERE  name   = p_name
   AND    org_id = p_org;

   CURSOR paysite_csr (p_code po_vendor_sites_all.vendor_site_code%TYPE,
                       p_ven_id NUMBER,
                       p_org  NUMBER) IS
   SELECT vendor_site_id
   FROM   po_vendor_sites_all
   WHERE  vendor_site_code = p_code
   AND    vendor_id        = p_ven_id
   AND    org_id           = p_org;

   CURSOR payterm_csr (p_name okx_payables_terms_v.name%TYPE) IS
   SELECT id1
   FROM   okx_payables_terms_v
   WHERE  NAME   = p_name
   AND    status = 'A';

   BEGIN
      x_return_status := OKL_API.G_RET_STS_SUCCESS;
      debug_message(l_proc_name);

      FOR subsidy_rec IN subsidy_csr (p_contract_num,
                                      p_asset_num)
      LOOP
        debug_message('Processing Subsidy line number: '||subsidy_rec.line_number);
        -- validate subsidy
        IF (subsidy_rec.subsidy_id IS NOT NULL) THEN
           l_subsidy_id := subsidy_rec.subsidy_id;
        ELSIF (subsidy_rec.subsidy_name IS NOT NULL) THEN
           OPEN sub_id_csr (subsidy_rec.subsidy_name,
                            p_auth_org_id);
           FETCH sub_id_csr INTO l_subsidy_id;
           IF sub_id_csr%NOTFOUND THEN
              -- Error
              okl_api.set_message(
                                  G_APP_NAME,
                                  G_INVALID_VALUE,
                                  'CONTRACT_NUM',
                                  p_contract_num||'/'||subsidy_rec.line_number,
                                  'COL_NAME',
                                  'SUBSIDY_NAME',
                                  'COL_VALUE',
                                  subsidy_rec.subsidy_name
                                 );
              RAISE subsidy_failed;
           END IF;
           CLOSE sub_id_csr;
        ELSE
           okl_api.set_message(
                               G_APP_NAME,
                               G_MISSING_VALUE_FOR_LINE,
                               'CONTRACT_NUM',
                               p_contract_num||'/'||subsidy_rec.line_number,
                               'COL_NAME',
                               'SUBSIDY_ID, NAME'
                              );
           RAISE subsidy_failed;
        END IF;

        -- validate vendor
        IF (subsidy_rec.subsidy_party_id IS NOT NULL) THEN
           l_vendor_id := subsidy_rec.subsidy_party_id;
        ELSIF (subsidy_rec.subsidy_party_name IS NOT NULL) THEN
           OPEN vendor_csr (subsidy_rec.subsidy_party_name);
           FETCH vendor_csr INTO l_vendor_id;
           IF vendor_csr%NOTFOUND THEN
              okl_api.set_message(
                                  G_APP_NAME,
                                  G_INVALID_VALUE,
                                  'CONTRACT_NUM',
                                  p_contract_num||'/'||subsidy_rec.line_number,
                                  'COL_NAME',
                                  'SUBSIDY_PARTY_ID, NAME',
                                  'COL_VALUE',
                                  subsidy_rec.subsidy_party_id||', '||subsidy_rec.subsidy_party_name
                                 );
              RAISE subsidy_failed;
           END IF;
           CLOSE vendor_csr;
        ELSE
           l_vendor_id := NULL;
        END IF;

        l_asb_rec.subsidy_id               := l_subsidy_id;
        l_asb_rec.subsidy_override_amount  := subsidy_rec.subsidy_override_amount;
        l_asb_rec.dnz_chr_id               := p_chr_id;
        l_asb_rec.asset_cle_id             := p_asset_line_id;
        l_asb_rec.vendor_id                := l_vendor_id;

        debug_message('Subsidy: '||l_asb_rec.subsidy_id);
        debug_message('Override: '||l_asb_rec.subsidy_override_amount);
        debug_message('asset_cle_id: '||l_asb_rec.asset_cle_id);
        debug_message('vendor: '||l_asb_rec.vendor_id);

        okl_asset_subsidy_pvt.create_asset_subsidy(
                    p_api_version    => 1.0,
                    p_init_msg_list  => OKL_API.G_FALSE,
                    x_return_status  => x_return_status,
                    x_msg_count      => x_msg_count,
                    x_msg_data       => x_msg_data,
                    p_asb_rec        => l_asb_rec,
                    x_asb_rec        => x_asb_rec
                   );

        debug_message('okl_asset_subsidy_pvt.create_asset_subsidy: '||x_return_status);

        IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
           RAISE subsidy_failed;
        END IF;

        -- refund detail if any
        IF (subsidy_rec.subsidy_refnd_paysite_id IS NOT NULL
            OR
            subsidy_rec.subsidy_refnd_paysite_code IS NOT NULL
            OR
            subsidy_rec.subsidy_refnd_payterm_id IS NOT NULL
            OR
            subsidy_rec.subsidy_refnd_payterm_name IS NOT NULL
            OR
            subsidy_rec.subsidy_refnd_paymethod_code IS NOT NULL) THEN

           IF (subsidy_rec.subsidy_refnd_paysite_id IS NOT NULL) THEN
               l_paysite_id := subsidy_rec.subsidy_refnd_paysite_id;
           ELSIF (subsidy_rec.subsidy_refnd_paysite_code IS NOT NULL) THEN
              -- get pay site id
              OPEN paysite_csr(subsidy_rec.subsidy_refnd_paysite_code,
                               l_vendor_id,
                               p_auth_org_id);
              FETCH paysite_csr INTO l_paysite_id;
              IF paysite_csr%NOTFOUND THEN
                -- error
                okl_api.set_message(
                                    G_APP_NAME,
                                    G_INVALID_VALUE,
                                    'CONTRACT_NUM',
                                    p_contract_num||'/'||subsidy_rec.line_number,
                                    'COL_NAME',
                                    'SUBSIDY_REFND_PAYSITE_ID, CODE',
                                    'COL_VALUE',
                                     subsidy_rec.subsidy_refnd_paysite_id||', '||subsidy_rec.subsidy_refnd_paysite_code
                                   );
                RAISE subsidy_failed;
              END IF;
              CLOSE paysite_csr;
           ELSE
              okl_api.set_message(
                                  G_APP_NAME,
                                  G_MISSING_VALUE_FOR_LINE,
                                  'CONTRACT_NUM',
                                  p_contract_num||'/'||subsidy_rec.line_number,
                                  'COL_NAME',
                                  'SUBSIDY_REFND_PAYSITE_ID/CODE'
                                 );
              RAISE subsidy_failed;
           END IF;

           IF (subsidy_rec.subsidy_refnd_payterm_id IS NOT NULL) THEN
               l_payterm_id := subsidy_rec.subsidy_refnd_payterm_id;
           ELSIF (subsidy_rec.subsidy_refnd_payterm_name IS NOT NULL) THEN
               -- get payterm id
              OPEN payterm_csr(subsidy_rec.subsidy_refnd_payterm_name);
              FETCH payterm_csr INTO l_payterm_id;
              IF payterm_csr%NOTFOUND THEN
                -- error
                okl_api.set_message(
                                    G_APP_NAME,
                                    G_INVALID_VALUE,
                                    'CONTRACT_NUM',
                                    p_contract_num||'/'||subsidy_rec.line_number,
                                    'COL_NAME',
                                    'SUBSIDY_REFND_PAYTERM_ID, NAME',
                                    'COL_VALUE',
                                     subsidy_rec.subsidy_refnd_payterm_id||', '||subsidy_rec.subsidy_refnd_payterm_name
                                   );
                RAISE subsidy_failed;
              END IF;
              CLOSE payterm_csr;
           ELSE
              okl_api.set_message(
                                  G_APP_NAME,
                                  G_MISSING_VALUE_FOR_LINE,
                                  'CONTRACT_NUM',
                                  p_contract_num||'/'||subsidy_rec.line_number,
                                  'COL_NAME',
                                  'SUBSIDY_REFND_PAYTERM_ID/NAME'
                                 );
              RAISE subsidy_failed;
           END IF;

           l_srfvv_rec.cpl_id              := x_asb_rec.cpl_id;
           l_srfvv_rec.vendor_id           := l_vendor_id;
           l_srfvv_rec.pay_site_id         := l_paysite_id;
           l_srfvv_rec.payment_term_id     := l_payterm_id;
           l_srfvv_rec.payment_method_code := subsidy_rec.subsidy_refnd_paymethod_code;
           l_srfvv_rec.pay_group_code      := subsidy_rec.subsidy_refnd_paygroup_code;

           debug_message('l_srfvv_rec.cpl_id: '||l_srfvv_rec.cpl_id);
           debug_message('l_srfvv_rec.vendor_id: '||l_srfvv_rec.vendor_id);
           debug_message('l_srfvv_rec.pay_site_id: '||l_srfvv_rec.pay_site_id);
           debug_message('l_srfvv_rec.payment_term_id: '||l_srfvv_rec.payment_term_id);
           debug_message('l_srfvv_rec.payment_method_code: '||l_srfvv_rec.payment_method_code);
           debug_message('l_srfvv_rec.pay_group_code: '||l_srfvv_rec.pay_group_code);

           okl_subsidy_rfnd_dtls_pvt.create_refund_dtls(
                     p_api_version    => 1.0,
                     p_init_msg_list  => OKL_API.G_FALSE,
                     x_return_status  => x_return_status,
                     x_msg_count      => x_msg_count,
                     x_msg_data       => x_msg_data,
                     p_srfvv_rec      => l_srfvv_rec,
                     x_srfvv_rec      => x_srfvv_rec
                    );

           debug_message('okl_subsidy_rfnd_dtls_pvt.create_refund_dtls: '||x_return_status);
           IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
              RAISE subsidy_failed;
           END IF;

        END IF; -- refund detail

      END LOOP; --subsidy_rec

   EXCEPTION
      WHEN subsidy_failed THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
   END process_subsidy;

------------------------------------------------------------------------------
-- PROCEDURE check_and_delete
-- This procedure deletes contracts from OLM and
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
------------------------------------------------------------------------------

   PROCEDURE check_and_delete(
                       x_return_status   OUT NOCOPY VARCHAR2,
                       x_msg_count       OUT NOCOPY NUMBER,
                       x_msg_data        OUT NOCOPY VARCHAR2,
                       p_contract_number IN  varchar2,
                       p_delete_before_import_yn IN  varchar2 -- akp_delete
                      ) IS

    l_proc_name VARCHAR2(35) := 'CHECK_AND_DELETE';
    l_contract_id okc_k_headers_b.id%type;

    cursor get_contract_id(p_contract_no varchar2) is
      select id
      from okc_k_headers_b
      where  contract_number = p_contract_no;

    -- udhenuko Bug#5666768 Start
    l_ipyv_rec okl_ipy_pvt.ipyv_rec_type;
    l_ins_id    okl_ins_policies_b.id%TYPE;
    cursor get_ins_id_csr(p_khr_id in number) is
    select id
    from okl_ins_policies_b where khr_id=p_khr_id;
    --Bug#5666768 end

    BEGIN
       x_return_status := OKL_API.G_RET_STS_SUCCESS;
       debug_message(l_proc_name);

       if (p_contract_number is null) then
         return;
       end if;

       if (upper(nvl(p_delete_before_import_yn, 'N')) <> 'Y') then
         return;
       end if;

       debug_message('Contract ' || p_contract_number || ' picked up for delete...');
       open get_contract_id(p_contract_number);
       fetch get_contract_id into l_contract_id;
       if get_contract_id%notfound then
         close get_contract_id;
         debug_message('Contract ' || p_contract_number || ' not found in OLM for delete...');
         return;
       else
         close get_contract_id;

         -- Call Delete API
         okl_contract_pub.delete_contract(
          p_api_version   => 1.0,
          p_init_msg_list => OKL_API.G_FALSE,
          x_return_status => x_return_status,
          x_msg_count     => x_msg_count,
          x_msg_data      => x_msg_data,
          p_contract_id   => l_contract_id );
         IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
           debug_message('Contract ' || p_contract_number || ' deleted from OLM...');
         ELSE
           debug_message('Error during delete contract ' || p_contract_number );
         END IF;

       --Bug#5666768 - Start. Invoke the TAPI
         open get_ins_id_csr(l_contract_id);
         fetch get_ins_id_csr into l_ins_id;
         if get_ins_id_csr%notfound then
            close get_ins_id_csr;
       	    debug_message('Insurance Policy for Contract ' || p_contract_number || ' not found..');
            return;
	 end if;
         close get_ins_id_csr;
         l_ipyv_rec.id:=l_ins_id;
         OKL_INS_POLICIES_PUB.delete_ins_policies(p_api_version   => 1.0,
                                                  p_init_msg_list => OKL_API.G_FALSE,
                                                  x_return_status => x_return_status,
                                                  x_msg_count     => x_msg_count,
                                                  x_msg_data      => x_msg_data,
                                                  p_ipyv_rec      => l_ipyv_rec);
         IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN
           debug_message('Contract ' || p_contract_number || ' deleted from OLM after delete_ins_policies...');
         ELSE
           debug_message('Error during  OKL_INS_POLICIES_PUB.delete_ins_policies ' || p_contract_number );
         END IF;
       end if;
       --Bug#5666768 end

    END check_and_delete;

------------------------------------------------------------------------------
-- PROCEDURE Load_Input_Record
-- It Reads data from Interface Tables and Validates. During process of validation it
-- stacks Error, if any, and returns ERROR status to calling process.
-- Calls:
--  get_agreement_id
--  get_product_id
--  create_party_role
--  create_contact
--  create_header_rules
--  get_lse_id
--  get_inventory_org_item_id
--  get_asset_id
--  get_install_site_id
--  process_other_line
--  create_line_rules
--  process_party_role
--  process_term
--  create_payment_rule_group
--  check_payment_frequency_code
--  create_payment_other_rules
--  report_error
--  update_interface_status
-- Called By:
--  process_record
------------------------------------------------------------------------------
  PROCEDURE Load_Input_Record(
                            p_init_msg_list    IN VARCHAR2,
                            x_return_status    OUT NOCOPY VARCHAR2,
                            x_msg_count        OUT NOCOPY NUMBER,
                            x_msg_data         OUT NOCOPY VARCHAR2,
                            p_batch_number     IN  VARCHAR2,
                            p_start_date_from  IN  DATE,
                            p_start_date_to    IN  DATE,
                            p_contract_number  IN  VARCHAR2,
                            p_customer_number  IN  VARCHAR2,
                            x_total_loaded     OUT NOCOPY NUMBER
                           ) IS

  -- local variables
  l_proc_name           VARCHAR2(35)  := 'LOAD_INPUT_RECORD';
  l_progress            VARCHAR2(3)   := NULL;
  x_master_lease_id     OKC_K_HEADERS_V.ID%TYPE;
  x_customer_account_id NUMBER;
  x_inventory_org_id    NUMBER;
  x_inventory_item_id   NUMBER;
  x_lse_id              NUMBER;
  x_id1                 okx_assets_v.id1%TYPE;
  x_id2                 okx_assets_v.id2%TYPE;
  l_no_of_lines         NUMBER;
  l_ib_line_count       NUMBER;
--  l_new_yn              VARCHAR2(1);
  x_comb_id             NUMBER;
  x_rgp_id              NUMBER;
  l_contract_number_old_prev okl_header_interface.contract_number_old%TYPE;
  l_line_number_prev    okl_lines_interface.line_number%TYPE;
  l_asset_number_prev   okl_payments_interface.asset_number%TYPE;
  l_payment_type_code_prev   okl_payments_interface.payment_type_code%TYPE;
  l_pmnt_sch_num_prev   NUMBER;
  l_start_date_prev     DATE;
  l_number_of_periods_prev NUMBER;
  x_pmnt_freq_id        okx_tuom_v.id1%TYPE;
  x_uom_code            okx_tuom_v.uom_code%TYPE;
  l_mult_factor         NUMBER;
  l_current_start_date  DATE;
  x_install_site_id     okx_party_site_uses_v.id1%TYPE;
  l_rule_create_flag    VARCHAR2(1) := 'Y';

  x_inv_item_id_prev    NUMBER;
  p_inv_item_id_prev    NUMBER;
  p_line_type_prev      VARCHAR2(35);
  x_ship_to_site_id     okx_party_site_uses_v.id1%TYPE;
  l_rg_id               NUMBER;

  x_cle_id              okc_k_lines_v.id%TYPE;
  p_cle_id              okc_k_lines_v.id%TYPE;

  -- Header Rec
  p_chrv_rec        chrv_rec_type;
  p_khrv_rec        khrv_rec_type;
  x_chrv_rec        chrv_rec_type;
  x_khrv_rec        khrv_rec_type;

  l_chrv_rec        chrv_rec_type;
  l_khrv_rec        khrv_rec_type;

  l_gvev_rec        gvev_rec_type;
  x_gvev_rec        gvev_rec_type;

  -- Party Role Rec
  p_cplv_rec        cplv_rec_type;
  x_cplv_rec        cplv_rec_type;

  -- Lines Rec
  p_clev_fin_rec   clev_rec_type;
  p_klev_fin_rec   klev_rec_type;
  p_cimv_model_rec cimv_rec_type;
  p_clev_fa_rec    clev_rec_type;
  p_cimv_fa_rec    cimv_rec_type;
  p_talv_fa_rec    talv_rec_type;
  p_itiv_ib_tbl    itiv_tbl_type;
  p_sidv_rec       sidv_rec_type;
  x_sidv_rec       sidv_rec_type;

  x_clev_fin_rec   clev_rec_type;
  x_clev_model_rec clev_rec_type;
  x_clev_fa_rec    clev_rec_type;
  x_clev_ib_rec    clev_rec_type;

  l_talv_rec       tlpv_rec_type;
  x_talv_rec       tlpv_rec_type;

  x_slh_rulv_rec   rulv_rec_type;

  l_adpv_rec      adpv_rec_type;
  x_adpv_rec      adpv_rec_type;
  l_tal_id        NUMBER;

  l_msg_tbl       Okl_Qa_Check_Pub.msg_tbl_type;

  l_intf_h_rec      intf_h_rec_type;
  okl_header_rec    intf_h_rec_type; --cklee

  l_header_template template_h_rec_type; -- Header template record

  l_service_line_id        OKC_K_LINES_V.ID%TYPE;
  l_fee_line_id            OKC_K_LINES_V.ID%TYPE;
  l_usage_line_id          OKC_K_LINES_V.ID%TYPE;

  x_update_status          VARCHAR2(1);
  header_validation_failed EXCEPTION;
  line_validation_failed   EXCEPTION;
  load_failed              EXCEPTION;
    CURSOR le_entity(p_org_id NUMBER ,
	p_legal_entity NUMBER) IS
  select 1 from
  xle_le_ou_ledger_v
  where OPERATING_UNIT_ID=p_org_id
  and LEGAL_ENTITY_ID=p_legal_entity; -- cusrsor to get LE for  an OU


  CURSOR proc_cob_csr (p_batch_number    VARCHAR2,
                       p_start_date_from DATE,
                       p_start_date_to   DATE,
                       p_contract_number VARCHAR2,
                       p_customer_number VARCHAR2 ) IS

  SELECT       BATCH_NUMBER
      ,TEMPLATE_NUMBER
     ,STATUS
     ,CREATED_BY
     ,DATE_CREATED
     ,DATE_CREATED_IN_OKL
     ,APPLICATION_CODE
     ,CONTRACT_CATEGORY
     ,CONTRACT_NUMBER_OLD
     ,CONTRACT_SOURCE
     ,CONTRACT_NUMBER
     ,CUSTOMER_NUMBER
     ,CUSTOMER_ID
     ,CUSTOMER_ACCOUNT_NUMBER
     ,CUSTOMER_ACCOUNT_ID
     ,START_DATE
     ,IMPORT_REQUEST_STAGE
     ,CURRENCY_CODE
     ,CUSTOMER_PO_NUMBER
     ,DATE_SIGNED
     ,DATE_APPROVED
     ,ACCEPTANCE_METHOD_CODE
     ,CONSUMER_CREDIT_ACT_DEAL_FLAG
     ,TERM
     ,CONVERTED_ACCOUNT
     ,ACCEPTED_DATE
     ,DEAL_TYPE_CODE
     ,EXPECTED_DELIVERY_DATE
     ,CONTRACT_DESCRIPTION
     ,SALESPERSON_NAME
     ,SALESPERSON_ID
     ,PRIVATE_LABEL_NUMBER
     ,PRIVATE_LABEL_ID
     ,PRIVATE_LABEL_URL
     ,PROGRAM_AGREEMENT_NUMBER
     ,PROGRAM_AGREEMENT_ID
     ,PROGRAM_VENDOR_NAME
     ,PROGRAM_VENDOR_ID
     ,MASTER_LEASE_AGREEMENT_NUMBER
     ,MASTER_LEASE_AGREEMENT_ID
     ,PRODUCT_NAME
     ,PRODUCT_ID
     ,CALCULATE_RESIDUAL_INSURANCE
     ,REBOOK_LIMIT_DATE
     ,IMPORT_REQUEST_ID
     ,END_OF_TERM_OPTION
     ,END_OF_TERM_AMOUNT
     ,MID_TERM_OPTION
     ,MID_TERM_AMOUNT
     ,SECURITY_DEPOSIT_HOLD_FLAG
     ,SECURITY_DEPOSIT_NET_FLAG
     ,SECURITY_DEPOSIT_DATE
     ,RENEWAL_NOTICE_DAYS
     ,RENEWAL_OPTION
     ,RENEWAL_AMOUNT
     ,LATE_INTEREST_HELD_UNTIL_DATE
     ,LATE_INTEREST_EXEMPT_FLAG
     ,LATE_INTEREST_PRODUCT_CODE
     ,LATE_CHARGE_HELD_UNTIL_DATE
     ,LATE_CHARGE_PRODUCT_CODE
     ,LATE_CHARGE_EXEMPT_FLAG
     ,VARIABLE_RATE
     ,CONVERT_TYPE
     ,CONVERSION_METHOD
     ,DATE_OF_CONVERSION
     ,CONVERT_BY_DATE
     ,VARIABLE_METHOD
     ,INDEX_NAME
     ,BASE_RATE
     ,ADDER
     ,MINIMUM_RATE
     ,MAXIMUM_RATE
     ,TOLERANCE
     ,ADJUSTMENT_FREQUENCY
     ,DAYS_IN_YEAR
     ,DAYS_IN_MONTH
     ,INTEREST_METHOD
     ,INTEREST_START_DATE
     ,METHOD_OF_CALCULATION
     ,FORMULA_NAME
     ,CAPITALIZE_FLAG
     ,NON_NOTIFICATION_FLAG
     ,TAX_WITHHOLDING_FLAG
     ,TAX_CALC_FORMULA_NAME
     ,TAX_OWNER
     ,FACTORING_DATE
     ,FACTORING_PERCENTAGE
     ,FACTORING_DISCOUNT_RATE
     ,EVERGREEN_ELIGIBLE_FLAG
     ,BILL_TO_ADDRESS_ID
     ,BILL_TO_ADDRESS
     ,BANK_ACCOUNT_ID
     ,BANK_ACCOUNT_NUMBER
     ,REASON_FOR_INVOICE_REVIEW
     ,INVOICE_REVIEW_UNTIL_DATE
     ,INVOICE_FORMAT_ID
     ,INVOICE_FORMAT_CODE
     ,PRINT_LEAD_DAYS   --hariven bug 5359935
     ,REVIEW_INVOICE_FLAG
     ,PAYMENT_METHOD_ID
     ,PAYMENT_METHOD
     ,AUTHORING_ORG_ID
     ,INVENTORY_ORGANIZATION_ID
     ,POLICY_NUMBER
     ,POLICY_EFFECTIVE_FROM
     ,POLICY_EFFECTIVE_TO
     ,COVERED_AMOUNT
     ,DEDUCTIBLE_AMOUNT
     ,ENDORSEMENT
     ,NAME_OF_INSURED
     ,LESSOR_INSURED_FLAG
     ,LESSOR_PAYEE_FLAG
     ,INSURANCE_COMPANY_NAME
     ,INSURANCE_COMPANY_ID
     ,INSURANCE_COMPANY_SITE_NAME
     ,INSURANCE_COMPANY_SITE_ID
     ,AGENT_NAME
     ,AGENT_ID
     ,AGENT_ADDRESS_SITE_NAME
     ,AGENT_ADDRESS_SITE_ID
     ,PROOF_DUE_DATE
     ,PROOF_PROVIDED_DATE
     ,PREFUNDING_ELIGIBLE_FLAG
     ,PRIVATE_ACTIVITY_BOND_FLAG
     ,RVI_AUTO_CALCULATE_FLAG
     ,RVI_GUARANTEED_AMOUNT
     ,RVI_PRESENT_GUARANTEED_AMOUNT
     ,RVI_PREMIUM_AMOUNT
     ,RVI_RATE
     ,FLOOR_PRICE_FORMULA
     ,REMKT_SALE_PRICE_FORMULA
     ,REPURCHASE_QUOTE_OPTION
     ,REPURCHASE_QUOTE_FORMULA
     ,SALE_PRICE_OPTION
     ,SALE_PRICE_AMOUNT
     ,SALE_PRICE_FORMULA
     ,SALE_PRICE_PRORATE
     ,DISCOUNT_RATE_OPTION
     ,DISCOUNT_RATE_AMOUNT
     ,DISCOUNT_RATE_FORMULA
     ,DISCOUNT_RATE_PRORATE
     ,QUOTE_FEE_OPTION
     ,QUOTE_FEE_AMOUNT
     ,QUOTE_FEE_FORMULA
     ,QUOTE_FEE_PRORATE
     ,ERT_PURCHASE_OPT
     ,ERT_PURCHASE_OPT_TYPE
     ,ERT_PURCHASE_OPT_AMOUNT
     ,ERT_PURCHASE_OPT_FORMULA
     ,ERT_PURCHASE_OPT_PRORATE
     ,ERT_PURCHASE_OPT_MAX_OPT
     ,ERT_PURCHASE_OPT_MAX_AMT
     ,ERT_PURCHASE_OPT_MAX_FORMULA
     ,ERT_PURCHASE_OPT_MIN_OPT
     ,ERT_PURCHASE_OPT_MIN_AMT
     ,ERT_PURCHASE_OPT_MIN_FORMULA
     ,EOT_PURCHASE_OPT
     ,EOT_PURCHASE_OPT_TYPE
     ,EOT_PURCHASE_OPT_AMOUNT
     ,EOT_PURCHASE_OPT_FORMULA
     ,EOT_PURCHASE_OPT_PRORATE
     ,EOT_PURCHASE_OPT_MAX_OPT
     ,EOT_PURCHASE_OPT_MAX_AMT
     ,EOT_PURCHASE_OPT_MAX_FORMULA
     ,EOT_PURCHASE_OPT_MIN_OPT
     ,EOT_PURCHASE_OPT_MIN_AMT
     ,EOT_PURCHASE_OPT_MIN_FORMULA
     ,TQP_ERL_TERMINATION_ALWD_FLAG
     ,TQP_PRT_TERMINATION_ALWD_FLAG
     ,QUOTE_EFFECTIVE_DAYS
     ,QUOTE_EFF_MAX_DAYS
     ,EOT_TOLERANCE_DAYS
     ,PRT_TERMINATION_APPROVAL_REQ
     ,PRT_TERMINATION_ALLOWED_FLAG
     ,GAIN_LOSS_APPROVAL_REQ
     ,GAIN_LOSS_NET_QUOTE_OPT
     ,GAIN_LOSS_NET_QUOTE_AMT
     ,GAIN_LOSS_NET_QUOTE_FORMULA
     ,GAIN_LOSS_TOLERANCE_ALLOWED
     ,QUOTE_RCPT_CONTRACT_ROLE
     ,QUOTE_APPROVER_CONTRACT_ROLE
     ,QUOTE_CRTSY_COPY_CONTRACT_ROLE
     ,ERT_QUOTE_CALC_TERM_OPTION
     ,ERT_QUOTE_CALC_TERM_FORMULA
     ,ERT_CONTRACT_OBLIG_OPT
     ,ERT_CONTRACT_OBLIG_AMOUNT
     ,ERT_CONTRACT_OBLIG_FORMULA
     ,ERT_CONTRACT_OBLIG_PRORATE
     ,ERT_DISC_RATE_OPT
     ,ERT_DISC_RATE_AMOUNT
     ,ERT_DISC_RATE_FORMULA
     ,ERT_DISC_RATE_PRORATE
     ,ERT_QUOTE_FEE_OPT
     ,ERT_QUOTE_FEE_AMOUNT
     ,ERT_QUOTE_FEE_FORMULA
     ,ERT_QUOTE_FEE_PRORATE
     ,ERT_RETURN_FEE_OPTION
     ,ERT_RETURN_FEE_AMOUNT
     ,ERT_RETURN_FEE_FORMULA
     ,ERT_RETURN_FEE_PRORATE
     ,ERT_ROLL_INCTV_OPTION
     ,ERT_ROLL_INCTV_AMOUNT
     ,ERT_ROLL_INCTV_FORMULA
     ,ERT_ROLL_INCTV_PRORATE
     ,ERT_SECU_DEP_DISPO_OPTION
     ,ERT_SECU_DEP_DISPO_AMOUNT
     ,ERT_SECU_DEP_DISPO_FORMULA
     ,ERT_SECU_DEP_DISPO_PRORATE
     ,ERT_TERM_PENALTY_OPTION
     ,ERT_TERM_PENALTY_AMOUNT
     ,ERT_TERM_PENALTY_FORMULA
     ,ERT_TERM_PENALTY_PRORATE
     ,ERT_TERM_PENALTY_CAP_OPTION
     ,ERT_TERM_PENALTY_CAP_AMOUNT
     ,ERT_TERM_PENALTY_CAP_FORMULA
     ,ERT_EST_PROP_TAX_OPTION
     ,ERT_EST_PROP_TAX_AMOUNT
     ,ERT_EST_PROP_TAX_FORMULA
     ,ERT_EST_PROP_TAX_PRORATE
     ,ERT_CONTR_FEES_OPTION
     ,ERT_OUTSTND_BAL_OPTION
     ,ERT_SERV_MANT_OPTION
     ,EOT_QUOTE_CALC_TERM_OPTION
     ,EOT_QUOTE_CALC_TERM_FORMULA
     ,EOT_CONTRACT_OBLIG_OPT
     ,EOT_CONTRACT_OBLIG_AMOUNT
     ,EOT_CONTRACT_OBLIG_FORMULA
     ,EOT_CONTRACT_OBLIG_PRORATE
     ,EOT_DISC_RATE_OPT
     ,EOT_DISC_RATE_AMOUNT
     ,EOT_DISC_RATE_FORMULA
     ,EOT_DISC_RATE_PRORATE
     ,EOT_QUOTE_FEE_OPT
     ,EOT_QUOTE_FEE_AMOUNT
     ,EOT_QUOTE_FEE_FORMULA
     ,EOT_QUOTE_FEE_PRORATE
     ,EOT_RETURN_FEE_OPTION
     ,EOT_RETURN_FEE_AMOUNT
     ,EOT_RETURN_FEE_FORMULA
     ,EOT_RETURN_FEE_PRORATE
     ,EOT_ROLL_INCTV_OPTION
     ,EOT_ROLL_INCTV_AMOUNT
     ,EOT_ROLL_INCTV_FORMULA
     ,EOT_ROLL_INCTV_PRORATE
     ,EOT_SECU_DEP_DISPO_OPTION
     ,EOT_SECU_DEP_DISPO_AMOUNT
     ,EOT_SECU_DEP_DISPO_FORMULA
     ,EOT_SECU_DEP_DISPO_PRORATE
     ,EOT_TERM_PENALTY_OPTION
     ,EOT_TERM_PENALTY_AMOUNT
     ,EOT_TERM_PENALTY_FORMULA
     ,EOT_TERM_PENALTY_PRORATE
     ,EOT_TERM_PENALTY_CAP_OPTION
     ,EOT_TERM_PENALTY_CAP_AMOUNT
     ,EOT_TERM_PENALTY_CAP_FORMULA
     ,EOT_EST_PROP_TAX_OPTION
     ,EOT_EST_PROP_TAX_AMOUNT
     ,EOT_EST_PROP_TAX_FORMULA
     ,EOT_EST_PROP_TAX_PRORATE
     ,EOT_CONTR_FEES_OPTION
     ,EOT_OUTSTND_BAL_OPTION
     ,EOT_SERV_MANT_OPTION
     ,EVERGREEN_PASSTHRU_FEES
     ,EVERGREEN_PASSTHRU_PERCENT
     ,LIEN_TYPE
     ,FILING_NUMBER
     ,FILING_DATE
     ,FILING_STATUS
     ,LIEN_HOLDER_NAME
     ,LIEN_HOLDER_ID
     ,JURISDICTION
     ,SUB_JURISDICTION
     ,LIEN_EXPIRATION_DATE
     ,LIEN_CONTINUATION_NUMBER
     ,LIEN_CONTINUATION_DATE
     ,TITLE_TYPE
     ,TITLE_ISSUER_NAME
     ,TITLE_ISSUER_ID
     ,TITLE_DATE
     ,TITLE_NUMBER
     ,REGISTRATION_NUMBER
     ,LOCATION
     ,TITLE_CUSTODIAN_NAME
     ,TITLE_CUSTODIAN_ID
     ,PAYEE_SITE
     ,REGISTRATION_LOCATION
     ,REG_EXPIRATION_DATE
     ,CREDIT_LINE_ID
     ,CREDIT_LINE_NUMBER
     ,PRTFL_APPROVAL_REQ
     ,PRTFL_ASSGN_GROUP
     ,PRTFL_BUDGET_AMT_OPT
     ,PRTFL_BUDGET_FIXED_AMT
     ,PRTFL_BUDGET_AMT_FORMULA
     ,PRTFL_DAYS_FROM_CON_EXPR
     ,PRTFL_STRATEGY
     ,PROP_TAX_APPLICABLE
     ,PROP_TAX_LEASE_REP
     ,MEX_TAX_SUB_BASIC_WTHLD
     ,MEX_TAX_CALC_FORMULA
     ,AUS_TAX_STAMP_DUTY
     ,CURRENCY_CONVERSION_TYPE
     ,CURRENCY_CONVERSION_RATE
     ,CURRENCY_CONVERSION_DATE
     ,ASSIGNABLE_YN
     ,LESSEE_VENDOR_ID
     ,LESSEE_VENDOR_NAME
     ,LESSEE_VENDOR_SITE_ID
     ,LESSEE_VENDOR_SITE_CODE
     ,INSURANCE_COMPANY_NUMBER
     ,INSURANCE_COMPANY_SITE_NUMBER
     ,AGENT_NUMBER
     ,AGENT_ADDRESS_SITE_NUMBER
     ,CASH_APPL_RULE_NAME
     ,PROP_TAX_BILL_METHOD
     ,GAIN_LOSS_TOLRNC_ALLWD_AMT
     ,GAIN_LOSS_TOLRNC_ALLWD_FRML
     ,GAIN_LOSS_TOLRNC_BASIS
     ,GAIN_LOSS_APPRV_PROC_FRML
     ,ERT_ABSORBED_FEE_FRML
     ,ERT_EXPENSE_FEE_FRML
     ,ERT_FINANCED_FEE_FRML
     ,ERT_GENERAL_FEE_FRML
     ,ERT_INCOME_FEE_FRML
     ,ERT_MISC_FEE_FRML
     ,ERT_PASSTHRU_FEE_FRML
     ,ERT_ROLLOVER_FEE_FRML
     ,EOT_ABSORBED_FEE_FRML
     ,EOT_EXPENSE_FEE_FRML
     ,EOT_FINANCED_FEE_FRML
     ,EOT_GENERAL_FEE_FRML
     ,EOT_INCOME_FEE_FRML
     ,EOT_MISC_FEE_FRML
     ,EOT_PASSTHRU_FEE_FRML
     ,EOT_ROLLOVER_FEE_FRML
     ,DELETE_BEFORE_IMPORT_YN
     ,ST_UPDATE_LINES_FROM_CONTRACT
     ,ST_INTEREST_DISCLOSED
     ,ST_TRANSFER_OF_TITLE
     ,ST_SALE_AND_LEASE_BACK
     ,ST_PURCHASE_OF_LEASE
     ,ST_EQUIPMENT_USAGE
     ,ST_EQUIPMENT_AGE
     ,ST_ASSET_UPFRONT_TAX
     ,ST_BILL_STREAM_TYPE_CODE
     ,ST_BILL_STREAM_PURPOSE_CODE
     ,ST_FIN_STREAM_TYPE_CODE
     ,ST_FIN_STREAM_PURPOSE_CODE
     ,ST_CAP_STREAM_TYPE_CODE
     ,ST_CAP_STREAM_PURPOSE_CODE
     ,ST_TAX_SCHEDULE_APPLIES_FLAG
  FROM   okl_header_interface
  WHERE  (
          batch_number        = p_batch_number
          OR
          contract_number_old = p_contract_number
          OR
          (
           customer_number    = p_customer_number
           AND
           start_date         between p_start_date_from AND p_start_date_to
          )
         )
  AND    nvl(scheduled_worker_id,'NONE') = g_instance_number
  AND    status = 'INTERFACED'
  AND    import_request_stage <> 'NEW' ; --Process INTERFACED contract upto import_request_stage

  --
  -- Cursor to fetch Header Interface Records
  --

  CURSOR okl_header_csr (p_batch_number    VARCHAR2,
                         p_start_date_from DATE,
                         p_start_date_to   DATE,
                         p_contract_number VARCHAR2,
                         p_customer_number VARCHAR2 ) IS

  SELECT
      BATCH_NUMBER
     ,TEMPLATE_NUMBER
     ,STATUS
     ,CREATED_BY
     ,DATE_CREATED
     ,DATE_CREATED_IN_OKL
     ,APPLICATION_CODE
     ,CONTRACT_CATEGORY
     ,CONTRACT_NUMBER_OLD
     ,CONTRACT_SOURCE
     ,CONTRACT_NUMBER
     ,CUSTOMER_NUMBER
     ,CUSTOMER_ID
     ,CUSTOMER_ACCOUNT_NUMBER
     ,CUSTOMER_ACCOUNT_ID
     ,START_DATE
     ,IMPORT_REQUEST_STAGE
     ,CURRENCY_CODE
     ,CUSTOMER_PO_NUMBER
     ,DATE_SIGNED
     ,DATE_APPROVED
     ,ACCEPTANCE_METHOD_CODE
     ,CONSUMER_CREDIT_ACT_DEAL_FLAG
     ,TERM
     ,CONVERTED_ACCOUNT
     ,ACCEPTED_DATE
     ,DEAL_TYPE_CODE
     ,EXPECTED_DELIVERY_DATE
     ,CONTRACT_DESCRIPTION
     ,SALESPERSON_NAME
     ,SALESPERSON_ID
     ,PRIVATE_LABEL_NUMBER
     ,PRIVATE_LABEL_ID
     ,PRIVATE_LABEL_URL
     ,PROGRAM_AGREEMENT_NUMBER
     ,PROGRAM_AGREEMENT_ID
     ,PROGRAM_VENDOR_NAME
     ,PROGRAM_VENDOR_ID
     ,MASTER_LEASE_AGREEMENT_NUMBER
     ,MASTER_LEASE_AGREEMENT_ID
     ,PRODUCT_NAME
     ,PRODUCT_ID
     ,CALCULATE_RESIDUAL_INSURANCE
     ,REBOOK_LIMIT_DATE
     ,IMPORT_REQUEST_ID
     ,END_OF_TERM_OPTION
     ,END_OF_TERM_AMOUNT
     ,MID_TERM_OPTION
     ,MID_TERM_AMOUNT
     ,SECURITY_DEPOSIT_HOLD_FLAG
     ,SECURITY_DEPOSIT_NET_FLAG
     ,SECURITY_DEPOSIT_DATE
     ,RENEWAL_NOTICE_DAYS
     ,RENEWAL_OPTION
     ,RENEWAL_AMOUNT
     ,LATE_INTEREST_HELD_UNTIL_DATE
     ,LATE_INTEREST_EXEMPT_FLAG
     ,LATE_INTEREST_PRODUCT_CODE
     ,LATE_CHARGE_HELD_UNTIL_DATE
     ,LATE_CHARGE_PRODUCT_CODE
     ,LATE_CHARGE_EXEMPT_FLAG
     ,VARIABLE_RATE
     ,CONVERT_TYPE
     ,CONVERSION_METHOD
     ,DATE_OF_CONVERSION
     ,CONVERT_BY_DATE
     ,VARIABLE_METHOD
     ,INDEX_NAME
     ,BASE_RATE
     ,ADDER
     ,MINIMUM_RATE
     ,MAXIMUM_RATE
     ,TOLERANCE
     ,ADJUSTMENT_FREQUENCY
     ,DAYS_IN_YEAR
     ,DAYS_IN_MONTH
     ,INTEREST_METHOD
     ,INTEREST_START_DATE
     ,METHOD_OF_CALCULATION
     ,FORMULA_NAME
     ,CAPITALIZE_FLAG
     ,NON_NOTIFICATION_FLAG
     ,TAX_WITHHOLDING_FLAG
     ,TAX_CALC_FORMULA_NAME
     ,TAX_OWNER
     ,FACTORING_DATE
     ,FACTORING_PERCENTAGE
     ,FACTORING_DISCOUNT_RATE
     ,EVERGREEN_ELIGIBLE_FLAG
     ,BILL_TO_ADDRESS_ID
     ,BILL_TO_ADDRESS
     ,BANK_ACCOUNT_ID
     ,BANK_ACCOUNT_NUMBER
     ,REASON_FOR_INVOICE_REVIEW
     ,INVOICE_REVIEW_UNTIL_DATE
     ,INVOICE_FORMAT_ID
     ,INVOICE_FORMAT_CODE
     ,PRINT_LEAD_DAYS --hariven bug 5359935
     ,REVIEW_INVOICE_FLAG
     ,PAYMENT_METHOD_ID
     ,PAYMENT_METHOD
     ,AUTHORING_ORG_ID
     ,INVENTORY_ORGANIZATION_ID
     ,POLICY_NUMBER
     ,POLICY_EFFECTIVE_FROM
     ,POLICY_EFFECTIVE_TO
     ,COVERED_AMOUNT
     ,DEDUCTIBLE_AMOUNT
     ,ENDORSEMENT
     ,NAME_OF_INSURED
     ,LESSOR_INSURED_FLAG
     ,LESSOR_PAYEE_FLAG
     ,INSURANCE_COMPANY_NAME
     ,INSURANCE_COMPANY_ID
     ,INSURANCE_COMPANY_SITE_NAME
     ,INSURANCE_COMPANY_SITE_ID
     ,AGENT_NAME
     ,AGENT_ID
     ,AGENT_ADDRESS_SITE_NAME
     ,AGENT_ADDRESS_SITE_ID
     ,PROOF_DUE_DATE
     ,PROOF_PROVIDED_DATE
     ,PREFUNDING_ELIGIBLE_FLAG
     ,PRIVATE_ACTIVITY_BOND_FLAG
     ,RVI_AUTO_CALCULATE_FLAG
     ,RVI_GUARANTEED_AMOUNT
     ,RVI_PRESENT_GUARANTEED_AMOUNT
     ,RVI_PREMIUM_AMOUNT
     ,RVI_RATE
     ,FLOOR_PRICE_FORMULA
     ,REMKT_SALE_PRICE_FORMULA
     ,REPURCHASE_QUOTE_OPTION
     ,REPURCHASE_QUOTE_FORMULA
     ,SALE_PRICE_OPTION
     ,SALE_PRICE_AMOUNT
     ,SALE_PRICE_FORMULA
     ,SALE_PRICE_PRORATE
     ,DISCOUNT_RATE_OPTION
     ,DISCOUNT_RATE_AMOUNT
     ,DISCOUNT_RATE_FORMULA
     ,DISCOUNT_RATE_PRORATE
     ,QUOTE_FEE_OPTION
     ,QUOTE_FEE_AMOUNT
     ,QUOTE_FEE_FORMULA
     ,QUOTE_FEE_PRORATE
     ,ERT_PURCHASE_OPT
     ,ERT_PURCHASE_OPT_TYPE
     ,ERT_PURCHASE_OPT_AMOUNT
     ,ERT_PURCHASE_OPT_FORMULA
     ,ERT_PURCHASE_OPT_PRORATE
     ,ERT_PURCHASE_OPT_MAX_OPT
     ,ERT_PURCHASE_OPT_MAX_AMT
     ,ERT_PURCHASE_OPT_MAX_FORMULA
     ,ERT_PURCHASE_OPT_MIN_OPT
     ,ERT_PURCHASE_OPT_MIN_AMT
     ,ERT_PURCHASE_OPT_MIN_FORMULA
     ,EOT_PURCHASE_OPT
     ,EOT_PURCHASE_OPT_TYPE
     ,EOT_PURCHASE_OPT_AMOUNT
     ,EOT_PURCHASE_OPT_FORMULA
     ,EOT_PURCHASE_OPT_PRORATE
     ,EOT_PURCHASE_OPT_MAX_OPT
     ,EOT_PURCHASE_OPT_MAX_AMT
     ,EOT_PURCHASE_OPT_MAX_FORMULA
     ,EOT_PURCHASE_OPT_MIN_OPT
     ,EOT_PURCHASE_OPT_MIN_AMT
     ,EOT_PURCHASE_OPT_MIN_FORMULA
     ,TQP_ERL_TERMINATION_ALWD_FLAG
     ,TQP_PRT_TERMINATION_ALWD_FLAG
     ,QUOTE_EFFECTIVE_DAYS
     ,QUOTE_EFF_MAX_DAYS
     ,EOT_TOLERANCE_DAYS
     ,PRT_TERMINATION_APPROVAL_REQ
     ,PRT_TERMINATION_ALLOWED_FLAG
     ,GAIN_LOSS_APPROVAL_REQ
     ,GAIN_LOSS_NET_QUOTE_OPT
     ,GAIN_LOSS_NET_QUOTE_AMT
     ,GAIN_LOSS_NET_QUOTE_FORMULA
     ,GAIN_LOSS_TOLERANCE_ALLOWED
     ,QUOTE_RCPT_CONTRACT_ROLE
     ,QUOTE_APPROVER_CONTRACT_ROLE
     ,QUOTE_CRTSY_COPY_CONTRACT_ROLE
     ,ERT_QUOTE_CALC_TERM_OPTION
     ,ERT_QUOTE_CALC_TERM_FORMULA
     ,ERT_CONTRACT_OBLIG_OPT
     ,ERT_CONTRACT_OBLIG_AMOUNT
     ,ERT_CONTRACT_OBLIG_FORMULA
     ,ERT_CONTRACT_OBLIG_PRORATE
     ,ERT_DISC_RATE_OPT
     ,ERT_DISC_RATE_AMOUNT
     ,ERT_DISC_RATE_FORMULA
     ,ERT_DISC_RATE_PRORATE
     ,ERT_QUOTE_FEE_OPT
     ,ERT_QUOTE_FEE_AMOUNT
     ,ERT_QUOTE_FEE_FORMULA
     ,ERT_QUOTE_FEE_PRORATE
     ,ERT_RETURN_FEE_OPTION
     ,ERT_RETURN_FEE_AMOUNT
     ,ERT_RETURN_FEE_FORMULA
     ,ERT_RETURN_FEE_PRORATE
     ,ERT_ROLL_INCTV_OPTION
     ,ERT_ROLL_INCTV_AMOUNT
     ,ERT_ROLL_INCTV_FORMULA
     ,ERT_ROLL_INCTV_PRORATE
     ,ERT_SECU_DEP_DISPO_OPTION
     ,ERT_SECU_DEP_DISPO_AMOUNT
     ,ERT_SECU_DEP_DISPO_FORMULA
     ,ERT_SECU_DEP_DISPO_PRORATE
     ,ERT_TERM_PENALTY_OPTION
     ,ERT_TERM_PENALTY_AMOUNT
     ,ERT_TERM_PENALTY_FORMULA
     ,ERT_TERM_PENALTY_PRORATE
     ,ERT_TERM_PENALTY_CAP_OPTION
     ,ERT_TERM_PENALTY_CAP_AMOUNT
     ,ERT_TERM_PENALTY_CAP_FORMULA
     ,ERT_EST_PROP_TAX_OPTION
     ,ERT_EST_PROP_TAX_AMOUNT
     ,ERT_EST_PROP_TAX_FORMULA
     ,ERT_EST_PROP_TAX_PRORATE
     ,ERT_CONTR_FEES_OPTION
     ,ERT_OUTSTND_BAL_OPTION
     ,ERT_SERV_MANT_OPTION
     ,EOT_QUOTE_CALC_TERM_OPTION
     ,EOT_QUOTE_CALC_TERM_FORMULA
     ,EOT_CONTRACT_OBLIG_OPT
     ,EOT_CONTRACT_OBLIG_AMOUNT
     ,EOT_CONTRACT_OBLIG_FORMULA
     ,EOT_CONTRACT_OBLIG_PRORATE
     ,EOT_DISC_RATE_OPT
     ,EOT_DISC_RATE_AMOUNT
     ,EOT_DISC_RATE_FORMULA
     ,EOT_DISC_RATE_PRORATE
     ,EOT_QUOTE_FEE_OPT
     ,EOT_QUOTE_FEE_AMOUNT
     ,EOT_QUOTE_FEE_FORMULA
     ,EOT_QUOTE_FEE_PRORATE
     ,EOT_RETURN_FEE_OPTION
     ,EOT_RETURN_FEE_AMOUNT
     ,EOT_RETURN_FEE_FORMULA
     ,EOT_RETURN_FEE_PRORATE
     ,EOT_ROLL_INCTV_OPTION
     ,EOT_ROLL_INCTV_AMOUNT
     ,EOT_ROLL_INCTV_FORMULA
     ,EOT_ROLL_INCTV_PRORATE
     ,EOT_SECU_DEP_DISPO_OPTION
     ,EOT_SECU_DEP_DISPO_AMOUNT
     ,EOT_SECU_DEP_DISPO_FORMULA
     ,EOT_SECU_DEP_DISPO_PRORATE
     ,EOT_TERM_PENALTY_OPTION
     ,EOT_TERM_PENALTY_AMOUNT
     ,EOT_TERM_PENALTY_FORMULA
     ,EOT_TERM_PENALTY_PRORATE
     ,EOT_TERM_PENALTY_CAP_OPTION
     ,EOT_TERM_PENALTY_CAP_AMOUNT
     ,EOT_TERM_PENALTY_CAP_FORMULA
     ,EOT_EST_PROP_TAX_OPTION
     ,EOT_EST_PROP_TAX_AMOUNT
     ,EOT_EST_PROP_TAX_FORMULA
     ,EOT_EST_PROP_TAX_PRORATE
     ,EOT_CONTR_FEES_OPTION
     ,EOT_OUTSTND_BAL_OPTION
     ,EOT_SERV_MANT_OPTION
     ,EVERGREEN_PASSTHRU_FEES
     ,EVERGREEN_PASSTHRU_PERCENT
     ,LIEN_TYPE
     ,FILING_NUMBER
     ,FILING_DATE
     ,FILING_STATUS
     ,LIEN_HOLDER_NAME
     ,LIEN_HOLDER_ID
     ,JURISDICTION
     ,SUB_JURISDICTION
     ,LIEN_EXPIRATION_DATE
     ,LIEN_CONTINUATION_NUMBER
     ,LIEN_CONTINUATION_DATE
     ,TITLE_TYPE
     ,TITLE_ISSUER_NAME
     ,TITLE_ISSUER_ID
     ,TITLE_DATE
     ,TITLE_NUMBER
     ,REGISTRATION_NUMBER
     ,LOCATION
     ,TITLE_CUSTODIAN_NAME
     ,TITLE_CUSTODIAN_ID
     ,PAYEE_SITE
     ,REGISTRATION_LOCATION
     ,REG_EXPIRATION_DATE
     ,CREDIT_LINE_ID
     ,CREDIT_LINE_NUMBER
     ,PRTFL_APPROVAL_REQ
     ,PRTFL_ASSGN_GROUP
     ,PRTFL_BUDGET_AMT_OPT
     ,PRTFL_BUDGET_FIXED_AMT
     ,PRTFL_BUDGET_AMT_FORMULA
     ,PRTFL_DAYS_FROM_CON_EXPR
     ,PRTFL_STRATEGY
     ,PROP_TAX_APPLICABLE
     ,PROP_TAX_LEASE_REP
     ,MEX_TAX_SUB_BASIC_WTHLD
     ,MEX_TAX_CALC_FORMULA
     ,AUS_TAX_STAMP_DUTY
     ,CURRENCY_CONVERSION_TYPE
     ,CURRENCY_CONVERSION_RATE
     ,CURRENCY_CONVERSION_DATE
     ,ASSIGNABLE_YN
     ,LESSEE_VENDOR_ID
     ,LESSEE_VENDOR_NAME
     ,LESSEE_VENDOR_SITE_ID
     ,LESSEE_VENDOR_SITE_CODE
     ,INSURANCE_COMPANY_NUMBER
     ,INSURANCE_COMPANY_SITE_NUMBER
     ,AGENT_NUMBER
     ,AGENT_ADDRESS_SITE_NUMBER
     ,CASH_APPL_RULE_NAME
     ,PROP_TAX_BILL_METHOD
     ,GAIN_LOSS_TOLRNC_ALLWD_AMT
     ,GAIN_LOSS_TOLRNC_ALLWD_FRML
     ,GAIN_LOSS_TOLRNC_BASIS
     ,GAIN_LOSS_APPRV_PROC_FRML
     ,ERT_ABSORBED_FEE_FRML
     ,ERT_EXPENSE_FEE_FRML
     ,ERT_FINANCED_FEE_FRML
     ,ERT_GENERAL_FEE_FRML
     ,ERT_INCOME_FEE_FRML
     ,ERT_MISC_FEE_FRML
     ,ERT_PASSTHRU_FEE_FRML
     ,ERT_ROLLOVER_FEE_FRML
     ,EOT_ABSORBED_FEE_FRML
     ,EOT_EXPENSE_FEE_FRML
     ,EOT_FINANCED_FEE_FRML
     ,EOT_GENERAL_FEE_FRML
     ,EOT_INCOME_FEE_FRML
     ,EOT_MISC_FEE_FRML
     ,EOT_PASSTHRU_FEE_FRML
     ,EOT_ROLLOVER_FEE_FRML
     ,DELETE_BEFORE_IMPORT_YN -- akp_delete
     ,ST_UPDATE_LINES_FROM_CONTRACT
     ,ST_INTEREST_DISCLOSED
     ,ST_TRANSFER_OF_TITLE
     ,ST_SALE_AND_LEASE_BACK
     ,ST_PURCHASE_OF_LEASE
     ,ST_EQUIPMENT_USAGE
     ,ST_EQUIPMENT_AGE
     ,ST_ASSET_UPFRONT_TAX
     ,ST_BILL_STREAM_TYPE_CODE
     ,ST_BILL_STREAM_PURPOSE_CODE
     ,ST_FIN_STREAM_TYPE_CODE
     ,ST_FIN_STREAM_PURPOSE_CODE
     ,ST_CAP_STREAM_TYPE_CODE
     ,ST_CAP_STREAM_PURPOSE_CODE
     ,INT_RATE_EFFECTIVE_FROM_DATE
     ,INT_RATE_EFFECTIVE_TO_DATE
     ,INT_RATE_PRINC_BASIS_CODE
     ,INT_RATE_BASIS_CODE
     ,INT_RATE_DELAY_CODE
     ,INT_RATE_DELAY_FREQ
     ,INT_RATE_CMPND_FREQ_CODE
     ,INT_RATE_CATCHUP_BASIS_CODE
     ,INT_RATE_CATCHUP_START_DATE
     ,INT_RATE_CAT_STLMNT_CODE
     ,INT_RATE_CHANGE_START_DATE
     ,INT_RATE_CHANGE_FREQ_CODE
     ,INT_RATE_CHANGE_VALUE
     ,INT_RATE_CON_OPTION_CODE
     ,INT_RATE_NEXT_CON_DATE
     ,INT_RATE_CON_INDEX_NAME
     ,INT_RATE_CON_BASE_RATE
     ,INT_RATE_CON_START_DATE
     ,INT_RATE_CON_ADDER_RATE
     ,INT_RATE_CON_MAXIMUM_RATE
     ,INT_RATE_CON_MINIMUM_RATE
     ,INT_RATE_CON_PRC_BAS_CODE
     ,INT_RATE_CON_DAY_MTH_CODE
     ,INT_RATE_CON_DAY_YER_CODE
     ,INT_RATE_CON_INT_BAS_CODE
     ,INT_RATE_CON_RATE_DELAY_CODE
     ,INT_RATE_CON_RATE_DELAY_FREQ
     ,INT_RATE_CON_CMPND_FREQ_CODE
     ,INT_RATE_CON_FORMULA_NAME
     ,INT_RATE_CON_CAT_BAS_CODE
     ,INT_RATE_CON_CAT_START_DATE
     ,INT_RATE_CON_CAT_STLMNT_CODE
     ,INT_RATE_CON_CHG_START_DATE
     ,INT_RATE_CON_CHG_FREQ_CODE
     ,INT_RATE_CON_CHG_VALUE
     ,INT_RATE_CAT_FREQ_CODE
     ,INT_RATE_CON_CAT_FREQ_CODE
     ,RVI_STREAM_CODE
     ,RVI_STREAM_PURPOSE_CODE
     ,ATTRIBUTE_CATEGORY
     ,ATTRIBUTE1
     ,ATTRIBUTE2
     ,ATTRIBUTE3
     ,ATTRIBUTE4
     ,ATTRIBUTE5
     ,ATTRIBUTE6
     ,ATTRIBUTE7
     ,ATTRIBUTE8
     ,ATTRIBUTE9
     ,ATTRIBUTE10
     ,ATTRIBUTE11
     ,ATTRIBUTE12
     ,ATTRIBUTE13
     ,ATTRIBUTE14
     ,ATTRIBUTE15
     ,EOT_AUTO_PROC_PURCHASE_OPT
     ,PTH_EVG_PAYOUT_BASIS
     ,PTH_PAYOUT_BASIS_FORMULA
     ,PTH_EVG_STREAM_CODE
     ,PTH_EVG_STREAM_PURPOSE_CODE
     ,SEND_BILL_SALE
     ,MANUAL_QUOTES_ONLY
     ,FIRST_TERMINATION_DATE
     ,QUOTE_RCPT_ADDL_RCPT_ROLE
     ,QUOTE_RCPT_ALLOC_PTG
     ,QUOTE_APPRVR_ADV_NOTICE_ROLE
     ,QUOTE_APPROVER_DELAY_DAYS
     ,ERT_SERV_MANT_FRML
     ,EOT_SERV_MANT_FRML
     --Added by dpsingh for LE Uptake
     ,LEGAL_ENTITY_ID
     ,ST_TAX_SCHEDULE_APPLIES_FLAG
   FROM   okl_header_interface
   WHERE  (
          batch_number        = p_batch_number
          OR
          contract_number_old = p_contract_number
          OR
          (
           customer_number    = p_customer_number
           AND
           start_date         between p_start_date_from AND p_start_date_to
          )
         )
  AND    nvl(scheduled_worker_id, 'NONE') = g_instance_number
  AND    status            in ('NEW', 'ERROR')  -- Bug 4350579
  AND    application_code  = 'OKL'    -- Bug 4350579
  AND    contract_category = 'LEASE'; -- Bug 4350579
  --AND    status in ('ELIGIBLE'); --Process only ELIGIBLE (i.e. validated) record

  --
  -- Cursor to fetch Line Interface Records for each contract header
  --

  CURSOR okl_line_csr (p_contract_number_old VARCHAR2) IS
  SELECT *
  FROM   okl_lines_interface
  WHERE  contract_number_old = p_contract_number_old
  AND    serial_number       IS NULL                 -- indicates TOP line
  AND    line_type           <> 'ASSET_SUBSIDY'      -- this line_type is being processed in process_subsidy()
  AND    line_type           <> 'ASSET_ADDON'      -- this line_type is being processed in process_addon()
  ORDER BY
         line_type,
         line_number;

  CURSOR okl_ib_csr (p_contract_number_old VARCHAR2,
                     p_line_number         NUMBER) IS
  SELECT serial_number
  FROM   okl_lines_interface
  WHERE  contract_number_old = p_contract_number_old
  AND    serial_number       IS NOT NULL
  AND    line_number         = p_line_number;

  --
  -- Cursor to fetch Party roles interface Records for each contract header/Line
  --
  CURSOR okl_party_csr (p_contract_number_old VARCHAR2,
                        p_line_number         NUMBER) IS
  SELECT *
  FROM   okl_party_roles_interface
  WHERE  contract_number_old = p_contract_number_old
  AND    ( (line_number        = p_line_number
            AND
            p_line_number IS NOT NULL
            )
            OR
            (line_number   IS NULL
             AND
             p_line_number IS NULL
            )
          );

  --
  -- Cursor to fetch Terms interface Records for each contract header/Line
  --
  CURSOR okl_term_csr (p_contract_number_old VARCHAR2,
                       p_line_number         NUMBER) IS
  SELECT *
  FROM   okl_terms_interface
  WHERE  contract_number_old = p_contract_number_old
  AND    ( line_number       = p_line_number
           AND
           p_line_number IS NOT NULL
         );


  --
  -- Cursor to fetch Payment interface Records for each contract header/Line
  --
  CURSOR okl_payment_csr (p_contract_number_old VARCHAR2,
                          p_line_number         NUMBER) IS
  SELECT *
  FROM   okl_payments_interface
  WHERE  contract_number_old = p_contract_number_old
  AND    payment_type_code <> 'RENT'  -- Bug 5155206
  AND    ( (line_number      = p_line_number
            AND
            p_line_number IS NOT NULL
            )
            OR
            (line_number   IS NULL
             AND
             p_line_number IS NULL
            )
          )
  ORDER BY
         contract_number_old,
         line_number,
         --asset_number,
         payment_type_code,
         payment_schedule_number,
         start_date;


  CURSOR temp_role_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE) IS
  --Fixed Bug # 5484903
   SELECT object1_id1
   FROM   okc_k_party_roles_b
   WHERE  dnz_chr_id            = p_chr_id
     AND    chr_id                = dnz_chr_id
     AND    jtot_object1_code = 'OKX_PARTY'
     AND    rle_code          = 'LESSEE';

  l_customer_id     okc_k_party_roles_v.object1_id1%TYPE;
  l_customer_number okl_header_interface.customer_number%TYPE;

  CURSOR temp_sales_csr(p_chr_id OKC_K_HEADERS_V.ID%TYPE) IS
  SELECT sales.object1_id1
  FROM   okc_contacts_v sales,
         okc_k_party_roles_v party
  WHERE  sales.cpl_id   = party.id
  AND    party.rle_code = 'LESSOR'
  AND    party.chr_id   = p_chr_id
  AND    party.dnz_chr_id = p_chr_id        -- Bug# 3862650
  AND    sales.role     = 'Salesperson';

  l_salesperson_id   okc_contacts_v.object1_id1%TYPE;
  l_salesperson_name okl_header_interface.salesperson_name%TYPE;

  CURSOR temp_aggr_csr (p_chr_id OKC_K_HEADERS_V.ID%TYPE,
                        p_scs_code OKC_K_HEADERS_V.SCS_CODE%TYPE) IS
  SELECT head.id
  FROM   okc_k_headers_v head,
         okc_governances gov
  WHERE  head.id         = gov.chr_id_referred
  AND    head.scs_code   = p_scs_code --'MASTER_LEASE'
  AND    gov.dnz_chr_id  = p_chr_id;

  CURSOR txl_csr (p_khr_id NUMBER,
                  p_kle_id NUMBER) IS
  SELECT id
  FROM   okl_txl_assets_b
  WHERE  dnz_khr_id = p_khr_id
  AND    kle_id     = p_kle_id;

  CURSOR deal_csr (p_chr_id OKC_K_HEADERS_B.ID%TYPE) IS
  SELECT 'Y' loan_revolving
  FROM   okl_k_headers
  WHERE  deal_type = 'LOAN-REVOLVING'
  AND    id        = p_chr_id;

  CURSOR c_asset (p_asset_number OKL_LA_RELEASE_ASSETS_UV.ASSET_NUMBER%TYPE) IS
  SELECT asset_id
  FROM   FA_ADDITIONS_B
  WHERE  asset_number = p_asset_number;

  l_master_lease_aggr_id NUMBER;
  l_credit_line_id       NUMBER;
  x_credit_line_id       NUMBER;

  x_sub_cle_id           OKC_K_LINES_V.ID%TYPE;
  l_payment_level        VARCHAR2(3);
  l_pmnt_line_id         OKC_K_LINES_V.ID%TYPE;

  l_loan_yn              VARCHAR2(1) := 'N';
  l_prev_corp_book    VARCHAR2(15) := 'NULL';
  l_prev_asset_number VARCHAR2(15) := 'NULL';
  l_prev_tax_book     VARCHAR2(15) := 'NULL';

  x_release_asset     VARCHAR2(1) := 'N';
  x_asset_id          OKL_LA_RELEASE_ASSETS_UV.ASSET_ID%TYPE;
  x_txd_id            OKL_TXD_ASSETS_B.ID%TYPE;

  x_party_pmnt_hdr_tbl_out   pphv_tbl_type;
  l_counter                  NUMBER;

  x_evg_cont_pmnt_hdr_out    pphv_tbl_type;

 -- Bug 5155206
  /*Cursor to fetch Payment interface Records for each contract header/Line of
    type RENT only */
  CURSOR okl_payment_rent_csr (p_contract_number_old VARCHAR2,
                          p_line_number         NUMBER) IS
  SELECT *
  FROM   okl_payments_interface
  WHERE  contract_number_old = p_contract_number_old
  AND    payment_type_code = 'RENT'
  AND    ( (line_number      = p_line_number
            AND
            p_line_number IS NOT NULL
            )
            OR
            (line_number   IS NULL
             AND
             p_line_number IS NULL
            )
          )
  ORDER BY
         contract_number_old,
         line_number,
         --asset_number,
         payment_schedule_number,
         start_date;
 -- Bug 5155206
   --Added by dpsingh for LE Uptake
   l_exists                      NUMBER(1):=0;
   item_not_found_error    EXCEPTION;

     -- hariven - Bug#5393374 - Added - Start
  -- Procedure to raise Business Event - "oracle.apps.okl.la.lease_contract.imported"
  PROCEDURE raise_business_event(
                                 p_chr_id        IN         NUMBER
                               , x_return_status OUT NOCOPY VARCHAR2
                                 ) IS
    l_parameter_list           wf_parameter_list_t;
  BEGIN
    x_return_status := OKL_API.G_RET_STS_SUCCESS;
    wf_event.AddParameterToList(G_WF_ITM_CONTRACT_ID,p_chr_id,l_parameter_list);

    OKL_WF_PVT.raise_event (p_api_version    => 1.0,
                            p_init_msg_list  => p_init_msg_list,
                            x_return_status  => x_return_status,
                            x_msg_count      => x_msg_count,
                            x_msg_data       => x_msg_data,
                            p_event_name     => G_WF_EVT_KHR_IMPORTED,
                            p_parameters     => l_parameter_list);

  EXCEPTION
    WHEN OTHERS THEN
       x_return_status := OKL_API.G_RET_STS_UNEXP_ERROR;
       RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
  END raise_business_event;
  -- hariven - Bug#5393374 - Added - End

  BEGIN -- Actual Procedure Starts Here

  l_proc_name     := 'LOAD_INPUT_RECORD';
  x_return_status := OKL_API.G_RET_STS_SUCCESS; -- Assume Success at begining
  --okl_api.init_msg_list(p_init_msg_list => OKL_API.G_TRUE);

  l_progress      := '000';

  --okl_context.set_okc_org_context(204,204);
  -- 4374085
  get_qcl_id(
             x_return_status => x_return_status,
             p_qcl_name      => 'OKL LA QA CHECK LIST',
             x_qcl_id        => g_qcl_id
            );

  debug_message('Load... Started');

  FOR okl_header_rec IN okl_header_csr (p_batch_number,
                                        p_start_date_from,
                                        p_start_date_to,
                                        p_contract_number,
                                        p_customer_number )
  LOOP


    BEGIN --1
      -- Populates Header Record before calling APIs
      --fnd_file.put_line(fnd_file.output, 'Loading... '||okl_header_rec.contract_number_old);
      okl_api.init_msg_list(p_init_msg_list => OKL_API.G_TRUE);

      debug_message(l_proc_name);
      debug_message('');

      debug_message('Calling check_and_delete ' || to_char(sysdate,'HH24:MI:SS'));
      -- Check to delete contract from OLM before loading
      check_and_delete(
                       x_return_status   => x_return_status,
                       x_msg_count       => x_msg_count,
                       x_msg_data        => x_msg_data,
                       p_contract_number        => okl_header_rec.contract_number,
                       p_delete_before_import_yn => okl_header_rec.delete_before_import_yn -- akp_delete
                      );
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         RAISE load_failed;
      END IF;
      debug_message('check_and_delete done ' || to_char(sysdate,'HH24:MI:SS'));

      write_to_log('Loading... '||okl_header_rec.contract_number_old);
      debug_message('Loading... '||okl_header_rec.contract_number_old);

      g_release_asset_flag := 'N'; -- global variable to check released asset

      --
      -- Get Template Information if requested
      --

      IF (okl_header_rec.template_number IS NOT NULL) THEN
         l_header_template := get_template(
                                           x_return_status   => x_return_status,
                                           x_msg_count       => x_msg_count,
                                           x_msg_data        => x_msg_data,
                                           p_template_number => okl_header_rec.template_number
                                          );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE load_failed;
         END IF;

      debug_message('--->Template information retrieved');
      END IF;

-- comment out. cklee      l_intf_h_rec := okl_header_rec;

--      debug_message('--->Template information retrieved');
      -- It checks template and interface record and prepare final header rec
      populate_header_rec(
                          x_return_status  => x_return_status,
                          x_msg_count      => x_msg_count,
                          x_msg_data       => x_msg_data,
                          p_temp_header    => l_header_template,
                          p_intf_header    => okl_header_rec,--comment out. cklee l_intf_h_rec,
                          x_chrv_rec       => l_chrv_rec,
                          x_khrv_rec       => l_khrv_rec
                         );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
          RAISE load_failed;
      END IF;

      -- Call API to create Contract Header
      debug_message('--->Header record populated');

      l_progress := '010';

     --Added by dpsingh for LE Uptake
    IF (okl_header_rec.legal_entity_id IS NOT NULL) AND
        (okl_header_rec.legal_entity_id <> Okl_Api.G_MISS_NUM) THEN

            -- l_exists  := OKL_LEGAL_ENTITY_UTIL.check_le_id_exists(okl_header_rec.legal_entity_id) ;
       OPEN  le_entity(NVL(okl_header_rec.authoring_org_id,l_header_template.authoring_org_id),okl_header_rec.legal_entity_id);
       FETCH  le_entity INTO l_exists;

      CLOSE  le_entity;
           IF (l_exists <>1 ) THEN
           debug_message('--->Legal entity is not valid for operating unit');
              Okc_Api.set_message(G_APP_NAME, G_INVALID_VALUE,G_COL_NAME_TOKEN,'LEGAL_ENTITY_ID');
              RAISE item_not_found_error;
           END IF;
      END IF;
      l_khrv_rec.legal_entity_id := okl_header_rec.legal_entity_id ;
      -- Call Header API to create header
      okl_contract_pub.create_contract_header(
                                              p_api_version   => 1.0,
                                              p_init_msg_list => OKL_API.G_FALSE,
                                              x_return_status => x_return_status,
                                              x_msg_count     => x_msg_count,
                                              x_msg_data      => x_msg_data,
                                              p_chrv_rec      => l_chrv_rec,
                                              p_khrv_rec      => l_khrv_rec,
                                              x_chrv_rec      => x_chrv_rec,
                                              x_khrv_rec      => x_khrv_rec
                                             );
      l_progress := '050';

      debug_message('Contract header call ends...'||x_return_status);
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN

           x_return_status := OKL_API.G_RET_STS_ERROR;

         RAISE load_failed;
      END IF;

      debug_message('--->Contract Header Created');
      debug_message('--->Evergreen passthru at contract header - Start');

      g_evg_cont_pmnt_hdr := NULL;

      IF (okl_header_rec.pth_evg_payout_basis IS NOT NULL) THEN

          create_party_payment_hdr(
                                   x_return_status                   => x_return_status,
                                   x_msg_count                       => x_msg_count,
                                   x_msg_data                        => x_msg_data,
                                   p_contract_id                     => x_chrv_rec.id,
                                   p_line_id                         => NULL,
                                   p_line_type                       => NULL,
                                   p_pth_start_date                  => NULL,
                                   p_pth_base_payout_basis           => NULL,
                                   p_pth_base_stream_code            => NULL,
                                   p_pth_base_stream_purpose_code    => NULL,
                                   p_pth_evg_payout_basis            => okl_header_rec.pth_evg_payout_basis,
                                   p_pth_payout_basis_formula        => okl_header_rec.pth_payout_basis_formula,
                                   p_pth_evg_stream_code             => okl_header_rec.pth_evg_stream_code,
                                   p_pth_evg_stream_purpose_code     => okl_header_rec.pth_evg_stream_purpose_code,
                                   x_party_pmnt_hdr_tbl              => x_evg_cont_pmnt_hdr_out
                                  );
          debug_message('------>Create evergreen at contract header ends'||x_return_status);
          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE load_failed;
          END IF;

          debug_message('x_evg_cont_pmnt_hdr_out.count: '||x_evg_cont_pmnt_hdr_out.COUNT);

          IF (x_evg_cont_pmnt_hdr_out.COUNT > 0) THEN
             g_evg_cont_pmnt_hdr := x_evg_cont_pmnt_hdr_out(1); --only 1 evg record at contract header
          END IF;
      END IF;
      debug_message('--->Evergreen passthru at contract header - End');

      l_master_lease_aggr_id := NULL;

      IF (okl_header_rec.master_lease_agreement_id IS NOT NULL
          OR
          okl_header_rec.master_lease_agreement_number IS NOT NULL) THEN

            x_return_status := get_agreement_id(
                                                 p_scs_code            => 'MASTER_LEASE',
                                                 p_auth_org_id         => l_chrv_rec.authoring_org_id,
                                                 p_agreement_number    => okl_header_rec.master_lease_agreement_number,
                                                 p_agreement_id        => okl_header_rec.master_lease_agreement_id,
                                                 x_agreement_id        => x_master_lease_id
                                                );

            l_master_lease_aggr_id := x_master_lease_id;

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               okl_api.set_message(
                                   G_APP_NAME,
                                   G_INVALID_VALUE,
                                   'CONTRACT_NUM',
                                   okl_header_rec.contract_number_old,
                                   'COL_NAME',
                                   'MASTER_LEASE_AGREEMENT_ID, NUMBER: ',
                                   'COL_VALUE',
                                   okl_header_rec.master_lease_agreement_id||', '||okl_header_rec.master_lease_agreement_number
                                  );
               RAISE load_failed;
            END IF;
      ELSE
        IF (okl_header_rec.template_number IS NOT NULL) THEN

            l_master_lease_aggr_id     := NULL;

            OPEN temp_aggr_csr (l_header_template.id,
                                'MASTER_LEASE');
            FETCH temp_aggr_csr INTO l_master_lease_aggr_id;
            CLOSE temp_aggr_csr;

        END IF;

      END IF;

      IF (l_master_lease_aggr_id IS NOT NULL) THEN

         l_gvev_rec.dnz_chr_id      := x_chrv_rec.id;
         l_gvev_rec.chr_id          := x_chrv_rec.id;
         l_gvev_rec.chr_id_referred := l_master_lease_aggr_id;
         l_gvev_rec.cle_id          := NULL;
         l_gvev_rec.copied_only_yn  := 'Y';

         okl_okc_migration_pvt.create_governance(
                                                 p_api_version                  => 1.0,
                                                 p_init_msg_list                => OKL_API.G_FALSE,
                                                 x_return_status                => x_return_status,
                                                 x_msg_count                    => x_msg_count,
                                                 x_msg_data                     => x_msg_data,
                                                 p_gvev_rec                     => l_gvev_rec,
                                                 x_gvev_rec                     => x_gvev_rec
                                                );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE load_failed;
         END IF;

         debug_message('--->Master Lease agreement created');
      END IF;

      -- Process credit line, if any
      l_credit_line_id := NULL;
      IF (okl_header_rec.credit_line_id IS NOT NULL
          OR
          okl_header_rec.credit_line_number IS NOT NULL) THEN

          x_return_status := get_agreement_id(
                                              p_scs_code            => 'CREDITLINE_CONTRACT',
                                              p_auth_org_id         => l_chrv_rec.authoring_org_id,
                                              p_agreement_number    => okl_header_rec.credit_line_number,
                                              p_agreement_id        => okl_header_rec.credit_line_id,
                                              x_agreement_id        => x_credit_line_id
                                             );

            l_credit_line_id := x_credit_line_id;

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               okl_api.set_message(
                                   G_APP_NAME,
                                   G_INVALID_VALUE,
                                   'CONTRACT_NUM',
                                   okl_header_rec.contract_number_old,
                                   'COL_NAME',
                                   'CREDIT LINE ID, NUMBER: ',
                                   'COL_VALUE',
                                   okl_header_rec.credit_line_id||', '||okl_header_rec.credit_line_number
                                  );
               RAISE load_failed;
            END IF;
      ELSE
         IF (okl_header_rec.template_number IS NOT NULL) THEN
            l_credit_line_id     := NULL;

            OPEN temp_aggr_csr (l_header_template.id,
                                'CREDITLINE_CONTRACT');
            FETCH temp_aggr_csr INTO l_credit_line_id;
            CLOSE temp_aggr_csr;

         END IF;
      END IF;

      IF (l_credit_line_id IS NOT NULL) THEN

         --
         -- Validated Credit Line contract against
         -- customer number and customer account number
         -- of the imported contract
         --
         validate_credit_line(
                              x_return_status           => x_return_status,
                              x_msg_count               => x_msg_count,
                              x_msg_data                => x_msg_data,
                              p_contract_number         => okl_header_rec.contract_number_old,
                              p_template_id             => l_header_template.id,
                              p_credit_line_id          => l_credit_line_id,
                              p_customer_id             => g_customer_id,  -- 4414408
                              p_customer_number         => okl_header_rec.customer_number,
                              p_customer_account_id     => x_chrv_rec.cust_acct_id, -- 4414408
                              p_customer_account_number => okl_header_rec.customer_account_number,
                              p_start_date              => x_chrv_rec.start_date, -- 4414408
                              p_template_start_date     => l_header_template.start_date
                             );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             okl_api.set_message(
                                 G_APP_NAME,
                                 G_INVALID_VALUE,
                                 'CONTRACT_NUM',
                                 okl_header_rec.contract_number_old,
                                 'COL_NAME',
                                 'CREDIT LINE ID, NUMBER: ',
                                 'COL_VALUE',
                                 okl_header_rec.credit_line_id||', '||okl_header_rec.credit_line_number
                                );
             RAISE load_failed;
         END IF;

         l_gvev_rec := NULL;
         l_gvev_rec.dnz_chr_id      := x_chrv_rec.id;
         l_gvev_rec.chr_id          := x_chrv_rec.id;
         l_gvev_rec.chr_id_referred := l_credit_line_id;
         l_gvev_rec.cle_id          := NULL;
         l_gvev_rec.copied_only_yn  := 'Y';

         okl_okc_migration_pvt.create_governance(
                                                 p_api_version                  => 1.0,
                                                 p_init_msg_list                => OKL_API.G_FALSE,
                                                 x_return_status                => x_return_status,
                                                 x_msg_count                    => x_msg_count,
                                                 x_msg_data                     => x_msg_data,
                                                 p_gvev_rec                     => l_gvev_rec,
                                                 x_gvev_rec                     => x_gvev_rec
                                                );
         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            RAISE load_failed;
         END IF;
         debug_message('--->Credit line created');
      END IF;
      -- end of credit line

      -- Call Party Role API to create Party Roles, LESSEE and LESSOR

      l_customer_id     := okl_header_rec.customer_id;
      l_customer_number := okl_header_rec.customer_number;

      IF (okl_header_rec.template_number IS NOT NULL) THEN
         IF (l_customer_id IS NULL
             AND
             l_customer_number IS NULL) THEN
             --
             -- Get it from Template Contract
             --
             l_customer_id := NULL;
             OPEN temp_role_csr (l_header_template.id);
             FETCH temp_role_csr INTO l_customer_id;
             CLOSE temp_role_csr;

             l_customer_number := NULL; -- ID is good enough
         END IF;
      END IF;

      l_progress := '060';
      create_party_role( x_return_status       => x_return_status,
                         x_msg_count           => x_msg_count,
                         x_msg_data            => x_msg_data,
                         p_contract_header_id  => x_khrv_rec.id,
                         p_contract_number_old => x_chrv_rec.orig_system_reference1,
                         p_customer_id         => l_customer_id,
                         p_customer_number     => l_customer_number,
                         p_authoring_org_id    => NVL(okl_header_rec.authoring_org_id,l_header_template.authoring_org_id),
                         x_cplv_rec            => x_cplv_rec );

      l_progress := '070';

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         raise load_failed;
      END IF;

      debug_message('--->Party Role created');
      l_progress := '080';

      --
      -- create lessee as vendor if product is loan revolving
      --
      FOR deal_rec IN deal_csr (x_khrv_rec.id)
      LOOP
         IF (deal_rec.loan_revolving = 'Y') THEN
            debug_message('-----> create_lessee_as_vendor()');

            create_lessee_as_vendor(
                                    x_return_status      => x_return_status,
                                    x_msg_count          => x_msg_count,
                                    x_msg_data           => x_msg_data,
                                    p_chr_id             => x_khrv_rec.id,
                                    p_contract_num       => okl_header_rec.contract_number_old,
                                    p_cpl_id             => x_cplv_rec.id,
                                    p_lessee_vendor_id   => okl_header_rec.lessee_vendor_id,
                                    p_lessee_vendor_name => okl_header_rec.lessee_vendor_name,
                                    p_lessee_site_id     => okl_header_rec.lessee_vendor_site_id,
                                    p_lessee_site_code   => okl_header_rec.lessee_vendor_site_code,
                                    p_authoring_org_id   => NVL(okl_header_rec.authoring_org_id,l_header_template.authoring_org_id)
                                   );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
               x_return_status := OKL_API.G_RET_STS_ERROR;
               raise load_failed;
            END IF;

            debug_message('--->Lessee as Vendor Created');
         END IF;
      END LOOP;

      -- Create Contact for Sales Rep...???

      l_salesperson_id   := okl_header_rec.salesperson_id;
      l_salesperson_name := okl_header_rec.salesperson_name;

      IF (okl_header_rec.template_number IS NOT NULL) THEN
         IF (l_salesperson_id IS NULL
             AND
             l_salesperson_name IS NULL) THEN

            l_salesperson_id   := NULL;
            l_salesperson_name := NULL;

            OPEN temp_sales_csr(l_header_template.id);
            FETCH temp_sales_csr INTO l_salesperson_id;
            CLOSE temp_sales_csr;

         END IF;
      END IF;

      create_contact(
                     x_return_status       => x_return_status,
                     x_msg_count           => x_msg_count,
                     x_msg_data            => x_msg_data,
                     p_contract_header_id  => x_khrv_rec.id,
                     p_contract_number_old => okl_header_rec.contract_number_old,
                     p_salesperson_id      => l_salesperson_id,
                     p_salesperson_name    => l_salesperson_name,
                     p_authoring_org_id    => NVL(okl_header_rec.authoring_org_id,l_header_template.authoring_org_id),
                     p_lessor_id           => x_cplv_rec.id
                    );

      debug_message('--->Contact created');
      l_progress := '081';

      debug_message('--->Header rule creation started');
      create_header_rules(
                          x_return_status                  => x_return_status,
                          x_msg_count                      => x_msg_count,
                          x_msg_data                       => x_msg_data,
                          p_chr_id                         => x_chrv_rec.id,
                          p_template_id                    => l_header_template.id,
                          p_header_rec                     => okl_header_rec --comment out. ckleel_intf_h_rec
                          --p_header_rec                     => l_intf_h_rec
                         );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         raise load_failed;
      END IF;
      debug_message('--->Header rule creation complete');

      -- Create private Label party
      create_private_label(
                           x_return_status   => x_return_status,
                           x_msg_count       => x_msg_count,
                           x_msg_data        => x_msg_data,
                           p_chr_id          => x_chrv_rec.id,
                           p_contract_number => okl_header_rec.contract_number_old,
                           p_label_number    => okl_header_rec.private_label_number,
                           p_label_id        => okl_header_rec.private_label_id,
                           p_label_url       => okl_header_rec.private_label_url
                          );

      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         raise load_failed;
      END IF;
      debug_message('--->Private label created');

      --
      -- Copy program agreement rules, if present,  to contract
      --
      --debug_message('PROG: id: '||x_khrv_rec.khr_id);
      --debug_message('PROG: source: '||x_khrv_rec.khr_id);
      --debug_message('PROG: dest: '||x_chrv_rec.id);
      --debug_message('PROG: org: '||x_chrv_rec.authoring_org_id);
      --debug_message('PROG: inv org: '||x_chrv_rec.inv_organization_id);

      IF (x_khrv_rec.khr_id IS NOT NULL) THEN
         okl_deal_create_pub.copy_rules(
                                        p_api_version    => 1.0,
                                        p_init_msg_list  => OKL_API.G_FALSE,
                                        x_return_status  => x_return_status,
                                        x_msg_count      => x_msg_count,
                                        x_msg_data       => x_msg_data,
                                        p_source_id      => x_khrv_rec.khr_id,
                                        p_dest_id        => x_chrv_rec.id, -- imported Contract ID
                                        p_org_id         => x_chrv_rec.authoring_org_id,
                                        p_organization_id => x_chrv_rec.inv_organization_id
                                       );

         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            raise load_failed;
         END IF;

      debug_message('--->Program agreement copied');

      END IF;

--      debug_message('--->Program agreement copied');

-- start cklee 02/13/2003 bug# 3440442
      -- create 3rd party insurance
      -- 1. x_khrv_rec.id indicates contract deatils record exists
      -- 2. okl_header_rec.policy_number is a PK for 3rd party insurance policy

      IF (x_chrv_rec.id IS NOT NULL and
          okl_header_rec.policy_number IS NOT NULL) THEN

         create_3rd_party_insurance(
                                        x_return_status  => x_return_status,
                                        x_msg_count      => x_msg_count,
                                        x_msg_data       => x_msg_data,
                                        p_intf_header    => okl_header_rec,
                                        --p_intf_header    => l_intf_h_rec,
                                        p_chr_id         => x_chrv_rec.id -- imported Contract ID
                                       );


         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
            x_return_status := OKL_API.G_RET_STS_ERROR;
            raise load_failed;
         END IF;

      debug_message('--->3rd Party Insurance created');
      END IF;

-- end cklee 02/13/2003 bug# 3440442

      --debug_message('Contract Number: '||x_chrv_rec.contract_number);
      l_progress := '090';

    -- Call Line Cursor to get Line detail

      l_no_of_lines      := 0;
      x_inv_item_id_prev := -9999999;
      x_cle_id           := -9999999;
      p_inv_item_id_prev := -9999999;
      p_line_type_prev   := 'NULL';
      l_prev_corp_book    := 'NULL';
      l_prev_asset_number := 'NULL';
      l_prev_tax_book     := 'NULL';

      -- Check product type
      -- in case of loan product, don't populate depreciation detail
      -- Bug 3407354
      --
      check_product_type(
                         x_return_status  => x_return_status,
                         x_msg_count      => x_msg_count,
                         x_msg_data       => x_msg_data,
                         p_prod_name      => okl_header_rec.product_name,
                         p_prod_id        => okl_header_rec.product_id,
                         x_loan_yn        => l_loan_yn
                        );
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         RAISE load_failed;
      END IF;

      -- 4414408
      x_release_asset := get_release_asset_flag(
                                                x_return_status   => x_return_status,
                                                x_msg_count       => x_msg_count,
                                                x_msg_data        => x_msg_data,
                                                p_contract_number => okl_header_rec.contract_number_old,
                                                p_org_id          => okl_header_rec.inventory_organization_id
                                    ) ;
      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
         x_return_status := OKL_API.G_RET_STS_ERROR;
         RAISE load_failed;
      END IF;

      FOR okl_line_rec IN okl_line_csr (okl_header_rec.contract_number_old)
      LOOP

        BEGIN --2

          -- Bug 4350579 start
          -- validate line information before proceeding
          --
          debug_message('Processing line : '||okl_line_rec.line_type||'/'||okl_line_rec.line_number);
          check_line_literal (
                            x_return_status             => x_return_status,
                            x_msg_count                 => x_msg_count,
                            x_msg_data                  => x_msg_data,
                            p_contract_number           => okl_header_rec.contract_number_old,
                            p_import_request_stage      => okl_header_rec.import_request_stage,
                            p_product_id                => okl_header_rec.product_id,
                            p_product_name              => okl_header_rec.product_name,
                            p_line_number               => okl_line_rec.line_number,
                            p_line_type                 => okl_line_rec.line_type,
                            p_amount                    => okl_line_rec.amount,
                            p_currency_code             => okl_header_rec.currency_code,
                            p_asset_number              => okl_line_rec.asset_number,
                            p_inventory_item_name       => okl_line_rec.inventory_item_name,
                            p_inventory_item_id         => okl_line_rec.inventory_item_id,
                            p_install_site_number       => okl_line_rec.install_site_number,
                            p_install_site_id           => okl_line_rec.install_site_id,
                            p_asset_corporate_book      => okl_line_rec.asset_corporate_book,
                            p_asset_category_id         => okl_line_rec.asset_category_id,
                            p_asset_category_segment1   => okl_line_rec.asset_category_segment1,
                            p_asset_category_segment2   => okl_line_rec.asset_category_segment2,
                            p_asset_category_segment3   => okl_line_rec.asset_category_segment3,
                            p_asset_category_segment4   => okl_line_rec.asset_category_segment4,
                            p_asset_category_segment5   => okl_line_rec.asset_category_segment5,
                            p_asset_category_segment6   => okl_line_rec.asset_category_segment6,
                            p_asset_category_segment7   => okl_line_rec.asset_category_segment7,
                            p_asset_location_id         => okl_line_rec.asset_location_id,
                            p_asset_location_segment1   => okl_line_rec.asset_location_segment1,
                            p_asset_location_segment2   => okl_line_rec.asset_location_segment2,
                            p_asset_location_segment3   => okl_line_rec.asset_location_segment3,
                            p_asset_location_segment4   => okl_line_rec.asset_location_segment4,
                            p_asset_location_segment5   => okl_line_rec.asset_location_segment5,
                            p_asset_location_segment6   => okl_line_rec.asset_location_segment6,
                            p_asset_location_segment7   => okl_line_rec.asset_location_segment7,
                            p_depreciation_method_id    => okl_line_rec.depreciation_method_id,
                            p_depreciation_method_code  => okl_line_rec.depreciation_method_code,
                            p_life_in_months            => okl_line_rec.life_in_months,
                            p_fee_code                  => okl_line_rec.fee_code,
                            p_stream_purpose            => okl_line_rec.stream_purpose_code,
                            p_fee_type                  => okl_line_rec.fee_type,
                            p_price_list_name           => okl_line_rec.price_list_name,
                            p_price_list_id             => okl_line_rec.price_list_id,
                            p_counter_group_name        => okl_line_rec.counter_group_name,
                            p_counter_group_id          => okl_line_rec.counter_group_id,
                            p_usage_bill_frequency_code => okl_line_rec.usage_bill_frequency_code,
                            p_base_reading_uom_code     => okl_line_rec.base_reading_uom_code,
                            p_usage_type_code           => okl_line_rec.usage_type_code,
                            p_usage_period              => okl_line_rec.usage_period,
                            p_usage_no_of_period        => okl_line_rec.usage_no_of_period,
                            p_tax_cost                  => okl_line_rec.tax_cost,
                            p_tax_book                  => okl_line_rec.tax_book,
                            p_life_in_months_tax        => okl_line_rec.life_in_months_tax,
                            p_deprn_method_tax          => okl_line_rec.deprn_method_tax,
                            p_deprn_rate_tax            => okl_line_rec.deprn_rate_tax,
                            p_in_service_date           => okl_line_rec.in_service_date,
			    p_link_asset_amount         => okl_line_rec.link_asset_amount,
                            p_inv_org_id                => okl_header_rec.inventory_organization_id,
                            p_term_quote_id             => okl_line_rec.termination_quote_id,
                            p_term_quote_number         => okl_line_rec.termination_quote_number,
                            p_fee_purpose_code          => okl_line_rec.fee_purpose_code
                           );

          debug_message('check_line_literal: '||x_return_status);

          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             RAISE load_failed;
          END IF;

          -- Bug 4321621 end

          -- Populates Header Record before calling APIs
          l_no_of_lines := l_no_of_lines + 1;
          l_progress := '100';
          okl_api.init_msg_list(p_init_msg_list => OKL_API.G_TRUE); --Bug 3958519

          debug_message('------> Processing Line: '||okl_line_rec.line_type);

          l_service_line_id := NULL;
          l_fee_line_id     := NULL;
          l_usage_line_id   := NULL;
	  g_base_pmnt_hdr   := NULL;
	  g_evg_pmnt_hdr    := NULL;

          -- Get Item and Organization Info, for All line type
          IF (okl_line_rec.inventory_item_id IS NOT NULL
              OR
              okl_line_rec.inventory_item_name IS NOT NULL) THEN
             get_inventory_org_item_id(
                                       x_return_status       => x_return_status,
                                       x_msg_count           => x_msg_count,
                                       x_msg_data            => x_msg_data,
                                       p_contract_number     => okl_header_rec.contract_number_old,
                                       P_line_number         => okl_line_rec.line_number,
                                       p_line_type           => okl_line_rec.line_type,
                                       p_inventory_org_id    => x_chrv_rec.inv_organization_id,
				                                --okl_line_rec.inventory_organization_id,
                                       p_inventory_item_id   => okl_line_rec.inventory_item_id,
                                       p_inventory_item_name => okl_line_rec.inventory_item_name,
                                       x_inventory_org_id    => x_inventory_org_id,
                                       x_inventory_item_id   => x_inventory_item_id
                                      );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                 x_return_status := OKL_API.G_RET_STS_ERROR;
                 RAISE load_failed;
             END IF;

             debug_message('------>Inv Org ID: '||x_chrv_rec.inv_organization_id);

          END IF;

          -- Processing for Asset Lines
          IF (okl_line_rec.line_type = 'ASSET') THEN
/* 4414408
             IF (okl_line_rec.asset_number = l_prev_asset_number) THEN
                x_release_asset := g_release_asset_flag;

             ELSE --  check asset type
                --
                -- Check whether the asset it released already
                -- If so, processing will be different
                --
                check_for_release_asset(
                                        x_return_status => x_return_status,
                                        x_msg_count     => x_msg_count,
                                        x_msg_data      => x_msg_data,
                                        p_asset_number  => okl_line_rec.asset_number,
                                        p_line_number   => okl_line_rec.line_number,
                                        p_org_id        => x_chrv_rec.inv_organization_id,
                                        x_release_asset => x_release_asset,
                                        x_asset_id      => x_asset_id
                                       );

                IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                    x_return_status := OKL_API.G_RET_STS_ERROR;
                    RAISE load_failed;
                END IF;
*/
                IF (x_release_asset = 'N'
                    AND
                    okl_line_rec.tax_book IS NOT NULL
                    AND
                    okl_line_rec.asset_corporate_book IS NULL) THEN
                    okl_api.set_message(
                                  G_APP_NAME,
                                  G_MISSING_VALUE_FOR_LINE,
                                  'CONTRACT_NUM',
                                  okl_header_rec.contract_number_old||'/'||TO_CHAR(okl_line_rec.line_number),
                                  'COL_NAME',
                                  'CORPORATE BOOK',
                                  'LINE',
                                  'ASSET'
                                  );
                   x_return_status := OKL_API.G_RET_STS_ERROR;

                END IF;

                IF (x_release_asset = 'N'
                   AND
                   okl_line_rec.inventory_item_name IS NULL
                   AND
                   okl_line_rec.inventory_item_id IS NULL) THEN
                   okl_api.set_message(
                                       G_APP_NAME,
                                       G_MISSING_VALUE_FOR_LINE,
                                       'CONTRACT_NUM',
                                       okl_header_rec.contract_number_old||'/'||TO_CHAR(okl_line_rec.line_number),
                                       'COL_NAME',
                                       'INVENTORY_ITEM_NAME OR INVENTORY_ITEM_ID',
                                       'LINE',
                                       'ASSET'
                                      );

                   x_return_status := OKL_API.G_RET_STS_ERROR;
                END IF;

                IF (x_release_asset = 'N'
                    AND
                    okl_line_rec.install_site_number IS NULL
                    AND
                    okl_line_rec.install_site_id IS NULL) THEN
                    okl_api.set_message(
                                        G_APP_NAME,
                                        G_MISSING_VALUE_FOR_LINE,
                                        'CONTRACT_NUM',
                                        okl_header_rec.contract_number_old||'/'||TO_CHAR(okl_line_rec.line_number),
                                        'COL_NAME',
                                        'INSTALL_SITE_NUMBER OR INSTALL_SITE_ID',
                                        'LINE',
                                        'ASSET'
                                       );

                    x_return_status := OKL_API.G_RET_STS_ERROR;
                END IF;

--             END IF;

             --
             -- make sure all the assets are either released or
             -- none of them are released asset,
             -- which means, mix of released and new asset should not
             -- be attched to a contract
             --
             IF (l_no_of_lines = 1) THEN -- first asset line
--               g_release_asset_flag := x_release_asset; -- set the value

                  create_release_asset_rule(
                                            x_return_status       => x_return_status,
                                            x_msg_count           => x_msg_count,
                                            x_msg_data            => x_msg_data,
                                            p_chr_id              => x_chrv_rec.id,
                                            p_release_asset_flag  => x_release_asset -- 4414408
                                           );

                  IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                  END IF;

                  IF (x_release_asset = 'Y') THEN
                     OPEN c_asset(okl_line_rec.asset_number);
                     FETCH c_asset into x_asset_id;
                     CLOSE c_asset;
                  END IF;
/*4414408

             ELSE -- more than one different assets found
               IF (okl_line_rec.asset_number <> l_prev_asset_number
                   AND
                   x_release_asset <> g_release_asset_flag) THEN

                   okl_api.set_message(
                                       G_APP_NAME,
                                       G_MIXED_ASSET,
                                       'CONTRACT_NUM',
                                       okl_line_rec.contract_number_old
                                      );
                   x_return_status := OKL_API.G_RET_STS_ERROR;
                   RAISE load_failed;
               END IF;
*/
             END IF;

             IF (x_release_asset = 'Y') THEN

                IF (l_loan_yn <> 'Y'
                    AND
                    okl_line_rec.asset_number = l_prev_asset_number
                    AND
                    okl_line_rec.asset_corporate_book = l_prev_corp_book ) THEN

                    IF (l_prev_tax_book = okl_line_rec.tax_book) THEN

                        -- Can not have more than one same Tax book
                        -- for one corporate book, raise error

                        okl_api.set_message(
                                            G_APP_NAME,
                                            G_DUP_TAX_BOOK,
                                            'TAX_BOOK',
                                            okl_line_rec.tax_book,
                                            'CONTRACT_NUM',
                                            okl_line_rec.contract_number_old||'/'||okl_line_rec.line_number,
                                            'ASSET_NUM',
                                            okl_line_rec.asset_number
                                           );
                        x_return_status := OKL_API.G_RET_STS_ERROR;
                       RAISE load_failed;

                    END IF;

                    debug_message('---->Processing Multiple Tax book');

                    get_tal_id(
                               x_return_status => x_return_status,
                               p_fa_line_id    => x_clev_fa_rec.id,
                               x_tal_id        => l_tal_id);

                    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                       x_return_status := OKL_API.G_RET_STS_ERROR;
                       RAISE load_failed;
                    END IF;

                    get_txd_id (
                                x_return_status   => x_return_status,
                                x_msg_count       => x_msg_count,
                                x_msg_data        => x_msg_data,
                                p_contract_number => okl_header_rec.contract_number_old,
                                p_tal_id          => l_tal_id,
                                p_tax_book        => okl_line_rec.tax_book,
                                x_txd_id          => x_txd_id
                               );

                    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                       x_return_status := OKL_API.G_RET_STS_ERROR;
                       RAISE load_failed;
                    END IF;

                    --l_adpv_rec                    := NULL;
                    l_adpv_rec.id                 := x_txd_id;
                    l_adpv_rec.asset_number       := okl_line_rec.asset_number;
                    l_adpv_rec.tal_id             := l_tal_id;

                    IF (okl_line_rec.deprn_method_tax IS NOT NULL) THEN
                       l_adpv_rec.deprn_method_tax   := okl_line_rec.deprn_method_tax;
                    END IF;

                    IF (okl_line_rec.deprn_rate_tax IS NOT NULL) THEN
                       l_adpv_rec.deprn_rate_tax     := okl_line_rec.deprn_rate_tax;
                    END IF;

                    IF (okl_line_rec.deprn_rate_tax IS NOT NULL) THEN
                       l_adpv_rec.deprn_rate_tax     := okl_line_rec.deprn_rate_tax;
                    END IF;

                    IF (okl_line_rec.life_in_months_tax IS NOT NULL) THEN
                       l_adpv_rec.life_in_months_tax := okl_line_rec.life_in_months_tax;
                    END IF;

                    okl_txd_assets_pub.update_txd_asset_def(
                                                            p_api_version     => 1.0,
                                                            p_init_msg_list   => OKL_API.G_FALSE,
                                                            x_return_status   => x_return_status,
                                                            x_msg_count       => x_msg_count,
                                                            x_msg_data        => x_msg_data,
                                                            p_adpv_rec        => l_adpv_rec,
                                                            x_adpv_rec        => x_adpv_rec
                                                           );

                    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                        x_return_status := OKL_API.G_RET_STS_ERROR;
                        RAISE load_failed;
                    END IF;

                    debug_message('------>TXD Line Updated');

                    --
                    -- End of multiple Tax book logic for release asset
                    --

                    -- Bug# 4345613
                    l_rule_create_flag := 'N';

                ELSE

                   process_release_asset(
                                         x_return_status      => x_return_status,
                                         x_msg_count          => x_msg_count,
                                         x_msg_data           => x_msg_data,
                                         p_chr_id             => x_chrv_rec.id,
                                         p_contract_number    => okl_line_rec.contract_number_old,
                                         p_asset_number       => okl_line_rec.asset_number,
                                         p_asset_id           => x_asset_id,
                                         p_line_number        => okl_line_rec.line_number,
                                         p_install_site_id    => okl_line_rec.install_site_id,
                                         p_install_site_num   => okl_line_rec.install_site_number,
                                         p_unit_price         => okl_line_rec.original_cost,
                                         p_deprn_method       => okl_line_rec.depreciation_method_code,
                                         p_life_in_months     => okl_line_rec.life_in_months,
                                         p_deprn_rate         => okl_line_rec.depreciation_rate,
                                         p_asset_location_id  => okl_line_rec.asset_location_id,
                                         p_asset_loc_segment1 => okl_line_rec.asset_location_segment1,
                                         p_asset_loc_segment2 => okl_line_rec.asset_location_segment2,
                                         p_asset_loc_segment3 => okl_line_rec.asset_location_segment3,
                                         p_asset_loc_segment4 => okl_line_rec.asset_location_segment4,
                                         p_asset_loc_segment5 => okl_line_rec.asset_location_segment5,
                                         p_asset_loc_segment6 => okl_line_rec.asset_location_segment6,
                                         p_asset_loc_segment7 => okl_line_rec.asset_location_segment7,
                                         p_salvage_value      => okl_line_rec.salvage_value,
                                         p_salvage_ptg        => okl_line_rec.salvage_value_percent,
                                         p_residual_grnty_amt => okl_line_rec.residual_amount_guarantee,
                                         p_residual_code      => okl_line_rec.guarantor_type_code,
                                         p_residual_ptg       => okl_line_rec.residual_percent,
                                         p_residual_amt       => okl_line_rec.residual_amount,
                                         p_tax_book           => okl_line_rec.tax_book,
                                         p_tax_deprn          => okl_line_rec.deprn_method_tax,
                                         p_tax_life_in_mnth   => okl_line_rec.life_in_months_tax,
                                         p_tax_deprn_rate     => okl_line_rec.deprn_rate_tax,
                                         p_pth_base_payout_basis        => okl_line_rec.pth_base_payout_basis,
                                         p_pth_base_stream_code         => okl_line_rec.pth_base_stream_code,
                                         p_pth_base_stream_purpose_code => okl_line_rec.pth_base_stream_purpose_code,
                                         p_pth_start_date               => okl_line_rec.pth_start_date,
                                         p_pth_evg_payout_basis         => okl_line_rec.pth_evg_payout_basis,
                                         p_pth_payout_basis_formula     => okl_line_rec.pth_payout_basis_formula,
                                         p_pth_evg_stream_code          => okl_line_rec.pth_evg_stream_code,
                                         p_pth_evg_stream_purpose_code  => okl_line_rec.pth_evg_stream_purpose_code,
                                         p_attribute_category           => okl_line_rec.attribute_category,
                                         p_attribute1                   => okl_line_rec.attribute1,
                                         p_attribute2                   => okl_line_rec.attribute2,
                                         p_attribute3                   => okl_line_rec.attribute3,
                                         p_attribute4                   => okl_line_rec.attribute4,
                                         p_attribute5                   => okl_line_rec.attribute5,
                                         p_attribute6                   => okl_line_rec.attribute6,
                                         p_attribute7                   => okl_line_rec.attribute7,
                                         p_attribute8                   => okl_line_rec.attribute8,
                                         p_attribute9                   => okl_line_rec.attribute9,
                                         p_attribute10                  => okl_line_rec.attribute10,
                                         p_attribute11                  => okl_line_rec.attribute11,
                                         p_attribute12                  => okl_line_rec.attribute12,
                                         p_attribute13                  => okl_line_rec.attribute13,
                                         p_attribute14                  => okl_line_rec.attribute14,
                                         p_attribute15                  => okl_line_rec.attribute15,
                                         x_clev_fin_rec                 => x_clev_fin_rec,
                                         x_clev_model_rec               => x_clev_model_rec,
                                         x_clev_fa_rec                  => x_clev_fa_rec,
                                         x_clev_ib_rec                  => x_clev_ib_rec
                                        );

                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                       x_return_status := OKL_API.G_RET_STS_ERROR;
                       RAISE load_failed;
                   END IF;

                   x_cle_id := x_clev_fin_rec.id;

                END IF;

             ELSE -- process new assets

                --
                -- Multiple Tax book creation
                --
                -- Check for Corporate book and asset number
                -- If those 2 matches with previous records create
                -- Tax book only
                --
                IF (l_loan_yn <> 'Y'
                    AND
                    okl_line_rec.asset_number = l_prev_asset_number
                    AND
                    okl_line_rec.asset_corporate_book = l_prev_corp_book ) THEN

                    IF (l_prev_tax_book = okl_line_rec.tax_book) THEN

                        -- Can not have more than one same Tax book
                        -- for one corporate book, raise error

                        okl_api.set_message(
                                            G_APP_NAME,
                                            G_DUP_TAX_BOOK,
                                            'TAX_BOOK',
                                            okl_line_rec.tax_book,
                                            'CONTRACT_NUM',
                                            okl_line_rec.contract_number_old||'/'||okl_line_rec.line_number,
                                            'ASSET_NUM',
                                            okl_line_rec.asset_number
                                           );
                        x_return_status := OKL_API.G_RET_STS_ERROR;
                       RAISE load_failed;

                    END IF;

                    debug_message('---->Processing Multiple Tax book');

                    l_adpv_rec                    := NULL;
                    l_adpv_rec.tal_id             := l_tal_id;
                    l_adpv_rec.asset_number       := okl_line_rec.asset_number;
                    l_adpv_rec.cost               := okl_line_rec.tax_cost;
                    l_adpv_rec.tax_book           := okl_line_rec.tax_book;
                    l_adpv_rec.life_in_months_tax := okl_line_rec.life_in_months_tax;
                    l_adpv_rec.deprn_method_tax   := okl_line_rec.deprn_method_tax;
                    l_adpv_rec.deprn_rate_tax     := okl_line_rec.deprn_rate_tax;
                    l_adpv_rec.salvage_value      := 0;

                    -- Take currency info from header, Bug 4005881
                    l_adpv_rec.CURRENCY_CODE            := okl_header_rec.currency_code;
                    l_adpv_rec.CURRENCY_CONVERSION_TYPE := okl_header_rec.currency_conversion_type;
                    l_adpv_rec.CURRENCY_CONVERSION_RATE := okl_header_rec.currency_conversion_rate;
                    l_adpv_rec.CURRENCY_CONVERSION_DATE := okl_header_rec.currency_conversion_date;

                    okl_txd_assets_pub.create_txd_asset_def(
                                                            p_api_version     => 1.0,
                                                            p_init_msg_list   => OKL_API.G_FALSE,
                                                            x_return_status   => x_return_status,
                                                            x_msg_count       => x_msg_count,
                                                            x_msg_data        => x_msg_data,
                                                            p_adpv_rec        => l_adpv_rec,
                                                            x_adpv_rec        => x_adpv_rec
                                                           );

                    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                        x_return_status := OKL_API.G_RET_STS_ERROR;
                        RAISE load_failed;
                    END IF;

                    debug_message('------>Only TXD Line Created');

                    --
                    -- End of multiple Tax book logic
                    --

                    -- Bug# 4345613
                    l_rule_create_flag := 'N';

                ELSE -- create new asset line

                   p_clev_fin_rec                  := NULL;
                   p_clev_fin_rec.chr_id           := x_chrv_rec.id;
                   p_clev_fin_rec.line_number      := okl_line_rec.line_number;
                   p_clev_fin_rec.sts_code         := 'NEW';
                   p_clev_fin_rec.dnz_chr_id       := x_chrv_rec.id;
                   p_clev_fin_rec.item_description := okl_line_rec.description;
                   p_clev_fin_rec.price_unit       := okl_line_rec.original_cost;
                   p_clev_fin_rec.currency_code    := okl_header_rec.currency_code;
                   p_clev_fin_rec.start_date       := okl_line_rec.start_date;
                   p_clev_fin_rec.end_date         := okl_line_rec.end_date;
                   p_clev_fin_rec.name             := okl_line_rec.asset_number;
/* 4414408
                   get_lse_id(
                              x_return_status   => x_return_status,
                              x_msg_count       => x_msg_count,
                              x_msg_data        => x_msg_data,
                              p_contract_number => okl_header_rec.contract_number_old,
                              p_line_number     => okl_line_rec.line_number,
                              p_lty_code        => 'FREE_FORM1',
                              p_top_line_lty_code => NULL,
                              x_lse_id          => x_lse_id
                             );
                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                   END IF;
*/
                   l_progress := '101';

                   p_clev_fin_rec.lse_id           := G_FIN_LINE_LTY_ID;

      -- start cklee 02/18/2004  bug# 3440442

                   validate_real_est(
                              x_return_status   => x_return_status,
                              x_msg_count       => x_msg_count,
                              x_msg_data        => x_msg_data,
                              p_intf_line       => okl_line_rec
                             );
                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                   END IF;

      -- end cklee 02/18/2004  bug# 3440442
      -- Rviriyal - fix for bug 5397754 -- start
       IF (okl_line_rec.CAPITALIZE_DOWN_PAYMENT_YN IS NOT NULL) AND
        (okl_line_rec.CAPITALIZE_DOWN_PAYMENT_YN = 'N') THEN
           IF (okl_line_rec.DOWN_PAYMENT_RECEIVER_CODE IS NOT NULL) AND
               (okl_line_rec.DOWN_PAYMENT_RECEIVER_CODE = 'VENDOR') THEN
                    okl_api.set_message(
                                            G_APP_NAME,
                                            'OKL_INVALID_COMBINATION',
                                            'CONTRACT_NUM',
                                            okl_line_rec.contract_number_old||'/'||okl_line_rec.line_number,
                                            'ASSET_NUM',
                                            okl_line_rec.asset_number
                                           );
                        x_return_status := OKL_API.G_RET_STS_ERROR;
                       RAISE load_failed;

                    END IF;
         END IF;

         -- Rviriyal - fix for bug 5397754 -- End

                   p_klev_fin_rec                           := NULL;
                   p_klev_fin_rec.year_of_manufacture       := okl_line_rec.year_of_manufacture;
                   p_klev_fin_rec.residual_percentage       := okl_line_rec.residual_percent;
                   p_klev_fin_rec.residual_value            := okl_line_rec.residual_amount;
/*
                   IF (okl_line_rec.residual_amount IS NULL) THEN
                      --p_klev_fin_rec.residual_value         := (okl_line_rec.residual_percent / (nvl(okl_line_rec.amount,1) * 100));
                            p_klev_fin_rec.residual_value         := (okl_line_rec.residual_percent / 100) * nvl(okl_line_rec.amount,0);
                   ELSE
                      p_klev_fin_rec.residual_value         := okl_line_rec.residual_amount;
                   END IF;
*/
                   p_klev_fin_rec.residual_grnty_amount     := okl_line_rec.residual_amount_guarantee;
                   p_klev_fin_rec.tradein_amount            := okl_line_rec.trade_in_amount;

                   IF (okl_line_rec.capital_reduction_percent IS NOT NULL) THEN
                      --p_klev_fin_rec.capital_reduction      := (okl_line_rec.capital_reduction_percent / (nvl(okl_line_rec.amount,1) * 100));
                      p_klev_fin_rec.capital_reduction      := (okl_line_rec.capital_reduction_percent / 100)
                                                                  * nvl(okl_line_rec.amount,0);
                   END IF;

                   IF (okl_line_rec.capital_reduction_amount IS NOT NULL) THEN
                      p_klev_fin_rec.capital_reduction      := okl_line_rec.capital_reduction_amount;
                   END IF;

		   --rviriyal : bug# 5397754
                   p_klev_fin_rec.CAPITALIZE_DOWN_PAYMENT_YN   :=  okl_line_rec.CAPITALIZE_DOWN_PAYMENT_YN;
                   p_klev_fin_rec.DOWN_PAYMENT_RECEIVER_CODE  :=  okl_line_rec.DOWN_PAYMENT_RECEIVER_CODE;
                   --rviriyal : end

      -- start cklee 02/16/2004  bug# 3440442
                   p_klev_fin_rec.initial_direct_cost       := okl_line_rec.real_est_init_direct_cost;
                   p_klev_fin_rec.occupancy                 := okl_line_rec.real_est_occupancy;
                   p_klev_fin_rec.date_last_inspection      := okl_line_rec.real_est_date_last_insp;
                   p_klev_fin_rec.date_next_inspection_due  := okl_line_rec.real_est_date_next_insp;
                   p_klev_fin_rec.date_commitment_expiration  := okl_line_rec.real_est_accept_expire_date;
      -- fnd lookup_type = 'OKL_PROPERTY_CLASS_OPTIONS'. check at API level
                   p_klev_fin_rec.prc_code                  := okl_line_rec.real_est_property_class_code;

      -- end cklee 02/16/2004 bug# 3440442

                   p_klev_fin_rec.weighted_average_life     := okl_line_rec.real_est_wtd_avg_life;
                   p_klev_fin_rec.bond_equivalent_yield     := okl_line_rec.real_est_bond_eq_yield;
                   p_klev_fin_rec.refinance_amount          := okl_line_rec.real_est_refinance_amt;
                   p_klev_fin_rec.credit_tenant_yn          := okl_line_rec.real_est_credit_tenant_flag;
                   p_klev_fin_rec.coverage_ratio            := okl_line_rec.real_est_coverage_ratio;
                   p_klev_fin_rec.date_appraisal            := okl_line_rec.real_est_appraisal_date;
                   p_klev_fin_rec.appraisal_value           := okl_line_rec.real_est_appraisal_value;
                   p_klev_fin_rec.gross_square_footage      := okl_line_rec.real_est_gross_footage;
                   p_klev_fin_rec.net_rentable              := okl_line_rec.real_est_net_footage_rentable;
                   p_klev_fin_rec.date_letter_acceptance    := okl_line_rec.real_est_letter_accept_date;
                   --p_klev_fin_rec.oec                       := okl_line_rec.amount;
                   p_klev_fin_rec.oec                       := okl_line_rec.original_cost;
                   --p_klev_fin_rec.capital_amount            := okl_line_rec.amount;
                   p_klev_fin_rec.capitalized_interest      := okl_line_rec.capitalized_interest;
                   p_klev_fin_rec.capital_reduction_percent := okl_line_rec.capital_reduction_percent;
                   p_klev_fin_rec.residual_code             := NVL(okl_line_rec.guarantor_type_code,'NONE');
                   p_cimv_model_rec                         := NULL;
                   p_cimv_model_rec.chr_id                  := x_chrv_rec.id;
                   p_cimv_model_rec.dnz_chr_id              := x_chrv_rec.id;
                   p_cimv_model_rec.number_of_items         := okl_line_rec.total_units;

                   l_progress := '102';
                   IF (x_inventory_org_id IS NOT NULL) THEN
                      p_cimv_model_rec.object1_id2          := x_inventory_org_id;
                      p_cimv_model_rec.object1_id1          := x_inventory_item_id;
                      p_cimv_model_rec.jtot_object1_code    := 'OKX_SYSITEM';
                   END IF;


                   p_clev_fa_rec                         := NULL;
                   p_clev_fa_rec.chr_id                  := x_chrv_rec.id;
                   p_clev_fa_rec.line_number             := okl_line_rec.line_number;
                   p_clev_fa_rec.name                    := okl_line_rec.asset_number;
                   p_clev_fa_rec.sts_code                := 'NEW';
                   p_clev_fa_rec.item_description        := okl_line_rec.description;
/* 4414408
                   get_lse_id(
                              x_return_status   => x_return_status,
                              x_msg_count       => x_msg_count,
                              x_msg_data        => x_msg_data,
                              p_contract_number => okl_header_rec.contract_number_old,
                              p_line_number     => okl_line_rec.line_number,
                              p_lty_code        => 'FIXED_ASSET',
                              p_top_line_lty_code => 'FREE_FORM1',
                              x_lse_id          => x_lse_id
                             );
                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                   END IF;
*/
                   l_progress := '103';
                   p_clev_fa_rec.lse_id := G_FA_LINE_LTY_ID;

                   p_cimv_fa_rec := NULL;
/* 4414408
                   l_new_yn      := 'Y'; -- Yes to create Asset, No to validate asset, Default is 'Y'

                   IF (l_new_yn = 'N') THEN
                      get_asset_id(
                                   x_return_status   => x_return_status,
                                   x_msg_count       => x_msg_count,
                                   x_msg_data        => x_msg_data,
                                   p_contract_number => okl_header_rec.contract_number_old,
                                   p_line_number     => okl_line_rec.line_number,
                                   p_asset_number    => okl_line_rec.asset_number,
                                   x_id1             => x_id1,
                                   x_id2             => x_id2
                                 );
                      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                         x_return_status := OKL_API.G_RET_STS_ERROR;
                         RAISE load_failed;
                      END IF;

                      p_cimv_fa_rec.chr_id            := x_chrv_rec.id;
                      p_cimv_fa_rec.dnz_chr_id        := x_chrv_rec.id;
                      p_cimv_fa_rec.jtot_object1_code := 'OKX_ASSET';
                      p_cimv_fa_rec.object1_id1       := x_id1;
                      p_cimv_fa_rec.object1_id2       := x_id2;
                   END IF;

                   p_talv_fa_rec := NULL;

                   IF (l_new_yn = 'Y') THEN
*/
                      p_talv_fa_rec := NULL;  -- re-initialized for bug 5584648
                      -- Take currency info from header, Bug 4005881
                      p_talv_fa_rec.CURRENCY_CODE            := okl_header_rec.currency_code;
                      p_talv_fa_rec.CURRENCY_CONVERSION_TYPE := okl_header_rec.currency_conversion_type;
                      p_talv_fa_rec.CURRENCY_CONVERSION_RATE := okl_header_rec.currency_conversion_rate;
                      p_talv_fa_rec.CURRENCY_CONVERSION_DATE := okl_header_rec.currency_conversion_date;

                      p_talv_fa_rec.asset_number          := okl_line_rec.asset_number;
                      p_talv_fa_rec.original_cost         := okl_line_rec.original_cost;
                      p_talv_fa_rec.current_units         := okl_line_rec.total_units;
                      --p_talv_fa_rec.depreciation_cost     := okl_line_rec.amount;
                      p_talv_fa_rec.description           := okl_line_rec.description;
                      p_talv_fa_rec.model_number          := okl_line_rec.model;
                      p_talv_fa_rec.manufacturer_name     := okl_line_rec.make;
                      p_talv_fa_rec.year_manufactured     := okl_line_rec.year_of_manufacture;

                      IF (l_loan_yn <> 'Y') THEN -- not a loan product
                         p_talv_fa_rec.corporate_book        := okl_line_rec.asset_corporate_book;
                         p_talv_fa_rec.depreciation_cost     := okl_line_rec.amount; --okl_line_rec.depreciation_cost;
                      END IF; -- l_loan_yn

                      IF (l_loan_yn <> 'Y') THEN -- not a loan product
                         x_comb_id := NULL;
                         get_flexid(
                                    x_return_status   => x_return_status,
                                    x_msg_count       => x_msg_count,
                                    x_msg_data        => x_msg_data,
                                    p_contract_number => okl_header_rec.contract_number_old,
                                    p_line_number     => okl_line_rec.line_number,
                                    p_type            => 'ASSET_CATEGORY',
                                    p_comb_id         => okl_line_rec.asset_category_id,
                                    p_segment1        => okl_line_rec.asset_category_segment1,
                                    p_segment2        => okl_line_rec.asset_category_segment2,
                                    p_segment3        => okl_line_rec.asset_category_segment3,
                                    p_segment4        => okl_line_rec.asset_category_segment4,
                                    p_segment5        => okl_line_rec.asset_category_segment5,
                                    p_segment6        => okl_line_rec.asset_category_segment6,
                                    p_segment7        => okl_line_rec.asset_category_segment7,
                                    x_comb_id         => x_comb_id
                                   );
                         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                            x_return_status := OKL_API.G_RET_STS_ERROR;
                            RAISE load_failed;
                         END IF;
                         p_talv_fa_rec.depreciation_id       := x_comb_id;

                         x_comb_id := NULL;
                         get_flexid(
                                    x_return_status   => x_return_status,
                                    x_msg_count       => x_msg_count,
                                    x_msg_data        => x_msg_data,
                                    p_type            => 'ASSET_LOCATION',
                                    p_contract_number => okl_header_rec.contract_number_old,
                                    p_line_number     => okl_line_rec.line_number,
                                    p_comb_id         => okl_line_rec.asset_location_id,
                                    p_segment1        => okl_line_rec.asset_location_segment1,
                                    p_segment2        => okl_line_rec.asset_location_segment2,
                                    p_segment3        => okl_line_rec.asset_location_segment3,
                                    p_segment4        => okl_line_rec.asset_location_segment4,
                                    p_segment5        => okl_line_rec.asset_location_segment5,
                                    p_segment6        => okl_line_rec.asset_location_segment6,
                                    p_segment7        => okl_line_rec.asset_location_segment7,
                                    x_comb_id         => x_comb_id
                                   );
                         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                            x_return_status := OKL_API.G_RET_STS_ERROR;
                            RAISE load_failed;
                         END IF;
                         p_talv_fa_rec.fa_location_id        := x_comb_id;

                         -- Asset Key
                         x_comb_id := NULL;
                         debug_message('Asset Key segment1: '||okl_line_rec.asset_key_segment1);

                         get_asset_key_id(
                                    x_return_status   => x_return_status,
                                    x_msg_count       => x_msg_count,
                                    x_msg_data        => x_msg_data,
                                    p_contract_number => okl_header_rec.contract_number_old,
                                    p_line_number     => okl_line_rec.line_number,
                                    p_comb_id         => okl_line_rec.asset_key_id,
                                    p_segment1        => okl_line_rec.asset_key_segment1,
                                    p_segment2        => okl_line_rec.asset_key_segment2,
                                    p_segment3        => okl_line_rec.asset_key_segment3,
                                    p_segment4        => okl_line_rec.asset_key_segment4,
                                    p_segment5        => okl_line_rec.asset_key_segment5,
                                    p_segment6        => okl_line_rec.asset_key_segment6,
                                    p_segment7        => okl_line_rec.asset_key_segment7,
                                    p_segment8        => okl_line_rec.asset_key_segment8,
                                    p_segment9        => okl_line_rec.asset_key_segment9,
                                    p_segment10       => okl_line_rec.asset_key_segment10,
                                    x_comb_id         => x_comb_id
                                   );
                         IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                            x_return_status := OKL_API.G_RET_STS_ERROR;
                            RAISE load_failed;
                         END IF;
                         p_talv_fa_rec.asset_key_id       := x_comb_id;
                         debug_message('Asset Key: '||x_comb_id);
                         -- Asset Key

                         p_talv_fa_rec.deprn_method          := okl_line_rec.depreciation_method_code; --??? Get method Code from id
                         p_talv_fa_rec.life_in_months        := okl_line_rec.life_in_months;
                         p_talv_fa_rec.deprn_rate            := okl_line_rec.depreciation_rate;
                         p_talv_fa_rec.salvage_value         := okl_line_rec.salvage_value;
                         p_talv_fa_rec.percent_salvage_value := okl_line_rec.salvage_value_percent;
                         p_talv_fa_rec.in_service_date       := okl_line_rec.in_service_date;
                                                            --okl_header_rec.expected_delivery_date;-- ??? should be at line
                      END IF; -- l_loan_yn

--                   END IF;

                   l_progress := '104';

                   get_install_site_id(
                                       x_return_status     => x_return_status,
                                       x_msg_count         => x_msg_count,
                                       x_msg_data          => x_msg_data,
                                       p_contract_number   => okl_header_rec.contract_number_old,
                                       p_line_number       => okl_line_rec.line_number,
                                       p_install_site_id   => okl_line_rec.install_site_id,
                                       p_install_site_number => okl_line_rec.install_site_number,
                                       x_install_site_id   => x_install_site_id
                                      );

                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                   END IF;

                   --debug_message('Install site id: '||x_install_site_id);

                   -- Get IB Lines
                   l_ib_line_count := 0;
                   p_itiv_ib_tbl.DELETE; -- initialize table, Bug 4067179
                   FOR okl_ib_rec IN okl_ib_csr(okl_header_rec.contract_number_old,
                                                okl_line_rec.line_number)
                   LOOP

                     --Bug# 9299607
                     IF (okl_ib_rec.serial_number IS NOT NULL AND LENGTH(okl_ib_rec.serial_number) > 30) THEN
                       OKL_API.Set_Message(p_app_name     => G_APP_NAME,
                         p_msg_name     => 'OKL_LLA_EXCEED_MAXIMUM_LENGTH',
                         p_token1       => 'MAX_CHARS',
                         p_token1_value => '30',
                         p_token2       => 'COL_NAME',
                         p_token2_value => 'SERIAL_NUMBER');

                       x_return_status := OKL_API.G_RET_STS_ERROR;
                       RAISE load_failed;
                     END IF;

                     l_ib_line_count := l_ib_line_count + 1;

                     p_itiv_ib_tbl(l_ib_line_count).line_number          := okl_line_rec.line_number;
                     p_itiv_ib_tbl(l_ib_line_count).mfg_serial_number_yn := 'Y';
                     p_itiv_ib_tbl(l_ib_line_count).object_id1_new       := x_install_site_id;
                     p_itiv_ib_tbl(l_ib_line_count).object_id2_new       := '#';
                     p_itiv_ib_tbl(l_ib_line_count).serial_number        := okl_ib_rec.serial_number;

                     debug_message('Count: '||l_ib_line_count);
                     debug_message('Serial#: '||p_itiv_ib_tbl(l_ib_line_count).serial_number);

                   END LOOP; --ib line

                   IF (l_ib_line_count = 0) THEN

                     p_itiv_ib_tbl(1).mfg_serial_number_yn := 'N';
                     p_itiv_ib_tbl(1).object_id1_new       := x_install_site_id;
                     p_itiv_ib_tbl(1).object_id2_new       := '#';

                   END IF;
                   debug_message('Residual% : '|| p_klev_fin_rec.residual_percentage);
                   debug_message('Residual value : '|| p_klev_fin_rec.residual_value);

                   -- Contract addl field, Bug 4558486

                   debug_message('Contract Asset line DFF...'||'Line#: '||okl_line_rec.line_number);

                   p_klev_fin_rec.validate_dff_yn          := 'Y';  -- always validate DFF
                   p_klev_fin_rec.attribute_category       := okl_line_rec.attribute_category;
                   debug_message('attribute_category: '||p_klev_fin_rec.attribute_category);
                   p_klev_fin_rec.attribute1               := okl_line_rec.attribute1;
                   debug_message('attribute1: '||p_klev_fin_rec.attribute1);
                   p_klev_fin_rec.attribute2               := okl_line_rec.attribute2;
                   debug_message('attribute2: '||p_klev_fin_rec.attribute2);
                   p_klev_fin_rec.attribute3               := okl_line_rec.attribute3;
                   p_klev_fin_rec.attribute4               := okl_line_rec.attribute4;
                   p_klev_fin_rec.attribute5               := okl_line_rec.attribute5;
                   p_klev_fin_rec.attribute6               := okl_line_rec.attribute6;
                   p_klev_fin_rec.attribute7               := okl_line_rec.attribute7;
                   p_klev_fin_rec.attribute8               := okl_line_rec.attribute8;
                   p_klev_fin_rec.attribute9               := okl_line_rec.attribute9;
                   p_klev_fin_rec.attribute10              := okl_line_rec.attribute10;
                   p_klev_fin_rec.attribute11              := okl_line_rec.attribute11;
                   p_klev_fin_rec.attribute12              := okl_line_rec.attribute12;
                   p_klev_fin_rec.attribute13              := okl_line_rec.attribute13;
                   p_klev_fin_rec.attribute14              := okl_line_rec.attribute14;
                   p_klev_fin_rec.attribute15              := okl_line_rec.attribute15;
                   -- Contract addl field, Bug 4558486
                   debug_message('Before create_all_line');

                   okl_create_kle_pvt.Create_all_line(
                                                      p_api_version    => 1.0,
                                                      p_init_msg_list  => OKL_API.G_FALSE,
                                                      x_return_status  => x_return_status,
                                                      x_msg_count      => x_msg_count,
                                                      x_msg_data       => x_msg_data,
                                                      P_new_yn         => 'Y', -- 4414408
                                                      p_asset_number   => okl_line_rec.asset_number,
                                                      p_clev_fin_rec   => p_clev_fin_rec,
                                                      p_klev_fin_rec   => p_klev_fin_rec,
                                                      p_cimv_model_rec => p_cimv_model_rec,
                                                      p_clev_fa_rec    => p_clev_fa_rec,
                                                      p_cimv_fa_rec    => p_cimv_fa_rec,
                                                      p_talv_fa_rec    => p_talv_fa_rec,
                                                      p_itiv_ib_tbl    => p_itiv_ib_tbl,
                                                      x_clev_fin_rec   => x_clev_fin_rec,
                                                      x_clev_model_rec => x_clev_model_rec,
                                                      x_clev_fa_rec    => x_clev_fa_rec,
                                                      x_clev_ib_rec    => x_clev_ib_rec
                                                     );

                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                   END IF;
		   --rviriyal bug#6015423 start 27-Aug-2007
                     /* Added code to consider date_funding_expected field. If date_funding_expected
                        is present in okl_interface_lines that value is considered else asset
                        start date is considered. */

                     IF okl_line_rec.date_funding_expected IS NULL THEN
                       p_klev_fin_rec.date_funding_expected := x_clev_fin_rec.start_date;
                     ELSE
                       p_klev_fin_rec.date_funding_expected := okl_line_rec.date_funding_expected;
                     END IF;

                     OKL_LA_ASSET_PVT.update_contract_line(
                                                       p_api_version                =>1.0
                                                       ,p_init_msg_list             =>OKL_API.G_FALSE
                                                       ,x_return_status             =>x_return_status
                                                       ,x_msg_count                 =>x_msg_count
                                                       ,x_msg_data                  =>x_msg_data
                                                       ,p_id                        =>x_clev_fin_rec.id
                                                       ,p_date_delivery_expected    => NULL
                                                       ,p_date_funding_expected     => p_klev_fin_rec.date_funding_expected
                                                       ,p_org_id                    =>NULL
                                                       ,p_organization_id           =>NULL
                                                      );
                    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                         x_return_status := OKL_API.G_RET_STS_ERROR;
                         RAISE load_failed;
                    END IF;

                    --rviriyal bug#6015423 start 27-Aug-2007

                   debug_message('------>Line created');

	  -- Bug 5155206
	  /*  Load Rent payment for the asset line, before asset subisidy is processed.
	       Rent line will be always TOP line. so skip check_payment_level call  */

		  -- Process Rent Payments Interface Record, if any
		  l_contract_number_old_prev := 'INITIAL';
		  l_line_number_prev         := -999999999;
		  l_payment_type_code_prev   := 'INITIAL';
		  l_pmnt_sch_num_prev        := -999999999;
		  l_start_date_prev          := NULL;
		  l_number_of_periods_prev   := -999999999;
		  l_rg_id                    := NULL;

		  FOR okl_payment_rent_rec IN okl_payment_rent_csr(okl_header_rec.contract_number_old,
							 okl_line_rec.line_number)
		  LOOP
		     BEGIN --5

		       check_payment_record(
					    x_return_status              => x_return_status,
					    x_msg_count                  => x_msg_count,
					    x_msg_data                   => x_msg_data,
					    p_contract_number_old        => okl_payment_rent_rec.contract_number_old,
					    p_line_number                => okl_payment_rent_rec.line_number,
					    p_asset_number               => okl_payment_rent_rec.asset_number,
					    p_payment_type_code          => okl_payment_rent_rec.payment_type_code,
					    p_stream_purpose             => okl_payment_rent_rec.stream_purpose_code,
					    p_payment_schedule_number    => okl_payment_rent_rec.payment_schedule_number,
					    p_payment_frequency_code     => okl_payment_rent_rec.payment_frequency_code,
					    p_arrears_flag               => okl_payment_rent_rec.arrears_flag,
					    p_advance_payments           => okl_payment_rent_rec.advance_payments,
					    p_payment_amount             => okl_payment_rent_rec.payment_amount,
					    p_start_date                 => okl_payment_rent_rec.start_date,
					    p_number_of_periods          => okl_payment_rent_rec.number_of_periods,
					    p_rate                       => okl_payment_rent_rec.rate,
					    p_comments                   => okl_payment_rent_rec.comments,
					    p_stub_days                  => okl_payment_rent_rec.stub_days,
					    p_stub_amount                => okl_payment_rent_rec.stub_amount
					   );

		       IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
			   RAISE load_failed;
		       END IF;

			IF (l_contract_number_old_prev <> okl_payment_rent_rec.contract_number_old  -- prev checking
			    OR
			    l_line_number_prev         <> okl_payment_rent_rec.line_number
			    OR
			    l_payment_type_code_prev   <> okl_payment_rent_rec.payment_type_code) THEN

			   IF (l_line_number_prev <> okl_payment_rent_rec.line_number) THEN -- for new line create rule group
			       l_rg_id := NULL;
			   END IF;

			    create_payment_rule_group(
						      x_return_status     => x_return_status,
						      x_msg_count         => x_msg_count,
						      x_msg_data          => x_msg_data,
						      p_contract_number   => okl_header_rec.contract_number_old,
						      p_line_number       => okl_line_rec.line_number,
						      p_payment_type_code => okl_payment_rent_rec.payment_type_code,
						      p_stream_purpose    => okl_payment_rent_rec.stream_purpose_code,
						      p_chr_id            => x_chrv_rec.id,
						      p_cle_id            => x_clev_fin_rec.id,
						      p_rg_id             => l_rg_id,
						      x_rgp_id            => x_rgp_id,
						      x_slh_rulv_rec      => x_slh_rulv_rec
						     );

			   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
			      RAISE load_failed;
			   END IF;

			ELSE
			    l_progress := '170';

			    -- Some more validation on Payment Lines
			    IF (okl_payment_rent_rec.payment_schedule_number <= l_pmnt_sch_num_prev) THEN
			       okl_api.set_message(
						   G_APP_NAME,
						   G_PAYMENT_SCHD_ERROR,
						   'COL_VALUE',
						    okl_payment_rent_rec.payment_schedule_number,
						   'CONTRACT_NUM',
						   okl_header_rec.contract_number_old||'/'||okl_payment_rent_rec.line_number
						  );
			       x_return_status := OKL_API.G_RET_STS_ERROR;
			       RAISE load_failed;
			    END IF;

			    check_payment_frequency_code(
							 x_return_status     => x_return_status,
							 x_msg_count         => x_msg_count,
							 x_msg_data          => x_msg_data,
							 p_payment_freq_code => okl_payment_rent_rec.payment_frequency_code,
							 x_id1               => x_pmnt_freq_id,
							 x_uom_code          => x_uom_code
							);

			    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
			       okl_api.set_message(
						   G_APP_NAME,
						   G_INVALID_VALUE,
						   'CONTRACT_NUM',
						   okl_payment_rent_rec.contract_number_old||'/'||okl_payment_rent_rec.line_number,
						   'COL_NAME',
						   'PAYMENT_FREQUENCY_CODE',
						   'COL_VALUE',
						   okl_payment_rent_rec.payment_frequency_code
						  );
			       RAISE load_failed;
			    END IF;

			    IF (x_uom_code = 'M') THEN
			       l_mult_factor := 1;
			    ELSIF (x_uom_code = 'Q') THEN
			       l_mult_factor := 3;
			    ELSIF (x_uom_code = 'S') THEN
			       l_mult_factor := 6;
			    ELSIF (x_uom_code = 'A') THEN
			       l_mult_factor := 12;
			    ELSE
			       okl_api.set_message(
						   G_APP_NAME,
						   G_UOM_SETUP_ERROR,
						   'COL_VALUE',
						   okl_payment_rent_rec.payment_frequency_code
						  );
			       RAISE load_failed;
			    END IF;


			    l_current_start_date := add_months(l_start_date_prev, (l_number_of_periods_prev * l_mult_factor));

			    IF (TRUNC(l_current_start_date) <> TRUNC(okl_payment_rent_rec.start_date)) THEN
			       okl_api.set_message(
						   G_APP_NAME,
						   G_PAYMENT_START_DATE_ERROR,
						   'CONTRACT_NUM',
						   okl_payment_rent_rec.contract_number_old||'/'||okl_payment_rent_rec.line_number
						  );
			       RAISE load_failed;
			    END IF;

			END IF; --prev checking

			IF (l_rg_id IS NULL) THEN
			   l_rg_id := x_rgp_id;
			END IF;

			-- Create other rules
			-- Keep a copy to compare with latest record
			create_payment_other_rules(
						   x_return_status      => x_return_status,
						   x_msg_count          => x_msg_count,
						   x_msg_data           => x_msg_data,
						   p_contract_number    => okl_header_rec.contract_number_old,
						   p_line_number        => okl_line_rec.line_number,
						   p_payment_sch_number => okl_payment_rent_rec.payment_schedule_number,
						   p_payment_freq_code  => okl_payment_rent_rec.payment_frequency_code,
						   p_arrears_flag       => okl_payment_rent_rec.arrears_flag,
						   p_advance_payments   => okl_payment_rent_rec.advance_payments,
						   p_payment_amount     => okl_payment_rent_rec.payment_amount,
						   p_start_date         => okl_payment_rent_rec.start_date,
						   p_number_of_periods  => okl_payment_rent_rec.number_of_periods,
						   p_rate               => okl_payment_rent_rec.rate,
						   p_comments           => okl_payment_rent_rec.comments,
						   p_stub_days          => okl_payment_rent_rec.stub_days,
						   p_stub_amount        => okl_payment_rent_rec.stub_amount,
						   p_slh_rulv_rec       => x_slh_rulv_rec,
						   p_chr_id             => x_chrv_rec.id,
						   p_cle_id             => x_cle_id,
						   p_rgp_id             => x_rgp_id
						  );

			IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
			   RAISE load_failed;
			END IF;

			l_progress := '180';

			l_contract_number_old_prev := okl_payment_rent_rec.contract_number_old;
			l_line_number_prev         := okl_payment_rent_rec.line_number;
			l_payment_type_code_prev   := okl_payment_rent_rec.payment_type_code;
			l_pmnt_sch_num_prev        := okl_payment_rent_rec.payment_schedule_number;
			l_start_date_prev          := okl_payment_rent_rec.start_date;
			l_number_of_periods_prev   := okl_payment_rent_rec.number_of_periods;

		     END; --5 Payment begin

		  END LOOP; -- Payment Loop
           -- Bug 5155206


/* OKL.H - Subsidy import start Bug 4411317 */
                   debug_message('------>Process Subsidy starts for Asset: '||okl_line_rec.asset_number);
                   process_subsidy(
                                   x_return_status => x_return_status,
                                   x_msg_count     => x_msg_count,
                                   x_msg_data      => x_msg_data,
                                   p_auth_org_id   => x_chrv_rec.authoring_org_id,
                                   p_contract_num  => okl_header_rec.contract_number_old,
                                   p_chr_id        => x_chrv_rec.id,
                                   p_asset_line_id => x_clev_fin_rec.id,
                                   p_asset_num     => okl_line_rec.asset_number
                                  );

                   debug_message('------>Process Subsidy ends '||x_return_status);
                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                   END IF;


/* OKL.H - Subsidy import end */

/* OKL.H - Addon import start Bug 5077142 */
                   debug_message('------>Process Addon starts for Asset: '||okl_line_rec.asset_number);

                   process_addon(
                                   x_return_status => x_return_status,
                                   x_msg_count     => x_msg_count,
                                   x_msg_data      => x_msg_data,
                                   p_auth_org_id   => x_chrv_rec.authoring_org_id,
                                   p_contract_num  => okl_header_rec.contract_number_old,
                                   p_chr_id        => x_chrv_rec.id,
                                   p_fa_cle_id     => x_clev_fa_rec.id,
                                   p_asset_num     => okl_line_rec.asset_number,
                                   p_model_line_id => x_clev_model_rec.id,
                                   p_number_of_items => okl_line_rec.total_units
                                  );

             --debug_message('AKP:NEEDED:x_clev_fa_rec.id=' || x_clev_fa_rec.id);

                   debug_message('------>Process Addon ends '||x_return_status);
                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                   END IF;

/* OKL.H - Addon import end */

                   IF (okl_line_rec.pth_evg_payout_basis is NOT NULL) THEN
                      debug_message('------>Create party payment starts for Asset: '||okl_line_rec.asset_number || ' / '||okl_line_rec.line_number);
                      create_party_payment_hdr(
                                         x_return_status                   => x_return_status,
                                         x_msg_count                       => x_msg_count,
                                         x_msg_data                        => x_msg_data,
                                         p_contract_id                     => x_clev_fin_rec.dnz_chr_id,
                                         p_line_id                         => x_clev_fin_rec.id,
                                         p_line_type                       => okl_line_rec.line_type,
                                         p_pth_start_date                  => okl_line_rec.pth_start_date,
                                         p_pth_base_payout_basis           => okl_line_rec.pth_base_payout_basis,
                                         p_pth_base_stream_code            => okl_line_rec.pth_base_stream_code,
                                         p_pth_base_stream_purpose_code    => okl_line_rec.pth_base_stream_purpose_code,
                                         p_pth_evg_payout_basis            => okl_line_rec.pth_evg_payout_basis,
                                         p_pth_payout_basis_formula        => okl_line_rec.pth_payout_basis_formula,
                                         p_pth_evg_stream_code             => okl_line_rec.pth_evg_stream_code,
                                         p_pth_evg_stream_purpose_code     => okl_line_rec.pth_evg_stream_purpose_code,
                                         x_party_pmnt_hdr_tbl              => x_party_pmnt_hdr_tbl_out
                                        );

                      debug_message('------>Create party payment ends '||x_return_status);
                      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                         x_return_status := OKL_API.G_RET_STS_ERROR;
                         RAISE load_failed;
                      END IF;
	              IF (x_party_pmnt_hdr_tbl_out.COUNT > 0 )THEN
	                 l_counter := x_party_pmnt_hdr_tbl_out.FIRST;
	                 LOOP
                           IF (x_party_pmnt_hdr_tbl_out(l_counter).passthru_term = 'BASE') THEN
		              g_base_pmnt_hdr := x_party_pmnt_hdr_tbl_out(l_counter);
		           ELSIF (x_party_pmnt_hdr_tbl_out(l_counter).passthru_term = 'EVERGREEN') THEN
		              g_evg_pmnt_hdr := x_party_pmnt_hdr_tbl_out(l_counter);
		           END IF;
	                 EXIT WHEN (l_counter = x_party_pmnt_hdr_tbl_out.LAST);
                         l_counter := x_party_pmnt_hdr_tbl_out.NEXT(l_counter);
	                 END LOOP;
                      END IF;
		   END IF;

/*
                   --
                   -- Update asset detail with depreciation cost
                   --
                   IF (okl_line_rec.depreciation_cost IS NOT NULL) THEN

                      FOR txl_rec IN txl_csr (x_chrv_rec.id,
                                              x_clev_fa_rec.id)
                      LOOP
                         l_talv_rec.id                    := txl_rec.id;
                         l_talv_rec.depreciation_cost     := okl_line_rec.depreciation_cost;
                      END LOOP;

                      okl_txl_assets_pub.update_txl_asset_def(
                                              p_api_version     => 1.0,
                                              p_init_msg_list   => OKL_API.G_FALSE,
                                              x_return_status   => x_return_status,
                                              x_msg_count       => x_msg_count,
                                              x_msg_data        => x_msg_data,
                                              p_tlpv_rec        => l_talv_rec,
                                              x_tlpv_rec        => x_talv_rec
                                             );

                      debug_message('Depreciation Cost update: '||x_return_status);

                      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                         x_return_status := OKL_API.G_RET_STS_ERROR;
                         RAISE load_failed;
                      END IF;

                   END IF; -- depreciation_cost
*/

                   get_tal_id(
                              x_return_status => x_return_status,
                              p_fa_line_id    => x_clev_fa_rec.id,
                              x_tal_id        => l_tal_id);

                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                   END IF;

                   IF (l_loan_yn <> 'Y') THEN -- don't create txd for loan type contract

                      l_adpv_rec                    := NULL;
                      l_adpv_rec.tal_id             := l_tal_id;
                      l_adpv_rec.asset_number       := okl_line_rec.asset_number;
                      l_adpv_rec.cost               := okl_line_rec.tax_cost;
                      l_adpv_rec.tax_book           := okl_line_rec.tax_book;
                      l_adpv_rec.life_in_months_tax := okl_line_rec.life_in_months_tax;
                      l_adpv_rec.deprn_method_tax   := okl_line_rec.deprn_method_tax;
                      l_adpv_rec.deprn_rate_tax     := okl_line_rec.deprn_rate_tax;
                      l_adpv_rec.salvage_value      := 0; -- to make consistant with UI, might need a change later

                      -- Take currency info from header, Bug 4005881
                      l_adpv_rec.CURRENCY_CODE            := okl_header_rec.currency_code;
                      l_adpv_rec.CURRENCY_CONVERSION_TYPE := okl_header_rec.currency_conversion_type;
                      l_adpv_rec.CURRENCY_CONVERSION_RATE := okl_header_rec.currency_conversion_rate;
                      l_adpv_rec.CURRENCY_CONVERSION_DATE := okl_header_rec.currency_conversion_date;

                      okl_txd_assets_pub.create_txd_asset_def(
                                                              p_api_version     => 1.0,
                                                              p_init_msg_list   => OKL_API.G_FALSE,
                                                              x_return_status   => x_return_status,
                                                              x_msg_count       => x_msg_count,
                                                              x_msg_data        => x_msg_data,
                                                              p_adpv_rec        => l_adpv_rec,
                                                              x_adpv_rec        => x_adpv_rec
                                                             );

                      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                          x_return_status := OKL_API.G_RET_STS_ERROR;
                          RAISE load_failed;
                      END IF;

                      debug_message('------>TXD Line Created');

                   END IF; -- loan_yn

                   x_cle_id := x_clev_fin_rec.id;
                   l_rule_create_flag := 'Y';

                   l_progress := '105';
                   --
                   -- Create Supplier Invoice details for contract
                   --
                   p_sidv_rec.cle_id                := x_clev_model_rec.id;
                   p_sidv_rec.fa_cle_id             := x_clev_fa_rec.id;
                   p_sidv_rec.invoice_number        := okl_line_rec.vendor_invoice_number;
                   p_sidv_rec.date_invoiced         := okl_line_rec.vendor_invoice_date;
                   IF (okl_line_rec.ship_to_site_id IS NOT NULL
                       OR
                       okl_line_rec.ship_to_site_number IS NOT NULL) THEN
                      get_ship_to_site(
                                  x_return_status       => x_return_status,
                                  x_msg_count           => x_msg_count,
                                  x_msg_data            => x_msg_data,
                                  p_contract_number     => okl_header_rec.contract_number_old,
                                  p_line_number         => okl_line_rec.line_number,
                                  p_auth_org_id         => NVL(okl_header_rec.authoring_org_id,l_header_template.authoring_org_id),
                                  p_ship_to_site_number => okl_line_rec.ship_to_site_number,
                                  p_ship_to_site_id     => okl_line_rec.ship_to_site_id,
                                  x_ship_to_site_id     => x_ship_to_site_id
                                 );
                      IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                         RAISE load_failed;
                         x_return_status := OKL_API.G_RET_STS_ERROR;
                      END IF;

                      p_sidv_rec.shipping_address_id1  := x_ship_to_site_id;
                      p_sidv_rec.shipping_address_id2  := '#';
                      p_sidv_rec.shipping_address_code := 'OKX_PARTSITE';
                   END IF;

                   okl_supp_invoice_dtls_pub.create_sup_inv_dtls(
                                                                 p_api_version => 1.0,
                                                                 x_return_status => x_return_status,
                                                                 x_msg_count     => x_msg_count,
                                                                 x_msg_data      => x_msg_data,
                                                                 p_sidv_rec      => p_sidv_rec,
                                                                 x_sidv_rec      => x_sidv_rec
                                                                );
                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      x_return_status := OKL_API.G_RET_STS_ERROR;
                      RAISE load_failed;
                   END IF;

                END IF; -- multiple Tax Book

             END IF; -- release asset

             -- Save current values for future comparison
  	     --abhsaxen 13-feb-2008 bug#6773219
	     --commented this portion and added the same just at the end of line processing loop
	     --to utilize these variables for processing non rent records in okl_payments_interface
	     --like ESTIMATED PERSONAL PROPERTY TAX
	     --l_prev_asset_number := okl_line_rec.asset_number;
	     --l_prev_corp_book    := okl_line_rec.asset_corporate_book;
	     --l_prev_tax_book     := okl_line_rec.tax_book;
	     --end abhsaxen 13-feb-2008 bug#6773219

          ELSIF (okl_line_rec.line_type = 'SERVICE') THEN

             process_other_line(
                                  x_return_status   => x_return_status,
                                  x_msg_count       => x_msg_count,
                                  x_msg_data        => x_msg_data,
                                  p_contract_number => okl_header_rec.contract_number_old,
                                  p_chr_id          => x_chrv_rec.id,
                                  p_line_number     => okl_line_rec.line_number,
                                  p_line_type       => okl_line_rec.line_type,
                                  p_line_type_prev  => p_line_type_prev,
                                  p_inv_item_id     => x_inventory_item_id,
                                  p_inv_org_id      => x_inventory_org_id,
                                  p_line_amount     => okl_line_rec.amount,
                                  p_link_asset_amount => okl_line_rec.link_asset_amount,
                                  p_init_direct_cost => okl_line_rec.initial_direct_cost,
                                  p_fee_code        => okl_line_rec.fee_code,
                                  p_stream_purpose  => okl_line_rec.stream_purpose_code,
                                  p_fee_type        => NULL,
                                  p_asset_number    => okl_line_rec.asset_number,
                                  p_currency_code   => okl_header_rec.currency_code,
                                  p_usage_item_name => okl_line_rec.usage_item_name,
                                  p_usage_item_id   => okl_line_rec.usage_item_id,
                                  p_header_start_date => NVL(okl_header_rec.start_date,l_header_template.start_date),
                                  p_header_end_date   => x_chrv_rec.end_date,
                                  p_line_start_date   => okl_line_rec.start_date,
                                  p_line_end_date     => okl_line_rec.end_date,
                                  p_inv_item_id_prev => p_inv_item_id_prev,
                                  p_term_quote_id    => NULL,
                                  p_term_quote_number => NULL,
                                  x_inv_item_id_prev => x_inv_item_id_prev,
                                  p_cle_id           => p_cle_id,
                                  x_cle_id           => x_cle_id,
                                  x_sub_cle_id       => x_sub_cle_id,
                                  p_new_line_flag    => okl_line_rec.explicit_new_line_flag,
                                  p_pth_base_payout_basis       => okl_line_rec.pth_base_payout_basis,
                                  p_pth_base_stream_code         => okl_line_rec.pth_base_stream_code,
                                  p_pth_base_stream_purpose_code => okl_line_rec.pth_base_stream_purpose_code,
                                  p_pth_start_date              => okl_line_rec.pth_start_date,
                                  p_pth_evg_payout_basis        => okl_line_rec.pth_evg_payout_basis,
                                  p_pth_payout_basis_formula    => okl_line_rec.pth_payout_basis_formula,
                                  p_pth_evg_stream_code         => okl_line_rec.pth_evg_stream_code,
                                  p_pth_evg_stream_purpose_code => okl_line_rec.pth_evg_stream_purpose_code,
                                  p_fee_purpose_code            => okl_line_rec.fee_purpose_code
                                 );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                RAISE load_failed;
             END IF;

             l_service_line_id := x_cle_id;

             IF (x_cle_id = p_cle_id) THEN -- No New Top Line Created, don't create rule against this line
	        l_rule_create_flag := 'N';
	     ELSE
	        l_rule_create_flag := 'Y';
	     END IF;

             p_line_type_prev   := okl_line_rec.line_type;
             p_inv_item_id_prev := x_inv_item_id_prev;
             p_cle_id           := x_cle_id;
             debug_message('------>SERVICE line created');

          ELSIF (okl_line_rec.line_type = 'FEE') THEN
             process_other_line(
                                  x_return_status   => x_return_status,
                                  x_msg_count       => x_msg_count,
                                  x_msg_data        => x_msg_data,
                                  p_contract_number => okl_header_rec.contract_number_old,
                                  p_chr_id          => x_chrv_rec.id,
                                  p_line_number     => okl_line_rec.line_number,
                                  p_line_type       => okl_line_rec.line_type,
                                  p_line_type_prev  => p_line_type_prev,
                                  p_inv_item_id     => okl_line_rec.inventory_item_id,
                                  p_inv_org_id      => x_chrv_rec.inv_organization_id,
                                                       --okl_line_rec.inventory_organization_id,
                                  p_line_amount     => okl_line_rec.amount,
                                  p_link_asset_amount => okl_line_rec.link_asset_amount,
                                  p_init_direct_cost => okl_line_rec.initial_direct_cost,
                                  p_fee_code        => okl_line_rec.fee_code,
                                  p_stream_purpose  => okl_line_rec.stream_purpose_code,
                                  p_fee_type        => okl_line_rec.fee_type,
                                  p_asset_number    => okl_line_rec.asset_number,
                                  p_currency_code   => okl_header_rec.currency_code,
                                  p_usage_item_name => okl_line_rec.usage_item_name,
                                  p_usage_item_id   => okl_line_rec.usage_item_id,
                                  p_header_start_date => NVL(okl_header_rec.start_date,l_header_template.start_date),
                                  p_header_end_date   => x_chrv_rec.end_date,
                                  p_line_start_date   => okl_line_rec.start_date,
                                  p_line_end_date     => okl_line_rec.end_date,
                                  p_inv_item_id_prev => p_inv_item_id_prev,
                                  p_term_quote_id    => okl_line_rec.termination_quote_id,
                                  p_term_quote_number => okl_line_rec.termination_quote_number,
                                  x_inv_item_id_prev => x_inv_item_id_prev,
                                  p_cle_id           => p_cle_id,
                                  x_cle_id           => x_cle_id,
                                  x_sub_cle_id       => x_sub_cle_id,
                                  p_new_line_flag    => okl_line_rec.explicit_new_line_flag,
                                  p_pth_base_payout_basis       => okl_line_rec.pth_base_payout_basis,
                                  p_pth_base_stream_code         => okl_line_rec.pth_base_stream_code,
                                  p_pth_base_stream_purpose_code => okl_line_rec.pth_base_stream_purpose_code,
                                  p_pth_start_date              => okl_line_rec.pth_start_date,
                                  p_pth_evg_payout_basis        => okl_line_rec.pth_evg_payout_basis,
                                  p_pth_payout_basis_formula    => okl_line_rec.pth_payout_basis_formula,
                                  p_pth_evg_stream_code         => okl_line_rec.pth_evg_stream_code,
                                  p_pth_evg_stream_purpose_code => okl_line_rec.pth_evg_stream_purpose_code,
                                  p_fee_purpose_code            => okl_line_rec.fee_purpose_code
                                 );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                RAISE load_failed;
             END IF;

             l_fee_line_id := x_cle_id;
             IF (x_cle_id = p_cle_id) THEN -- No New Top Line Created, don't create rule against this line
	        l_rule_create_flag := 'N';
	     ELSE
	        l_rule_create_flag := 'Y';
	     END IF;

             debug_message('------>FEE line created');
             p_line_type_prev   := okl_line_rec.line_type;
             p_inv_item_id_prev := x_inv_item_id_prev;
             p_cle_id           := x_cle_id;


          ELSIF (okl_line_rec.line_type = 'USAGE') THEN
             process_other_line(
                                  x_return_status   => x_return_status,
                                  x_msg_count       => x_msg_count,
                                  x_msg_data        => x_msg_data,
                                  p_contract_number => okl_header_rec.contract_number_old,
                                  p_chr_id          => x_chrv_rec.id,
                                  p_line_number     => okl_line_rec.line_number,
                                  p_line_type       => okl_line_rec.line_type,
                                  p_line_type_prev  => p_line_type_prev,
                                  p_inv_item_id     => okl_line_rec.inventory_item_id,
                                  p_inv_org_id      => x_chrv_rec.inv_organization_id,
				                       --okl_line_rec.inventory_organization_id,
                                  p_line_amount     => okl_line_rec.amount,
                                  p_link_asset_amount => okl_line_rec.link_asset_amount,
                                  p_init_direct_cost => okl_line_rec.initial_direct_cost,
                                  p_fee_code        => okl_line_rec.fee_code,
                                  p_stream_purpose  => okl_line_rec.stream_purpose_code,
                                  p_fee_type        => NULL,
                                  p_asset_number    => okl_line_rec.asset_number,
                                  p_currency_code   => okl_header_rec.currency_code,
                                  p_usage_item_name => okl_line_rec.usage_item_name,
                                  p_usage_item_id   => okl_line_rec.usage_item_id,
                                  p_header_start_date => NVL(okl_header_rec.start_date,l_header_template.start_date),
                                  p_header_end_date   => x_chrv_rec.end_date,
                                  p_line_start_date   => okl_line_rec.start_date,
                                  p_line_end_date     => okl_line_rec.end_date,
                                  p_inv_item_id_prev => p_inv_item_id_prev,
                                  p_term_quote_id    => NULL,
                                  p_term_quote_number => NULL,
                                  x_inv_item_id_prev => x_inv_item_id_prev,
                                  p_cle_id           => p_cle_id,
                                  x_cle_id           => x_cle_id,
                                  x_sub_cle_id       => x_sub_cle_id,
                                  p_new_line_flag    => okl_line_rec.explicit_new_line_flag,
                                  p_pth_base_payout_basis       => NULL,
                                  p_pth_base_stream_code         => NULL,
                                  p_pth_base_stream_purpose_code => NULL,
                                  p_pth_start_date              => NULL,
                                  p_pth_evg_payout_basis        => NULL,
                                  p_pth_payout_basis_formula    => NULL,
                                  p_pth_evg_stream_code         => NULL,
                                  p_pth_evg_stream_purpose_code => NULL,
                                  p_fee_purpose_code            => okl_line_rec.fee_purpose_code
                                 );

             IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                x_return_status := OKL_API.G_RET_STS_ERROR;
                RAISE load_failed;
             END IF;

             l_usage_line_id := x_cle_id;

             IF (x_cle_id = p_cle_id) THEN -- No New Top Line Created, don't create rule against this line
	        l_rule_create_flag := 'N';
	     ELSE
	        l_rule_create_flag := 'Y';
	     END IF;

             debug_message('USAGE line created');
             p_line_type_prev   := okl_line_rec.line_type;
             p_inv_item_id_prev := x_inv_item_id_prev;
             p_cle_id           := x_cle_id;

          END IF; -- line type

          l_progress := '110';

          IF (l_rule_create_flag = 'Y') THEN
          debug_message('------>Line rule started');
          create_line_rules(
                            x_return_status                  => x_return_status,
                            x_msg_count                      => x_msg_count,
                            x_msg_data                       => x_msg_data,
                            p_chr_id                         => x_chrv_rec.id,
                            p_cle_id                         => x_cle_id,
                            p_contract_number                => okl_header_rec.contract_number_old,
                            p_line_number                    => okl_line_rec.line_number,
                            p_line_type                      => okl_line_rec.line_type,
                            p_inv_org_id                     => x_inventory_org_id,
                            p_sales_tax_exempt_flag          => okl_line_rec.sales_tax_exempt_flag,
                            p_sales_tax_exempt_cert_number   => okl_line_rec.sales_tax_exempt_cert_number,
                            p_sales_tax_override_flag        => okl_line_rec.sales_tax_override_flag,
                            p_sales_tax_override_rate        => okl_line_rec.sales_tax_override_rate,
                            p_st_upd_lines_from_contract     => okl_line_rec.st_update_lines_from_contract,
                            p_st_transfer_of_title           => okl_line_rec.st_transfer_of_title,
                            p_st_sale_and_lease_back         => okl_line_rec.st_sale_and_lease_back,
                            p_st_purchase_of_lease           => okl_line_rec.st_purchase_of_lease,
                            p_st_equipment_usage             => okl_line_rec.st_equipment_usage,
                            p_st_equipment_age               => okl_line_rec.st_equipment_age,
                            p_st_asset_upfront_tax           => okl_line_rec.st_asset_upfront_tax,
                            p_vat_tax_exempt                 => okl_line_rec.vat_tax_exempt,
                            p_vat_tax_exempt_cert_number     => okl_line_rec.vat_tax_exempt_cert_number,
                            p_vat_tax_override_flag          => okl_line_rec.vat_tax_override_flag,
                            p_vat_tax_override_rate          => okl_line_rec.vat_tax_override_rate,
                            p_lien_type                      => okl_line_rec.lien_type,
                            p_lien_filing_number             => okl_line_rec.lien_filing_number,
                            p_lien_filing_date               => okl_line_rec.lien_filing_date,
                            p_lien_filing_status             => okl_line_rec.lien_filing_status,
                            p_lienholder_id                  => okl_line_rec.lienholder_id,
                            p_lienholder_number              => okl_line_rec.lienholder_number,
                            p_filing_jurisdiction            => okl_line_rec.filing_jurisdiction,
                            p_filing_sub_jurisdiction        => okl_line_rec.filing_sub_jurisdiction,
                            p_lien_expiration_date           => okl_line_rec.lien_expiration_date,
                            p_lien_continuation_number       => okl_line_rec.lien_continuation_number,
                            p_lien_continuation_date         => okl_line_rec.lien_continuation_date,
                            p_title_type                     => okl_line_rec.title_type,
                            p_title_issuer_number            => okl_line_rec.title_issuer_number,
                            p_title_issuer_id                => okl_line_rec.title_issuer_id,
                            p_title_date                     => okl_line_rec.title_date,
                            p_title_number                   => okl_line_rec.title_number,
                            p_registration_number            => okl_line_rec.registration_number,
                            p_asset_registration_loc_name    => okl_line_rec.asset_registration_loc_name,
                            p_title_custodian_name           => okl_line_rec.title_custodian_name,
                            p_payee_site_name                => okl_line_rec.payee_site_name,
                            p_passthrough_percent            => okl_line_rec.passthrough_percent,
                            p_passthrough_basis_code         => okl_line_rec.passthrough_basis_code,
                            p_fee_code                       => okl_line_rec.fee_code,
                            p_stream_purpose                 => okl_line_rec.stream_purpose_code,
                            p_usage_item_name                => okl_line_rec.usage_item_name,
                            p_usage_item_id                  => okl_line_rec.usage_item_id,
                            p_price_list_name                => okl_line_rec.price_list_name,
                            p_price_list_id                  => okl_line_rec.price_list_id,
                            p_minimum_qty_usage              => okl_line_rec.minimum_qty_usage,
                            p_default_qty_usage              => okl_line_rec.default_qty_usage,
                            p_amcv_flag                      => okl_line_rec.amcv_flag,
                            p_level_flag                     => okl_line_rec.level_flag,
                            p_base_reading                   => okl_line_rec.base_reading,
                            p_base_reading_uom_code          => okl_line_rec.base_reading_uom_code,
                            p_usage_type_code                => okl_line_rec.usage_type_code,
                            p_fixed_usage_quantity           => okl_line_rec.fixed_usage_quantity,
                            p_usage_period                   => okl_line_rec.usage_period,
                            p_usage_no_of_period             => okl_line_rec.usage_no_of_period,
                            p_fee_no_of_period               => okl_line_rec.fee_exp_no_of_periods,
                            p_fee_frequency                  => okl_line_rec.fee_exp_frequency,
                            p_fee_amount_per_period          => okl_line_rec.fee_exp_amount_per_period,
                            p_prop_tax_applicable            => okl_line_rec.prop_tax_applicable,
                            p_prop_tax_lease_rep             => okl_line_rec.prop_tax_lease_rep,
                            p_french_tax_code                => okl_line_rec.french_tax_code,
                            p_french_tax_name                => okl_line_rec.french_tax_name,
-- Added by rravikir (Fix for Bug 3947959)
                            p_prop_tax_bill_method           => okl_line_rec.prop_tax_bill_method,
                            p_prop_tax_as_contract_yn        => okl_line_rec.prop_tax_as_contract_yn
-- End
                           );

          IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
             x_return_status := OKL_API.G_RET_STS_ERROR;
             raise load_failed;
          END IF;

          debug_message('------>Line rule complete');
          END IF; -- l_rule_create_flag

          l_progress := '120';

          FOR okl_party_rec IN okl_party_csr (okl_header_rec.contract_number_old,
                                              okl_line_rec.line_number)
          LOOP
             BEGIN --3
                l_progress := '130';

                debug_message('------>Party role: '||okl_line_rec.line_type||','||okl_line_rec.line_number);

                IF (l_rule_create_flag = 'Y') THEN -- create role only for top line
                process_party_role(
                                 x_return_status       => x_return_status,
                                 x_msg_count           => x_msg_count,
                                 x_msg_data            => x_msg_data,
                                 p_contract_number     => okl_header_rec.contract_number_old,
                                 p_chr_id              => x_chrv_rec.id,
                                 p_auth_org_id         => okl_header_rec.authoring_org_id,
                                 p_line_number         => okl_line_rec.line_number,
                                 p_line_type           => okl_line_rec.line_type,
                                 p_fin_cle_id          => x_clev_fin_rec.id,
                                 p_model_cle_id        => x_clev_model_rec.id,
                                 p_service_line_id     => l_service_line_id,
                                 p_fee_line_id         => l_fee_line_id,
                                 p_usage_line_id       => l_usage_line_id,
                                 p_asset_vendor_name   => okl_party_rec.asset_vendor_name,
                                 p_asset_vendor_id     => okl_party_rec.asset_vendor_id,
                                 p_service_vendor_name => okl_party_rec.service_vendor_name,
                                 p_service_vendor_id   => okl_party_rec.service_vendor_id,
                                 p_fees_vendor_name    => okl_party_rec.fees_vendor_name,
                                 p_fees_vendor_id      => okl_party_rec.fees_vendor_id,
                                 p_guarantor_number    => okl_party_rec.guarantor_number,
                                 p_guarantor_id        => okl_party_rec.guarantor_id,
                                 p_dealer_name         => okl_party_rec.dealer_name,
                                 p_dealer_id           => okl_party_rec.dealer_id,
                                 p_guarantor_type      => okl_party_rec.guarantor_type,
                                 p_guarantee_type      => okl_party_rec.guarantee_type,
                                 p_guaranteed_amount   => okl_party_rec.guaranteed_amount,
                                 p_guarantee_date      => okl_party_rec.guarantee_date,
                                 p_guarantee_comment   => okl_party_rec.guarantee_comment,
                                 p_guarantor_site_number => okl_party_rec.guarantor_site_number,
                                 p_guarantor_site_id     => okl_party_rec.guarantor_site_id,
                                 p_payment_term          => okl_line_rec.payment_term,
                                 p_payment_term_id       => okl_line_rec.payment_term_id,
                                 p_vendor_paysite_id     => okl_line_rec.vendor_paysite_id,
                                 p_vendor_paysite_name   => okl_line_rec.vendor_paysite_name,
                                 p_vendor_payment_method => okl_line_rec.vendor_payment_method,
                                 p_passthrough_percent      => okl_line_rec.passthrough_percent,
                                 p_passthrough_basis_code   => okl_line_rec.passthrough_basis_code,
                                 p_billable_vendor_id       => NULL,
                                 p_billable_vendor_name     => NULL,
                                 p_vend_as_customer_number  => NULL,
                                 p_vend_as_customer_id      => NULL,
                                 p_vend_as_cust_acc_id      => NULL,
                                 p_vend_as_cust_acc_number  => NULL,
                                 p_vend_bill_to_addr_id     => NULL,
                                 p_vend_bill_to_addr        => NULL,
                                 p_vend_payment_method_id   => NULL,
                                 p_vend_payment_method      => NULL,
                                 p_vend_bank_acc_id         => NULL,
                                 p_vend_bank_acc_number     => NULL,
                                 p_vend_invoice_format_id   => NULL,
                                 p_vend_invoice_format_code => NULL,
                                 p_vend_review_invoice_flag => NULL,
                                 p_vend_reason_for_inv_review => NULL,
                                 p_vend_inv_review_until_date => NULL,
                                 p_pth_base_vendor_site_code  => okl_party_rec.pth_base_vendor_site_code,
                                 p_pth_base_vendor_site_id    => okl_party_rec.pth_base_vendor_site_id,
                                 p_pth_base_paygroup_code     => okl_party_rec.pth_base_paygroup_code,
                                 p_pth_base_pmnt_term_code    => okl_party_rec.pth_base_pmnt_term_code,
                                 p_pth_base_pmnt_term_id      => okl_party_rec.pth_base_pmnt_term_id,
                                 p_pth_base_pmnt_basis        => okl_party_rec.pth_base_pmnt_basis,
                                 p_pth_base_pmnt_start_date   => okl_party_rec.pth_base_pmnt_start_date,
                                 p_pth_base_pmnt_method_code  => okl_party_rec.pth_base_pmnt_method_code,
                                 p_pth_base_pmnt_freq         => okl_party_rec.pth_base_pmnt_freq,
                                 p_pth_base_pmnt_remit_days   => okl_party_rec.pth_base_pmnt_remit_days,
                                 p_pth_base_disb_basis        => okl_party_rec.pth_base_disb_basis,
                                 p_pth_base_disb_fixed_amount => okl_party_rec.pth_base_disb_fixed_amount,
                                 p_pth_base_disb_pct          => okl_party_rec.pth_base_disb_pct,
                                 p_pth_base_proc_fee_basis    => okl_party_rec.pth_base_proc_fee_basis,
                                 p_pth_base_proc_fee_fixed_amt => okl_party_rec.pth_base_proc_fee_fixed_amt,
                                 p_pth_base_proc_pct           => okl_party_rec.pth_base_proc_pct,
                                 p_pth_evg_vendor_site_code    => okl_party_rec.pth_evg_vendor_site_code,
                                 p_pth_evg_vendor_site_id      => okl_party_rec.pth_evg_vendor_site_id,
                                 p_pth_evg_paygroup_code       => okl_party_rec.pth_evg_paygroup_code,
                                 p_pth_evg_pmnt_term_code      => okl_party_rec.pth_evg_pmnt_term_code,
                                 p_pth_evg_pmnt_term_id        => okl_party_rec.pth_evg_pmnt_term_id,
                                 p_pth_evg_pmnt_basis          => okl_party_rec.pth_evg_pmnt_basis,
                                 p_pth_evg_pmnt_start_date     => okl_party_rec.pth_evg_pmnt_start_date,
                                 p_pth_evg_pmnt_method_code    => okl_party_rec.pth_evg_pmnt_method_code,
                                 p_pth_evg_pmnt_freq           => okl_party_rec.pth_evg_pmnt_freq,
                                 p_pth_evg_pmnt_remit_days     => okl_party_rec.pth_evg_pmnt_remit_days,
                                 p_pth_evg_disb_basis          => okl_party_rec.pth_evg_disb_basis,
                                 p_pth_evg_disb_fixed_amount   => okl_party_rec.pth_evg_disb_fixed_amount,
                                 p_pth_evg_disb_pct            => okl_party_rec.pth_evg_disb_pct,
                                 p_pth_evg_proc_fee_basis      => okl_party_rec.pth_evg_proc_fee_basis,
                                 p_pth_evg_proc_fee_fixed_amt  => okl_party_rec.pth_evg_proc_fee_fixed_amt,
                                 p_pth_evg_proc_pct            => okl_party_rec.pth_evg_proc_pct,
                                 p_attribute_category          => okl_party_rec.attribute_category,
                                 p_attribute1                  => okl_party_rec.attribute1,
                                 p_attribute2                  => okl_party_rec.attribute2,
                                 p_attribute3                  => okl_party_rec.attribute3,
                                 p_attribute4                  => okl_party_rec.attribute4,
                                 p_attribute5                  => okl_party_rec.attribute5,
                                 p_attribute6                  => okl_party_rec.attribute6,
                                 p_attribute7                  => okl_party_rec.attribute7,
                                 p_attribute8                  => okl_party_rec.attribute8,
                                 p_attribute9                  => okl_party_rec.attribute9,
                                 p_attribute10                 => okl_party_rec.attribute10,
                                 p_attribute11                 => okl_party_rec.attribute11,
                                 p_attribute12                 => okl_party_rec.attribute12,
                                 p_attribute13                 => okl_party_rec.attribute13,
                                 p_attribute14                 => okl_party_rec.attribute14,
                                 p_attribute15                 => okl_party_rec.attribute15
                                );

                debug_message('------>Party Role Status: '||x_return_status);

                IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                   RAISE load_failed;
                END IF;
                END IF; --rule create
                l_progress := '140';

             END; --3 party begin

          END LOOP; --party role

          FOR okl_term_rec IN okl_term_csr (okl_header_rec.contract_number_old,
                                            okl_line_rec.line_number)
          LOOP
             BEGIN --4
                --Bug# 	6006332 : Procces_term should be called only for top line and only once
                IF (l_rule_create_flag = 'Y') THEN
                l_progress := '150';

                IF (okl_header_rec.import_request_stage <> 'NEW'
                    AND
                    okl_term_rec.bill_to_address_id IS NULL
                    AND
                    okl_term_rec.bill_to_address IS NULL) THEN

                    okl_api.set_message(
                                        G_APP_NAME,
                                        G_MISSING_VALUE,
                                        'CONTRACT_NUM',
                                        okl_term_rec.contract_number_old||'/'||okl_term_rec.line_number,
                                       'COL_NAME',
                                       'BILL_TO_ADDRESS'
                                       );

                    x_return_status := OKL_API.G_RET_STS_ERROR;
                    RAISE load_failed;
                END IF;

                debug_message('------>Process term');
                process_term(
                             x_return_status             => x_return_status,
                             x_msg_count                 => x_msg_count,
                             x_msg_data                  => x_msg_data,
                             p_contract_number           => okl_header_rec.contract_number_old,
                             p_chr_id                    => x_chrv_rec.id,
                             p_auth_org_id               => okl_header_rec.authoring_org_id,
                             p_line_number               => okl_line_rec.line_number,
                             p_line_type                 => okl_line_rec.line_type,
                             p_cle_id                    => x_cle_id,
                             p_bill_to_address_id        => okl_term_rec.bill_to_address_id,
                             p_bill_to_address           => okl_term_rec.bill_to_address,
                             p_bank_account_id           => okl_term_rec.bank_account_id,
                             p_bank_account_number       => okl_term_rec.bank_account_number,
                             p_reason_for_invoice_review => okl_term_rec.reason_for_invoice_review,
                             p_invoice_review_until_date => okl_term_rec.invoice_review_until_date,
                             p_invoice_format_id         => okl_term_rec.invoice_format_id,
                             p_invoice_format_code       => okl_term_rec.invoice_format_code,
                             p_review_invoice_flag       => okl_term_rec.review_invoice_flag,
                             p_payment_method_id         => okl_term_rec.payment_method_id,
                             p_payment_method            => okl_term_rec.payment_method,
                             p_prescribed_asset_flag     => okl_term_rec.prescribed_asset_flag,
                             p_cash_appl_rule_name       => okl_term_rec.cash_appl_rule_name
                            );

                IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                   RAISE load_failed;
                END IF;

                l_progress := '160';
             END IF; -- Bug# 6006332
             END; --4 terms

          END LOOP; --terms

          -- Process Payments Interface Record, if any
          l_contract_number_old_prev := 'INITIAL';
          l_line_number_prev         := -999999999;
          l_payment_type_code_prev   := 'INITIAL';
          l_pmnt_sch_num_prev        := -999999999;
          l_start_date_prev          := NULL;
          l_number_of_periods_prev   := -999999999;
          l_rg_id                    := NULL;
     --abhsaxen 13-Feb-2008 bug#6773219 added this if condition to prevent
      --processing Non Rent records like ESTIMATED PERSONAL PROPERTY TAX twice for the same
      --asset with the same corporate book but with a different tax book. Otherwise the
      --ESTIMATED PERSONAL PROPERTY TAX payment lines is shown multiple times after
      --contract is imported.

          IF  (okl_line_rec.asset_number = l_prev_asset_number
                  AND
                 okl_line_rec.asset_corporate_book = l_prev_corp_book )
          THEN
             NULL; --dont process the records for the same asset twice
          ELSE

          FOR okl_payment_rec IN okl_payment_csr(okl_header_rec.contract_number_old,
                                                 okl_line_rec.line_number)
          LOOP
             BEGIN --5

               check_payment_record(
                                    x_return_status              => x_return_status,
                                    x_msg_count                  => x_msg_count,
                                    x_msg_data                   => x_msg_data,
                                    p_contract_number_old        => okl_payment_rec.contract_number_old,
                                    p_line_number                => okl_payment_rec.line_number,
                                    p_asset_number               => okl_payment_rec.asset_number,
                                    p_payment_type_code          => okl_payment_rec.payment_type_code,
                                    p_stream_purpose             => okl_payment_rec.stream_purpose_code,
                                    p_payment_schedule_number    => okl_payment_rec.payment_schedule_number,
                                    p_payment_frequency_code     => okl_payment_rec.payment_frequency_code,
                                    p_arrears_flag               => okl_payment_rec.arrears_flag,
                                    p_advance_payments           => okl_payment_rec.advance_payments,
                                    p_payment_amount             => okl_payment_rec.payment_amount,
                                    p_start_date                 => okl_payment_rec.start_date,
                                    p_number_of_periods          => okl_payment_rec.number_of_periods,
                                    p_rate                       => okl_payment_rec.rate,
                                    p_comments                   => okl_payment_rec.comments,
                                    p_stub_days                  => okl_payment_rec.stub_days,
                                    p_stub_amount                => okl_payment_rec.stub_amount
                                   );

               IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                   RAISE load_failed;
               END IF;

                IF (l_contract_number_old_prev <> okl_payment_rec.contract_number_old  -- prev checking
                    OR
                    l_line_number_prev         <> okl_payment_rec.line_number
                    OR
                    l_payment_type_code_prev   <> okl_payment_rec.payment_type_code) THEN

                   IF (l_line_number_prev <> okl_payment_rec.line_number) THEN -- for new line create rule group
                       l_rg_id := NULL;
                   END IF;

                   --do all
                   -- Bug# 3110155
                   -- Check for SERVICE and FEE line whether to attach
                   -- payments at TOP or SUB lines
                   --
                   check_payment_level(
                                       x_return_status   => x_return_status,
                                       x_msg_count       => x_msg_count,
                                       x_msg_data        => x_msg_data,
                                       p_contract_number => okl_header_rec.contract_number_old,
                                       p_line_number     => okl_line_rec.line_number,
                                       x_payment_level   => l_payment_level
                                      );

                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      RAISE load_failed;
                   END IF;

                   IF (l_payment_level = 'SUB') THEN -- attach payment at sub-line
                      l_pmnt_line_id := x_sub_cle_id;
                   ELSE                              -- attach payment at top-line
                      l_pmnt_line_id := x_cle_id;
                   END IF;

                   create_payment_rule_group(
                                              x_return_status     => x_return_status,
                                              x_msg_count         => x_msg_count,
                                              x_msg_data          => x_msg_data,
                                              p_contract_number   => okl_header_rec.contract_number_old,
                                              p_line_number       => okl_line_rec.line_number,
                                              p_payment_type_code => okl_payment_rec.payment_type_code,
                                              p_stream_purpose    => okl_payment_rec.stream_purpose_code,
                                              p_chr_id            => x_chrv_rec.id,
                                              p_cle_id            => l_pmnt_line_id,
                                              p_rg_id             => l_rg_id,
                                              x_rgp_id            => x_rgp_id,
                                              x_slh_rulv_rec      => x_slh_rulv_rec
                                             );

                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      RAISE load_failed;
                   END IF;

                ELSE
                    l_progress := '170';

                    -- Some more validation on Payment Lines
                    IF (okl_payment_rec.payment_schedule_number <= l_pmnt_sch_num_prev) THEN
                     debug_message('First check error...');
                       okl_api.set_message(
                                           G_APP_NAME,
                                           G_PAYMENT_SCHD_ERROR,
                                           'COL_VALUE',
                                            okl_payment_rec.payment_schedule_number,
                                           'CONTRACT_NUM',
                                           okl_header_rec.contract_number_old||'/'||okl_payment_rec.line_number
                                          );
                       x_return_status := OKL_API.G_RET_STS_ERROR;
                       RAISE load_failed;
                    END IF;

                    check_payment_frequency_code(
                                                 x_return_status     => x_return_status,
                                                 x_msg_count         => x_msg_count,
                                                 x_msg_data          => x_msg_data,
                                                 p_payment_freq_code => okl_payment_rec.payment_frequency_code,
                                                 x_id1               => x_pmnt_freq_id,
                                                 x_uom_code          => x_uom_code
                                                );

                    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                       okl_api.set_message(
                                           G_APP_NAME,
                                           G_INVALID_VALUE,
                                           'CONTRACT_NUM',
                                           okl_payment_rec.contract_number_old||'/'||okl_payment_rec.line_number,
                                           'COL_NAME',
                                           'PAYMENT_FREQUENCY_CODE',
                                           'COL_VALUE',
                                           okl_payment_rec.payment_frequency_code
                                          );
                       RAISE load_failed;
                    END IF;

                    IF (x_uom_code = 'M') THEN
                       l_mult_factor := 1;
                    ELSIF (x_uom_code = 'Q') THEN
                       l_mult_factor := 3;
                    ELSIF (x_uom_code = 'S') THEN
                       l_mult_factor := 6;
                    ELSIF (x_uom_code = 'A') THEN
                       l_mult_factor := 12;
                    ELSE
                       okl_api.set_message(
                                           G_APP_NAME,
                                           G_UOM_SETUP_ERROR,
                                           'COL_VALUE',
                                           okl_payment_rec.payment_frequency_code
                                          );
                       RAISE load_failed;
                    END IF;


                    l_current_start_date := add_months(l_start_date_prev, (l_number_of_periods_prev * l_mult_factor));

                    IF (TRUNC(l_current_start_date) <> TRUNC(okl_payment_rec.start_date)) THEN
                       okl_api.set_message(
                                           G_APP_NAME,
                                           G_PAYMENT_START_DATE_ERROR,
                                           'CONTRACT_NUM',
                                           okl_payment_rec.contract_number_old||'/'||okl_payment_rec.line_number
                                          );
                       RAISE load_failed;
                    END IF;

                END IF; --prev checking

                IF (l_rg_id IS NULL) THEN
                   l_rg_id := x_rgp_id;
                END IF;

                -- Create other rules
                -- Keep a copy to compare with latest record
                create_payment_other_rules(
                                           x_return_status      => x_return_status,
                                           x_msg_count          => x_msg_count,
                                           x_msg_data           => x_msg_data,
                                           p_contract_number    => okl_header_rec.contract_number_old,
                                           p_line_number        => okl_line_rec.line_number,
                                           p_payment_sch_number => okl_payment_rec.payment_schedule_number,
                                           p_payment_freq_code  => okl_payment_rec.payment_frequency_code,
                                           p_arrears_flag       => okl_payment_rec.arrears_flag,
                                           p_advance_payments   => okl_payment_rec.advance_payments,
                                           p_payment_amount     => okl_payment_rec.payment_amount,
                                           p_start_date         => okl_payment_rec.start_date,
                                           p_number_of_periods  => okl_payment_rec.number_of_periods,
                                           p_rate               => okl_payment_rec.rate,
                                           p_comments           => okl_payment_rec.comments,
                                           p_stub_days          => okl_payment_rec.stub_days,
                                           p_stub_amount        => okl_payment_rec.stub_amount,
                                           p_slh_rulv_rec       => x_slh_rulv_rec,
                                           p_chr_id             => x_chrv_rec.id,
                                           p_cle_id             => x_cle_id,
                                           p_rgp_id             => x_rgp_id
                                          );

                IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                   RAISE load_failed;
                END IF;

                l_progress := '180';

                l_contract_number_old_prev := okl_payment_rec.contract_number_old;
                l_line_number_prev         := okl_payment_rec.line_number;
                l_payment_type_code_prev   := okl_payment_rec.payment_type_code;
                l_pmnt_sch_num_prev        := okl_payment_rec.payment_schedule_number;
                l_start_date_prev          := okl_payment_rec.start_date;
                l_number_of_periods_prev   := okl_payment_rec.number_of_periods;

             END; --5 Payment begin

          END LOOP; -- Payment Loop
	END IF; --end if of abhsaxen 13-Feb-2008 bug#6773219
        END; --2 Line Begin
	--abhsaxen bug#6773219 13-Feb-2008
        -- reinitializing the following variables for comparison with the next line that follows
           l_prev_asset_number := okl_line_rec.asset_number;
           l_prev_corp_book    := okl_line_rec.asset_corporate_book;
           l_prev_tax_book     := okl_line_rec.tax_book;
        --abhsaxen end bug#6773219 13-Feb-2008

      END LOOP; -- Line Loop

      l_progress := '190';

      -- Process party role once again at Header level
      FOR okl_party_rec IN okl_party_csr (okl_header_rec.contract_number_old,
                                          NULL)
      LOOP
         BEGIN --6
            l_progress := '200';

            process_party_role(
                                 x_return_status       => x_return_status,
                                 x_msg_count           => x_msg_count,
                                 x_msg_data            => x_msg_data,
                                 p_contract_number     => okl_header_rec.contract_number_old,
                                 p_chr_id              => x_chrv_rec.id,
                                 p_auth_org_id         => okl_header_rec.authoring_org_id,
                                 p_line_number         => NULL,
                                 p_line_type           => NULL,
                                 p_fin_cle_id          => NULL,
                                 p_model_cle_id        => NULL,
                                 p_service_line_id     => NULL,
                                 p_fee_line_id         => NULL,
                                 p_usage_line_id       => NULL,
                                 p_asset_vendor_name   => okl_party_rec.asset_vendor_name,
                                 p_asset_vendor_id     => okl_party_rec.asset_vendor_id,
                                 p_service_vendor_name => okl_party_rec.service_vendor_name,
                                 p_service_vendor_id   => okl_party_rec.service_vendor_id,
                                 p_fees_vendor_name    => okl_party_rec.fees_vendor_name,
                                 p_fees_vendor_id      => okl_party_rec.fees_vendor_id,
                                 p_guarantor_number    => okl_party_rec.guarantor_number,
                                 p_guarantor_id        => okl_party_rec.guarantor_id,
                                 p_dealer_name         => okl_party_rec.dealer_name,
                                 p_dealer_id           => okl_party_rec.dealer_id,
                                 p_guarantor_type      => okl_party_rec.guarantor_type,
                                 p_guarantee_type      => okl_party_rec.guarantee_type,
                                 p_guaranteed_amount   => okl_party_rec.guaranteed_amount,
                                 p_guarantee_date      => okl_party_rec.guarantee_date,
                                 p_guarantee_comment   => okl_party_rec.guarantee_comment,
                                 p_guarantor_site_number => okl_party_rec.guarantor_site_number,
                                 p_guarantor_site_id     => okl_party_rec.guarantor_site_id,
                                 p_payment_term          => NULL,
                                 p_payment_term_id       => NULL,
                                 p_vendor_paysite_id     => NULL,
                                 p_vendor_paysite_name   => NULL,
                                 p_vendor_payment_method => NULL,
                                 p_passthrough_percent      => NULL,
                                 p_passthrough_basis_code   => NULL,
                                 p_billable_vendor_id       => okl_party_rec.billable_vendor_id,
                                 p_billable_vendor_name     => okl_party_rec.billable_vendor_name,
                                 p_vend_as_customer_number  => okl_party_rec.vend_as_customer_number,
                                 p_vend_as_customer_id      => okl_party_rec.vend_as_customer_id,
                                 p_vend_as_cust_acc_id      => okl_party_rec.vend_as_customer_acc_id,
                                 p_vend_as_cust_acc_number  => okl_party_rec.vend_as_customer_acc_number,
                                 p_vend_bill_to_addr_id     => okl_party_rec.vend_bill_to_addr_id,
                                 p_vend_bill_to_addr        => okl_party_rec.vend_bill_to_addr,
                                 p_vend_payment_method_id   => okl_party_rec.vend_payment_method_id,
                                 p_vend_payment_method      => okl_party_rec.vend_payment_method,
                                 p_vend_bank_acc_id         => okl_party_rec.vend_bank_acc_id,
                                 p_vend_bank_acc_number     => okl_party_rec.vend_bank_acc_number,
                                 p_vend_invoice_format_id   => okl_party_rec.vend_invoice_format_id,
                                 p_vend_invoice_format_code => okl_party_rec.vend_invoice_format_code,
                                 p_vend_review_invoice_flag => okl_party_rec.vend_review_invoice_flag,
                                 p_vend_reason_for_inv_review => okl_party_rec.vend_reason_for_inv_review,
                                 p_vend_inv_review_until_date => okl_party_rec.vend_inv_review_until_date,
                                 p_pth_base_vendor_site_code  => okl_party_rec.pth_base_vendor_site_code,
                                 p_pth_base_vendor_site_id    => okl_party_rec.pth_base_vendor_site_id,
                                 p_pth_base_paygroup_code     => okl_party_rec.pth_base_paygroup_code,
                                 p_pth_base_pmnt_term_code    => okl_party_rec.pth_base_pmnt_term_code,
                                 p_pth_base_pmnt_term_id      => okl_party_rec.pth_base_pmnt_term_id,
                                 p_pth_base_pmnt_basis        => okl_party_rec.pth_base_pmnt_basis,
                                 p_pth_base_pmnt_start_date   => okl_party_rec.pth_base_pmnt_start_date,
                                 p_pth_base_pmnt_method_code  => okl_party_rec.pth_base_pmnt_method_code,
                                 p_pth_base_pmnt_freq         => okl_party_rec.pth_base_pmnt_freq,
                                 p_pth_base_pmnt_remit_days   => okl_party_rec.pth_base_pmnt_remit_days,
                                 p_pth_base_disb_basis        => okl_party_rec.pth_base_disb_basis,
                                 p_pth_base_disb_fixed_amount => okl_party_rec.pth_base_disb_fixed_amount,
                                 p_pth_base_disb_pct          => okl_party_rec.pth_base_disb_pct,
                                 p_pth_base_proc_fee_basis    => okl_party_rec.pth_base_proc_fee_basis,
                                 p_pth_base_proc_fee_fixed_amt => okl_party_rec.pth_base_proc_fee_fixed_amt,
                                 p_pth_base_proc_pct           => okl_party_rec.pth_base_proc_pct,
                                 p_pth_evg_vendor_site_code    => okl_party_rec.pth_evg_vendor_site_code,
                                 p_pth_evg_vendor_site_id      => okl_party_rec.pth_evg_vendor_site_id,
                                 p_pth_evg_paygroup_code       => okl_party_rec.pth_evg_paygroup_code,
                                 p_pth_evg_pmnt_term_code      => okl_party_rec.pth_evg_pmnt_term_code,
                                 p_pth_evg_pmnt_term_id        => okl_party_rec.pth_evg_pmnt_term_id,
                                 p_pth_evg_pmnt_basis          => okl_party_rec.pth_evg_pmnt_basis,
                                 p_pth_evg_pmnt_start_date     => okl_party_rec.pth_evg_pmnt_start_date,
                                 p_pth_evg_pmnt_method_code    => okl_party_rec.pth_evg_pmnt_method_code,
                                 p_pth_evg_pmnt_freq           => okl_party_rec.pth_evg_pmnt_freq,
                                 p_pth_evg_pmnt_remit_days     => okl_party_rec.pth_evg_pmnt_remit_days,
                                 p_pth_evg_disb_basis          => okl_party_rec.pth_evg_disb_basis,
                                 p_pth_evg_disb_fixed_amount   => okl_party_rec.pth_evg_disb_fixed_amount,
                                 p_pth_evg_disb_pct            => okl_party_rec.pth_evg_disb_pct,
                                 p_pth_evg_proc_fee_basis      => okl_party_rec.pth_evg_proc_fee_basis,
                                 p_pth_evg_proc_fee_fixed_amt  => okl_party_rec.pth_evg_proc_fee_fixed_amt,
                                 p_pth_evg_proc_pct            => okl_party_rec.pth_evg_proc_pct,
                                 p_attribute_category          => okl_party_rec.attribute_category,
                                 p_attribute1                  => okl_party_rec.attribute1,
                                 p_attribute2                  => okl_party_rec.attribute2,
                                 p_attribute3                  => okl_party_rec.attribute3,
                                 p_attribute4                  => okl_party_rec.attribute4,
                                 p_attribute5                  => okl_party_rec.attribute5,
                                 p_attribute6                  => okl_party_rec.attribute6,
                                 p_attribute7                  => okl_party_rec.attribute7,
                                 p_attribute8                  => okl_party_rec.attribute8,
                                 p_attribute9                  => okl_party_rec.attribute9,
                                 p_attribute10                 => okl_party_rec.attribute10,
                                 p_attribute11                 => okl_party_rec.attribute11,
                                 p_attribute12                 => okl_party_rec.attribute12,
                                 p_attribute13                 => okl_party_rec.attribute13,
                                 p_attribute14                 => okl_party_rec.attribute14,
                                 p_attribute15                 => okl_party_rec.attribute15
                                );

            IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                RAISE load_failed;
            END IF;

            l_progress := '210';

         END; --6 party header begin

      END LOOP; --party role header

      -- Process Payments Interface Record once again at header level
          l_contract_number_old_prev := 'INITIAL';
          --l_line_number_prev         := -999999999;
          l_payment_type_code_prev   := 'INITIAL';
          l_pmnt_sch_num_prev        := -999999999;
          l_start_date_prev          := NULL;
          l_number_of_periods_prev   := -999999999;
          l_rg_id                    := NULL;

          FOR okl_payment_rec IN okl_payment_csr(okl_header_rec.contract_number_old,
                                                 NULL)
          LOOP
             BEGIN --5

               check_payment_record(
                                    x_return_status              => x_return_status,
                                    x_msg_count                  => x_msg_count,
                                    x_msg_data                   => x_msg_data,
                                    p_contract_number_old        => okl_payment_rec.contract_number_old,
                                    p_line_number                => NULL,
                                    p_asset_number               => okl_payment_rec.asset_number,
                                    p_payment_type_code          => okl_payment_rec.payment_type_code,
                                    p_stream_purpose             => okl_payment_rec.stream_purpose_code,
                                    p_payment_schedule_number    => okl_payment_rec.payment_schedule_number,
                                    p_payment_frequency_code     => okl_payment_rec.payment_frequency_code,
                                    p_arrears_flag               => okl_payment_rec.arrears_flag,
                                    p_advance_payments           => okl_payment_rec.advance_payments,
                                    p_payment_amount             => okl_payment_rec.payment_amount,
                                    p_start_date                 => okl_payment_rec.start_date,
                                    p_number_of_periods          => okl_payment_rec.number_of_periods,
                                    p_rate                       => okl_payment_rec.rate,
                                    p_comments                   => okl_payment_rec.comments,
                                    p_stub_days                  => okl_payment_rec.stub_days,
                                    p_stub_amount                => okl_payment_rec.stub_amount
                                   );

               IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                   RAISE load_failed;
               END IF;

               IF (l_contract_number_old_prev <> okl_payment_rec.contract_number_old  -- prev checking
                    OR
                    l_payment_type_code_prev   <> okl_payment_rec.payment_type_code) THEN

                   --do all
                   create_payment_rule_group(
                                              x_return_status     => x_return_status,
                                              x_msg_count         => x_msg_count,
                                              x_msg_data          => x_msg_data,
                                              p_contract_number   => okl_header_rec.contract_number_old,
                                              p_line_number       => NULL,
                                              p_payment_type_code => okl_payment_rec.payment_type_code,
                                              p_stream_purpose    => okl_payment_rec.stream_purpose_code,
                                              p_chr_id            => x_chrv_rec.id,
                                              p_cle_id            => NULL,
                                              p_rg_id             => l_rg_id,
                                              x_rgp_id            => x_rgp_id,
                                              x_slh_rulv_rec      => x_slh_rulv_rec
                                             );

                   IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                      RAISE load_failed;
                   END IF;

                   l_rg_id := x_rgp_id;

                ELSE
                    l_progress := '170';

                    -- Some more validation on Payment Lines
                    IF (okl_payment_rec.payment_schedule_number <= l_pmnt_sch_num_prev) THEN
                     debug_message('Second check error...');
                       okl_api.set_message(
                                           G_APP_NAME,
                                           G_PAYMENT_SCHD_ERROR,
                                           'COL_VALUE',
                                            okl_payment_rec.payment_schedule_number,
                                           'CONTRACT_NUM',
                                           okl_header_rec.contract_number_old||'/'||okl_payment_rec.line_number
                                          );
                       x_return_status := OKL_API.G_RET_STS_ERROR;
                       RAISE load_failed;
                    END IF;

                    check_payment_frequency_code(
                                                 x_return_status     => x_return_status,
                                                 x_msg_count         => x_msg_count,
                                                 x_msg_data          => x_msg_data,
                                                 p_payment_freq_code => okl_payment_rec.payment_frequency_code,
                                                 x_id1               => x_pmnt_freq_id,
                                                 x_uom_code          => x_uom_code
                                                );

                    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                       okl_api.set_message(
                                           G_APP_NAME,
                                           G_INVALID_VALUE,
                                           'CONTRACT_NUM',
                                           okl_payment_rec.contract_number_old||'/'||okl_payment_rec.line_number,
                                           'COL_NAME',
                                           'PAYMENT_FREQUENCY_CODE',
                                           'COL_VALUE',
                                           okl_payment_rec.payment_frequency_code
                                          );
                       RAISE load_failed;
                    END IF;

                    IF (x_uom_code = 'M') THEN
                       l_mult_factor := 1;
                    ELSIF (x_uom_code = 'Q') THEN
                       l_mult_factor := 3;
                    ELSIF (x_uom_code = 'S') THEN
                       l_mult_factor := 6;
                    ELSIF (x_uom_code = 'A') THEN
                       l_mult_factor := 12;
                    ELSE
                       okl_api.set_message(
                                           G_APP_NAME,
                                           G_UOM_SETUP_ERROR,
                                           'COL_VALUE',
                                           okl_payment_rec.payment_frequency_code
                                          );
                       RAISE load_failed;
                    END IF;


                    l_current_start_date := add_months(l_start_date_prev, (l_number_of_periods_prev * l_mult_factor));

                    IF (TRUNC(l_current_start_date) <> TRUNC(okl_payment_rec.start_date)) THEN
                       okl_api.set_message(
                                           G_APP_NAME,
                                           G_PAYMENT_START_DATE_ERROR,
                                           'CONTRACT_NUM',
                                           okl_payment_rec.contract_number_old||'/'||okl_payment_rec.line_number
                                          );
                       RAISE load_failed;
                    END IF;

                END IF; --prev checking

                --IF (l_rg_id IS NULL) THEN
                --   l_rg_id := x_rgp_id;
                --END IF;

                -- Create other rules
                -- Keep a copy to compare with latest record
                create_payment_other_rules(
                                           x_return_status      => x_return_status,
                                           x_msg_count          => x_msg_count,
                                           x_msg_data           => x_msg_data,
                                           p_contract_number    => okl_header_rec.contract_number_old,
                                           p_line_number        => NULL,
                                           p_payment_sch_number => okl_payment_rec.payment_schedule_number,
                                           p_payment_freq_code  => okl_payment_rec.payment_frequency_code,
                                           p_arrears_flag       => okl_payment_rec.arrears_flag,
                                           p_advance_payments   => okl_payment_rec.advance_payments,
                                           p_payment_amount     => okl_payment_rec.payment_amount,
                                           p_start_date         => okl_payment_rec.start_date,
                                           p_number_of_periods  => okl_payment_rec.number_of_periods,
                                           p_rate               => okl_payment_rec.rate,
                                           p_comments           => okl_payment_rec.comments,
                                           p_stub_days          => okl_payment_rec.stub_days,
                                           p_stub_amount        => okl_payment_rec.stub_amount,
                                           p_slh_rulv_rec       => x_slh_rulv_rec,
                                           p_chr_id             => x_chrv_rec.id,
                                           p_cle_id             => NULL,
                                           p_rgp_id             => l_rg_id
                                          );

                IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
                   RAISE load_failed;
                END IF;

                l_progress := '180';

                l_contract_number_old_prev := okl_payment_rec.contract_number_old;
                --l_line_number_prev         := okl_payment_rec.line_number;
                l_payment_type_code_prev   := okl_payment_rec.payment_type_code;
                l_pmnt_sch_num_prev        := okl_payment_rec.payment_schedule_number;
                l_start_date_prev          := okl_payment_rec.start_date;
                l_number_of_periods_prev   := okl_payment_rec.number_of_periods;

             END; --5 Payment begin

          END LOOP; -- Payment Loop

      IF (l_no_of_lines = 0
          AND
          okl_header_rec.import_request_stage <> 'NEW') THEN -- There must be atleast one line, except for NEW contracts

          okl_api.set_message(
                              G_APP_NAME,
                              G_INVALID_CONTRACT,
                              'CONTRACT_NUM',
                              okl_header_rec.contract_number_old
                             );
          x_return_status := OKL_API.G_RET_STS_ERROR;
          RAISE load_failed;
      END IF;

      COMMIT; -- commit after every Contract to avoid problem with Rollback segment
/*
      --
      -- Process Contracts depending on import_request_stage
      --
      IF (x_return_status = OKL_API.G_RET_STS_SUCCESS
          AND
          okl_header_rec.import_request_stage <> 'NEW' ) THEN
          contract_further_process(
                                   p_init_msg_list  => OKL_API.G_FALSE,
                                   x_return_status  => x_return_status,
                                   x_msg_count      => x_msg_count,
                                   x_msg_data       => x_msg_data,
                                   p_chr_id         => x_chrv_rec.id,
                                   p_import_stage   => okl_header_rec.import_request_stage
                                  );
      END IF;
*/

    EXCEPTION

      WHEN load_failed THEN

         report_error (
                       x_msg_count => x_msg_count,
                       x_msg_data  => x_msg_data
                      );
         x_return_status := OKL_API.G_RET_STS_ERROR;

    END; -- of Header Begin

      IF (x_return_status = OKL_API.G_RET_STS_SUCCESS) THEN -- Final checking for SUCCESSFUL Processing

         update_interface_status(
                                 p_contract_number     => okl_header_rec.contract_number_old,
                                 p_new_contract_number => x_chrv_rec.contract_number,
                                 p_status              => 'INTERFACED',
                                 x_return_status       => x_update_status
                                );
         write_to_log('Contract '||okl_header_rec.contract_number_old||'-> loaded as :'||x_chrv_rec.contract_number);
         x_total_loaded := nvl(x_total_loaded,0) + 1;

	       -- hariven - Bug#5393374 - Added - Start
      -- Raise Business event for "oracle.apps.okl.la.lease_contract.imported"
      raise_business_event( p_chr_id        => x_chrv_rec.id
                          , x_return_status => x_return_status);
    IF (x_return_status <> OKL_API.G_RET_STS_SUCCESS) THEN
      write_to_log('Raising Business Event For Contract -' ||x_chrv_rec.contract_number ||' FAILED!');
      RAISE OKL_API.G_EXCEPTION_UNEXPECTED_ERROR;
    END IF;
      -- hariven - Bug#5393374 - Added - End

      ELSE

         ROLLBACK; -- Rollback any incomplete transactions
         update_interface_status(
                                 p_contract_number     => okl_header_rec.contract_number_old,
                                 p_new_contract_number => okl_header_rec.contract_number,
                                 p_status              => 'ERROR',
                                 x_return_status       => x_update_status
                                );
      END IF;

      COMMIT;

      --
      -- Process Contracts depending on import_request_stage
      --
      IF (x_return_status = OKL_API.G_RET_STS_SUCCESS
          AND
          okl_header_rec.import_request_stage <> 'NEW' ) THEN
          contract_further_process(
                                   p_init_msg_list  => OKL_API.G_FALSE,
                                   x_return_status  => x_return_status,
                                   x_msg_count      => x_msg_count,
                                   x_msg_data       => x_msg_data,
                                   p_chr_id         => x_chrv_rec.id,
                                   p_import_stage   => okl_header_rec.import_request_stage
                                  );
      END IF;

      debug_message('========================done ');
      write_to_log('========================done ');

  END LOOP; -- okl_header_csr

  return;

  EXCEPTION
     WHEN item_not_found_error THEN
      x_return_status := Okc_Api.G_RET_STS_ERROR;

    WHEN OTHERS THEN
      okl_api.set_message(
                          G_APP_NAME,
                          G_UNEXPECTED_ERROR,
                          'OKL_SQLCODE',
                          SQLCODE,
                          'OKL_SQLERRM',
                          SQLERRM || ': '||G_PKG_NAME||'.'||l_proc_name
                         );
      x_return_status := OKL_API.G_RET_STS_ERROR;

      report_error (
                    x_msg_count => x_msg_count,
                    x_msg_data  => x_msg_data
                   );
      debug_message('Progress: '||l_progress);
      debug_message('========================done ');

  END Load_Input_Record;

--+++++++++++++++++++++++++++++++ Load Interface +++++++++++++++++++++++++++
-- Function to submit the concurrent request for Contract Import.

  FUNCTION Submit_Import_Contract(
  		   			p_api_version       IN NUMBER,
  		   			p_init_msg_list 	  IN VARCHAR2,
  		   			x_return_status     OUT NOCOPY VARCHAR2,
  		   			x_msg_count         OUT NOCOPY NUMBER,
  		   			x_msg_data 		  OUT NOCOPY VARCHAR2,
  		   			p_batch_number  	  IN VARCHAR2,
  		   			p_contract_number   IN VARCHAR2,
  		   			p_start_date  	  IN DATE,
  		   			p_end_date  	  IN DATE,
  		   			p_party_number 	  IN VARCHAR2)
   RETURN NUMBER
   IS

    x_request_id           NUMBER;

 l_start_date  VARCHAR2(30);
 l_end_date    VARCHAR2(30);


BEGIN

    x_return_status := Okl_Api.G_RET_STS_SUCCESS;

-- Convert the date to Varchar2

    l_start_date := Fnd_Date.date_to_canonical(p_start_date);
    l_end_date   := Fnd_Date.date_to_canonical(p_end_date);


   -- Submit Concurrent Program Request for interest calculation
    FND_REQUEST.set_org_id(mo_global.get_current_org_id); --MOAC- Concurrent request
    x_request_id := Fnd_Request.SUBMIT_REQUEST
			(application 	=> 'OKL',
			program 		=> 'OKLXKOI',
			description 		=> 'Contract Import',
			argument1 		=> p_batch_number,
			argument2 		=> p_start_date,
			argument3 		=> p_end_date,
			argument4 		=> p_contract_number,
			argument5 		=> p_party_number);


   IF x_request_id = 0 THEN
       -- Raise Error if the request has not been submitted successfully.
       Okc_Api.set_message(p_app_name => 'OFA',
                           p_msg_name => 'FA_DEPRN_TAX_ERROR',
                           p_token1   => 'REQUEST_ID',
                           p_token1_value => x_request_id);

        RAISE Okl_Api.g_exception_error;
   END IF;

    RETURN x_request_id;

  EXCEPTION

    WHEN Okl_Api.G_EXCEPTION_ERROR THEN
        x_return_status := Okl_Api.G_RET_STS_ERROR;
       RETURN x_request_id;

    WHEN OTHERS THEN
        x_return_status := Okl_Api.G_RET_STS_UNEXP_ERROR;
        RETURN x_request_id;

  END Submit_Import_Contract;

  PROCEDURE Process_Record_Parallel (
                            errbuf             OUT NOCOPY VARCHAR2,
                            retcode            OUT NOCOPY VARCHAR2,
                            p_batch_number     IN VARCHAR2,
                            p_start_date_from  IN VARCHAR2,
                            p_start_date_to    IN VARCHAR2,
                            p_contract_number  IN VARCHAR2,
                            p_customer_number  IN VARCHAR2,
                            p_instance_number  IN NUMBER
                           ) IS


request_id NUMBER := 0;

batch_list varchar2(2000);
start_pos number;
l_batch_number okl_header_interface.batch_number%type;
req_id req_tab_type;

req_data varchar2(10);
cur_req_pos number;

batch_num_tab batch_tab_type;
batch_counter number := 0;

-- Parameters
l_max_lines_per_worker number := 50000;
l_line_count number := 0;
l_header_count number := 0;

l_partition_size number;
l_max_partition_size number := 50000;
l_parallel_count number;
l_max_parallel_count number := 500;

l_contract_tab batch_tab_type;
l_contract_num_count number := 0;

l_contract_num_tab batch_tab_type;
l_count_tab req_tab_type;
l_contract_num_tab2 batch_tab_type;
l_count_tab2 req_tab_type;
l_running_total number := 0;
l_worker_id number := 1;
l_percent number := 1;
l_contract_tab_count req_tab_type;
l_status_tab batch_tab_type;
l_temp_count number := 1;

cursor c1 is
  select b.contract_number_old, count(*)
  from okl_lines_interface b
  where b.contract_number_old in (
  select a.contract_number_old
  from okl_header_interface a
  where
  (
          a.batch_number        = p_batch_number
          OR
          a.contract_number_old = p_contract_number
          OR
          (
           a.customer_number    = p_customer_number
           AND
           a.start_date         between p_start_date_from AND p_start_date_to
          )
         )
  AND    a.status in ('NEW','ERROR')
  AND    a.contract_number_old = b.contract_number_old
  )
  group by b.contract_number_old
  order by 2;

cursor c2 is
  select a.contract_number_old
  from okl_header_interface a
  where
  (
          a.batch_number        = p_batch_number
          OR
          a.contract_number_old = p_contract_number
          OR
          (
           a.customer_number    = p_customer_number
           AND
           a.start_date         between p_start_date_from AND p_start_date_to
          )
  )
  AND    a.status in ('NEW','ERROR');

  FUNCTION get_max_lines_per_worker return number IS
  BEGIN
    --AKP:Get value from profile
    return fnd_profile.value('OKL_MAX_LINES_PER_WORKER');
    --return 10000;
  END;


begin

  write_to_log('In OKL_OPEN_INTERFACE_PVT.process_record_parallel...');

  if (p_instance_number is null) and (instr(NVL(p_batch_number,'?'),',') = 0)
  then
    -- Call the existing process_record (Old way)
    Process_Record (
                            errbuf          ,
                            retcode         ,
                            p_batch_number  ,
                            p_start_date_from,
                            p_start_date_to  ,
                            p_contract_number,
                            p_customer_number,
                            null
                   );
    return;
  else


    req_data := fnd_conc_global.request_data;
    write_to_log('req_data retrieved =' || req_data);

    if req_data is not null then
        errbuf := 'Done!';
        retcode := 0;
        return;
    end if;

    l_status_tab.delete;
    if (p_instance_number = 1) then
      write_to_log('Submit Old Concurrent program as is...');

      --AKP Change colname: assigned_process to scheduled_worker_id
      update okl_header_interface a
      set a.scheduled_worker_id = '1'
      where
      (
            a.batch_number        = p_batch_number
            OR
            a.contract_number_old = p_contract_number
            OR
            (
             a.customer_number    = p_customer_number
             AND
             a.start_date         between p_start_date_from AND p_start_date_to
            )
           )
      AND    a.status in ('NEW','ERROR');
      commit;

      FND_REQUEST.set_org_id(mo_global.get_current_org_id); --MOAC- Concurrent request
      request_id := FND_REQUEST.SUBMIT_REQUEST(
                    application => 'OKL',
                    program => 'OKLXKOIC',  -- AKP: Change program name
                    sub_request => TRUE,
                    argument1 => p_batch_number,
                    argument2 => p_start_date_from ,
                    argument3 => p_start_date_to ,
                    argument4 => p_contract_number ,
                    argument5 => p_customer_number ,
                    argument6 => '1'
                   );

      if (request_id = 0) then
          errbuf := fnd_message.get;
          retcode := 2;
      else
          retcode := 0;
      end if;
      fnd_conc_global.set_req_globals(conc_status => 'PAUSED',
                                      request_data => to_char(1));
      errbuf := 'Sub-Request submitted!';
      retcode := 0;

      return;
    end if;


    if (p_instance_number is null) and (instr(p_batch_number,',') > 0) then

      -------------- Copied from here
      batch_num_tab.delete;
      req_id.delete;

      batch_list := ltrim(rtrim(p_batch_number));  -- Separated by commas
      write_to_log('Before:batch_list=' || batch_list);
      -- Has comma at the end
      if (substr(batch_list,length(batch_list),1) = ',') then
        batch_list := substr(batch_list, 1, length(batch_list)-1);
      end if;
      write_to_log('After:batch_list=' || batch_list);
      start_pos := 1;
      for i in 1..length(batch_list)
      loop
        if (substr(batch_list,i,1) = ',') then
          l_batch_number := ltrim(rtrim(substr(batch_list, start_pos, i - start_pos )));
          write_to_log('i=' || i || ' start_pos=' || start_pos || ' l_batch_number=' || l_batch_number);
          if (l_batch_number is not null) then
            batch_counter := batch_counter + 1;
            batch_num_tab(batch_counter) := l_batch_number;
          end if;

          start_pos := i+1;
        end if;
      end loop;

      l_batch_number := ltrim(rtrim(substr(batch_list, start_pos, length(batch_list) - start_pos +1)));
      write_to_log('start_pos=' || start_pos || ' length=' || length(batch_list)|| ' l_batch_number=' || l_batch_number);
      if (l_batch_number is not null) then
        batch_counter := batch_counter + 1;
        batch_num_tab(batch_counter) := l_batch_number;
      end if;

      write_to_log('batch_counter=' || batch_counter);

      for i in batch_num_tab.first..batch_num_tab.last
      loop
        write_to_log('batch_num_tab(' || i || ')=' || batch_num_tab(i));
      end loop;

      req_data := fnd_conc_global.request_data;
      write_to_log('req_data retrieved =' || req_data);

      if req_data is not null then
          errbuf := 'Done!';
          retcode := 0;
          return;
      else
        for i in batch_num_tab.first..batch_num_tab.last
        loop
          l_batch_number := batch_num_tab(i);
          update okl_header_interface
          set    scheduled_worker_id = to_char(i)
          where batch_number = l_batch_number;
          commit;

          write_to_log('Submitting for ' || l_batch_number);
          FND_REQUEST.set_org_id(mo_global.get_current_org_id); --MOAC- Concurrent request
          request_id := FND_REQUEST.SUBMIT_REQUEST(
                      application => 'OKL',
                      program => 'OKLXKOIC',  -- AKP: Change program name
                      sub_request => TRUE,
                      argument1 => l_batch_number,
                      argument2 => p_start_date_from ,
                      argument3 => p_start_date_to ,
                      argument4 => p_contract_number ,
                      argument5 => p_customer_number ,
                      argument6 => to_char(i)
                     );

          if (request_id = 0) then
            errbuf := fnd_message.get;
            retcode := 2;
          end if;

        end loop;
        fnd_conc_global.set_req_globals(conc_status => 'PAUSED',
                                       request_data => to_char(1));
        errbuf := 'Sub-Request submitted!';
        retcode := 0;
      end if;

      -------------- Copied to here

    else


      l_max_lines_per_worker := get_max_lines_per_worker();
      write_to_log('Max lines per worker='||l_max_lines_per_worker);

      select count(*) into l_header_count
      from   okl_header_interface b
      where (
              b.batch_number        = p_batch_number
              OR
              b.contract_number_old = p_contract_number
              OR
              (
               b.customer_number    = p_customer_number
               AND
               b.start_date         between p_start_date_from AND p_start_date_to
              )
             )
      AND    b.status in ('NEW','ERROR');

      select count(*) into l_line_count
      from okl_lines_interface a
      where a.contract_number_old in (
      select b.contract_number_old
      from   okl_header_interface b
      where (
              b.batch_number        = p_batch_number
              OR
              b.contract_number_old = p_contract_number
              OR
              (
               b.customer_number    = p_customer_number
               AND
               b.start_date         between p_start_date_from AND p_start_date_to
              )
             )
      AND    b.status in ('NEW','ERROR')
      AND    b.contract_number_old = a.contract_number_old
      );

      write_to_log('l_header_count=' || l_header_count);
      write_to_log('l_line_count=' || l_line_count);

        if (nvl(l_max_lines_per_worker,0) < 1) then
          l_max_partition_size := 100000;
        else
          l_max_partition_size := l_max_lines_per_worker;
        end if;
        l_partition_size := round((l_line_count+l_header_count)/p_instance_number,0);

        if (l_partition_size > l_max_partition_size) then
          l_partition_size := l_max_partition_size;
        end if;
        write_to_log('l_partition_size=' || l_partition_size);

        l_parallel_count := round((l_line_count+l_header_count)/l_partition_size, 0);

        if (l_parallel_count > l_max_parallel_count) then
          l_parallel_count := l_max_parallel_count;
        end if;
        write_to_log('l_parallel_count=' || l_parallel_count);


      if ((l_line_count + l_header_count = 0) or (l_header_count = 0)) then
        write_to_log('No contracts/lines eligible for loading...');
        retcode := 0;
      elsif (l_Line_count = 0) then
        null;
        write_to_log('Only headers exist. No lines...');
        -- l_contract_num_tab, tab2, l_status_tab, l_temp_count

        write_to_log('Before open c2...');
        open c2;
        loop
          fetch c2 bulk collect into
            l_contract_num_tab2
          limit 10000;
          write_to_log('After fetch c2...');
          exit when l_contract_num_tab2.count = 0;
          for i in 1..l_contract_num_tab2.count loop
            l_contract_num_tab(l_temp_count) := l_contract_num_tab2(i);
            l_temp_count := l_temp_count + 1;
          end loop;
        end loop;
        close c2;
        write_to_log('After close c2...');
        l_worker_id := 1;
        for i in 1..l_contract_num_tab.count loop
          l_status_tab(i) := to_char(l_worker_id);
          l_worker_id := l_worker_id + 1;
          if (l_worker_id > l_parallel_count) then
            l_worker_id := 1;
          end if;
        end loop;
        write_to_log('After status_tab population ...');
        forall i in l_contract_num_tab.first..l_contract_num_tab.last
          update okl_header_interface
          set    scheduled_worker_id = l_status_tab(i)
          where  contract_number_old = l_contract_num_tab(i);
        write_to_log('After bulk update...');

        /* ************** */
        write_to_log('Before submitting: l_worker_id=' || l_worker_id);
        for i in 1..l_parallel_count
        loop
            FND_REQUEST.set_org_id(mo_global.get_current_org_id); --MOAC- Concurrent request
            request_id := FND_REQUEST.SUBMIT_REQUEST(
                        application => 'OKL',
                        program => 'OKLXKOIC', -- AKP Change program name
                        sub_request => TRUE,
                        argument1 => p_batch_number,
                        argument2 => p_start_date_from ,
                        argument3 => p_start_date_to ,
                        argument4 => p_contract_number ,
                        argument5 => p_customer_number ,
                        argument6 => to_char(i)
                       );

            if (request_id = 0) then
              errbuf := fnd_message.get;
              retcode := 2;
            end if;

        end loop;
        fnd_conc_global.set_req_globals(conc_status => 'PAUSED',
                                         request_data => to_char(1));
        errbuf := 'Sub-Request submitted!';
        retcode := 0;

        write_to_log('Done Spawning Child Processes...');
        /* ************** */
      else

        /*if (nvl(l_max_lines_per_worker,0) < 1) then
          l_max_partition_size := 100000;
        else
          l_max_partition_size := l_max_lines_per_worker;
        end if;
        l_partition_size := round((l_line_count+l_header_count)/p_instance_number,0);

        if (l_partition_size > l_max_partition_size) then
          l_partition_size := l_max_partition_size;
        end if;
        write_to_log('l_partition_size=' || l_partition_size);

        l_parallel_count := round((l_line_count+l_header_count)/l_partition_size, 0);

        if (l_parallel_count > l_max_parallel_count) then
          l_parallel_count := l_max_parallel_count;
        end if;
        write_to_log('l_parallel_count=' || l_parallel_count); */

        l_contract_tab.delete;
        l_contract_tab_count.delete;
        l_contract_num_count:= 1;

        l_contract_num_tab.delete;
        l_count_tab.delete;
        l_contract_num_tab2.delete;
        l_count_tab2.delete;
        l_running_total := 0;
        l_worker_id := 1;

        write_to_log('After initializing...');
        l_temp_count := 1;
        open c1;
        loop
          fetch c1 bulk collect into l_contract_num_tab2, l_count_tab2
            LIMIT G_BULK_BATCH_SIZE;
          if (l_contract_num_tab2.count=0) then
            exit;
          else
            null;
            --Populate l_contract_num_tab and l_count_tab from 2 above
            for i in l_contract_num_tab2.first..l_contract_num_tab2.last loop
              l_contract_num_tab(l_temp_count) := l_contract_num_tab2(i);
              l_count_tab(l_temp_count) := l_count_tab2(i);
              l_temp_count := l_temp_count + 1;
            end loop;
          end if;
        end loop;
        close c1;

        write_to_log('l_contract_num_tab.count=' || l_contract_num_tab.count);

        if (l_contract_num_tab.count > 0) then

          for i in l_contract_num_tab.first .. l_contract_num_tab.last loop

            write_to_log('processing l_contract_num_tab(' || i || ')=' || l_contract_num_tab(i));
            l_contract_tab(l_contract_num_count) := l_contract_num_tab(i);
            l_contract_tab_count(l_contract_num_count) := l_count_tab(i);
            l_contract_num_count := l_contract_num_count + 1;

            l_running_total := l_running_total + l_count_tab(i) + 1;
            --write_to_log('l_contract_num_count=' || l_contract_num_count);
            --write_to_log('l_running_total=' || l_running_total);

            l_percent := round((l_running_total-l_partition_size)*100/l_partition_size,0);
            --write_to_log('l_percent=' || l_percent);
            if (l_running_total = l_partition_size) then
                for j in 1..l_contract_num_count-1 loop
                  --write_to_log(l_contract_tab(j) || ' on worker ' || l_worker_id);
                  l_status_tab(j) := to_char(l_worker_id);
                  write_to_log(l_contract_tab(j) || ' on worker ' || l_worker_id ||
                     ' lines -> ' || l_contract_tab_count(j));
                end loop;
                -- AKP: Change assigned_process to scheduled_worker_id
                forall j in l_status_tab.first..l_status_tab.last
                  update okl_header_interface set scheduled_worker_id=l_status_tab(j)
                  where  contract_number_old = l_contract_tab(j);
                commit;

                l_running_total := 0;
                l_contract_num_count := 1;
                l_worker_id := l_worker_id + 1;
                l_contract_tab.delete;
                l_contract_tab_count.delete;
                l_status_tab.delete;
            elsif (l_running_total > l_partition_size) then
              if ((l_contract_num_count > 2)  and round((l_running_total-l_partition_size)*100/l_partition_size,0) >10 )
              then
                l_contract_num_count := l_contract_num_count - 1;
                --write_to_log('Reduced contract_num_count=' || l_contract_num_count);
                for j in 1..l_contract_num_count-1 loop
                  l_status_tab(j) := to_char(l_worker_id);
                  write_to_log(l_contract_tab(j) || ' on worker ' || l_worker_id ||
                     ' lines -> ' || l_contract_tab_count(j));
                end loop;
                -- AKP: Change assigned_process to scheduled_worker_id
                forall j in l_status_tab.first..l_status_tab.last
                  update okl_header_interface set scheduled_worker_id=l_status_tab(j)
                  where  contract_number_old = l_contract_tab(j);
                commit;

                l_running_total := 0;
                l_contract_num_count := 1;
                l_worker_id := l_worker_id + 1;
                l_contract_tab.delete;
                l_contract_tab_count.delete;
                l_status_tab.delete;
                l_contract_tab(l_contract_num_count) := l_contract_num_tab(i);
                l_contract_tab_count(l_contract_num_count) := l_count_tab(i);
                l_contract_num_count := l_contract_num_count + 1;
              else
                for j in 1..l_contract_num_count-1 loop
                  --write_to_log(l_contract_tab(j) || ' on worker ' || l_worker_id);
                  l_status_tab(j) := to_char(l_worker_id);
                  write_to_log(l_contract_tab(j) || ' on worker ' || l_worker_id ||
                     ' lines -> ' || l_contract_tab_count(j));
                end loop;
                -- AKP: Change assigned_process to scheduled_worker_id
                forall j in l_status_tab.first..l_status_tab.last
                  update okl_header_interface set scheduled_worker_id=l_status_tab(j)
                  where  contract_number_old = l_contract_tab(j);
                commit;

                l_running_total := 0;
                l_contract_num_count := 1;
                l_worker_id := l_worker_id + 1;
                l_contract_tab.delete;
                l_contract_tab_count.delete;
                l_status_tab.delete;
              end if;
            end if;  -- if contract_num_tab.count > 0

          end loop;
        end if;

        write_to_log('Outside...contract_num_count=' || l_contract_num_count
                     || ' l_worker_id=' || l_worker_id);
        if (l_contract_tab.count > 0) then
                for j in 1..l_contract_num_count-1 loop
                  --write_to_log(l_contract_tab(j) || ' on worker ' || l_worker_id);
                  l_status_tab(j) := to_char(l_worker_id);
                  write_to_log(l_contract_tab(j) || ' on worker ' || l_worker_id ||
                     ' lines -> ' || l_contract_tab_count(j));
                end loop;
                -- AKP: Change assigned_process to scheduled_worker_id
                forall j in l_status_tab.first..l_status_tab.last
                  update okl_header_interface set scheduled_worker_id=l_status_tab(j)
                  where  contract_number_old = l_contract_tab(j);
                commit;

                l_running_total := 0;
                l_contract_num_count := 1;
                l_worker_id := l_worker_id + 1;
                l_contract_tab.delete;
                l_contract_tab_count.delete;
                l_status_tab.delete;
        end if;

        /*end loop;
        close c1; */


        write_to_log('Before submitting: l_worker_id=' || l_worker_id);
        if (l_worker_id > l_max_parallel_count + 1) then
          l_worker_id := l_max_parallel_count + 1;
          write_to_log('ALERT:Some workers can not be started because of resource. Please rerun your job later after this submission finishes.');
        end if;
        for i in 1..l_worker_id -1
        loop
            FND_REQUEST.set_org_id(mo_global.get_current_org_id); --MOAC- Concurrent request
            request_id := FND_REQUEST.SUBMIT_REQUEST(
                        application => 'OKL',
                        program => 'OKLXKOIC', -- AKP Change program name
                        sub_request => TRUE,
                        argument1 => p_batch_number,
                        argument2 => p_start_date_from ,
                        argument3 => p_start_date_to ,
                        argument4 => p_contract_number ,
                        argument5 => p_customer_number ,
                        argument6 => to_char(i)
                       );

            if (request_id = 0) then
              errbuf := fnd_message.get;
              retcode := 2;
            end if;

        end loop;
        fnd_conc_global.set_req_globals(conc_status => 'PAUSED',
                                         request_data => to_char(1));
        errbuf := 'Sub-Request submitted!';
        retcode := 0;

        write_to_log('Done Spawning Child Processes...');

      end if;  -- if line_count = 0
    end if;  -- if instance_number

  end if;  -- if parallel


exception when FND_API.G_EXC_ERROR THEN
            write_to_log('G_EXC_ERROR');
            raise FND_API.G_EXC_ERROR;
          when others then
            write_to_log('OTHERS');
            FND_MESSAGE.SET_NAME('AR', 'HZ_STAGE_SQL_ERROR');
            FND_MESSAGE.SET_TOKEN('PROC' ,'Parallel Contract import failed');
            FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
end;


END okl_open_interface_pvt;

/
