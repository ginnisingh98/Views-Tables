--------------------------------------------------------
--  DDL for Package Body SSP_SSPRPSPB_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."SSP_SSPRPSPB_XMLP_PKG" AS
/* $Header: SSPRPSPBB.pls 120.1 2008/01/07 14:43:14 srikrish noship $ */

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      L_TEST NUMBER;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      AA_P_DATE_FROM:=to_char(P_DATE_FROM,'DD-MON-YYYY');
      AA_P_DATE_TO:=to_char(P_DATE_TO,'DD-MON-YYYY');
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      INSERT INTO FND_SESSIONS
        (SESSION_ID
        ,EFFECTIVE_DATE)
        SELECT
          USERENV('sessionid'),
          TRUNC(SYSDATE)
        FROM
          SYS.DUAL
        WHERE not exists (
          SELECT
            1
          FROM
            FND_SESSIONS FS
          WHERE FS.SESSION_ID = USERENV('sessionid') );
      C_BUSINESS_GROUP_NAME := HR_REPORTS.GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
      IF P_PAYROLL_ID IS NOT NULL THEN
        SELECT
          DISTINCT
          PAYROLL_NAME
        INTO C_PAYROLL_NAME
        FROM
          PAY_PAYROLLS
        WHERE BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
          AND PAYROLL_ID = P_PAYROLL_ID;
      END IF;
      IF P_PERSON_ID IS NOT NULL THEN
        SELECT
          DISTINCT
          SUBSTR(FULL_NAME
                ,1
                ,80)
        INTO C_PERSON_NAME
        FROM
          PER_PEOPLE_F PPF
        WHERE PERSON_ID = P_PERSON_ID
          AND BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
          AND ( ( P_SESSION_DATE between PPF.EFFECTIVE_START_DATE
          AND PPF.EFFECTIVE_END_DATE )
        OR ( P_SESSION_DATE > PPF.EFFECTIVE_END_DATE
          AND PPF.EFFECTIVE_END_DATE = (
          SELECT
            MAX(P1.EFFECTIVE_END_DATE)
          FROM
            PER_ALL_PEOPLE_F P1
          WHERE P1.PERSON_ID = PPF.PERSON_ID ) )
        OR ( P_SESSION_DATE < PPF.EFFECTIVE_START_DATE
          AND PPF.EFFECTIVE_START_DATE = PPF.START_DATE ) );
      END IF;
      FND_DATE.INITIALIZE('YYYY/MM/DD'
                         ,NULL);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION C_SPPBFORMULA(M_DUE_DATE IN DATE
                        ,M_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      EWC DATE;
      QW DATE;
      DUE_DATE DATE;
      AVG_EARNINGS NUMBER(10,2);
    BEGIN
      DUE_DATE := M_DUE_DATE;
      EWC := SSP_PAB_PKG.EXPECTED_WEEK_OF_CONFINEMENT(DUE_DATE);
      QW := SSP_PAB_PKG.QUALIFYING_WEEK(DUE_DATE);
      C_EWC := EWC;
      C_WQ := QW;
      SELECT
        AVERAGE_EARNINGS_AMOUNT
      INTO AVG_EARNINGS
      FROM
        SSP_EARNINGS_CALCULATIONS
      WHERE EFFECTIVE_DATE = QW
        AND PERSON_ID = M_PERSON_ID;
      C_AVG_EARNINGS := AVG_EARNINGS;
      RETURN NULL;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN NULL;
  END C_SPPBFORMULA;

  FUNCTION C_PROCESSEDFORMULA(E_ELEMENT_ENTRY_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF SSP_SMP_SUPPORT_PKG.ENTRY_ALREADY_PROCESSED(E_ELEMENT_ENTRY_ID) THEN
        RETURN ('Yes');
      ELSE
        RETURN (NULL);
      END IF;
    END;
    RETURN NULL;
  END C_PROCESSEDFORMULA;

  FUNCTION C_AMOUNT_PROCESSEDFORMULA(C_PROCESSED IN VARCHAR2
                                    ,E_AMOUNT IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF C_PROCESSED = 'Yes' THEN
        RETURN (E_AMOUNT);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_AMOUNT_PROCESSEDFORMULA;

  FUNCTION C_RECOVERABLE_PROCESSEDFORMULA(C_PROCESSED IN VARCHAR2
                                         ,E_RECOVERABLE IN NUMBER) RETURN NUMBER IS
  BEGIN
    BEGIN
      IF C_PROCESSED = 'Yes' THEN
        RETURN (E_RECOVERABLE);
      ELSE
        RETURN (0);
      END IF;
    END;
    RETURN NULL;
  END C_RECOVERABLE_PROCESSEDFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_EWC_P RETURN DATE IS
  BEGIN
    RETURN C_EWC;
  END C_EWC_P;

  FUNCTION C_WQ_P RETURN DATE IS
  BEGIN
    RETURN C_WQ;
  END C_WQ_P;

  FUNCTION C_AVG_EARNINGS_P RETURN NUMBER IS
  BEGIN
    RETURN C_AVG_EARNINGS;
  END C_AVG_EARNINGS_P;

  FUNCTION C_BUSINESS_GROUP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BUSINESS_GROUP_NAME;
  END C_BUSINESS_GROUP_NAME_P;

  FUNCTION C_REPORT_SUBTITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_SUBTITLE;
  END C_REPORT_SUBTITLE_P;

  FUNCTION C_PAYROLL_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PAYROLL_NAME;
  END C_PAYROLL_NAME_P;

  FUNCTION C_PERSON_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_PERSON_NAME;
  END C_PERSON_NAME_P;

END SSP_SSPRPSPB_XMLP_PKG;

/
