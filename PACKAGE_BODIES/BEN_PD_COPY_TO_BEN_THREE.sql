--------------------------------------------------------
--  DDL for Package Body BEN_PD_COPY_TO_BEN_THREE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."BEN_PD_COPY_TO_BEN_THREE" as
/* $Header: bepdccp3.pkb 120.1 2006/04/10 05:38:59 gsehgal noship $ */
--
--UPD Changes New procedure for getting the dtmodes
--
procedure get_dt_modes(p_effective_date       in date,
                       p_effective_end_date   in date,
                       p_effective_start_date in date,
                       p_dml_operation        in varchar2,
                       p_datetrack_mode       in out nocopy varchar2
          --             p_update                  out nocopy boolean
                      ) is
  l_update            boolean := true ;
  l_datetrack_mode    varchar2(80) := p_datetrack_mode ;
begin
  --
  hr_utility.set_location('Intering get_dt_modes p_dt_mode '||l_datetrack_mode,10);
  hr_utility.set_location('p_effective_start_date '||p_effective_start_date,10);
  hr_utility.set_location('p_effective_end_date '||p_effective_end_date,10);
  hr_utility.set_location('p_effective_date '||p_effective_date,10);
  --
  if p_effective_end_date <> hr_api.g_eot then
    --
    if p_dml_operation = 'INSERT' then
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := true;
      --
    elsif l_datetrack_mode in ('CORRECTION') then
      --
      l_datetrack_mode := hr_api.g_correction ;
      l_update := true;
      --
    elsif l_datetrack_mode in ('UPDATE_OVERRIDE','UPDATE' ) then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := true;
      else
        --
        if l_datetrack_mode in ('UPDATE_OVERRIDE') then
         --
         l_datetrack_mode := hr_api.g_update_override ;
         l_update := false ;
         --
        elsif l_datetrack_mode in ('UPDATE') then
         --
         l_datetrack_mode := hr_api.g_update;
         --
        end if;
        --
      end if;
      --
    elsif l_datetrack_mode in ('UPDATE_CHANGE_INSERT') then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := true;
      else
        l_datetrack_mode := hr_api.g_update_change_insert ;
        l_update := true;
      end if;
      --
    else
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := false;
      --
    end if;
    --
  else
    --
    if p_dml_operation = 'INSERT' then
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := false;
      --
    elsif l_datetrack_mode in ('CORRECTION') then
      --
      l_datetrack_mode := hr_api.g_correction ;
      l_update := false;
      --
    elsif l_datetrack_mode in ('UPDATE_OVERRIDE','UPDATE' ) then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := true;
      else
        l_datetrack_mode := hr_api.g_update ;
        l_update := false ;
      end if;
      --
    elsif l_datetrack_mode in ('UPDATE_CHANGE_INSERT') then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := false;
      else
        l_datetrack_mode := hr_api.g_update ;
        l_update := false;
      end if;
      --
    else
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := false;
      --
    end if;
    --
  end if ;
  --
  p_datetrack_mode := l_datetrack_mode ;
 --  p_update  := l_update ;
  --
  hr_utility.set_location('Leaving get_dt_modes p_dt_mode '||p_datetrack_mode,10);
  --
end get_dt_modes ;
--
function get_fk(p_col_name varchar2,
                p_old_val number,
                p_dml_operation varchar2 default null) return number is
     l_counter number;
     l_ret_id  number := null;
   begin
     --
     /*
     if p_dml_operation = 'UPDATE' then
       --
       l_ret_id := p_old_val ;
       --
     else
     */
       --
        l_counter := nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl.LAST, 0);
        if l_counter > 0  and p_old_val is not null then
           for i in 1..l_counter loop
               if BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).pk_id_column = p_col_name and
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).old_value    = p_old_val
               then
                  l_ret_id := BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).new_value;
                  exit;
               end if;
           end loop;
        end if;
        --
     /*
     end if;
     */
     return l_ret_id;
     --
   end;
   --
   -- Start Log additions
   --
   -- NOMAPPING
   procedure log_nomapping_data(p_parent_table_alias       in varchar2
                     ,p_parent_pk_id                       in number
                     ,p_copy_entity_txn_id                 in number
                     ,p_child_table_alias                  in varchar2
                     ,p_child_data                         in varchar2) is
   --
   cursor c_display_name(p_table_alias varchar2) is
     select display_name,table_route_id
     from pqh_table_route
     where table_alias= p_table_alias;
   --
   cursor c_parent_data(p_parent_pk_id number,
                        p_copy_entity_txn_id number,
                        p_table_route_id number) is
     select information5
     from ben_copy_entity_results
     where table_route_id = p_table_route_id
     and copy_entity_txn_id = p_copy_entity_txn_id
     and information1 = p_parent_pk_id;

   l_parent_data c_parent_data%rowtype;
   --
   begin
     --
     open c_display_name(p_parent_table_alias);
     fetch c_display_name into g_parent_display_name,g_parent_table_route_id;
     close c_display_name;
     --
     open c_display_name(p_child_table_alias);
     fetch c_display_name into g_child_display_name,g_child_table_route_id;
     close c_display_name;
     --
     open c_parent_data(p_parent_pk_id
                        ,p_copy_entity_txn_id
                        ,g_parent_table_route_id);
     fetch c_parent_data into l_parent_data;
     close c_parent_data;
     --

     hr_utility.set_location('Entering log_nomapping_data',5);
     -- get All capitals from p_parent_table_alias, p_child_table_alias
     /*l_text := 'VARIABLE RATE ROFILE - ' || 'Mediacal Variable Rate' || ' - ' ||
               'JOB CRITERIA - ' || 'My Job' || ' - Not copied as mapping is not done'; */
     --
     g_not_copied_tbl(g_not_copied_tbl_count).text :=
           '<B>' || g_parent_display_name ||'</B> - '||l_parent_data.information5 ||' : <B>'||g_child_display_name ||'</B> - '||p_child_data ;
     --
     g_not_copied_tbl_count    := g_not_copied_tbl_count + 1;
     hr_utility.set_location('g_not_copied_tbl 1 '||g_parent_display_name,5);
     hr_utility.set_location('g_not_copied_tbl 2 '||l_parent_data.information5,5);
     hr_utility.set_location('g_not_copied_tbl 3 '||g_child_display_name,5);
     hr_utility.set_location('Leaving log_nomapping_data',5);
   end log_nomapping_data ;
   --

   --
   -- Private procedure to update the cer with target details
   --
   procedure update_cer_with_target(c_pk_rec BEN_PD_COPY_TO_BEN_ONE.G_PK_REC_TYPE, p_copy_entity_txn_id in number) is
   begin
     hr_utility.set_location('Inside update_cer_with_target ',233);
         update ben_copy_entity_results
           set information9     = c_pk_rec.copy_reuse_type||'-'||c_pk_rec.new_value
           where copy_entity_txn_id = p_copy_entity_txn_id
           and   table_route_id     = c_pk_rec.table_route_id
           and   information1       = c_pk_rec.old_value ;
   end update_cer_with_target ;
   --

   --
   ---------------------------------------------------------------
   ----------------------< create_JRT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_JRT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_JOB_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_JRT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_JOB_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_JRT_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_JRT(c_table_route_id  number,
                c_information1   Number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_JRT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     JRT.job_rt_id new_value
   from BEN_JOB_RT_F JRT
   where
   JRT.JOB_ID     = l_JOB_ID  and
   JRT.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   JRT.ORDR_NUM           = l_ORDR_NUM and
   JRT.business_group_id  = c_business_group_id
   and   JRT.job_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_JOB_RT_F JRT1
                where
                JRT1.JOB_ID     = l_JOB_ID  and
                JRT1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                JRT1.ORDR_NUM           = l_ORDR_NUM and
                JRT1.business_group_id  = c_business_group_id
                and   JRT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_JOB_RT_F JRT2
                where
                JRT2.JOB_ID     = l_JOB_ID  and
                JRT2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                JRT2.ORDR_NUM           = l_ORDR_NUM and
                JRT2.business_group_id  = c_business_group_id
                and   JRT2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_JRT                     c_JRT%rowtype;
   l_job_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_JRT_unique in c_unique_JRT('JRT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_JRT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_JRT_unique.table_route_id '||r_JRT_unique.table_route_id,10);
       hr_utility.set_location(' r_JRT_unique.information1 '||r_JRT_unique.information1,10);
       hr_utility.set_location( 'r_JRT_unique.information2 '||r_JRT_unique.information2,10);
       hr_utility.set_location( 'r_JRT_unique.information3 '||r_JRT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_JRT_min_max_dates(r_JRT_unique.table_route_id, r_JRT_unique.information1 ) ;
       fetch c_JRT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;

       l_min_esd := greatest(l_min_esd,r_JRT_unique.information2);
       open c_JRT(r_JRT_unique.table_route_id,
                r_JRT_unique.information1,
                r_JRT_unique.information2,
                r_JRT_unique.information3 ) ;
       --
       fetch c_JRT into r_JRT ;
       --
       close c_JRT ;
       --
       --l_JOB_ID := get_fk('JOB_ID', r_JRT.information176);
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_JOB_ID := r_JRT.information176;
         --
         if l_JOB_ID is null then
            --
            log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_JRT.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'JRT'
                     ,p_child_data           => r_JRT.information173 );

            --
         end if;
         --
       else
         l_JOB_ID := r_JRT.information174;
       end if;
       --
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_JRT_unique.dml_operation ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_JRT.INFORMATION262,l_dml_operation);
       l_ORDR_NUM         := r_JRT.information257;
       l_EXCLD_FLAG      := r_JRT.information11;
       --
       if l_JOB_ID is null then
         close c_JRT_min_max_dates;
       else
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_JRT_unique.information2 and r_JRT_unique.information3 then
               l_update := true;
               if r_JRT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'JOB_RT_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'JOB_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_JRT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_JRT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_JRT_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('JRT',l_new_value,l_prefix || r_JRT_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_JRT_min_max_dates%found then
              -- cursor to find the object
              open c_find_JRT_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_job_rt_id, -999)  ) ;
              fetch c_find_JRT_in_target into l_new_value ;
              if c_find_JRT_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_JOB_RT_F',
                  p_base_key_column => 'JOB_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_JRT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'JOB_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'JOB_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_JRT_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_JRT_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_JRT_in_target ;
              --
           end if;
         end if ;
         --
         close c_JRT_min_max_dates ;
         end if;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_JRT.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_JRT.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
                l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_JOB_RT_F CREATE_JOB_RT ',20);
             BEN_JOB_RT_API.CREATE_JOB_RT(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
                ,P_EXCLD_FLAG           => r_JRT.information11
                ,P_JOB_ID               => l_JOB_ID
                ,P_JOB_RT_ID            => l_job_rt_id
                ,P_JRT_ATTRIBUTE1       => r_JRT.INFORMATION111
                ,P_JRT_ATTRIBUTE10      => r_JRT.INFORMATION120
                ,P_JRT_ATTRIBUTE11      => r_JRT.INFORMATION121
                ,P_JRT_ATTRIBUTE12      => r_JRT.INFORMATION122
                ,P_JRT_ATTRIBUTE13      => r_JRT.INFORMATION123
                ,P_JRT_ATTRIBUTE14      => r_JRT.INFORMATION124
                ,P_JRT_ATTRIBUTE15      => r_JRT.INFORMATION125
                ,P_JRT_ATTRIBUTE16      => r_JRT.INFORMATION126
                ,P_JRT_ATTRIBUTE17      => r_JRT.INFORMATION127
                ,P_JRT_ATTRIBUTE18      => r_JRT.INFORMATION128
                ,P_JRT_ATTRIBUTE19      => r_JRT.INFORMATION129
                ,P_JRT_ATTRIBUTE2       => r_JRT.INFORMATION112
                ,P_JRT_ATTRIBUTE20      => r_JRT.INFORMATION130
                ,P_JRT_ATTRIBUTE21      => r_JRT.INFORMATION131
                ,P_JRT_ATTRIBUTE22      => r_JRT.INFORMATION132
                ,P_JRT_ATTRIBUTE23      => r_JRT.INFORMATION133
                ,P_JRT_ATTRIBUTE24      => r_JRT.INFORMATION134
                ,P_JRT_ATTRIBUTE25      => r_JRT.INFORMATION135
                ,P_JRT_ATTRIBUTE26      => r_JRT.INFORMATION136
                ,P_JRT_ATTRIBUTE27      => r_JRT.INFORMATION137
                ,P_JRT_ATTRIBUTE28      => r_JRT.INFORMATION138
                ,P_JRT_ATTRIBUTE29      => r_JRT.INFORMATION139
                ,P_JRT_ATTRIBUTE3       => r_JRT.INFORMATION113
                ,P_JRT_ATTRIBUTE30      => r_JRT.INFORMATION140
                ,P_JRT_ATTRIBUTE4       => r_JRT.INFORMATION114
                ,P_JRT_ATTRIBUTE5       => r_JRT.INFORMATION115
                ,P_JRT_ATTRIBUTE6       => r_JRT.INFORMATION116
                ,P_JRT_ATTRIBUTE7       => r_JRT.INFORMATION117
                ,P_JRT_ATTRIBUTE8       => r_JRT.INFORMATION118
                ,P_JRT_ATTRIBUTE9       => r_JRT.INFORMATION119
                ,P_JRT_ATTRIBUTE_CATEGORY      => r_JRT.INFORMATION110
                ,P_ORDR_NUM      => r_JRT.INFORMATION257
                ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_job_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'JOB_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_JRT.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_JOB_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_JRT_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_JRT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_JRT.information3,
               p_effective_start_date  => r_JRT.information2,
               p_dml_operation         => r_JRT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_JOB_RT_ID   := r_JRT.information1;
             l_object_version_number := r_JRT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             hr_utility.set_location(' BEN_JOB_RT_F UPDATE_JOB_RT ',30);
             BEN_JOB_RT_API.UPDATE_JOB_RT(
                --
                P_VALIDATE                => false
                ,P_EFFECTIVE_DATE         => l_effective_date
                ,P_BUSINESS_GROUP_ID      => p_target_business_group_id
                --
                ,P_EXCLD_FLAG             => r_JRT.information11
                ,P_JOB_ID                 => l_JOB_ID
                ,P_JOB_RT_ID              => l_job_rt_id
 		,P_JRT_ATTRIBUTE1         => r_JRT.INFORMATION111
                ,P_JRT_ATTRIBUTE10        => r_JRT.INFORMATION120
                ,P_JRT_ATTRIBUTE11        => r_JRT.INFORMATION121
                ,P_JRT_ATTRIBUTE12        => r_JRT.INFORMATION122
                ,P_JRT_ATTRIBUTE13        => r_JRT.INFORMATION123
                ,P_JRT_ATTRIBUTE14        => r_JRT.INFORMATION124
                ,P_JRT_ATTRIBUTE15        => r_JRT.INFORMATION125
                ,P_JRT_ATTRIBUTE16        => r_JRT.INFORMATION126
                ,P_JRT_ATTRIBUTE17        => r_JRT.INFORMATION127
                ,P_JRT_ATTRIBUTE18        => r_JRT.INFORMATION128
                ,P_JRT_ATTRIBUTE19        => r_JRT.INFORMATION129
                ,P_JRT_ATTRIBUTE2         => r_JRT.INFORMATION112
                ,P_JRT_ATTRIBUTE20        => r_JRT.INFORMATION130
                ,P_JRT_ATTRIBUTE21        => r_JRT.INFORMATION131
                ,P_JRT_ATTRIBUTE22        => r_JRT.INFORMATION132
                ,P_JRT_ATTRIBUTE23        => r_JRT.INFORMATION133
                ,P_JRT_ATTRIBUTE24        => r_JRT.INFORMATION134
                ,P_JRT_ATTRIBUTE25        => r_JRT.INFORMATION135
                ,P_JRT_ATTRIBUTE26        => r_JRT.INFORMATION136
                ,P_JRT_ATTRIBUTE27        => r_JRT.INFORMATION137
                ,P_JRT_ATTRIBUTE28        => r_JRT.INFORMATION138
                ,P_JRT_ATTRIBUTE29        => r_JRT.INFORMATION139
                ,P_JRT_ATTRIBUTE3         => r_JRT.INFORMATION113
                ,P_JRT_ATTRIBUTE30        => r_JRT.INFORMATION140
                ,P_JRT_ATTRIBUTE4         => r_JRT.INFORMATION114
                ,P_JRT_ATTRIBUTE5         => r_JRT.INFORMATION115
                ,P_JRT_ATTRIBUTE6         => r_JRT.INFORMATION116
                ,P_JRT_ATTRIBUTE7         => r_JRT.INFORMATION117
                ,P_JRT_ATTRIBUTE8         => r_JRT.INFORMATION118
                ,P_JRT_ATTRIBUTE9         => r_JRT.INFORMATION119
                ,P_JRT_ATTRIBUTE_CATEGORY => r_JRT.INFORMATION110
                ,P_ORDR_NUM               => r_JRT.INFORMATION257
                ,P_VRBL_RT_PRFL_ID        => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_JRT.information3) then
                --
                BEN_JOB_RT_API.delete_JOB_RT(
                   --
                   p_validate                       => false
                   ,p_job_rt_id                   => l_job_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'JRT',r_jrt.information5 );
    --
 end create_JRT_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_HSR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_HSR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   l_HRLY_SLRD_CD     varchar2(30); -- r_HSR.information12
   --
   cursor c_unique_HSR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_HRLY_SLRD_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_HSR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_HSR(c_table_route_id  number,
                c_information1   Number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_HSR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     HSR.hrly_slrd_rt_id new_value
   from BEN_HRLY_SLRD_RT_F HSR
   where
   HSR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   HSR.HRLY_SLRD_CD         = l_HRLY_SLRD_CD and
   HSR.ORDR_NUM           = l_ORDR_NUM and
   HSR.business_group_id  = c_business_group_id
   and   HSR.hrly_slrd_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_HRLY_SLRD_RT_F HSR1
                where
                HSR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                HSR1.HRLY_SLRD_CD         = l_HRLY_SLRD_CD and
                HSR1.ORDR_NUM           = l_ORDR_NUM and
                HSR1.business_group_id  = c_business_group_id
                and   HSR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_HRLY_SLRD_RT_F HSR2
                where
                HSR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                HSR2.HRLY_SLRD_CD         = l_HRLY_SLRD_CD and
                HSR2.ORDR_NUM           = l_ORDR_NUM and
                HSR2.business_group_id  = c_business_group_id
                and   HSR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_HSR                     c_HSR%rowtype;
   l_hrly_slrd_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_HSR_unique in c_unique_HSR('HSR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_HSR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_HSR_unique.table_route_id '||r_HSR_unique.table_route_id,10);
       hr_utility.set_location(' r_HSR_unique.information1 '||r_HSR_unique.information1,10);
       hr_utility.set_location( 'r_HSR_unique.information2 '||r_HSR_unique.information2,10);
       hr_utility.set_location( 'r_HSR_unique.information3 '||r_HSR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_HSR_min_max_dates(r_HSR_unique.table_route_id, r_HSR_unique.information1 ) ;
       fetch c_HSR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_HSR_unique.information2);
       open c_HSR(r_HSR_unique.table_route_id,
                r_HSR_unique.information1,
                r_HSR_unique.information2,
                r_HSR_unique.information3 ) ;
       --
       fetch c_HSR into r_HSR ;
       --
       close c_HSR ;
       --
       l_dml_operation:= r_HSR_unique.dml_operation ;
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_HSR.INFORMATION262,l_dml_operation);
       l_ORDR_NUM         := r_HSR.INFORMATION257;
       l_EXCLD_FLAG      := r_HSR.information11;
       l_HRLY_SLRD_CD    := r_HSR.information12;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_HSR_unique.information2 and r_HSR_unique.information3 then
               l_update := true;
               if r_HSR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'HRLY_SLRD_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'HRLY_SLRD_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_HSR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_HSR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_HSR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('HSR',l_new_value,l_prefix || r_HSR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_HSR_min_max_dates%found then
           -- cursor to find the object
           open c_find_HSR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_hrly_slrd_rt_id, -999)  ) ;
           fetch c_find_HSR_in_target into l_new_value ;
           if c_find_HSR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_HRLY_SLRD_RT_F',
                  p_base_key_column => 'HRLY_SLRD_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_HSR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'HRLY_SLRD_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'HRLY_SLRD_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_HSR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_HSR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_HSR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_HSR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_HSR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_HSR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_HRLY_SLRD_RT_F CREATE_HRLY_SALARY_RATE ',20);
           BEN_HRLY_SALARY_RATE_API.CREATE_HRLY_SALARY_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_HSR.INFORMATION11
             ,P_HRLY_SLRD_CD      => r_HSR.INFORMATION12
             ,P_HRLY_SLRD_RT_ID      => l_hrly_slrd_rt_id
             ,P_HSR_ATTRIBUTE1      => r_HSR.INFORMATION111
             ,P_HSR_ATTRIBUTE10      => r_HSR.INFORMATION120
             ,P_HSR_ATTRIBUTE11      => r_HSR.INFORMATION121
             ,P_HSR_ATTRIBUTE12      => r_HSR.INFORMATION122
             ,P_HSR_ATTRIBUTE13      => r_HSR.INFORMATION123
             ,P_HSR_ATTRIBUTE14      => r_HSR.INFORMATION124
             ,P_HSR_ATTRIBUTE15      => r_HSR.INFORMATION125
             ,P_HSR_ATTRIBUTE16      => r_HSR.INFORMATION126
             ,P_HSR_ATTRIBUTE17      => r_HSR.INFORMATION127
             ,P_HSR_ATTRIBUTE18      => r_HSR.INFORMATION128
             ,P_HSR_ATTRIBUTE19      => r_HSR.INFORMATION129
             ,P_HSR_ATTRIBUTE2      => r_HSR.INFORMATION112
             ,P_HSR_ATTRIBUTE20      => r_HSR.INFORMATION130
             ,P_HSR_ATTRIBUTE21      => r_HSR.INFORMATION131
             ,P_HSR_ATTRIBUTE22      => r_HSR.INFORMATION132
             ,P_HSR_ATTRIBUTE23      => r_HSR.INFORMATION133
             ,P_HSR_ATTRIBUTE24      => r_HSR.INFORMATION134
             ,P_HSR_ATTRIBUTE25      => r_HSR.INFORMATION135
             ,P_HSR_ATTRIBUTE26      => r_HSR.INFORMATION136
             ,P_HSR_ATTRIBUTE27      => r_HSR.INFORMATION137
             ,P_HSR_ATTRIBUTE28      => r_HSR.INFORMATION138
             ,P_HSR_ATTRIBUTE29      => r_HSR.INFORMATION139
             ,P_HSR_ATTRIBUTE3      => r_HSR.INFORMATION113
             ,P_HSR_ATTRIBUTE30      => r_HSR.INFORMATION140
             ,P_HSR_ATTRIBUTE4      => r_HSR.INFORMATION114
             ,P_HSR_ATTRIBUTE5      => r_HSR.INFORMATION115
             ,P_HSR_ATTRIBUTE6      => r_HSR.INFORMATION116
             ,P_HSR_ATTRIBUTE7      => r_HSR.INFORMATION117
             ,P_HSR_ATTRIBUTE8      => r_HSR.INFORMATION118
             ,P_HSR_ATTRIBUTE9      => r_HSR.INFORMATION119
             ,P_HSR_ATTRIBUTE_CATEGORY      => r_HSR.INFORMATION110
             ,P_ORDR_NUM      => r_HSR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_hrly_slrd_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'HRLY_SLRD_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_HSR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_HRLY_SLRD_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_HSR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_HSR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_HSR.information3,
               p_effective_start_date  => r_HSR.information2,
               p_dml_operation         => r_HSR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_HRLY_SLRD_RT_ID   := r_HSR.information1;
             l_object_version_number := r_HSR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_HRLY_SLRD_RT_F UPDATE_HRLY_SALARY_RATE ',30);
           BEN_HRLY_SALARY_RATE_API.UPDATE_HRLY_SALARY_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_HSR.INFORMATION11
             ,P_HRLY_SLRD_CD      => r_HSR.INFORMATION12
             ,P_HRLY_SLRD_RT_ID      => l_hrly_slrd_rt_id
             ,P_HSR_ATTRIBUTE1      => r_HSR.INFORMATION111
             ,P_HSR_ATTRIBUTE10      => r_HSR.INFORMATION120
             ,P_HSR_ATTRIBUTE11      => r_HSR.INFORMATION121
             ,P_HSR_ATTRIBUTE12      => r_HSR.INFORMATION122
             ,P_HSR_ATTRIBUTE13      => r_HSR.INFORMATION123
             ,P_HSR_ATTRIBUTE14      => r_HSR.INFORMATION124
             ,P_HSR_ATTRIBUTE15      => r_HSR.INFORMATION125
             ,P_HSR_ATTRIBUTE16      => r_HSR.INFORMATION126
             ,P_HSR_ATTRIBUTE17      => r_HSR.INFORMATION127
             ,P_HSR_ATTRIBUTE18      => r_HSR.INFORMATION128
             ,P_HSR_ATTRIBUTE19      => r_HSR.INFORMATION129
             ,P_HSR_ATTRIBUTE2      => r_HSR.INFORMATION112
             ,P_HSR_ATTRIBUTE20      => r_HSR.INFORMATION130
             ,P_HSR_ATTRIBUTE21      => r_HSR.INFORMATION131
             ,P_HSR_ATTRIBUTE22      => r_HSR.INFORMATION132
             ,P_HSR_ATTRIBUTE23      => r_HSR.INFORMATION133
             ,P_HSR_ATTRIBUTE24      => r_HSR.INFORMATION134
             ,P_HSR_ATTRIBUTE25      => r_HSR.INFORMATION135
             ,P_HSR_ATTRIBUTE26      => r_HSR.INFORMATION136
             ,P_HSR_ATTRIBUTE27      => r_HSR.INFORMATION137
             ,P_HSR_ATTRIBUTE28      => r_HSR.INFORMATION138
             ,P_HSR_ATTRIBUTE29      => r_HSR.INFORMATION139
             ,P_HSR_ATTRIBUTE3      => r_HSR.INFORMATION113
             ,P_HSR_ATTRIBUTE30      => r_HSR.INFORMATION140
             ,P_HSR_ATTRIBUTE4      => r_HSR.INFORMATION114
             ,P_HSR_ATTRIBUTE5      => r_HSR.INFORMATION115
             ,P_HSR_ATTRIBUTE6      => r_HSR.INFORMATION116
             ,P_HSR_ATTRIBUTE7      => r_HSR.INFORMATION117
             ,P_HSR_ATTRIBUTE8      => r_HSR.INFORMATION118
             ,P_HSR_ATTRIBUTE9      => r_HSR.INFORMATION119
             ,P_HSR_ATTRIBUTE_CATEGORY      => r_HSR.INFORMATION110
             ,P_ORDR_NUM      => r_HSR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_HSR.information3) then
             --
             BEN_HRLY_SALARY_RATE_API.delete_HRLY_SALARY_RATE(
                --
                p_validate                       => false
                ,p_hrly_slrd_rt_id                   => l_hrly_slrd_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'HSR',r_hsr.information5 );
    --
 end create_HSR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_GRR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_GRR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_GRADE_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_GRR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_GRADE_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_GRR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_GRR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_GRR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     GRR.grade_rt_id new_value
   from BEN_GRADE_RT_F GRR
   where
   GRR.GRADE_ID     = l_GRADE_ID  and
   GRR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   GRR.ORDR_NUM           = l_ORDR_NUM and
   GRR.business_group_id  = c_business_group_id
   and   GRR.grade_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_GRADE_RT_F GRR1
                where
                GRR1.GRADE_ID     = l_GRADE_ID  and
                GRR1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                GRR1.ORDR_NUM           = l_ORDR_NUM and
                GRR1.business_group_id  = c_business_group_id
                and   GRR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_GRADE_RT_F GRR2
                where
                GRR2.GRADE_ID     = l_GRADE_ID  and
                GRR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                GRR2.ORDR_NUM           = l_ORDR_NUM and
                GRR2.business_group_id  = c_business_group_id
                and   GRR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_GRR                     c_GRR%rowtype;
   l_grade_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_GRR_unique in c_unique_GRR('GRR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_GRR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_GRR_unique.table_route_id '||r_GRR_unique.table_route_id,10);
       hr_utility.set_location(' r_GRR_unique.information1 '||r_GRR_unique.information1,10);
       hr_utility.set_location( 'r_GRR_unique.information2 '||r_GRR_unique.information2,10);
       hr_utility.set_location( 'r_GRR_unique.information3 '||r_GRR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_GRR_min_max_dates(r_GRR_unique.table_route_id, r_GRR_unique.information1 ) ;
       fetch c_GRR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_GRR_unique.information2);
       open c_GRR(r_GRR_unique.table_route_id,
                r_GRR_unique.information1,
                r_GRR_unique.information2,
                r_GRR_unique.information3 ) ;
       --
       fetch c_GRR into r_GRR ;
       --
       close c_GRR ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_GRADE_ID := r_GRR.information176;
       else
         l_GRADE_ID := r_GRR.information174;
       end if;
       --
       l_dml_operation := r_GRR_unique.dml_operation ;
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_GRR.INFORMATION262,l_dml_operation);
       l_ORDR_NUM        := r_GRR.INFORMATION260;
       l_EXCLD_FLAG      := r_GRR.INFORMATION11;
       --
       if l_GRADE_ID is null then
         close c_GRR_min_max_dates;
         --
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_GRR.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'GRR'
                     ,p_child_data           => r_GRR.information173 );
            --
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_GRR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_GRR_unique.information2 and r_GRR_unique.information3 then
               l_update := true;
               if r_GRR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'GRADE_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'GRADE_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_GRR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_GRR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_GRR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  --log_data('GRR',l_new_value,l_prefix || r_GRR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_GRR_min_max_dates%found then
              -- cursor to find the object
              open c_find_GRR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_grade_rt_id, -999)  ) ;
              fetch c_find_GRR_in_target into l_new_value ;
              if c_find_GRR_in_target%found then
                --
            --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_GRADE_RT_F',
                  p_base_key_column => 'GRADE_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_GRR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'GRADE_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'GRADE_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_GRR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_GRR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_GRR_in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_GRR_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_GRR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_GRR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_GRADE_RT_F CREATE_GRADE_RATE ',20);
             BEN_GRADE_RATE_API.CREATE_GRADE_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_GRR.INFORMATION11
             ,P_GRADE_ID      => l_GRADE_ID
             ,P_GRADE_RT_ID      => l_grade_rt_id
             ,P_GRR_ATTRIBUTE1      => r_GRR.INFORMATION111
             ,P_GRR_ATTRIBUTE10      => r_GRR.INFORMATION120
             ,P_GRR_ATTRIBUTE11      => r_GRR.INFORMATION121
             ,P_GRR_ATTRIBUTE12      => r_GRR.INFORMATION122
             ,P_GRR_ATTRIBUTE13      => r_GRR.INFORMATION123
             ,P_GRR_ATTRIBUTE14      => r_GRR.INFORMATION124
             ,P_GRR_ATTRIBUTE15      => r_GRR.INFORMATION125
             ,P_GRR_ATTRIBUTE16      => r_GRR.INFORMATION126
             ,P_GRR_ATTRIBUTE17      => r_GRR.INFORMATION127
             ,P_GRR_ATTRIBUTE18      => r_GRR.INFORMATION128
             ,P_GRR_ATTRIBUTE19      => r_GRR.INFORMATION129
             ,P_GRR_ATTRIBUTE2      => r_GRR.INFORMATION112
             ,P_GRR_ATTRIBUTE20      => r_GRR.INFORMATION130
             ,P_GRR_ATTRIBUTE21      => r_GRR.INFORMATION131
             ,P_GRR_ATTRIBUTE22      => r_GRR.INFORMATION132
             ,P_GRR_ATTRIBUTE23      => r_GRR.INFORMATION133
             ,P_GRR_ATTRIBUTE24      => r_GRR.INFORMATION134
             ,P_GRR_ATTRIBUTE25      => r_GRR.INFORMATION135
             ,P_GRR_ATTRIBUTE26      => r_GRR.INFORMATION136
             ,P_GRR_ATTRIBUTE27      => r_GRR.INFORMATION137
             ,P_GRR_ATTRIBUTE28      => r_GRR.INFORMATION138
             ,P_GRR_ATTRIBUTE29      => r_GRR.INFORMATION139
             ,P_GRR_ATTRIBUTE3      => r_GRR.INFORMATION113
             ,P_GRR_ATTRIBUTE30      => r_GRR.INFORMATION140
             ,P_GRR_ATTRIBUTE4      => r_GRR.INFORMATION114
             ,P_GRR_ATTRIBUTE5      => r_GRR.INFORMATION115
             ,P_GRR_ATTRIBUTE6      => r_GRR.INFORMATION116
             ,P_GRR_ATTRIBUTE7      => r_GRR.INFORMATION117
             ,P_GRR_ATTRIBUTE8      => r_GRR.INFORMATION118
             ,P_GRR_ATTRIBUTE9      => r_GRR.INFORMATION119
             ,P_GRR_ATTRIBUTE_CATEGORY      => r_GRR.INFORMATION110
             ,P_ORDR_NUM      => r_GRR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              );

              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_grade_rt_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'GRADE_RT_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_GRR.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_GRADE_RT_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_GRR_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
              --
            else
              --
              -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_GRR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_GRR.information3,
               p_effective_start_date  => r_GRR.information2,
               p_dml_operation         => r_GRR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_GRADE_RT_ID   := r_GRR.information1;
             l_object_version_number := r_GRR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_GRADE_RT_F UPDATE_GRADE_RATE ',30);
              BEN_GRADE_RATE_API.UPDATE_GRADE_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
            ,P_EXCLD_FLAG      => r_GRR.INFORMATION11
             ,P_GRADE_ID      => l_GRADE_ID
             ,P_GRADE_RT_ID      => l_grade_rt_id
             ,P_GRR_ATTRIBUTE1      => r_GRR.INFORMATION111
             ,P_GRR_ATTRIBUTE10      => r_GRR.INFORMATION120
             ,P_GRR_ATTRIBUTE11      => r_GRR.INFORMATION121
             ,P_GRR_ATTRIBUTE12      => r_GRR.INFORMATION122
             ,P_GRR_ATTRIBUTE13      => r_GRR.INFORMATION123
             ,P_GRR_ATTRIBUTE14      => r_GRR.INFORMATION124
             ,P_GRR_ATTRIBUTE15      => r_GRR.INFORMATION125
             ,P_GRR_ATTRIBUTE16      => r_GRR.INFORMATION126
             ,P_GRR_ATTRIBUTE17      => r_GRR.INFORMATION127
             ,P_GRR_ATTRIBUTE18      => r_GRR.INFORMATION128
             ,P_GRR_ATTRIBUTE19      => r_GRR.INFORMATION129
             ,P_GRR_ATTRIBUTE2      => r_GRR.INFORMATION112
             ,P_GRR_ATTRIBUTE20      => r_GRR.INFORMATION130
             ,P_GRR_ATTRIBUTE21      => r_GRR.INFORMATION131
             ,P_GRR_ATTRIBUTE22      => r_GRR.INFORMATION132
             ,P_GRR_ATTRIBUTE23      => r_GRR.INFORMATION133
             ,P_GRR_ATTRIBUTE24      => r_GRR.INFORMATION134
             ,P_GRR_ATTRIBUTE25      => r_GRR.INFORMATION135
             ,P_GRR_ATTRIBUTE26      => r_GRR.INFORMATION136
             ,P_GRR_ATTRIBUTE27      => r_GRR.INFORMATION137
             ,P_GRR_ATTRIBUTE28      => r_GRR.INFORMATION138
             ,P_GRR_ATTRIBUTE29      => r_GRR.INFORMATION139
             ,P_GRR_ATTRIBUTE3      => r_GRR.INFORMATION113
             ,P_GRR_ATTRIBUTE30      => r_GRR.INFORMATION140
             ,P_GRR_ATTRIBUTE4      => r_GRR.INFORMATION114
             ,P_GRR_ATTRIBUTE5      => r_GRR.INFORMATION115
             ,P_GRR_ATTRIBUTE6      => r_GRR.INFORMATION116
             ,P_GRR_ATTRIBUTE7      => r_GRR.INFORMATION117
             ,P_GRR_ATTRIBUTE8      => r_GRR.INFORMATION118
             ,P_GRR_ATTRIBUTE9      => r_GRR.INFORMATION119
             ,P_GRR_ATTRIBUTE_CATEGORY      => r_GRR.INFORMATION110
             ,P_ORDR_NUM      => r_GRR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
              );
              --
              end if;
            end if;
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_GRR.information3) then
                --
                BEN_GRADE_RATE_API.delete_GRADE_RATE(
                   --
                   p_validate                       => false
                   ,p_grade_rt_id                   => l_grade_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
          end if;
          --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'GRR',r_grr.information5 );
    --
 end create_GRR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_FTR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_FTR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   l_FL_TM_PT_TM_CD   varchar2(30);
   --
   cursor c_unique_FTR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_FL_TM_PT_TM_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_FTR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_FTR(c_table_route_id  number,
                c_information1   Number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_FTR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     FTR.fl_tm_pt_tm_rt_id new_value
   from BEN_FL_TM_PT_TM_RT_F FTR
   where
   FTR.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
   FTR.FL_TM_PT_TM_CD     = l_FL_TM_PT_TM_CD and
   FTR.ORDR_NUM           = l_ORDR_NUM and
   FTR.business_group_id  = c_business_group_id
   and   FTR.fl_tm_pt_tm_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_FL_TM_PT_TM_RT_F FTR1
                where
                FTR1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                FTR1.FL_TM_PT_TM_CD  = l_FL_TM_PT_TM_CD and
                FTR1.ORDR_NUM           = l_ORDR_NUM and
                FTR1.business_group_id  = c_business_group_id
                and   FTR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_FL_TM_PT_TM_RT_F FTR2
                where
                FTR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                FTR2.FL_TM_PT_TM_CD = l_FL_TM_PT_TM_CD and
                FTR2.ORDR_NUM           = l_ORDR_NUM and
                FTR2.business_group_id  = c_business_group_id
                and   FTR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_FTR                     c_FTR%rowtype;
   l_fl_tm_pt_tm_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_FTR_unique in c_unique_FTR('FTR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_FTR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_FTR_unique.table_route_id '||r_FTR_unique.table_route_id,10);
       hr_utility.set_location(' r_FTR_unique.information1 '||r_FTR_unique.information1,10);
       hr_utility.set_location( 'r_FTR_unique.information2 '||r_FTR_unique.information2,10);
       hr_utility.set_location( 'r_FTR_unique.information3 '||r_FTR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_FTR_min_max_dates(r_FTR_unique.table_route_id, r_FTR_unique.information1 ) ;
       fetch c_FTR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_FTR_unique.information2);
       open c_FTR(r_FTR_unique.table_route_id,
                r_FTR_unique.information1,
                r_FTR_unique.information2,
                r_FTR_unique.information3 ) ;
       --
       fetch c_FTR into r_FTR ;
       --
       close c_FTR ;
       --
       l_VRBL_RT_PRFL_ID  := get_fk('VRBL_RT_PRFL_ID', r_FTR.INFORMATION262,r_FTR_unique.dml_operation);
       l_ORDR_NUM         := r_FTR.INFORMATION260;
       l_EXCLD_FLAG       := r_FTR.information11;
       l_FL_TM_PT_TM_CD   := r_FTR.information12;
       --
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_FTR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_FTR_unique.information2 and r_FTR_unique.information3 then
               l_update := true;
               if r_FTR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'FL_TM_PT_TM_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'FL_TM_PT_TM_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_FTR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_FTR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_FTR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  --log_data('FTR',l_new_value,l_prefix || r_FTR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_FTR_min_max_dates%found then
           -- cursor to find the object
           open c_find_FTR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_fl_tm_pt_tm_rt_id, -999)  ) ;
           fetch c_find_FTR_in_target into l_new_value ;
           if c_find_FTR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_FL_TM_PT_TM_RT_F',
                  p_base_key_column => 'FL_TM_PT_TM_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_FTR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'FL_TM_PT_TM_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'FL_TM_PT_TM_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_FTR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_FTR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_FTR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_FTR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_FTR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_FTR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_FL_TM_PT_TM_RT_F CREATE_FULL_PRT_TIME_RATE ',20);
           BEN_FULL_PRT_TIME_RATE_API.CREATE_FULL_PRT_TIME_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_EXCLD_FLAG      => r_FTR.INFORMATION11
             ,P_FL_TM_PT_TM_CD      => r_FTR.INFORMATION12
             ,P_FL_TM_PT_TM_RT_ID      => l_fl_tm_pt_tm_rt_id
             ,P_FTR_ATTRIBUTE1      => r_FTR.INFORMATION111
             ,P_FTR_ATTRIBUTE10      => r_FTR.INFORMATION120
             ,P_FTR_ATTRIBUTE11      => r_FTR.INFORMATION121
             ,P_FTR_ATTRIBUTE12      => r_FTR.INFORMATION122
             ,P_FTR_ATTRIBUTE13      => r_FTR.INFORMATION123
             ,P_FTR_ATTRIBUTE14      => r_FTR.INFORMATION124
             ,P_FTR_ATTRIBUTE15      => r_FTR.INFORMATION125
             ,P_FTR_ATTRIBUTE16      => r_FTR.INFORMATION126
             ,P_FTR_ATTRIBUTE17      => r_FTR.INFORMATION127
             ,P_FTR_ATTRIBUTE18      => r_FTR.INFORMATION128
             ,P_FTR_ATTRIBUTE19      => r_FTR.INFORMATION129
             ,P_FTR_ATTRIBUTE2      => r_FTR.INFORMATION112
             ,P_FTR_ATTRIBUTE20      => r_FTR.INFORMATION130
             ,P_FTR_ATTRIBUTE21      => r_FTR.INFORMATION131
             ,P_FTR_ATTRIBUTE22      => r_FTR.INFORMATION132
             ,P_FTR_ATTRIBUTE23      => r_FTR.INFORMATION133
             ,P_FTR_ATTRIBUTE24      => r_FTR.INFORMATION134
             ,P_FTR_ATTRIBUTE25      => r_FTR.INFORMATION135
             ,P_FTR_ATTRIBUTE26      => r_FTR.INFORMATION136
             ,P_FTR_ATTRIBUTE27      => r_FTR.INFORMATION137
             ,P_FTR_ATTRIBUTE28      => r_FTR.INFORMATION138
             ,P_FTR_ATTRIBUTE29      => r_FTR.INFORMATION139
             ,P_FTR_ATTRIBUTE3      => r_FTR.INFORMATION113
             ,P_FTR_ATTRIBUTE30      => r_FTR.INFORMATION140
             ,P_FTR_ATTRIBUTE4      => r_FTR.INFORMATION114
             ,P_FTR_ATTRIBUTE5      => r_FTR.INFORMATION115
             ,P_FTR_ATTRIBUTE6      => r_FTR.INFORMATION116
             ,P_FTR_ATTRIBUTE7      => r_FTR.INFORMATION117
             ,P_FTR_ATTRIBUTE8      => r_FTR.INFORMATION118
             ,P_FTR_ATTRIBUTE9      => r_FTR.INFORMATION119
             ,P_FTR_ATTRIBUTE_CATEGORY      => r_FTR.INFORMATION110
             ,P_ORDR_NUM      => r_FTR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_fl_tm_pt_tm_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'FL_TM_PT_TM_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_FTR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_FL_TM_PT_TM_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_FTR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_FTR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_FTR.information3,
               p_effective_start_date  => r_FTR.information2,
               p_dml_operation         => r_FTR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_FL_TM_PT_TM_RT_ID   := r_FTR.information1;
             l_object_version_number := r_FTR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_FL_TM_PT_TM_RT_F UPDATE_FULL_PRT_TIME_RATE ',30);
           BEN_FULL_PRT_TIME_RATE_API.UPDATE_FULL_PRT_TIME_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_FTR.INFORMATION11
             ,P_FL_TM_PT_TM_CD      => r_FTR.INFORMATION12
             ,P_FL_TM_PT_TM_RT_ID      => l_fl_tm_pt_tm_rt_id
             ,P_FTR_ATTRIBUTE1      => r_FTR.INFORMATION111
             ,P_FTR_ATTRIBUTE10      => r_FTR.INFORMATION120
             ,P_FTR_ATTRIBUTE11      => r_FTR.INFORMATION121
             ,P_FTR_ATTRIBUTE12      => r_FTR.INFORMATION122
             ,P_FTR_ATTRIBUTE13      => r_FTR.INFORMATION123
             ,P_FTR_ATTRIBUTE14      => r_FTR.INFORMATION124
             ,P_FTR_ATTRIBUTE15      => r_FTR.INFORMATION125
             ,P_FTR_ATTRIBUTE16      => r_FTR.INFORMATION126
             ,P_FTR_ATTRIBUTE17      => r_FTR.INFORMATION127
             ,P_FTR_ATTRIBUTE18      => r_FTR.INFORMATION128
             ,P_FTR_ATTRIBUTE19      => r_FTR.INFORMATION129
             ,P_FTR_ATTRIBUTE2      => r_FTR.INFORMATION112
             ,P_FTR_ATTRIBUTE20      => r_FTR.INFORMATION130
             ,P_FTR_ATTRIBUTE21      => r_FTR.INFORMATION131
             ,P_FTR_ATTRIBUTE22      => r_FTR.INFORMATION132
             ,P_FTR_ATTRIBUTE23      => r_FTR.INFORMATION133
             ,P_FTR_ATTRIBUTE24      => r_FTR.INFORMATION134
             ,P_FTR_ATTRIBUTE25      => r_FTR.INFORMATION135
             ,P_FTR_ATTRIBUTE26      => r_FTR.INFORMATION136
             ,P_FTR_ATTRIBUTE27      => r_FTR.INFORMATION137
             ,P_FTR_ATTRIBUTE28      => r_FTR.INFORMATION138
             ,P_FTR_ATTRIBUTE29      => r_FTR.INFORMATION139
             ,P_FTR_ATTRIBUTE3      => r_FTR.INFORMATION113
             ,P_FTR_ATTRIBUTE30      => r_FTR.INFORMATION140
             ,P_FTR_ATTRIBUTE4      => r_FTR.INFORMATION114
             ,P_FTR_ATTRIBUTE5      => r_FTR.INFORMATION115
             ,P_FTR_ATTRIBUTE6      => r_FTR.INFORMATION116
             ,P_FTR_ATTRIBUTE7      => r_FTR.INFORMATION117
             ,P_FTR_ATTRIBUTE8      => r_FTR.INFORMATION118
             ,P_FTR_ATTRIBUTE9      => r_FTR.INFORMATION119
             ,P_FTR_ATTRIBUTE_CATEGORY      => r_FTR.INFORMATION110
             ,P_ORDR_NUM      => r_FTR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_FTR.information3) then
             --
             BEN_FULL_PRT_TIME_RATE_API.delete_FULL_PRT_TIME_RATE(
                --
                p_validate                       => false
                ,p_fl_tm_pt_tm_rt_id                   => l_fl_tm_pt_tm_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'FTR',r_ftr.information5 );
    --
 end create_FTR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_BUR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_BUR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_BRGNG_UNIT_CD    varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_BUR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_BRGNG_UNIT_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_BUR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_BUR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_BUR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     BUR.brgng_unit_rt_id new_value
   from BEN_BRGNG_UNIT_RT_F BUR
   where
   BUR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   BUR.BRGNG_UNIT_CD         = l_BRGNG_UNIT_CD and
   BUR.ORDR_NUM           = l_ORDR_NUM and
   BUR.business_group_id  = c_business_group_id
   and   BUR.brgng_unit_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_BRGNG_UNIT_RT_F BUR1
                where
                BUR1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                BUR1.BRGNG_UNIT_CD         = l_BRGNG_UNIT_CD and
                BUR1.ORDR_NUM           = l_ORDR_NUM and
                BUR1.business_group_id  = c_business_group_id
                and   BUR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_BRGNG_UNIT_RT_F BUR2
                where
                BUR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                BUR2.BRGNG_UNIT_CD         = l_BRGNG_UNIT_CD and
                BUR2.ORDR_NUM           = l_ORDR_NUM and
                BUR2.business_group_id  = c_business_group_id
                and   BUR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_BUR                     c_BUR%rowtype;
   l_brgng_unit_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_BUR_unique in c_unique_BUR('BUR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_BUR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_BUR_unique.table_route_id '||r_BUR_unique.table_route_id,10);
       hr_utility.set_location(' r_BUR_unique.information1 '||r_BUR_unique.information1,10);
       hr_utility.set_location( 'r_BUR_unique.information2 '||r_BUR_unique.information2,10);
       hr_utility.set_location( 'r_BUR_unique.information3 '||r_BUR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_BUR_min_max_dates(r_BUR_unique.table_route_id, r_BUR_unique.information1 ) ;
       fetch c_BUR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_BUR_unique.information2);
       open c_BUR(r_BUR_unique.table_route_id,
                r_BUR_unique.information1,
                r_BUR_unique.information2,
                r_BUR_unique.information3 ) ;
       --
       fetch c_BUR into r_BUR ;
       --
       close c_BUR ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_BUR.INFORMATION262,r_BUR_unique.dml_operation);
       l_ORDR_NUM         := r_BUR.INFORMATION260;
       l_BRGNG_UNIT_CD      := r_BUR.INFORMATION12;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_BUR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_BUR_unique.information2 and r_BUR_unique.information3 then
               l_update := true;
               if r_BUR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'BRGNG_UNIT_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'BRGNG_UNIT_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_BUR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_BUR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_BUR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  --log_data('BUR',l_new_value,l_prefix || r_BUR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_BUR_min_max_dates%found then
           -- cursor to find the object
           open c_find_BUR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_brgng_unit_rt_id, -999)  ) ;
           fetch c_find_BUR_in_target into l_new_value ;
           if c_find_BUR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_BRGNG_UNIT_RT_F',
                  p_base_key_column => 'BRGNG_UNIT_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_BUR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'BRGNG_UNIT_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'BRGNG_UNIT_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_BUR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_BUR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_BUR_in_target ;
         --
         end if;
       end if ;
       end if;
       --
       close c_BUR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_BUR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_BUR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_BRGNG_UNIT_RT_F CREATE_BARGAINING_UNIT_RT ',20);
           BEN_BARGAINING_UNIT_RT_API.CREATE_BARGAINING_UNIT_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BRGNG_UNIT_CD      => r_BUR.INFORMATION12
             ,P_BRGNG_UNIT_RT_ID      => l_brgng_unit_rt_id
             ,P_BUR_ATTRIBUTE1      => r_BUR.INFORMATION111
             ,P_BUR_ATTRIBUTE10      => r_BUR.INFORMATION120
             ,P_BUR_ATTRIBUTE11      => r_BUR.INFORMATION121
             ,P_BUR_ATTRIBUTE12      => r_BUR.INFORMATION122
             ,P_BUR_ATTRIBUTE13      => r_BUR.INFORMATION123
             ,P_BUR_ATTRIBUTE14      => r_BUR.INFORMATION124
             ,P_BUR_ATTRIBUTE15      => r_BUR.INFORMATION125
             ,P_BUR_ATTRIBUTE16      => r_BUR.INFORMATION126
             ,P_BUR_ATTRIBUTE17      => r_BUR.INFORMATION127
             ,P_BUR_ATTRIBUTE18      => r_BUR.INFORMATION128
             ,P_BUR_ATTRIBUTE19      => r_BUR.INFORMATION129
             ,P_BUR_ATTRIBUTE2      => r_BUR.INFORMATION112
             ,P_BUR_ATTRIBUTE20      => r_BUR.INFORMATION130
             ,P_BUR_ATTRIBUTE21      => r_BUR.INFORMATION131
             ,P_BUR_ATTRIBUTE22      => r_BUR.INFORMATION132
             ,P_BUR_ATTRIBUTE23      => r_BUR.INFORMATION133
             ,P_BUR_ATTRIBUTE24      => r_BUR.INFORMATION134
             ,P_BUR_ATTRIBUTE25      => r_BUR.INFORMATION135
             ,P_BUR_ATTRIBUTE26      => r_BUR.INFORMATION136
             ,P_BUR_ATTRIBUTE27      => r_BUR.INFORMATION137
             ,P_BUR_ATTRIBUTE28      => r_BUR.INFORMATION138
             ,P_BUR_ATTRIBUTE29      => r_BUR.INFORMATION139
             ,P_BUR_ATTRIBUTE3      => r_BUR.INFORMATION113
             ,P_BUR_ATTRIBUTE30      => r_BUR.INFORMATION140
             ,P_BUR_ATTRIBUTE4      => r_BUR.INFORMATION114
             ,P_BUR_ATTRIBUTE5      => r_BUR.INFORMATION115
             ,P_BUR_ATTRIBUTE6      => r_BUR.INFORMATION116
             ,P_BUR_ATTRIBUTE7      => r_BUR.INFORMATION117
             ,P_BUR_ATTRIBUTE8      => r_BUR.INFORMATION118
             ,P_BUR_ATTRIBUTE9      => r_BUR.INFORMATION119
             ,P_BUR_ATTRIBUTE_CATEGORY      => r_BUR.INFORMATION110
             ,P_EXCLD_FLAG      => r_BUR.INFORMATION11
             ,P_ORDR_NUM      => r_BUR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_brgng_unit_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'BRGNG_UNIT_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_BUR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_BRGNG_UNIT_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_BUR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_BUR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_BUR.information3,
               p_effective_start_date  => r_BUR.information2,
               p_dml_operation         => r_BUR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_BRGNG_UNIT_RT_ID   := r_BUR.information1;
             l_object_version_number := r_BUR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_BRGNG_UNIT_RT_F UPDATE_BARGAINING_UNIT_RT ',30);
           BEN_BARGAINING_UNIT_RT_API.UPDATE_BARGAINING_UNIT_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_BRGNG_UNIT_CD      => r_BUR.INFORMATION12
             ,P_BRGNG_UNIT_RT_ID      => l_brgng_unit_rt_id
             ,P_BUR_ATTRIBUTE1      => r_BUR.INFORMATION111
             ,P_BUR_ATTRIBUTE10      => r_BUR.INFORMATION120
             ,P_BUR_ATTRIBUTE11      => r_BUR.INFORMATION121
             ,P_BUR_ATTRIBUTE12      => r_BUR.INFORMATION122
             ,P_BUR_ATTRIBUTE13      => r_BUR.INFORMATION123
             ,P_BUR_ATTRIBUTE14      => r_BUR.INFORMATION124
             ,P_BUR_ATTRIBUTE15      => r_BUR.INFORMATION125
             ,P_BUR_ATTRIBUTE16      => r_BUR.INFORMATION126
             ,P_BUR_ATTRIBUTE17      => r_BUR.INFORMATION127
             ,P_BUR_ATTRIBUTE18      => r_BUR.INFORMATION128
             ,P_BUR_ATTRIBUTE19      => r_BUR.INFORMATION129
             ,P_BUR_ATTRIBUTE2      => r_BUR.INFORMATION112
             ,P_BUR_ATTRIBUTE20      => r_BUR.INFORMATION130
             ,P_BUR_ATTRIBUTE21      => r_BUR.INFORMATION131
             ,P_BUR_ATTRIBUTE22      => r_BUR.INFORMATION132
             ,P_BUR_ATTRIBUTE23      => r_BUR.INFORMATION133
             ,P_BUR_ATTRIBUTE24      => r_BUR.INFORMATION134
             ,P_BUR_ATTRIBUTE25      => r_BUR.INFORMATION135
             ,P_BUR_ATTRIBUTE26      => r_BUR.INFORMATION136
             ,P_BUR_ATTRIBUTE27      => r_BUR.INFORMATION137
             ,P_BUR_ATTRIBUTE28      => r_BUR.INFORMATION138
             ,P_BUR_ATTRIBUTE29      => r_BUR.INFORMATION139
             ,P_BUR_ATTRIBUTE3      => r_BUR.INFORMATION113
             ,P_BUR_ATTRIBUTE30      => r_BUR.INFORMATION140
             ,P_BUR_ATTRIBUTE4      => r_BUR.INFORMATION114
             ,P_BUR_ATTRIBUTE5      => r_BUR.INFORMATION115
             ,P_BUR_ATTRIBUTE6      => r_BUR.INFORMATION116
             ,P_BUR_ATTRIBUTE7      => r_BUR.INFORMATION117
             ,P_BUR_ATTRIBUTE8      => r_BUR.INFORMATION118
             ,P_BUR_ATTRIBUTE9      => r_BUR.INFORMATION119
             ,P_BUR_ATTRIBUTE_CATEGORY      => r_BUR.INFORMATION110
             ,P_EXCLD_FLAG      => r_BUR.INFORMATION11
             ,P_ORDR_NUM      => r_BUR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_BUR.information3) then
             --
             BEN_BARGAINING_UNIT_RT_API.delete_BARGAINING_UNIT_RT(
                --
                p_validate                       => false
                ,p_brgng_unit_rt_id                   => l_brgng_unit_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'BUR',r_bur.information5 );
    --
 end create_BUR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ESR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ESR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ASSIGNMENT_STATUS_TYPE_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_ESR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_EE_STAT_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ESR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ESR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ESR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ESR.ee_stat_rt_id new_value
   from BEN_EE_STAT_RT_F ESR
   where
   ESR.ASSIGNMENT_STATUS_TYPE_ID     = l_ASSIGNMENT_STATUS_TYPE_ID  and
   ESR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   ESR.ORDR_NUM           = l_ORDR_NUM and
   ESR.business_group_id  = c_business_group_id
   and   ESR.ee_stat_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_EE_STAT_RT_F ESR1
                where
                ESR1.ASSIGNMENT_STATUS_TYPE_ID     = l_ASSIGNMENT_STATUS_TYPE_ID  and
                ESR1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                ESR1.ORDR_NUM           = l_ORDR_NUM and
                ESR1.business_group_id  = c_business_group_id
                and   ESR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_EE_STAT_RT_F ESR2
                where
                ESR2.ASSIGNMENT_STATUS_TYPE_ID     = l_ASSIGNMENT_STATUS_TYPE_ID  and
                ESR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                ESR2.ORDR_NUM           = l_ORDR_NUM and
                ESR2.business_group_id  = c_business_group_id
                and   ESR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ESR                     c_ESR%rowtype;
   l_ee_stat_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ESR_unique in c_unique_ESR('ESR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ESR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ESR_unique.table_route_id '||r_ESR_unique.table_route_id,10);
       hr_utility.set_location(' r_ESR_unique.information1 '||r_ESR_unique.information1,10);
       hr_utility.set_location( 'r_ESR_unique.information2 '||r_ESR_unique.information2,10);
       hr_utility.set_location( 'r_ESR_unique.information3 '||r_ESR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ESR_min_max_dates(r_ESR_unique.table_route_id, r_ESR_unique.information1 ) ;
       fetch c_ESR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ESR_unique.information2);
       open c_ESR(r_ESR_unique.table_route_id,
                r_ESR_unique.information1,
                r_ESR_unique.information2,
                r_ESR_unique.information3 ) ;
       --
       fetch c_ESR into r_ESR ;
       --
       close c_ESR ;

       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ASSIGNMENT_STATUS_TYPE_ID := r_ESR.information176;
       else
         l_ASSIGNMENT_STATUS_TYPE_ID := r_ESR.information174;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_ESR.INFORMATION262,r_ESR_unique.dml_operation);
       l_ORDR_NUM         := r_ESR.INFORMATION257;
       l_EXCLD_FLAG      := r_ESR.INFORMATION11;

       if l_ASSIGNMENT_STATUS_TYPE_ID is null then
         close c_ESR_min_max_dates;
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_ESR.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'ESR'
                     ,p_child_data           => r_ESR.information173 );
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ESR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ESR_unique.information2 and r_ESR_unique.information3 then
               l_update := true;
               if r_ESR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'EE_STAT_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'EE_STAT_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ESR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ESR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ESR',l_new_value,l_prefix || r_ESR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END

         if p_reuse_object_flag = 'Y' then
           if c_ESR_min_max_dates%found then
              -- cursor to find the object
              open c_find_ESR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_ee_stat_rt_id, -999)  ) ;
              fetch c_find_ESR_in_target into l_new_value ;
              if c_find_ESR_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_EE_STAT_RT_F',
                  p_base_key_column => 'EE_STAT_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_ESR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'EE_STAT_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'EE_STAT_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_ESR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ESR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_ESR_in_target ;
           --
           end if;
         end if ;
         end if;
         --
         close c_ESR_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_ESR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_ESR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_EE_STAT_RT_F CREATE_EMPLOYEE_STATUS_RT ',20);
             BEN_EMPLOYEE_STATUS_RT_API.CREATE_EMPLOYEE_STATUS_RT(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_ASSIGNMENT_STATUS_TYPE_ID      => l_ASSIGNMENT_STATUS_TYPE_ID
             ,P_EE_STAT_RT_ID      => l_ee_stat_rt_id
             ,P_ESR_ATTRIBUTE1      => r_ESR.INFORMATION111
             ,P_ESR_ATTRIBUTE10      => r_ESR.INFORMATION120
             ,P_ESR_ATTRIBUTE11      => r_ESR.INFORMATION121
             ,P_ESR_ATTRIBUTE12      => r_ESR.INFORMATION122
             ,P_ESR_ATTRIBUTE13      => r_ESR.INFORMATION123
             ,P_ESR_ATTRIBUTE14      => r_ESR.INFORMATION124
             ,P_ESR_ATTRIBUTE15      => r_ESR.INFORMATION125
             ,P_ESR_ATTRIBUTE16      => r_ESR.INFORMATION126
             ,P_ESR_ATTRIBUTE17      => r_ESR.INFORMATION127
             ,P_ESR_ATTRIBUTE18      => r_ESR.INFORMATION128
             ,P_ESR_ATTRIBUTE19      => r_ESR.INFORMATION129
             ,P_ESR_ATTRIBUTE2      => r_ESR.INFORMATION112
             ,P_ESR_ATTRIBUTE20      => r_ESR.INFORMATION130
             ,P_ESR_ATTRIBUTE21      => r_ESR.INFORMATION131
             ,P_ESR_ATTRIBUTE22      => r_ESR.INFORMATION132
             ,P_ESR_ATTRIBUTE23      => r_ESR.INFORMATION133
             ,P_ESR_ATTRIBUTE24      => r_ESR.INFORMATION134
             ,P_ESR_ATTRIBUTE25      => r_ESR.INFORMATION135
             ,P_ESR_ATTRIBUTE26      => r_ESR.INFORMATION136
             ,P_ESR_ATTRIBUTE27      => r_ESR.INFORMATION137
             ,P_ESR_ATTRIBUTE28      => r_ESR.INFORMATION138
             ,P_ESR_ATTRIBUTE29      => r_ESR.INFORMATION139
             ,P_ESR_ATTRIBUTE3      => r_ESR.INFORMATION113
             ,P_ESR_ATTRIBUTE30      => r_ESR.INFORMATION140
             ,P_ESR_ATTRIBUTE4      => r_ESR.INFORMATION114
             ,P_ESR_ATTRIBUTE5      => r_ESR.INFORMATION115
             ,P_ESR_ATTRIBUTE6      => r_ESR.INFORMATION116
             ,P_ESR_ATTRIBUTE7      => r_ESR.INFORMATION117
             ,P_ESR_ATTRIBUTE8      => r_ESR.INFORMATION118
             ,P_ESR_ATTRIBUTE9      => r_ESR.INFORMATION119
             ,P_ESR_ATTRIBUTE_CATEGORY      => r_ESR.INFORMATION110
             ,P_EXCLD_FLAG      => r_ESR.INFORMATION11
             ,P_ORDR_NUM      => r_ESR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_ee_stat_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'EE_STAT_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_ESR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_EE_STAT_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ESR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ESR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ESR.information3,
               p_effective_start_date  => r_ESR.information2,
               p_dml_operation         => r_ESR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_EE_STAT_RT_ID   := r_ESR.information1;
             l_object_version_number := r_ESR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_EE_STAT_RT_F UPDATE_EMPLOYEE_STATUS_RT ',30);
             BEN_EMPLOYEE_STATUS_RT_API.UPDATE_EMPLOYEE_STATUS_RT(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_ASSIGNMENT_STATUS_TYPE_ID      => l_ASSIGNMENT_STATUS_TYPE_ID
             ,P_EE_STAT_RT_ID      => l_ee_stat_rt_id
             ,P_ESR_ATTRIBUTE1      => r_ESR.INFORMATION111
             ,P_ESR_ATTRIBUTE10      => r_ESR.INFORMATION120
             ,P_ESR_ATTRIBUTE11      => r_ESR.INFORMATION121
             ,P_ESR_ATTRIBUTE12      => r_ESR.INFORMATION122
             ,P_ESR_ATTRIBUTE13      => r_ESR.INFORMATION123
             ,P_ESR_ATTRIBUTE14      => r_ESR.INFORMATION124
             ,P_ESR_ATTRIBUTE15      => r_ESR.INFORMATION125
             ,P_ESR_ATTRIBUTE16      => r_ESR.INFORMATION126
             ,P_ESR_ATTRIBUTE17      => r_ESR.INFORMATION127
             ,P_ESR_ATTRIBUTE18      => r_ESR.INFORMATION128
             ,P_ESR_ATTRIBUTE19      => r_ESR.INFORMATION129
             ,P_ESR_ATTRIBUTE2      => r_ESR.INFORMATION112
             ,P_ESR_ATTRIBUTE20      => r_ESR.INFORMATION130
             ,P_ESR_ATTRIBUTE21      => r_ESR.INFORMATION131
             ,P_ESR_ATTRIBUTE22      => r_ESR.INFORMATION132
             ,P_ESR_ATTRIBUTE23      => r_ESR.INFORMATION133
             ,P_ESR_ATTRIBUTE24      => r_ESR.INFORMATION134
             ,P_ESR_ATTRIBUTE25      => r_ESR.INFORMATION135
             ,P_ESR_ATTRIBUTE26      => r_ESR.INFORMATION136
             ,P_ESR_ATTRIBUTE27      => r_ESR.INFORMATION137
             ,P_ESR_ATTRIBUTE28      => r_ESR.INFORMATION138
             ,P_ESR_ATTRIBUTE29      => r_ESR.INFORMATION139
             ,P_ESR_ATTRIBUTE3      => r_ESR.INFORMATION113
             ,P_ESR_ATTRIBUTE30      => r_ESR.INFORMATION140
             ,P_ESR_ATTRIBUTE4      => r_ESR.INFORMATION114
             ,P_ESR_ATTRIBUTE5      => r_ESR.INFORMATION115
             ,P_ESR_ATTRIBUTE6      => r_ESR.INFORMATION116
             ,P_ESR_ATTRIBUTE7      => r_ESR.INFORMATION117
             ,P_ESR_ATTRIBUTE8      => r_ESR.INFORMATION118
             ,P_ESR_ATTRIBUTE9      => r_ESR.INFORMATION119
             ,P_ESR_ATTRIBUTE_CATEGORY      => r_ESR.INFORMATION110
             ,P_EXCLD_FLAG      => r_ESR.INFORMATION11
             ,P_ORDR_NUM      => r_ESR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_ESR.information3) then
                --
                BEN_EMPLOYEE_STATUS_RT_API.delete_EMPLOYEE_STATUS_RT(
                   --
                   p_validate                       => false
                   ,p_ee_stat_rt_id                   => l_ee_stat_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ESR',r_esr.information5 );
    --
 end create_ESR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ASR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ASR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ASSIGNMENT_SET_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_ASR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ASNT_SET_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ASR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ASR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ASR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ASR.asnt_set_rt_id new_value
   from BEN_ASNT_SET_RT_F ASR
   where
   ASR.ASSIGNMENT_SET_ID     = l_ASSIGNMENT_SET_ID  and
   ASR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   ASR.ORDR_NUM           = l_ORDR_NUM and
   ASR.business_group_id  = c_business_group_id
   and   ASR.asnt_set_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_ASNT_SET_RT_F ASR1
                where
                ASR1.ASSIGNMENT_SET_ID     = l_ASSIGNMENT_SET_ID  and
                ASR1.vRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                ASR1.ORDR_NUM           = l_ORDR_NUM and
                ASR1.business_group_id  = c_business_group_id
                and   ASR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ASNT_SET_RT_F ASR2
                where
                ASR2.ASSIGNMENT_SET_ID     = l_ASSIGNMENT_SET_ID  and
                ASR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                ASR2.ORDR_NUM           = l_ORDR_NUM and
                ASR2.business_group_id  = c_business_group_id
                and   ASR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ASR                     c_ASR%rowtype;
   l_asnt_set_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ASR_unique in c_unique_ASR('ASR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ASR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ASR_unique.table_route_id '||r_ASR_unique.table_route_id,10);
       hr_utility.set_location(' r_ASR_unique.information1 '||r_ASR_unique.information1,10);
       hr_utility.set_location( 'r_ASR_unique.information2 '||r_ASR_unique.information2,10);
       hr_utility.set_location( 'r_ASR_unique.information3 '||r_ASR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ASR_min_max_dates(r_ASR_unique.table_route_id, r_ASR_unique.information1 ) ;
       fetch c_ASR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ASR_unique.information2);
       open c_ASR(r_ASR_unique.table_route_id,
                r_ASR_unique.information1,
                r_ASR_unique.information2,
                r_ASR_unique.information3 ) ;
       --
       fetch c_ASR into r_ASR ;
       --
       close c_ASR ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ASSIGNMENT_SET_ID := r_ASR.information176;
       else
         l_ASSIGNMENT_SET_ID := r_ASR.information174;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_ASR.INFORMATION262,r_ASR_unique.dml_operation );
       l_ORDR_NUM         := r_ASR.INFORMATION257;
       l_EXCLD_FLAG      := r_ASR.information11;

       if l_ASSIGNMENT_SET_ID is null then
         close c_ASR_min_max_dates;
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_ASR.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'ASR'
                     ,p_child_data           => r_ASR.information173 );
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ASR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ASR_unique.information2 and r_ASR_unique.information3 then
               l_update := true;
               if r_ASR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ASNT_SET_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ASNT_SET_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ASR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ASR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ASR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ASR',l_new_value,l_prefix || r_ASR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
            if c_ASR_min_max_dates%found then
              -- cursor to find the object
              open c_find_ASR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_asnt_set_rt_id, -999)  ) ;
              fetch c_find_ASR_in_target into l_new_value ;
              if c_find_ASR_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ASNT_SET_RT_F',
                  p_base_key_column => 'ASNT_SET_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_ASR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'ASNT_SET_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'ASNT_SET_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_ASR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ASR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_ASR_in_target ;
            --
            end if;
         end if ;
         --
         end if;
         close c_ASR_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_ASR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_ASR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ASNT_SET_RT_F CREATE_ASSIGNMENT_SET_RATE ',20);
             BEN_ASSIGNMENT_SET_RATE_API.CREATE_ASSIGNMENT_SET_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
              ,P_ASNT_SET_RT_ID      => l_asnt_set_rt_id
             ,P_ASR_ATTRIBUTE1      => r_ASR.INFORMATION111
             ,P_ASR_ATTRIBUTE10      => r_ASR.INFORMATION120
             ,P_ASR_ATTRIBUTE11      => r_ASR.INFORMATION121
             ,P_ASR_ATTRIBUTE12      => r_ASR.INFORMATION122
             ,P_ASR_ATTRIBUTE13      => r_ASR.INFORMATION123
             ,P_ASR_ATTRIBUTE14      => r_ASR.INFORMATION124
             ,P_ASR_ATTRIBUTE15      => r_ASR.INFORMATION125
             ,P_ASR_ATTRIBUTE16      => r_ASR.INFORMATION126
             ,P_ASR_ATTRIBUTE17      => r_ASR.INFORMATION127
             ,P_ASR_ATTRIBUTE18      => r_ASR.INFORMATION128
             ,P_ASR_ATTRIBUTE19      => r_ASR.INFORMATION129
             ,P_ASR_ATTRIBUTE2      => r_ASR.INFORMATION112
             ,P_ASR_ATTRIBUTE20      => r_ASR.INFORMATION130
             ,P_ASR_ATTRIBUTE21      => r_ASR.INFORMATION131
             ,P_ASR_ATTRIBUTE22      => r_ASR.INFORMATION132
             ,P_ASR_ATTRIBUTE23      => r_ASR.INFORMATION133
             ,P_ASR_ATTRIBUTE24      => r_ASR.INFORMATION134
             ,P_ASR_ATTRIBUTE25      => r_ASR.INFORMATION135
             ,P_ASR_ATTRIBUTE26      => r_ASR.INFORMATION136
             ,P_ASR_ATTRIBUTE27      => r_ASR.INFORMATION137
             ,P_ASR_ATTRIBUTE28      => r_ASR.INFORMATION138
             ,P_ASR_ATTRIBUTE29      => r_ASR.INFORMATION139
             ,P_ASR_ATTRIBUTE3      => r_ASR.INFORMATION113
             ,P_ASR_ATTRIBUTE30      => r_ASR.INFORMATION140
             ,P_ASR_ATTRIBUTE4      => r_ASR.INFORMATION114
             ,P_ASR_ATTRIBUTE5      => r_ASR.INFORMATION115
             ,P_ASR_ATTRIBUTE6      => r_ASR.INFORMATION116
             ,P_ASR_ATTRIBUTE7      => r_ASR.INFORMATION117
             ,P_ASR_ATTRIBUTE8      => r_ASR.INFORMATION118
             ,P_ASR_ATTRIBUTE9      => r_ASR.INFORMATION119
             ,P_ASR_ATTRIBUTE_CATEGORY      => r_ASR.INFORMATION110
             ,P_ASSIGNMENT_SET_ID      => l_ASSIGNMENT_SET_ID
             ,P_EXCLD_FLAG      => r_ASR.INFORMATION11
             ,P_ORDR_NUM      => r_ASR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_asnt_set_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'ASNT_SET_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_ASR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_ASNT_SET_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ASR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ASR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ASR.information3,
               p_effective_start_date  => r_ASR.information2,
               p_dml_operation         => r_ASR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ASNT_SET_RT_ID   := r_ASR.information1;
             l_object_version_number := r_ASR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             hr_utility.set_location(' BEN_ASNT_SET_RT_F UPDATE_ASSIGNMENT_SET_RATE ',30);
             BEN_ASSIGNMENT_SET_RATE_API.UPDATE_ASSIGNMENT_SET_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_ASNT_SET_RT_ID      => l_asnt_set_rt_id
             ,P_ASR_ATTRIBUTE1      => r_ASR.INFORMATION111
             ,P_ASR_ATTRIBUTE10      => r_ASR.INFORMATION120
             ,P_ASR_ATTRIBUTE11      => r_ASR.INFORMATION121
             ,P_ASR_ATTRIBUTE12      => r_ASR.INFORMATION122
             ,P_ASR_ATTRIBUTE13      => r_ASR.INFORMATION123
             ,P_ASR_ATTRIBUTE14      => r_ASR.INFORMATION124
             ,P_ASR_ATTRIBUTE15      => r_ASR.INFORMATION125
             ,P_ASR_ATTRIBUTE16      => r_ASR.INFORMATION126
             ,P_ASR_ATTRIBUTE17      => r_ASR.INFORMATION127
             ,P_ASR_ATTRIBUTE18      => r_ASR.INFORMATION128
             ,P_ASR_ATTRIBUTE19      => r_ASR.INFORMATION129
             ,P_ASR_ATTRIBUTE2      => r_ASR.INFORMATION112
             ,P_ASR_ATTRIBUTE20      => r_ASR.INFORMATION130
             ,P_ASR_ATTRIBUTE21      => r_ASR.INFORMATION131
             ,P_ASR_ATTRIBUTE22      => r_ASR.INFORMATION132
             ,P_ASR_ATTRIBUTE23      => r_ASR.INFORMATION133
             ,P_ASR_ATTRIBUTE24      => r_ASR.INFORMATION134
             ,P_ASR_ATTRIBUTE25      => r_ASR.INFORMATION135
             ,P_ASR_ATTRIBUTE26      => r_ASR.INFORMATION136
             ,P_ASR_ATTRIBUTE27      => r_ASR.INFORMATION137
             ,P_ASR_ATTRIBUTE28      => r_ASR.INFORMATION138
             ,P_ASR_ATTRIBUTE29      => r_ASR.INFORMATION139
             ,P_ASR_ATTRIBUTE3      => r_ASR.INFORMATION113
             ,P_ASR_ATTRIBUTE30      => r_ASR.INFORMATION140
             ,P_ASR_ATTRIBUTE4      => r_ASR.INFORMATION114
             ,P_ASR_ATTRIBUTE5      => r_ASR.INFORMATION115
             ,P_ASR_ATTRIBUTE6      => r_ASR.INFORMATION116
             ,P_ASR_ATTRIBUTE7      => r_ASR.INFORMATION117
             ,P_ASR_ATTRIBUTE8      => r_ASR.INFORMATION118
             ,P_ASR_ATTRIBUTE9      => r_ASR.INFORMATION119
             ,P_ASR_ATTRIBUTE_CATEGORY      => r_ASR.INFORMATION110
             ,P_ASSIGNMENT_SET_ID      => l_ASSIGNMENT_SET_ID
             ,P_EXCLD_FLAG      => r_ASR.INFORMATION11
             ,P_ORDR_NUM      => r_ASR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_ASR.information3) then
                --
                BEN_ASSIGNMENT_SET_RATE_API.delete_ASSIGNMENT_SET_RATE(
                   --
                   p_validate                       => false
                   ,p_asnt_set_rt_id                   => l_asnt_set_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ASR',r_asr.information5 );
    --
 end create_ASR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_TUR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_TUR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   l_USES_TBCO_FLAG   varchar2(30);
   --
   cursor c_unique_TUR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_TBCO_USE_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_TUR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_TUR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_TUR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     TUR.tbco_use_rt_id new_value
   from BEN_TBCO_USE_RT_F TUR
   where
   TUR.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
   TUR.USES_TBCO_FLAG     = l_USES_TBCO_FLAG and
   TUR.ORDR_NUM           = l_ORDR_NUM and
   TUR.business_group_id  = c_business_group_id
   and   TUR.tbco_use_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_TBCO_USE_RT_F TUR1
                where
                TUR1.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                TUR1.USES_TBCO_FLAG     = l_USES_TBCO_FLAG and
                TUR1.ORDR_NUM           = l_ORDR_NUM and
                TUR1.business_group_id  = c_business_group_id
                and   TUR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_TBCO_USE_RT_F TUR2
                where
                TUR2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                TUR2.USES_TBCO_FLAG     = l_USES_TBCO_FLAG and
                TUR2.ORDR_NUM           = l_ORDR_NUM and
                TUR2.business_group_id  = c_business_group_id
                and   TUR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_TUR                     c_TUR%rowtype;
   l_tbco_use_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_TUR_unique in c_unique_TUR('TUR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_TUR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_TUR_unique.table_route_id '||r_TUR_unique.table_route_id,10);
       hr_utility.set_location(' r_TUR_unique.information1 '||r_TUR_unique.information1,10);
       hr_utility.set_location( 'r_TUR_unique.information2 '||r_TUR_unique.information2,10);
       hr_utility.set_location( 'r_TUR_unique.information3 '||r_TUR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_TUR_min_max_dates(r_TUR_unique.table_route_id, r_TUR_unique.information1 ) ;
       fetch c_TUR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_TUR_unique.information2);
       open c_TUR(r_TUR_unique.table_route_id,
                r_TUR_unique.information1,
                r_TUR_unique.information2,
                r_TUR_unique.information3 ) ;
       --
       fetch c_TUR into r_TUR ;
       --
       close c_TUR ;
       --
       l_VRBL_RT_PRFL_ID  := get_fk('VRBL_RT_PRFL_ID', r_TUR.information262,r_TUR_unique.dml_operation);
       l_ORDR_NUM         := r_TUR.INFORMATION257;
       l_EXCLD_FLAG       := r_TUR.information11;
       l_USES_TBCO_FLAG   := r_TUR.INFORMATION12;
       --
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_TUR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_TUR_unique.information2 and r_TUR_unique.information3 then
               l_update := true;
               if r_TUR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'TBCO_USE_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'TBCO_USE_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_TUR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_TUR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_TUR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('TUR',l_new_value,l_prefix || r_TUR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END

       if p_reuse_object_flag = 'Y' then
         if c_TUR_min_max_dates%found then
           -- cursor to find the object
           open c_find_TUR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_tbco_use_rt_id, -999)  ) ;
           fetch c_find_TUR_in_target into l_new_value ;
           if c_find_TUR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_TBCO_USE_RT_F',
                  p_base_key_column => 'TBCO_USE_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_TUR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'TBCO_USE_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'TBCO_USE_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_TUR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_TUR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_TUR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_TUR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_TUR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_TUR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_TBCO_USE_RT_F CREATE_TOBACCO_USE_RATE ',20);
           BEN_TOBACCO_USE_RATE_API.CREATE_TOBACCO_USE_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_EXCLD_FLAG      => r_TUR.INFORMATION11
             ,P_ORDR_NUM      => r_TUR.INFORMATION257
             ,P_TBCO_USE_RT_ID      => l_tbco_use_rt_id
             ,P_TUR_ATTRIBUTE1      => r_TUR.INFORMATION111
             ,P_TUR_ATTRIBUTE10      => r_TUR.INFORMATION120
             ,P_TUR_ATTRIBUTE11      => r_TUR.INFORMATION121
             ,P_TUR_ATTRIBUTE12      => r_TUR.INFORMATION122
             ,P_TUR_ATTRIBUTE13      => r_TUR.INFORMATION123
             ,P_TUR_ATTRIBUTE14      => r_TUR.INFORMATION124
             ,P_TUR_ATTRIBUTE15      => r_TUR.INFORMATION125
             ,P_TUR_ATTRIBUTE16      => r_TUR.INFORMATION126
             ,P_TUR_ATTRIBUTE17      => r_TUR.INFORMATION127
             ,P_TUR_ATTRIBUTE18      => r_TUR.INFORMATION128
             ,P_TUR_ATTRIBUTE19      => r_TUR.INFORMATION129
             ,P_TUR_ATTRIBUTE2      => r_TUR.INFORMATION112
             ,P_TUR_ATTRIBUTE20      => r_TUR.INFORMATION130
             ,P_TUR_ATTRIBUTE21      => r_TUR.INFORMATION131
             ,P_TUR_ATTRIBUTE22      => r_TUR.INFORMATION132
             ,P_TUR_ATTRIBUTE23      => r_TUR.INFORMATION133
             ,P_TUR_ATTRIBUTE24      => r_TUR.INFORMATION134
             ,P_TUR_ATTRIBUTE25      => r_TUR.INFORMATION135
             ,P_TUR_ATTRIBUTE26      => r_TUR.INFORMATION136
             ,P_TUR_ATTRIBUTE27      => r_TUR.INFORMATION137
             ,P_TUR_ATTRIBUTE28      => r_TUR.INFORMATION138
             ,P_TUR_ATTRIBUTE29      => r_TUR.INFORMATION139
             ,P_TUR_ATTRIBUTE3      => r_TUR.INFORMATION113
             ,P_TUR_ATTRIBUTE30      => r_TUR.INFORMATION140
             ,P_TUR_ATTRIBUTE4      => r_TUR.INFORMATION114
             ,P_TUR_ATTRIBUTE5      => r_TUR.INFORMATION115
             ,P_TUR_ATTRIBUTE6      => r_TUR.INFORMATION116
             ,P_TUR_ATTRIBUTE7      => r_TUR.INFORMATION117
             ,P_TUR_ATTRIBUTE8      => r_TUR.INFORMATION118
             ,P_TUR_ATTRIBUTE9      => r_TUR.INFORMATION119
             ,P_TUR_ATTRIBUTE_CATEGORY      => r_TUR.INFORMATION110
             ,P_USES_TBCO_FLAG      => r_TUR.INFORMATION12
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_tbco_use_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'TBCO_USE_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_TUR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_TBCO_USE_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_TUR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_TUR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_TUR.information3,
               p_effective_start_date  => r_TUR.information2,
               p_dml_operation         => r_TUR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_TBCO_USE_RT_ID   := r_TUR.information1;
             l_object_version_number := r_TUR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_TBCO_USE_RT_F UPDATE_TOBACCO_USE_RATE ',30);
           BEN_TOBACCO_USE_RATE_API.UPDATE_TOBACCO_USE_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_TUR.INFORMATION11
             ,P_ORDR_NUM      => r_TUR.INFORMATION257
             ,P_TBCO_USE_RT_ID      => l_tbco_use_rt_id
             ,P_TUR_ATTRIBUTE1      => r_TUR.INFORMATION111
             ,P_TUR_ATTRIBUTE10      => r_TUR.INFORMATION120
             ,P_TUR_ATTRIBUTE11      => r_TUR.INFORMATION121
             ,P_TUR_ATTRIBUTE12      => r_TUR.INFORMATION122
             ,P_TUR_ATTRIBUTE13      => r_TUR.INFORMATION123
             ,P_TUR_ATTRIBUTE14      => r_TUR.INFORMATION124
             ,P_TUR_ATTRIBUTE15      => r_TUR.INFORMATION125
             ,P_TUR_ATTRIBUTE16      => r_TUR.INFORMATION126
             ,P_TUR_ATTRIBUTE17      => r_TUR.INFORMATION127
             ,P_TUR_ATTRIBUTE18      => r_TUR.INFORMATION128
             ,P_TUR_ATTRIBUTE19      => r_TUR.INFORMATION129
             ,P_TUR_ATTRIBUTE2      => r_TUR.INFORMATION112
             ,P_TUR_ATTRIBUTE20      => r_TUR.INFORMATION130
             ,P_TUR_ATTRIBUTE21      => r_TUR.INFORMATION131
             ,P_TUR_ATTRIBUTE22      => r_TUR.INFORMATION132
             ,P_TUR_ATTRIBUTE23      => r_TUR.INFORMATION133
             ,P_TUR_ATTRIBUTE24      => r_TUR.INFORMATION134
             ,P_TUR_ATTRIBUTE25      => r_TUR.INFORMATION135
             ,P_TUR_ATTRIBUTE26      => r_TUR.INFORMATION136
             ,P_TUR_ATTRIBUTE27      => r_TUR.INFORMATION137
             ,P_TUR_ATTRIBUTE28      => r_TUR.INFORMATION138
             ,P_TUR_ATTRIBUTE29      => r_TUR.INFORMATION139
             ,P_TUR_ATTRIBUTE3      => r_TUR.INFORMATION113
             ,P_TUR_ATTRIBUTE30      => r_TUR.INFORMATION140
             ,P_TUR_ATTRIBUTE4      => r_TUR.INFORMATION114
             ,P_TUR_ATTRIBUTE5      => r_TUR.INFORMATION115
             ,P_TUR_ATTRIBUTE6      => r_TUR.INFORMATION116
             ,P_TUR_ATTRIBUTE7      => r_TUR.INFORMATION117
             ,P_TUR_ATTRIBUTE8      => r_TUR.INFORMATION118
             ,P_TUR_ATTRIBUTE9      => r_TUR.INFORMATION119
             ,P_TUR_ATTRIBUTE_CATEGORY      => r_TUR.INFORMATION110
             ,P_USES_TBCO_FLAG      => r_TUR.INFORMATION12
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_TUR.information3) then
             --
             BEN_TOBACCO_USE_RATE_API.delete_TOBACCO_USE_RATE(
                --
                p_validate                       => false
                ,p_tbco_use_rt_id                   => l_tbco_use_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'TUR',r_tur.information5 );
    --
 end create_TUR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_SAR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_SAR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_SVC_AREA_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_SAR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_SVC_AREA_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_SAR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_SAR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_SAR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     SAR.svc_area_rt_id new_value
   from BEN_SVC_AREA_RT_F SAR
   where
   SAR.SVC_AREA_ID     = l_SVC_AREA_ID  and
   SAR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   SAR.ORDR_NUM           = l_ORDR_NUM and
   SAR.business_group_id  = c_business_group_id
   and   SAR.svc_area_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_SVC_AREA_RT_F SAR1
                where
                SAR1.SVC_AREA_ID     = l_SVC_AREA_ID  and
                SAR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                SAR1.ORDR_NUM           = l_ORDR_NUM and
                SAR1.business_group_id  = c_business_group_id
                and   SAR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_SVC_AREA_RT_F SAR2
                where
                SAR2.SVC_AREA_ID     = l_SVC_AREA_ID  and
                SAR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                SAR2.ORDR_NUM           = l_ORDR_NUM and
                SAR2.business_group_id  = c_business_group_id
                and   SAR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_SAR                     c_SAR%rowtype;
   l_svc_area_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_SAR_unique in c_unique_SAR('SAR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_SAR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_SAR_unique.table_route_id '||r_SAR_unique.table_route_id,10);
       hr_utility.set_location(' r_SAR_unique.information1 '||r_SAR_unique.information1,10);
       hr_utility.set_location( 'r_SAR_unique.information2 '||r_SAR_unique.information2,10);
       hr_utility.set_location( 'r_SAR_unique.information3 '||r_SAR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_SAR_min_max_dates(r_SAR_unique.table_route_id, r_SAR_unique.information1 ) ;
       fetch c_SAR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_SAR_unique.information2);
       open c_SAR(r_SAR_unique.table_route_id,
                r_SAR_unique.information1,
                r_SAR_unique.information2,
                r_SAR_unique.information3 ) ;
       --
       fetch c_SAR into r_SAR ;
       --
       close c_SAR ;
       --
       l_SVC_AREA_ID := get_fk('SVC_AREA_ID', r_SAR.INFORMATION241,r_SAR_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_SAR.INFORMATION262,r_SAR_unique.dml_operation);
       l_ORDR_NUM         := r_SAR.INFORMATION259;
       l_EXCLD_FLAG      := r_SAR.information11;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_SAR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_SAR_unique.information2 and r_SAR_unique.information3 then
               l_update := true;
               if r_SAR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'SVC_AREA_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'SVC_AREA_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_SAR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_SAR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_SAR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('SAR',l_new_value,l_prefix || r_SAR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_SAR_min_max_dates%found then
           -- cursor to find the object
           open c_find_SAR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_svc_area_rt_id, -999)  ) ;
           fetch c_find_SAR_in_target into l_new_value ;
           if c_find_SAR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_SVC_AREA_RT_F',
                  p_base_key_column => 'SVC_AREA_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_SAR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'SVC_AREA_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'SVC_AREA_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_SAR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_SAR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_SAR_in_target ;
         --
         end if;
       end if ;
       end if;
       --
       close c_SAR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_SAR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_SAR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_SVC_AREA_RT_F CREATE_SERVICE_AREA_RATE ',20);
           BEN_SERVICE_AREA_RATE_API.CREATE_SERVICE_AREA_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_SAR.INFORMATION11
             ,P_ORDR_NUM      => r_SAR.INFORMATION259
             ,P_SAR_ATTRIBUTE1      => r_SAR.INFORMATION111
             ,P_SAR_ATTRIBUTE10      => r_SAR.INFORMATION120
             ,P_SAR_ATTRIBUTE11      => r_SAR.INFORMATION121
             ,P_SAR_ATTRIBUTE12      => r_SAR.INFORMATION122
             ,P_SAR_ATTRIBUTE13      => r_SAR.INFORMATION123
             ,P_SAR_ATTRIBUTE14      => r_SAR.INFORMATION124
             ,P_SAR_ATTRIBUTE15      => r_SAR.INFORMATION125
             ,P_SAR_ATTRIBUTE16      => r_SAR.INFORMATION126
             ,P_SAR_ATTRIBUTE17      => r_SAR.INFORMATION127
             ,P_SAR_ATTRIBUTE18      => r_SAR.INFORMATION128
             ,P_SAR_ATTRIBUTE19      => r_SAR.INFORMATION129
             ,P_SAR_ATTRIBUTE2      => r_SAR.INFORMATION112
             ,P_SAR_ATTRIBUTE20      => r_SAR.INFORMATION130
             ,P_SAR_ATTRIBUTE21      => r_SAR.INFORMATION131
             ,P_SAR_ATTRIBUTE22      => r_SAR.INFORMATION132
             ,P_SAR_ATTRIBUTE23      => r_SAR.INFORMATION133
             ,P_SAR_ATTRIBUTE24      => r_SAR.INFORMATION134
             ,P_SAR_ATTRIBUTE25      => r_SAR.INFORMATION135
             ,P_SAR_ATTRIBUTE26      => r_SAR.INFORMATION136
             ,P_SAR_ATTRIBUTE27      => r_SAR.INFORMATION137
             ,P_SAR_ATTRIBUTE28      => r_SAR.INFORMATION138
             ,P_SAR_ATTRIBUTE29      => r_SAR.INFORMATION139
             ,P_SAR_ATTRIBUTE3      => r_SAR.INFORMATION113
             ,P_SAR_ATTRIBUTE30      => r_SAR.INFORMATION140
             ,P_SAR_ATTRIBUTE4      => r_SAR.INFORMATION114
             ,P_SAR_ATTRIBUTE5      => r_SAR.INFORMATION115
             ,P_SAR_ATTRIBUTE6      => r_SAR.INFORMATION116
             ,P_SAR_ATTRIBUTE7      => r_SAR.INFORMATION117
             ,P_SAR_ATTRIBUTE8      => r_SAR.INFORMATION118
             ,P_SAR_ATTRIBUTE9      => r_SAR.INFORMATION119
             ,P_SAR_ATTRIBUTE_CATEGORY      => r_SAR.INFORMATION110
             ,P_SVC_AREA_ID      => l_SVC_AREA_ID
             ,P_SVC_AREA_RT_ID      => l_svc_area_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_svc_area_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'SVC_AREA_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_SAR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_SVC_AREA_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_SAR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_SAR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_SAR.information3,
               p_effective_start_date  => r_SAR.information2,
               p_dml_operation         => r_SAR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_SVC_AREA_RT_ID   := r_SAR.information1;
             l_object_version_number := r_SAR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_SVC_AREA_RT_F UPDATE_SERVICE_AREA_RATE ',30);
           BEN_SERVICE_AREA_RATE_API.UPDATE_SERVICE_AREA_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_SAR.INFORMATION11
             ,P_ORDR_NUM      => r_SAR.INFORMATION259
             ,P_SAR_ATTRIBUTE1      => r_SAR.INFORMATION111
             ,P_SAR_ATTRIBUTE10      => r_SAR.INFORMATION120
             ,P_SAR_ATTRIBUTE11      => r_SAR.INFORMATION121
             ,P_SAR_ATTRIBUTE12      => r_SAR.INFORMATION122
             ,P_SAR_ATTRIBUTE13      => r_SAR.INFORMATION123
             ,P_SAR_ATTRIBUTE14      => r_SAR.INFORMATION124
             ,P_SAR_ATTRIBUTE15      => r_SAR.INFORMATION125
             ,P_SAR_ATTRIBUTE16      => r_SAR.INFORMATION126
             ,P_SAR_ATTRIBUTE17      => r_SAR.INFORMATION127
             ,P_SAR_ATTRIBUTE18      => r_SAR.INFORMATION128
             ,P_SAR_ATTRIBUTE19      => r_SAR.INFORMATION129
             ,P_SAR_ATTRIBUTE2      => r_SAR.INFORMATION112
             ,P_SAR_ATTRIBUTE20      => r_SAR.INFORMATION130
             ,P_SAR_ATTRIBUTE21      => r_SAR.INFORMATION131
             ,P_SAR_ATTRIBUTE22      => r_SAR.INFORMATION132
             ,P_SAR_ATTRIBUTE23      => r_SAR.INFORMATION133
             ,P_SAR_ATTRIBUTE24      => r_SAR.INFORMATION134
             ,P_SAR_ATTRIBUTE25      => r_SAR.INFORMATION135
             ,P_SAR_ATTRIBUTE26      => r_SAR.INFORMATION136
             ,P_SAR_ATTRIBUTE27      => r_SAR.INFORMATION137
             ,P_SAR_ATTRIBUTE28      => r_SAR.INFORMATION138
             ,P_SAR_ATTRIBUTE29      => r_SAR.INFORMATION139
             ,P_SAR_ATTRIBUTE3      => r_SAR.INFORMATION113
             ,P_SAR_ATTRIBUTE30      => r_SAR.INFORMATION140
             ,P_SAR_ATTRIBUTE4      => r_SAR.INFORMATION114
             ,P_SAR_ATTRIBUTE5      => r_SAR.INFORMATION115
             ,P_SAR_ATTRIBUTE6      => r_SAR.INFORMATION116
             ,P_SAR_ATTRIBUTE7      => r_SAR.INFORMATION117
             ,P_SAR_ATTRIBUTE8      => r_SAR.INFORMATION118
             ,P_SAR_ATTRIBUTE9      => r_SAR.INFORMATION119
             ,P_SAR_ATTRIBUTE_CATEGORY      => r_SAR.INFORMATION110
             ,P_SVC_AREA_ID      => l_SVC_AREA_ID
             ,P_SVC_AREA_RT_ID      => l_svc_area_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_SAR.information3) then
             --
             BEN_SERVICE_AREA_RATE_API.delete_SERVICE_AREA_RATE(
                --
                p_validate                       => false
                ,p_svc_area_rt_id                   => l_svc_area_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'SAR',r_sar.information5 );
    --
 end create_SAR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_QTR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_QTR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_QUALIFICATION_TYPE_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_QTR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_QUAL_TITL_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_QTR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_QTR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_QTR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     QTR.qual_titl_rt_id new_value
   from BEN_QUAL_TITL_RT_F QTR
   where
   QTR.QUALIFICATION_TYPE_ID     = l_QUALIFICATION_TYPE_ID  and
   QTR.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
   QTR.ORDR_NUM           = l_ORDR_NUM and
   QTR.business_group_id  = c_business_group_id
   and   QTR.qual_titl_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_QUAL_TITL_RT_F QTR1
                where
                QTR1.QUALIFICATION_TYPE_ID     = l_QUALIFICATION_TYPE_ID  and
                QTR1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                QTR1.ORDR_NUM           = l_ORDR_NUM and
                QTR1.business_group_id  = c_business_group_id
                and   QTR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_QUAL_TITL_RT_F QTR2
                where
                QTR2.QUALIFICATION_TYPE_ID     = l_QUALIFICATION_TYPE_ID  and
                QTR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                QTR2.ORDR_NUM           = l_ORDR_NUM and
                QTR2.business_group_id  = c_business_group_id
                and   QTR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_QTR                     c_QTR%rowtype;
   l_qual_titl_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_QTR_unique in c_unique_QTR('QTR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_QTR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_QTR_unique.table_route_id '||r_QTR_unique.table_route_id,10);
       hr_utility.set_location(' r_QTR_unique.information1 '||r_QTR_unique.information1,10);
       hr_utility.set_location( 'r_QTR_unique.information2 '||r_QTR_unique.information2,10);
       hr_utility.set_location( 'r_QTR_unique.information3 '||r_QTR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_QTR_min_max_dates(r_QTR_unique.table_route_id, r_QTR_unique.information1 ) ;
       fetch c_QTR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_QTR_unique.information2);
       open c_QTR(r_QTR_unique.table_route_id,
                r_QTR_unique.information1,
                r_QTR_unique.information2,
                r_QTR_unique.information3 ) ;
       --
       fetch c_QTR into r_QTR ;
       --
       close c_QTR ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_QUALIFICATION_TYPE_ID := r_QTR.information176;
       else
         l_QUALIFICATION_TYPE_ID := r_QTR.information174;
       end if;
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_QTR.INFORMATION262,r_QTR_unique.dml_operation);
       l_ORDR_NUM         := r_QTR.INFORMATION260;
       l_EXCLD_FLAG      := r_QTR.information11;

       if l_QUALIFICATION_TYPE_ID is null then
         close c_QTR_min_max_dates;
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_QTR.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'QTR'
                     ,p_child_data           => r_QTR.information173 );
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_QTR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_QTR_unique.information2 and r_QTR_unique.information3 then
               l_update := true;
               if r_QTR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'QUAL_TITL_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'QUAL_TITL_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_QTR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_QTR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_QTR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('QTR',l_new_value,l_prefix || r_QTR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
            if c_QTR_min_max_dates%found then
              -- cursor to find the object
              open c_find_QTR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_qual_titl_rt_id, -999)  ) ;
              fetch c_find_QTR_in_target into l_new_value ;
              if c_find_QTR_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_QUAL_TITL_RT_F',
                  p_base_key_column => 'QUAL_TITL_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_QTR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'QUAL_TITL_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'QUAL_TITL_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_QTR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_QTR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_QTR_in_target ;
            --
            end if;
         end if ;
         end if;
         --
         close c_QTR_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_QTR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_QTR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_QUAL_TITL_RT_F CREATE_QUAL_TITL_RT ',20);
             BEN_QUAL_TITL_RT_API.CREATE_QUAL_TITL_RT(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
               ,P_EXCLD_FLAG      => r_QTR.INFORMATION11
             ,P_ORDR_NUM      => r_QTR.INFORMATION260
             ,P_QTR_ATTRIBUTE1      => r_QTR.INFORMATION111
             ,P_QTR_ATTRIBUTE10      => r_QTR.INFORMATION120
             ,P_QTR_ATTRIBUTE11      => r_QTR.INFORMATION121
             ,P_QTR_ATTRIBUTE12      => r_QTR.INFORMATION122
             ,P_QTR_ATTRIBUTE13      => r_QTR.INFORMATION123
             ,P_QTR_ATTRIBUTE14      => r_QTR.INFORMATION124
             ,P_QTR_ATTRIBUTE15      => r_QTR.INFORMATION125
             ,P_QTR_ATTRIBUTE16      => r_QTR.INFORMATION126
             ,P_QTR_ATTRIBUTE17      => r_QTR.INFORMATION127
             ,P_QTR_ATTRIBUTE18      => r_QTR.INFORMATION128
             ,P_QTR_ATTRIBUTE19      => r_QTR.INFORMATION129
             ,P_QTR_ATTRIBUTE2      => r_QTR.INFORMATION112
             ,P_QTR_ATTRIBUTE20      => r_QTR.INFORMATION130
             ,P_QTR_ATTRIBUTE21      => r_QTR.INFORMATION131
             ,P_QTR_ATTRIBUTE22      => r_QTR.INFORMATION132
             ,P_QTR_ATTRIBUTE23      => r_QTR.INFORMATION133
             ,P_QTR_ATTRIBUTE24      => r_QTR.INFORMATION134
             ,P_QTR_ATTRIBUTE25      => r_QTR.INFORMATION135
             ,P_QTR_ATTRIBUTE26      => r_QTR.INFORMATION136
             ,P_QTR_ATTRIBUTE27      => r_QTR.INFORMATION137
             ,P_QTR_ATTRIBUTE28      => r_QTR.INFORMATION138
             ,P_QTR_ATTRIBUTE29      => r_QTR.INFORMATION139
             ,P_QTR_ATTRIBUTE3      => r_QTR.INFORMATION113
             ,P_QTR_ATTRIBUTE30      => r_QTR.INFORMATION140
             ,P_QTR_ATTRIBUTE4      => r_QTR.INFORMATION114
             ,P_QTR_ATTRIBUTE5      => r_QTR.INFORMATION115
             ,P_QTR_ATTRIBUTE6      => r_QTR.INFORMATION116
             ,P_QTR_ATTRIBUTE7      => r_QTR.INFORMATION117
             ,P_QTR_ATTRIBUTE8      => r_QTR.INFORMATION118
             ,P_QTR_ATTRIBUTE9      => r_QTR.INFORMATION119
             ,P_QTR_ATTRIBUTE_CATEGORY      => r_QTR.INFORMATION110
             ,P_QUALIFICATION_TYPE_ID      => l_QUALIFICATION_TYPE_ID
             ,P_QUAL_TITL_RT_ID      => l_qual_titl_rt_id
             ,P_TITLE      => r_QTR.INFORMATION141
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_qual_titl_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'QUAL_TITL_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_QTR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_QUAL_TITL_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_QTR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_QTR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_QTR.information3,
               p_effective_start_date  => r_QTR.information2,
               p_dml_operation         => r_QTR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_QUAL_TITL_RT_ID   := r_QTR.information1;
             l_object_version_number := r_QTR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_QUAL_TITL_RT_F UPDATE_QUAL_TITL_RT ',30);
             BEN_QUAL_TITL_RT_API.UPDATE_QUAL_TITL_RT(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
            ,P_EXCLD_FLAG      => r_QTR.INFORMATION11
             ,P_ORDR_NUM      => r_QTR.INFORMATION260
             ,P_QTR_ATTRIBUTE1      => r_QTR.INFORMATION111
             ,P_QTR_ATTRIBUTE10      => r_QTR.INFORMATION120
             ,P_QTR_ATTRIBUTE11      => r_QTR.INFORMATION121
             ,P_QTR_ATTRIBUTE12      => r_QTR.INFORMATION122
             ,P_QTR_ATTRIBUTE13      => r_QTR.INFORMATION123
             ,P_QTR_ATTRIBUTE14      => r_QTR.INFORMATION124
             ,P_QTR_ATTRIBUTE15      => r_QTR.INFORMATION125
             ,P_QTR_ATTRIBUTE16      => r_QTR.INFORMATION126
             ,P_QTR_ATTRIBUTE17      => r_QTR.INFORMATION127
             ,P_QTR_ATTRIBUTE18      => r_QTR.INFORMATION128
             ,P_QTR_ATTRIBUTE19      => r_QTR.INFORMATION129
             ,P_QTR_ATTRIBUTE2      => r_QTR.INFORMATION112
             ,P_QTR_ATTRIBUTE20      => r_QTR.INFORMATION130
             ,P_QTR_ATTRIBUTE21      => r_QTR.INFORMATION131
             ,P_QTR_ATTRIBUTE22      => r_QTR.INFORMATION132
             ,P_QTR_ATTRIBUTE23      => r_QTR.INFORMATION133
             ,P_QTR_ATTRIBUTE24      => r_QTR.INFORMATION134
             ,P_QTR_ATTRIBUTE25      => r_QTR.INFORMATION135
             ,P_QTR_ATTRIBUTE26      => r_QTR.INFORMATION136
             ,P_QTR_ATTRIBUTE27      => r_QTR.INFORMATION137
             ,P_QTR_ATTRIBUTE28      => r_QTR.INFORMATION138
             ,P_QTR_ATTRIBUTE29      => r_QTR.INFORMATION139
             ,P_QTR_ATTRIBUTE3      => r_QTR.INFORMATION113
             ,P_QTR_ATTRIBUTE30      => r_QTR.INFORMATION140
             ,P_QTR_ATTRIBUTE4      => r_QTR.INFORMATION114
             ,P_QTR_ATTRIBUTE5      => r_QTR.INFORMATION115
             ,P_QTR_ATTRIBUTE6      => r_QTR.INFORMATION116
             ,P_QTR_ATTRIBUTE7      => r_QTR.INFORMATION117
             ,P_QTR_ATTRIBUTE8      => r_QTR.INFORMATION118
             ,P_QTR_ATTRIBUTE9      => r_QTR.INFORMATION119
             ,P_QTR_ATTRIBUTE_CATEGORY      => r_QTR.INFORMATION110
             ,P_QUALIFICATION_TYPE_ID      => l_QUALIFICATION_TYPE_ID
             ,P_QUAL_TITL_RT_ID      => l_qual_titl_rt_id
             ,P_TITLE      => r_QTR.INFORMATION141
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_QTR.information3) then
                --
                BEN_QUAL_TITL_RT_API.delete_QUAL_TITL_RT(
                   --
                   p_validate                       => false
                   ,p_qual_titl_rt_id                   => l_qual_titl_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'QTR',r_qtr.information5 );
    --
 end create_QTR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PZR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PZR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PSTL_ZIP_RNG_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_PZR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PSTL_ZIP_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PZR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PZR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PZR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PZR.pstl_zip_rt_id new_value
   from BEN_PSTL_ZIP_RT_F PZR
   where
   PZR.PSTL_ZIP_RNG_ID     = l_PSTL_ZIP_RNG_ID  and
   PZR.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
   PZR.ORDR_NUM           = l_ORDR_NUM and
   PZR.business_group_id  = c_business_group_id
   and   PZR.pstl_zip_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PSTL_ZIP_RT_F PZR1
                where
                PZR1.PSTL_ZIP_RNG_ID     = l_PSTL_ZIP_RNG_ID  and
                PZR1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                PZR1.ORDR_NUM           = l_ORDR_NUM and
                PZR1.business_group_id  = c_business_group_id
                and   PZR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PSTL_ZIP_RT_F PZR2
                where
                PZR2.PSTL_ZIP_RNG_ID     = l_PSTL_ZIP_RNG_ID  and
                PZR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                PZR2.ORDR_NUM           = l_ORDR_NUM and
                PZR2.business_group_id  = c_business_group_id
                and   PZR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PZR                     c_PZR%rowtype;
   l_pstl_zip_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PZR_unique in c_unique_PZR('PZR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PZR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_PZR_unique.table_route_id '||r_PZR_unique.table_route_id,10);
       hr_utility.set_location(' r_PZR_unique.information1 '||r_PZR_unique.information1,10);
       hr_utility.set_location( 'r_PZR_unique.information2 '||r_PZR_unique.information2,10);
       hr_utility.set_location( 'r_PZR_unique.information3 '||r_PZR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PZR_min_max_dates(r_PZR_unique.table_route_id, r_PZR_unique.information1 ) ;
       fetch c_PZR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PZR_unique.information2);
       open c_PZR(r_PZR_unique.table_route_id,
                r_PZR_unique.information1,
                r_PZR_unique.information2,
                r_PZR_unique.information3 ) ;
       --
       fetch c_PZR into r_PZR ;
       --
       close c_PZR ;
       --
       l_PSTL_ZIP_RNG_ID := get_fk('PSTL_ZIP_RNG_ID', r_PZR.INFORMATION245,r_PZR_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PZR.INFORMATION262,r_PZR_unique.dml_operation);
       l_ORDR_NUM         := r_PZR.INFORMATION260;
       l_EXCLD_FLAG      := r_PZR.information11;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PZR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PZR_unique.information2 and r_PZR_unique.information3 then
               l_update := true;
               if r_PZR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PSTL_ZIP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PSTL_ZIP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PZR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PZR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PZR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PZR',l_new_value,l_prefix || r_PZR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_PZR_min_max_dates%found then
           -- cursor to find the object
           open c_find_PZR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pstl_zip_rt_id, -999)  ) ;
           fetch c_find_PZR_in_target into l_new_value ;
           if c_find_PZR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PSTL_ZIP_RT_F',
                  p_base_key_column => 'PSTL_ZIP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PZR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'PSTL_ZIP_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'PSTL_ZIP_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PZR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PZR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PZR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_PZR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_PZR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PZR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PSTL_ZIP_RT_F CREATE_POSTAL_ZIP_RATE ',20);
           BEN_POSTAL_ZIP_RATE_API.CREATE_POSTAL_ZIP_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_PZR.INFORMATION11
             ,P_ORDR_NUM      => r_PZR.INFORMATION260
             ,P_PSTL_ZIP_RNG_ID      => l_PSTL_ZIP_RNG_ID
             ,P_PSTL_ZIP_RT_ID      => l_pstl_zip_rt_id
             ,P_PZR_ATTRIBUTE1      => r_PZR.INFORMATION111
             ,P_PZR_ATTRIBUTE10      => r_PZR.INFORMATION120
             ,P_PZR_ATTRIBUTE11      => r_PZR.INFORMATION121
             ,P_PZR_ATTRIBUTE12      => r_PZR.INFORMATION122
             ,P_PZR_ATTRIBUTE13      => r_PZR.INFORMATION123
             ,P_PZR_ATTRIBUTE14      => r_PZR.INFORMATION124
             ,P_PZR_ATTRIBUTE15      => r_PZR.INFORMATION125
             ,P_PZR_ATTRIBUTE16      => r_PZR.INFORMATION126
             ,P_PZR_ATTRIBUTE17      => r_PZR.INFORMATION127
             ,P_PZR_ATTRIBUTE18      => r_PZR.INFORMATION128
             ,P_PZR_ATTRIBUTE19      => r_PZR.INFORMATION129
             ,P_PZR_ATTRIBUTE2      => r_PZR.INFORMATION112
             ,P_PZR_ATTRIBUTE20      => r_PZR.INFORMATION130
             ,P_PZR_ATTRIBUTE21      => r_PZR.INFORMATION131
             ,P_PZR_ATTRIBUTE22      => r_PZR.INFORMATION132
             ,P_PZR_ATTRIBUTE23      => r_PZR.INFORMATION133
             ,P_PZR_ATTRIBUTE24      => r_PZR.INFORMATION134
             ,P_PZR_ATTRIBUTE25      => r_PZR.INFORMATION135
             ,P_PZR_ATTRIBUTE26      => r_PZR.INFORMATION136
             ,P_PZR_ATTRIBUTE27      => r_PZR.INFORMATION137
             ,P_PZR_ATTRIBUTE28      => r_PZR.INFORMATION138
             ,P_PZR_ATTRIBUTE29      => r_PZR.INFORMATION139
             ,P_PZR_ATTRIBUTE3      => r_PZR.INFORMATION113
             ,P_PZR_ATTRIBUTE30      => r_PZR.INFORMATION140
             ,P_PZR_ATTRIBUTE4      => r_PZR.INFORMATION114
             ,P_PZR_ATTRIBUTE5      => r_PZR.INFORMATION115
             ,P_PZR_ATTRIBUTE6      => r_PZR.INFORMATION116
             ,P_PZR_ATTRIBUTE7      => r_PZR.INFORMATION117
             ,P_PZR_ATTRIBUTE8      => r_PZR.INFORMATION118
             ,P_PZR_ATTRIBUTE9      => r_PZR.INFORMATION119
             ,P_PZR_ATTRIBUTE_CATEGORY      => r_PZR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_pstl_zip_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'PSTL_ZIP_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PZR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_PSTL_ZIP_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PZR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PZR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PZR.information3,
               p_effective_start_date  => r_PZR.information2,
               p_dml_operation         => r_PZR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PSTL_ZIP_RT_ID   := r_PZR.information1;
             l_object_version_number := r_PZR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_PSTL_ZIP_RT_F UPDATE_POSTAL_ZIP_RATE ',30);
           BEN_POSTAL_ZIP_RATE_API.UPDATE_POSTAL_ZIP_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_EXCLD_FLAG      => r_PZR.INFORMATION11
             ,P_ORDR_NUM      => r_PZR.INFORMATION260
             ,P_PSTL_ZIP_RNG_ID      => l_PSTL_ZIP_RNG_ID
             ,P_PSTL_ZIP_RT_ID      => l_pstl_zip_rt_id
             ,P_PZR_ATTRIBUTE1      => r_PZR.INFORMATION111
             ,P_PZR_ATTRIBUTE10      => r_PZR.INFORMATION120
             ,P_PZR_ATTRIBUTE11      => r_PZR.INFORMATION121
             ,P_PZR_ATTRIBUTE12      => r_PZR.INFORMATION122
             ,P_PZR_ATTRIBUTE13      => r_PZR.INFORMATION123
             ,P_PZR_ATTRIBUTE14      => r_PZR.INFORMATION124
             ,P_PZR_ATTRIBUTE15      => r_PZR.INFORMATION125
             ,P_PZR_ATTRIBUTE16      => r_PZR.INFORMATION126
             ,P_PZR_ATTRIBUTE17      => r_PZR.INFORMATION127
             ,P_PZR_ATTRIBUTE18      => r_PZR.INFORMATION128
             ,P_PZR_ATTRIBUTE19      => r_PZR.INFORMATION129
             ,P_PZR_ATTRIBUTE2      => r_PZR.INFORMATION112
             ,P_PZR_ATTRIBUTE20      => r_PZR.INFORMATION130
             ,P_PZR_ATTRIBUTE21      => r_PZR.INFORMATION131
             ,P_PZR_ATTRIBUTE22      => r_PZR.INFORMATION132
             ,P_PZR_ATTRIBUTE23      => r_PZR.INFORMATION133
             ,P_PZR_ATTRIBUTE24      => r_PZR.INFORMATION134
             ,P_PZR_ATTRIBUTE25      => r_PZR.INFORMATION135
             ,P_PZR_ATTRIBUTE26      => r_PZR.INFORMATION136
             ,P_PZR_ATTRIBUTE27      => r_PZR.INFORMATION137
             ,P_PZR_ATTRIBUTE28      => r_PZR.INFORMATION138
             ,P_PZR_ATTRIBUTE29      => r_PZR.INFORMATION139
             ,P_PZR_ATTRIBUTE3      => r_PZR.INFORMATION113
             ,P_PZR_ATTRIBUTE30      => r_PZR.INFORMATION140
             ,P_PZR_ATTRIBUTE4      => r_PZR.INFORMATION114
             ,P_PZR_ATTRIBUTE5      => r_PZR.INFORMATION115
             ,P_PZR_ATTRIBUTE6      => r_PZR.INFORMATION116
             ,P_PZR_ATTRIBUTE7      => r_PZR.INFORMATION117
             ,P_PZR_ATTRIBUTE8      => r_PZR.INFORMATION118
             ,P_PZR_ATTRIBUTE9      => r_PZR.INFORMATION119
             ,P_PZR_ATTRIBUTE_CATEGORY      => r_PZR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PZR.information3) then
             --
             BEN_POSTAL_ZIP_RATE_API.delete_POSTAL_ZIP_RATE(
                --
                p_validate                       => false
                ,p_pstl_zip_rt_id                   => l_pstl_zip_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PZR',r_pzr.information5 );
    --
 end create_PZR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PTR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PTR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PERSON_TYPE_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_PTR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PER_TYP_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PTR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PTR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PTR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PTR.per_typ_rt_id new_value
   from BEN_PER_TYP_RT_F PTR
   where
   PTR.PERSON_TYPE_ID     = l_PERSON_TYPE_ID  and
   PTR.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID and
   PTR.ORDR_NUM           = l_ORDR_NUM and
   PTR.business_group_id  = c_business_group_id
   and   PTR.per_typ_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PER_TYP_RT_F PTR1
                where
                PTR1.PERSON_TYPE_ID     = l_PERSON_TYPE_ID  and
                PTR1.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID and
                PTR1.ORDR_NUM           = l_ORDR_NUM and
                PTR1.business_group_id  = c_business_group_id
                and   PTR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PER_TYP_RT_F PTR2
                where
                PTR2.PERSON_TYPE_ID     = l_PERSON_TYPE_ID  and
                PTR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                PTR2.ORDR_NUM           = l_ORDR_NUM and
                PTR2.business_group_id  = c_business_group_id
                and   PTR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PTR                     c_PTR%rowtype;
   l_per_typ_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PTR_unique in c_unique_PTR('PTR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PTR_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_PTR_unique.table_route_id '||r_PTR_unique.table_route_id,10);
       hr_utility.set_location(' r_PTR_unique.information1 '||r_PTR_unique.information1,10);
       hr_utility.set_location( 'r_PTR_unique.information2 '||r_PTR_unique.information2,10);
       hr_utility.set_location( 'r_PTR_unique.information3 '||r_PTR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PTR_min_max_dates(r_PTR_unique.table_route_id, r_PTR_unique.information1 ) ;
       fetch c_PTR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PTR_unique.information2);
       open c_PTR(r_PTR_unique.table_route_id,
                r_PTR_unique.information1,
                r_PTR_unique.information2,
                r_PTR_unique.information3 ) ;
       --
       fetch c_PTR into r_PTR ;
       --
       close c_PTR ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_PERSON_TYPE_ID := r_PTR.information176;
       else
         l_PERSON_TYPE_ID := r_PTR.information174;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PTR.INFORMATION262,r_PTR_unique.dml_operation);
       l_ORDR_NUM         := r_PTR.INFORMATION257;
       l_EXCLD_FLAG      := r_PTR.information11;
       hr_utility.set_location(' l_PERSON_TYPE_ID '||l_PERSON_TYPE_ID,999);
       hr_utility.set_location(' info 1           '||r_PTR.information1,999);
       if l_PERSON_TYPE_ID is null then
         close c_PTR_min_max_dates;
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_PTR.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'PTR'
                     ,p_child_data           => r_PTR.information173 );
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PTR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PTR_unique.information2 and r_PTR_unique.information3 then
               l_update := true;
               if r_PTR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PER_TYP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PER_TYP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PTR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PTR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PTR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PTR',l_new_value,l_prefix || r_PTR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_PTR_min_max_dates%found then
              -- cursor to find the object
              open c_find_PTR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_per_typ_rt_id, -999)  ) ;
              fetch c_find_PTR_in_target into l_new_value ;
              if c_find_PTR_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PER_TYP_RT_F',
                  p_base_key_column => 'PER_TYP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_PTR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'PER_TYP_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'PER_TYP_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PTR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PTR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_PTR_in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_PTR_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_PTR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_PTR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_PER_TYP_RT_F CREATE_PERSON_TYPE_RATE ',20);
             BEN_PERSON_TYPE_RATE_API.CREATE_PERSON_TYPE_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_PTR.INFORMATION11
             ,P_ORDR_NUM      => r_PTR.INFORMATION257
             ,P_PERSON_TYPE_ID      => l_PERSON_TYPE_ID
             ,P_PER_TYP_CD      => r_PTR.INFORMATION12
             ,P_PER_TYP_RT_ID      => l_per_typ_rt_id
             ,P_PTR_ATTRIBUTE1      => r_PTR.INFORMATION111
             ,P_PTR_ATTRIBUTE10      => r_PTR.INFORMATION120
             ,P_PTR_ATTRIBUTE11      => r_PTR.INFORMATION121
             ,P_PTR_ATTRIBUTE12      => r_PTR.INFORMATION122
             ,P_PTR_ATTRIBUTE13      => r_PTR.INFORMATION123
             ,P_PTR_ATTRIBUTE14      => r_PTR.INFORMATION124
             ,P_PTR_ATTRIBUTE15      => r_PTR.INFORMATION125
             ,P_PTR_ATTRIBUTE16      => r_PTR.INFORMATION126
             ,P_PTR_ATTRIBUTE17      => r_PTR.INFORMATION127
             ,P_PTR_ATTRIBUTE18      => r_PTR.INFORMATION128
             ,P_PTR_ATTRIBUTE19      => r_PTR.INFORMATION129
             ,P_PTR_ATTRIBUTE2      => r_PTR.INFORMATION112
             ,P_PTR_ATTRIBUTE20      => r_PTR.INFORMATION130
             ,P_PTR_ATTRIBUTE21      => r_PTR.INFORMATION131
             ,P_PTR_ATTRIBUTE22      => r_PTR.INFORMATION132
             ,P_PTR_ATTRIBUTE23      => r_PTR.INFORMATION133
             ,P_PTR_ATTRIBUTE24      => r_PTR.INFORMATION134
             ,P_PTR_ATTRIBUTE25      => r_PTR.INFORMATION135
             ,P_PTR_ATTRIBUTE26      => r_PTR.INFORMATION136
             ,P_PTR_ATTRIBUTE27      => r_PTR.INFORMATION137
             ,P_PTR_ATTRIBUTE28      => r_PTR.INFORMATION138
             ,P_PTR_ATTRIBUTE29      => r_PTR.INFORMATION139
             ,P_PTR_ATTRIBUTE3      => r_PTR.INFORMATION113
             ,P_PTR_ATTRIBUTE30      => r_PTR.INFORMATION140
             ,P_PTR_ATTRIBUTE4      => r_PTR.INFORMATION114
             ,P_PTR_ATTRIBUTE5      => r_PTR.INFORMATION115
             ,P_PTR_ATTRIBUTE6      => r_PTR.INFORMATION116
             ,P_PTR_ATTRIBUTE7      => r_PTR.INFORMATION117
             ,P_PTR_ATTRIBUTE8      => r_PTR.INFORMATION118
             ,P_PTR_ATTRIBUTE9      => r_PTR.INFORMATION119
             ,P_PTR_ATTRIBUTE_CATEGORY      => r_PTR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             )   ;
             --    insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_per_typ_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'PER_TYP_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PTR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_PER_TYP_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PTR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PTR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PTR.information3,
               p_effective_start_date  => r_PTR.information2,
               p_dml_operation         => r_PTR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PER_TYP_RT_ID   := r_PTR.information1;
             l_object_version_number := r_PTR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_PER_TYP_RT_F UPDATE_PERSON_TYPE_RATE ',30);
             BEN_PERSON_TYPE_RATE_API.UPDATE_PERSON_TYPE_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
            ,P_EXCLD_FLAG      => r_PTR.INFORMATION11
             ,P_ORDR_NUM      => r_PTR.INFORMATION257
             ,P_PERSON_TYPE_ID      => l_PERSON_TYPE_ID
             ,P_PER_TYP_CD      => r_PTR.INFORMATION12
             ,P_PER_TYP_RT_ID      => l_per_typ_rt_id
             ,P_PTR_ATTRIBUTE1      => r_PTR.INFORMATION111
             ,P_PTR_ATTRIBUTE10      => r_PTR.INFORMATION120
             ,P_PTR_ATTRIBUTE11      => r_PTR.INFORMATION121
             ,P_PTR_ATTRIBUTE12      => r_PTR.INFORMATION122
             ,P_PTR_ATTRIBUTE13      => r_PTR.INFORMATION123
             ,P_PTR_ATTRIBUTE14      => r_PTR.INFORMATION124
             ,P_PTR_ATTRIBUTE15      => r_PTR.INFORMATION125
             ,P_PTR_ATTRIBUTE16      => r_PTR.INFORMATION126
             ,P_PTR_ATTRIBUTE17      => r_PTR.INFORMATION127
             ,P_PTR_ATTRIBUTE18      => r_PTR.INFORMATION128
             ,P_PTR_ATTRIBUTE19      => r_PTR.INFORMATION129
             ,P_PTR_ATTRIBUTE2      => r_PTR.INFORMATION112
             ,P_PTR_ATTRIBUTE20      => r_PTR.INFORMATION130
             ,P_PTR_ATTRIBUTE21      => r_PTR.INFORMATION131
             ,P_PTR_ATTRIBUTE22      => r_PTR.INFORMATION132
             ,P_PTR_ATTRIBUTE23      => r_PTR.INFORMATION133
             ,P_PTR_ATTRIBUTE24      => r_PTR.INFORMATION134
             ,P_PTR_ATTRIBUTE25      => r_PTR.INFORMATION135
             ,P_PTR_ATTRIBUTE26      => r_PTR.INFORMATION136
             ,P_PTR_ATTRIBUTE27      => r_PTR.INFORMATION137
             ,P_PTR_ATTRIBUTE28      => r_PTR.INFORMATION138
             ,P_PTR_ATTRIBUTE29      => r_PTR.INFORMATION139
             ,P_PTR_ATTRIBUTE3      => r_PTR.INFORMATION113
             ,P_PTR_ATTRIBUTE30      => r_PTR.INFORMATION140
             ,P_PTR_ATTRIBUTE4      => r_PTR.INFORMATION114
             ,P_PTR_ATTRIBUTE5      => r_PTR.INFORMATION115
             ,P_PTR_ATTRIBUTE6      => r_PTR.INFORMATION116
             ,P_PTR_ATTRIBUTE7      => r_PTR.INFORMATION117
             ,P_PTR_ATTRIBUTE8      => r_PTR.INFORMATION118
             ,P_PTR_ATTRIBUTE9      => r_PTR.INFORMATION119
             ,P_PTR_ATTRIBUTE_CATEGORY      => r_PTR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                   --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_PTR.information3) then
                --
                BEN_PERSON_TYPE_RATE_API.delete_PERSON_TYPE_RATE(
                   --
                   p_validate                       => false
                   ,p_per_typ_rt_id                   => l_per_typ_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PTR',r_ptr.information5 );
    --
 end create_PTR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_GNR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_GNR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_GNDR_CD          varchar2(100);
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_GNR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_GNDR_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_GNR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_GNR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_GNR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     GNR.gndr_rt_id new_value
   from BEN_GNDR_RT_F GNR
   where
   GNR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   GNR.ORDR_NUM           = l_ORDR_NUM and
   GNR.business_group_id  = c_business_group_id
   and   GNR.gndr_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_GNDR_RT_F GNR1
                where
                GNR1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID  and
                GNR1.ORDR_NUM           = l_ORDR_NUM and
                GNR1.business_group_id  = c_business_group_id
                and   GNR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_GNDR_RT_F GNR2
                where
                GNR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                GNR2.ORDR_NUM           = l_ORDR_NUM and
                GNR2.business_group_id  = c_business_group_id
                and   GNR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_GNR                     c_GNR%rowtype;
   l_gndr_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_GNR_unique in c_unique_GNR('GNR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_GNR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_GNR_unique.table_route_id '||r_GNR_unique.table_route_id,10);
       hr_utility.set_location(' r_GNR_unique.information1 '||r_GNR_unique.information1,10);
       hr_utility.set_location( 'r_GNR_unique.information2 '||r_GNR_unique.information2,10);
       hr_utility.set_location( 'r_GNR_unique.information3 '||r_GNR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_GNR_min_max_dates(r_GNR_unique.table_route_id, r_GNR_unique.information1 ) ;
       fetch c_GNR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_GNR_unique.information2);
       open c_GNR(r_GNR_unique.table_route_id,
                r_GNR_unique.information1,
                r_GNR_unique.information2,
                r_GNR_unique.information3 ) ;
       --
       fetch c_GNR into r_GNR ;
       --
       close c_GNR ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_GNR.INFORMATION262,r_GNR_unique.dml_operation);
       l_ORDR_NUM         := r_GNR.INFORMATION257;
       l_GNDR_CD         := r_GNR.information11;
       l_EXCLD_FLAG      := r_GNR.information12;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_GNR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_GNR_unique.information2 and r_GNR_unique.information3 then
               l_update := true;
               if r_GNR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'GNDR_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'GNDR_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_GNR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_GNR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_GNR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  --log_data('GNR',l_new_value,l_prefix || r_GNR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_GNR_min_max_dates%found then
           -- cursor to find the object
           open c_find_GNR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_gndr_rt_id, -999)  ) ;
           fetch c_find_GNR_in_target into l_new_value ;
           if c_find_GNR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_GNDR_RT_F',
                  p_base_key_column => 'GNDR_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_GNR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'GNDR_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'GNDR_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_GNR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_GNR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_GNR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_GNR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_GNR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_GNR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_GNDR_RT_F CREATE_GENDER_RATE ',20);
           BEN_GENDER_RATE_API.CREATE_GENDER_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_GNR.INFORMATION12
             ,P_GNDR_CD      => r_GNR.INFORMATION11
             ,P_GNDR_RT_ID      => l_gndr_rt_id
             ,P_GNR_ATTRIBUTE1      => r_GNR.INFORMATION111
             ,P_GNR_ATTRIBUTE10      => r_GNR.INFORMATION120
             ,P_GNR_ATTRIBUTE11      => r_GNR.INFORMATION121
             ,P_GNR_ATTRIBUTE12      => r_GNR.INFORMATION122
             ,P_GNR_ATTRIBUTE13      => r_GNR.INFORMATION123
             ,P_GNR_ATTRIBUTE14      => r_GNR.INFORMATION124
             ,P_GNR_ATTRIBUTE15      => r_GNR.INFORMATION125
             ,P_GNR_ATTRIBUTE16      => r_GNR.INFORMATION126
             ,P_GNR_ATTRIBUTE17      => r_GNR.INFORMATION127
             ,P_GNR_ATTRIBUTE18      => r_GNR.INFORMATION128
             ,P_GNR_ATTRIBUTE19      => r_GNR.INFORMATION129
             ,P_GNR_ATTRIBUTE2      => r_GNR.INFORMATION112
             ,P_GNR_ATTRIBUTE20      => r_GNR.INFORMATION130
             ,P_GNR_ATTRIBUTE21      => r_GNR.INFORMATION131
             ,P_GNR_ATTRIBUTE22      => r_GNR.INFORMATION132
             ,P_GNR_ATTRIBUTE23      => r_GNR.INFORMATION133
             ,P_GNR_ATTRIBUTE24      => r_GNR.INFORMATION134
             ,P_GNR_ATTRIBUTE25      => r_GNR.INFORMATION135
             ,P_GNR_ATTRIBUTE26      => r_GNR.INFORMATION136
             ,P_GNR_ATTRIBUTE27      => r_GNR.INFORMATION137
             ,P_GNR_ATTRIBUTE28      => r_GNR.INFORMATION138
             ,P_GNR_ATTRIBUTE29      => r_GNR.INFORMATION139
             ,P_GNR_ATTRIBUTE3      => r_GNR.INFORMATION113
             ,P_GNR_ATTRIBUTE30      => r_GNR.INFORMATION140
             ,P_GNR_ATTRIBUTE4      => r_GNR.INFORMATION114
             ,P_GNR_ATTRIBUTE5      => r_GNR.INFORMATION115
             ,P_GNR_ATTRIBUTE6      => r_GNR.INFORMATION116
             ,P_GNR_ATTRIBUTE7      => r_GNR.INFORMATION117
             ,P_GNR_ATTRIBUTE8      => r_GNR.INFORMATION118
             ,P_GNR_ATTRIBUTE9      => r_GNR.INFORMATION119
             ,P_GNR_ATTRIBUTE_CATEGORY      => r_GNR.INFORMATION110
             ,P_ORDR_NUM      => r_GNR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_gndr_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'GNDR_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_GNR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_GNDR_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_GNR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_GNR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_GNR.information3,
               p_effective_start_date  => r_GNR.information2,
               p_dml_operation         => r_GNR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_GNDR_RT_ID   := r_GNR.information1;
             l_object_version_number := r_GNR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_GNDR_RT_F UPDATE_GENDER_RATE ',30);
           BEN_GENDER_RATE_API.UPDATE_GENDER_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_GNR.INFORMATION12
             ,P_GNDR_CD      => r_GNR.INFORMATION11
             ,P_GNDR_RT_ID      => l_gndr_rt_id
             ,P_GNR_ATTRIBUTE1      => r_GNR.INFORMATION111
             ,P_GNR_ATTRIBUTE10      => r_GNR.INFORMATION120
             ,P_GNR_ATTRIBUTE11      => r_GNR.INFORMATION121
             ,P_GNR_ATTRIBUTE12      => r_GNR.INFORMATION122
             ,P_GNR_ATTRIBUTE13      => r_GNR.INFORMATION123
             ,P_GNR_ATTRIBUTE14      => r_GNR.INFORMATION124
             ,P_GNR_ATTRIBUTE15      => r_GNR.INFORMATION125
             ,P_GNR_ATTRIBUTE16      => r_GNR.INFORMATION126
             ,P_GNR_ATTRIBUTE17      => r_GNR.INFORMATION127
             ,P_GNR_ATTRIBUTE18      => r_GNR.INFORMATION128
             ,P_GNR_ATTRIBUTE19      => r_GNR.INFORMATION129
             ,P_GNR_ATTRIBUTE2      => r_GNR.INFORMATION112
             ,P_GNR_ATTRIBUTE20      => r_GNR.INFORMATION130
             ,P_GNR_ATTRIBUTE21      => r_GNR.INFORMATION131
             ,P_GNR_ATTRIBUTE22      => r_GNR.INFORMATION132
             ,P_GNR_ATTRIBUTE23      => r_GNR.INFORMATION133
             ,P_GNR_ATTRIBUTE24      => r_GNR.INFORMATION134
             ,P_GNR_ATTRIBUTE25      => r_GNR.INFORMATION135
             ,P_GNR_ATTRIBUTE26      => r_GNR.INFORMATION136
             ,P_GNR_ATTRIBUTE27      => r_GNR.INFORMATION137
             ,P_GNR_ATTRIBUTE28      => r_GNR.INFORMATION138
             ,P_GNR_ATTRIBUTE29      => r_GNR.INFORMATION139
             ,P_GNR_ATTRIBUTE3      => r_GNR.INFORMATION113
             ,P_GNR_ATTRIBUTE30      => r_GNR.INFORMATION140
             ,P_GNR_ATTRIBUTE4      => r_GNR.INFORMATION114
             ,P_GNR_ATTRIBUTE5      => r_GNR.INFORMATION115
             ,P_GNR_ATTRIBUTE6      => r_GNR.INFORMATION116
             ,P_GNR_ATTRIBUTE7      => r_GNR.INFORMATION117
             ,P_GNR_ATTRIBUTE8      => r_GNR.INFORMATION118
             ,P_GNR_ATTRIBUTE9      => r_GNR.INFORMATION119
             ,P_GNR_ATTRIBUTE_CATEGORY      => r_GNR.INFORMATION110
             ,P_ORDR_NUM      => r_GNR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           end if;
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_GNR.information3) then
             --
             BEN_GENDER_RATE_API.delete_GENDER_RATE(
                --
                p_validate                       => false
                ,p_gndr_rt_id                   => l_gndr_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'GNR',r_gnr.information5 );
    --
 end create_GNR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_DBR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_DBR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   l_DSBLD_CD         varchar2(100);
   --
   cursor c_unique_DBR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_DSBLD_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_DBR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_DBR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_DBR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     DBR.dsbld_rt_id new_value
   from BEN_DSBLD_RT_F DBR
   where
   DBR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   DBR.DSBLD_CD         = l_DSBLD_CD and
   DBR.ORDR_NUM           = l_ORDR_NUM and
   DBR.business_group_id  = c_business_group_id
   and   DBR.dsbld_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_DSBLD_RT_F DBR1
                where
                DBR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DBR1.DSBLD_CD         = l_DSBLD_CD and
                DBR1.ORDR_NUM           = l_ORDR_NUM and
                DBR1.business_group_id  = c_business_group_id
                and   DBR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_DSBLD_RT_F DBR2
                where
                DBR2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                DBR2.DSBLD_CD         = l_DSBLD_CD and
                DBR2.ORDR_NUM           = l_ORDR_NUM and
                DBR2.business_group_id  = c_business_group_id
                and   DBR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_DBR                     c_DBR%rowtype;
   l_dsbld_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_DBR_unique in c_unique_DBR('DBR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_DBR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_DBR_unique.table_route_id '||r_DBR_unique.table_route_id,10);
       hr_utility.set_location(' r_DBR_unique.information1 '||r_DBR_unique.information1,10);
       hr_utility.set_location( 'r_DBR_unique.information2 '||r_DBR_unique.information2,10);
       hr_utility.set_location( 'r_DBR_unique.information3 '||r_DBR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_DBR_min_max_dates(r_DBR_unique.table_route_id, r_DBR_unique.information1 ) ;
       fetch c_DBR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_DBR_unique.information2);
       open c_DBR(r_DBR_unique.table_route_id,
                r_DBR_unique.information1,
                r_DBR_unique.information2,
                r_DBR_unique.information3 ) ;
       --
       fetch c_DBR into r_DBR ;
       --
       close c_DBR ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_DBR.INFORMATION262,r_DBR_unique.dml_operation);
       l_ORDR_NUM         := r_DBR.INFORMATION260;
       l_EXCLD_FLAG       := r_DBR.information12;
       l_DSBLD_CD         := r_DBR.information11;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_DBR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_DBR_unique.information2 and r_DBR_unique.information3 then
               l_update := true;
               if r_DBR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'DSBLD_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DSBLD_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DBR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_DBR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DBR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  --log_data('DBR',l_new_value,l_prefix || r_DBR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_DBR_min_max_dates%found then
           -- cursor to find the object
           open c_find_DBR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_dsbld_rt_id, -999)  ) ;
           fetch c_find_DBR_in_target into l_new_value ;
           if c_find_DBR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_DSBLD_RT_F',
                  p_base_key_column => 'DSBLD_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_DBR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'DSBLD_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'DSBLD_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_DBR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DBR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_DBR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_DBR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_DBR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_DBR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_DSBLD_RT_F CREATE_DSBLD_RT ',20);
           BEN_DSBLD_RT_API.CREATE_DSBLD_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_DBR_ATTRIBUTE1      => r_DBR.INFORMATION111
             ,P_DBR_ATTRIBUTE10      => r_DBR.INFORMATION120
             ,P_DBR_ATTRIBUTE11      => r_DBR.INFORMATION121
             ,P_DBR_ATTRIBUTE12      => r_DBR.INFORMATION122
             ,P_DBR_ATTRIBUTE13      => r_DBR.INFORMATION123
             ,P_DBR_ATTRIBUTE14      => r_DBR.INFORMATION124
             ,P_DBR_ATTRIBUTE15      => r_DBR.INFORMATION125
             ,P_DBR_ATTRIBUTE16      => r_DBR.INFORMATION126
             ,P_DBR_ATTRIBUTE17      => r_DBR.INFORMATION127
             ,P_DBR_ATTRIBUTE18      => r_DBR.INFORMATION128
             ,P_DBR_ATTRIBUTE19      => r_DBR.INFORMATION129
             ,P_DBR_ATTRIBUTE2      => r_DBR.INFORMATION112
             ,P_DBR_ATTRIBUTE20      => r_DBR.INFORMATION130
             ,P_DBR_ATTRIBUTE21      => r_DBR.INFORMATION131
             ,P_DBR_ATTRIBUTE22      => r_DBR.INFORMATION132
             ,P_DBR_ATTRIBUTE23      => r_DBR.INFORMATION133
             ,P_DBR_ATTRIBUTE24      => r_DBR.INFORMATION134
             ,P_DBR_ATTRIBUTE25      => r_DBR.INFORMATION135
             ,P_DBR_ATTRIBUTE26      => r_DBR.INFORMATION136
             ,P_DBR_ATTRIBUTE27      => r_DBR.INFORMATION137
             ,P_DBR_ATTRIBUTE28      => r_DBR.INFORMATION138
             ,P_DBR_ATTRIBUTE29      => r_DBR.INFORMATION139
             ,P_DBR_ATTRIBUTE3      => r_DBR.INFORMATION113
             ,P_DBR_ATTRIBUTE30      => r_DBR.INFORMATION140
             ,P_DBR_ATTRIBUTE4      => r_DBR.INFORMATION114
             ,P_DBR_ATTRIBUTE5      => r_DBR.INFORMATION115
             ,P_DBR_ATTRIBUTE6      => r_DBR.INFORMATION116
             ,P_DBR_ATTRIBUTE7      => r_DBR.INFORMATION117
             ,P_DBR_ATTRIBUTE8      => r_DBR.INFORMATION118
             ,P_DBR_ATTRIBUTE9      => r_DBR.INFORMATION119
             ,P_DBR_ATTRIBUTE_CATEGORY      => r_DBR.INFORMATION110
             ,P_DSBLD_CD      => r_DBR.INFORMATION11
             ,P_DSBLD_RT_ID      => l_dsbld_rt_id
             ,P_EXCLD_FLAG      => r_DBR.INFORMATION12
             ,P_ORDR_NUM      => r_DBR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_dsbld_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'DSBLD_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_DBR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_DSBLD_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DBR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_DBR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_DBR.information3,
               p_effective_start_date  => r_DBR.information2,
               p_dml_operation         => r_DBR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_DSBLD_RT_ID   := r_DBR.information1;
             l_object_version_number := r_DBR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_DSBLD_RT_F UPDATE_DSBLD_RT ',30);
           BEN_DSBLD_RT_API.UPDATE_DSBLD_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DBR_ATTRIBUTE1      => r_DBR.INFORMATION111
             ,P_DBR_ATTRIBUTE10      => r_DBR.INFORMATION120
             ,P_DBR_ATTRIBUTE11      => r_DBR.INFORMATION121
             ,P_DBR_ATTRIBUTE12      => r_DBR.INFORMATION122
             ,P_DBR_ATTRIBUTE13      => r_DBR.INFORMATION123
             ,P_DBR_ATTRIBUTE14      => r_DBR.INFORMATION124
             ,P_DBR_ATTRIBUTE15      => r_DBR.INFORMATION125
             ,P_DBR_ATTRIBUTE16      => r_DBR.INFORMATION126
             ,P_DBR_ATTRIBUTE17      => r_DBR.INFORMATION127
             ,P_DBR_ATTRIBUTE18      => r_DBR.INFORMATION128
             ,P_DBR_ATTRIBUTE19      => r_DBR.INFORMATION129
             ,P_DBR_ATTRIBUTE2      => r_DBR.INFORMATION112
             ,P_DBR_ATTRIBUTE20      => r_DBR.INFORMATION130
             ,P_DBR_ATTRIBUTE21      => r_DBR.INFORMATION131
             ,P_DBR_ATTRIBUTE22      => r_DBR.INFORMATION132
             ,P_DBR_ATTRIBUTE23      => r_DBR.INFORMATION133
             ,P_DBR_ATTRIBUTE24      => r_DBR.INFORMATION134
             ,P_DBR_ATTRIBUTE25      => r_DBR.INFORMATION135
             ,P_DBR_ATTRIBUTE26      => r_DBR.INFORMATION136
             ,P_DBR_ATTRIBUTE27      => r_DBR.INFORMATION137
             ,P_DBR_ATTRIBUTE28      => r_DBR.INFORMATION138
             ,P_DBR_ATTRIBUTE29      => r_DBR.INFORMATION139
             ,P_DBR_ATTRIBUTE3      => r_DBR.INFORMATION113
             ,P_DBR_ATTRIBUTE30      => r_DBR.INFORMATION140
             ,P_DBR_ATTRIBUTE4      => r_DBR.INFORMATION114
             ,P_DBR_ATTRIBUTE5      => r_DBR.INFORMATION115
             ,P_DBR_ATTRIBUTE6      => r_DBR.INFORMATION116
             ,P_DBR_ATTRIBUTE7      => r_DBR.INFORMATION117
             ,P_DBR_ATTRIBUTE8      => r_DBR.INFORMATION118
             ,P_DBR_ATTRIBUTE9      => r_DBR.INFORMATION119
             ,P_DBR_ATTRIBUTE_CATEGORY      => r_DBR.INFORMATION110
             ,P_DSBLD_CD      => r_DBR.INFORMATION11
             ,P_DSBLD_RT_ID      => l_dsbld_rt_id
             ,P_EXCLD_FLAG      => r_DBR.INFORMATION12
             ,P_ORDR_NUM      => r_DBR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_DBR.information3) then
             --
             BEN_DSBLD_RT_API.delete_DSBLD_RT(
                --
                p_validate                       => false
                ,p_dsbld_rt_id                   => l_dsbld_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'DBR',r_dbr.information5 );
    --
 end create_DBR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_CTY_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CTY_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_COMPETENCE_ID  number;
   l_RATING_LEVEL_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   --
   cursor c_unique_CTY(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_COMPTNCY_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,  cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CTY_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CTY(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CTY_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CTY.comptncy_rt_id new_value
   from BEN_COMPTNCY_RT_F CTY
   where
   CTY.COMPETENCE_ID     = l_COMPETENCE_ID  and
   CTY.RATING_LEVEL_ID     =l_RATING_LEVEL_ID  and
   CTY.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID and
   CTY.ORDR_NUM           = l_ORDR_NUM and
   CTY.business_group_id  = c_business_group_id
   and   CTY.comptncy_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_COMPTNCY_RT_F CTY1
                where
                CTY1.COMPETENCE_ID     = l_COMPETENCE_ID  and
                CTY1.RATING_LEVEL_ID    =l_RATING_LEVEL_ID  and
                CTY1.VRBL_RT_PRFL_ID =    l_VRBL_RT_PRFL_ID and
                CTY1.ORDR_NUM           = l_ORDR_NUM and
                CTY1.business_group_id  = c_business_group_id
                and   CTY1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_COMPTNCY_RT_F CTY2
                where
                CTY2.COMPETENCE_ID     = l_COMPETENCE_ID  and
                CTY2.RATING_LEVEL_ID     = l_RATING_LEVEL_ID  and
                CTY2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                CTY2.ORDR_NUM           = l_ORDR_NUM and
                CTY2.business_group_id  = c_business_group_id
                and   CTY2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CTY                     c_CTY%rowtype;
   l_comptncy_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
--       l_ORDR_NUM         := r_GNR.information12;
--       l_EXCLD_FLAG      := r_GNR.information11;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CTY_unique in c_unique_CTY('CTY') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CTY_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_CTY_unique.table_route_id '||r_CTY_unique.table_route_id,10);
       hr_utility.set_location(' r_CTY_unique.information1 '||r_CTY_unique.information1,10);
       hr_utility.set_location( 'r_CTY_unique.information2 '||r_CTY_unique.information2,10);
       hr_utility.set_location( 'r_CTY_unique.information3 '||r_CTY_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CTY_min_max_dates(r_CTY_unique.table_route_id, r_CTY_unique.information1 ) ;
       fetch c_CTY_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_CTY_unique.information2);
       open c_CTY(r_CTY_unique.table_route_id,
                r_CTY_unique.information1,
                r_CTY_unique.information2,
                r_CTY_unique.information3 ) ;
       --
       fetch c_CTY into r_CTY ;
       --
       close c_CTY ;
       --
       --Mapping Related
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_COMPETENCE_ID := r_CTY.information176;
       else
         l_COMPETENCE_ID := r_CTY.information174;
       end if;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
       l_RATING_LEVEL_ID := r_CTY.information180;
       else
         l_RATING_LEVEL_ID := r_CTY.information178;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_CTY.INFORMATION262,r_CTY_unique.dml_operation);
       l_ORDR_NUM         := r_CTY.INFORMATION260;
       l_EXCLD_FLAG      := r_CTY.INFORMATION11;

       if l_COMPETENCE_ID is null or l_RATING_LEVEL_ID is null then
         close c_CTY_min_max_dates;
         --
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_CTY.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'CTY'
                     ,p_child_data           => r_CTY.information173 );

         --
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_CTY_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CTY_unique.information2 and r_CTY_unique.information3 then
               l_update := true;
               if r_CTY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'COMPTNCY_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'COMPTNCY_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CTY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CTY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CTY_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  --log_data('CTY',l_new_value,l_prefix || r_CTY_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_CTY_min_max_dates%found then
              -- cursor to find the object
              open c_find_CTY_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_comptncy_rt_id, -999)  ) ;
              fetch c_find_CTY_in_target into l_new_value ;
              if c_find_CTY_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_COMPTNCY_RT_F',
                  p_base_key_column => 'COMPTNCY_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_CTY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'COMPTNCY_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'COMPTNCY_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_CTY_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CTY_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_CTY_in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_CTY_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_CTY.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_CTY.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_COMPTNCY_RT_F CREATE_COMPTNCY_RT ',20);
             BEN_COMPTNCY_RT_API.CREATE_COMPTNCY_RT(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_COMPETENCE_ID      => l_COMPETENCE_ID
             ,P_COMPTNCY_RT_ID      => l_comptncy_rt_id
             ,P_CTY_ATTRIBUTE1      => r_CTY.INFORMATION111
             ,P_CTY_ATTRIBUTE10      => r_CTY.INFORMATION120
             ,P_CTY_ATTRIBUTE11      => r_CTY.INFORMATION121
             ,P_CTY_ATTRIBUTE12      => r_CTY.INFORMATION122
             ,P_CTY_ATTRIBUTE13      => r_CTY.INFORMATION123
             ,P_CTY_ATTRIBUTE14      => r_CTY.INFORMATION124
             ,P_CTY_ATTRIBUTE15      => r_CTY.INFORMATION125
             ,P_CTY_ATTRIBUTE16      => r_CTY.INFORMATION126
             ,P_CTY_ATTRIBUTE17      => r_CTY.INFORMATION127
             ,P_CTY_ATTRIBUTE18      => r_CTY.INFORMATION128
             ,P_CTY_ATTRIBUTE19      => r_CTY.INFORMATION129
             ,P_CTY_ATTRIBUTE2      => r_CTY.INFORMATION112
             ,P_CTY_ATTRIBUTE20      => r_CTY.INFORMATION130
             ,P_CTY_ATTRIBUTE21      => r_CTY.INFORMATION131
             ,P_CTY_ATTRIBUTE22      => r_CTY.INFORMATION132
             ,P_CTY_ATTRIBUTE23      => r_CTY.INFORMATION133
             ,P_CTY_ATTRIBUTE24      => r_CTY.INFORMATION134
             ,P_CTY_ATTRIBUTE25      => r_CTY.INFORMATION135
             ,P_CTY_ATTRIBUTE26      => r_CTY.INFORMATION136
             ,P_CTY_ATTRIBUTE27      => r_CTY.INFORMATION137
             ,P_CTY_ATTRIBUTE28      => r_CTY.INFORMATION138
             ,P_CTY_ATTRIBUTE29      => r_CTY.INFORMATION139
             ,P_CTY_ATTRIBUTE3      => r_CTY.INFORMATION113
             ,P_CTY_ATTRIBUTE30      => r_CTY.INFORMATION140
             ,P_CTY_ATTRIBUTE4      => r_CTY.INFORMATION114
             ,P_CTY_ATTRIBUTE5      => r_CTY.INFORMATION115
             ,P_CTY_ATTRIBUTE6      => r_CTY.INFORMATION116
             ,P_CTY_ATTRIBUTE7      => r_CTY.INFORMATION117
             ,P_CTY_ATTRIBUTE8      => r_CTY.INFORMATION118
             ,P_CTY_ATTRIBUTE9      => r_CTY.INFORMATION119
             ,P_CTY_ATTRIBUTE_CATEGORY      => r_CTY.INFORMATION110
             ,P_EXCLD_FLAG      => r_CTY.INFORMATION11
             ,P_ORDR_NUM      => r_CTY.INFORMATION260
             ,P_RATING_LEVEL_ID      => l_RATING_LEVEL_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_comptncy_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'COMPTNCY_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_CTY.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_COMPTNCY_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CTY_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CTY.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CTY.information3,
               p_effective_start_date  => r_CTY.information2,
               p_dml_operation         => r_CTY.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_COMPTNCY_RT_ID   := r_CTY.information1;
             l_object_version_number := r_CTY.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_COMPTNCY_RT_F UPDATE_COMPTNCY_RT ',30);
             BEN_COMPTNCY_RT_API.UPDATE_COMPTNCY_RT(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_COMPETENCE_ID      => l_COMPETENCE_ID
             ,P_COMPTNCY_RT_ID      => l_comptncy_rt_id
             ,P_CTY_ATTRIBUTE1      => r_CTY.INFORMATION111
             ,P_CTY_ATTRIBUTE10      => r_CTY.INFORMATION120
             ,P_CTY_ATTRIBUTE11      => r_CTY.INFORMATION121
             ,P_CTY_ATTRIBUTE12      => r_CTY.INFORMATION122
             ,P_CTY_ATTRIBUTE13      => r_CTY.INFORMATION123
             ,P_CTY_ATTRIBUTE14      => r_CTY.INFORMATION124
             ,P_CTY_ATTRIBUTE15      => r_CTY.INFORMATION125
             ,P_CTY_ATTRIBUTE16      => r_CTY.INFORMATION126
             ,P_CTY_ATTRIBUTE17      => r_CTY.INFORMATION127
             ,P_CTY_ATTRIBUTE18      => r_CTY.INFORMATION128
             ,P_CTY_ATTRIBUTE19      => r_CTY.INFORMATION129
             ,P_CTY_ATTRIBUTE2      => r_CTY.INFORMATION112
             ,P_CTY_ATTRIBUTE20      => r_CTY.INFORMATION130
             ,P_CTY_ATTRIBUTE21      => r_CTY.INFORMATION131
             ,P_CTY_ATTRIBUTE22      => r_CTY.INFORMATION132
             ,P_CTY_ATTRIBUTE23      => r_CTY.INFORMATION133
             ,P_CTY_ATTRIBUTE24      => r_CTY.INFORMATION134
             ,P_CTY_ATTRIBUTE25      => r_CTY.INFORMATION135
             ,P_CTY_ATTRIBUTE26      => r_CTY.INFORMATION136
             ,P_CTY_ATTRIBUTE27      => r_CTY.INFORMATION137
             ,P_CTY_ATTRIBUTE28      => r_CTY.INFORMATION138
             ,P_CTY_ATTRIBUTE29      => r_CTY.INFORMATION139
             ,P_CTY_ATTRIBUTE3      => r_CTY.INFORMATION113
             ,P_CTY_ATTRIBUTE30      => r_CTY.INFORMATION140
             ,P_CTY_ATTRIBUTE4      => r_CTY.INFORMATION114
             ,P_CTY_ATTRIBUTE5      => r_CTY.INFORMATION115
             ,P_CTY_ATTRIBUTE6      => r_CTY.INFORMATION116
             ,P_CTY_ATTRIBUTE7      => r_CTY.INFORMATION117
             ,P_CTY_ATTRIBUTE8      => r_CTY.INFORMATION118
             ,P_CTY_ATTRIBUTE9      => r_CTY.INFORMATION119
             ,P_CTY_ATTRIBUTE_CATEGORY      => r_CTY.INFORMATION110
             ,P_EXCLD_FLAG      => r_CTY.INFORMATION11
             ,P_ORDR_NUM      => r_CTY.INFORMATION260
             ,P_RATING_LEVEL_ID      => l_RATING_LEVEL_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_CTY.information3) then
                --
                BEN_COMPTNCY_RT_API.delete_COMPTNCY_RT(
                   --
                   p_validate                       => false
                   ,p_comptncy_rt_id                   => l_comptncy_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CTY',r_cty.information5 );
    --
 end create_CTY_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LMM_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LMM_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_lbr_mmbr_flag   ben_lbr_mmbr_rt_f.lbr_mmbr_flag%type;
   cursor c_unique_LMM(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LBR_MMBR_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LMM_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LMM(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LMM_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LMM.lbr_mmbr_rt_id new_value
   from BEN_LBR_MMBR_RT_F LMM
   where
   LMM.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   LMM.business_group_id  = c_business_group_id
   and   LMM.lbr_mmbr_rt_id  <> c_new_pk_id
   and   LMM.lbr_mmbr_flag = l_lbr_mmbr_flag
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LBR_MMBR_RT_F LMM1
                where
                LMM1.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                LMM1.business_group_id  = c_business_group_id
                and   LMM1.effective_start_date <= c_effective_start_date
                and   LMM1.lbr_mmbr_flag = l_lbr_mmbr_flag )
   and exists ( select null
                from BEN_LBR_MMBR_RT_F LMM2
                where
                LMM2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                LMM2.business_group_id  = c_business_group_id
                and   LMM2.effective_end_date >= c_effective_end_date
                and   LMM2.lbr_mmbr_flag = l_lbr_mmbr_flag )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LMM                     c_LMM%rowtype;
   l_lbr_mmbr_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LMM_unique in c_unique_LMM('LMM') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LMM_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_LMM_unique.table_route_id '||r_LMM_unique.table_route_id,10);
       hr_utility.set_location(' r_LMM_unique.information1 '||r_LMM_unique.information1,10);
       hr_utility.set_location( 'r_LMM_unique.information2 '||r_LMM_unique.information2,10);
       hr_utility.set_location( 'r_LMM_unique.information3 '||r_LMM_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LMM_min_max_dates(r_LMM_unique.table_route_id, r_LMM_unique.information1 ) ;
       fetch c_LMM_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LMM_unique.information2);
       open c_LMM(r_LMM_unique.table_route_id,
                r_LMM_unique.information1,
                r_LMM_unique.information2,
                r_LMM_unique.information3 ) ;
       --
       fetch c_LMM into r_LMM ;
       --
       close c_LMM ;
       --
       l_lbr_mmbr_flag := r_LMM.information12;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_LMM.INFORMATION262,r_LMM_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_LMM_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LMM_unique.information2 and r_LMM_unique.information3 then
               l_update := true;
               if r_LMM_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LBR_MMBR_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LBR_MMBR_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LMM_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LMM_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LMM_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('LMM',l_new_value,l_prefix || r_LMM_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_LMM_min_max_dates%found then
           -- cursor to find the object
           open c_find_LMM_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_lbr_mmbr_rt_id, -999)  ) ;
           fetch c_find_LMM_in_target into l_new_value ;
           if c_find_LMM_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LBR_MMBR_RT_F',
                  p_base_key_column => 'LBR_MMBR_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LMM_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'LBR_MMBR_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'LBR_MMBR_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_LMM_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_LMM_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LMM_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_LMM_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_LMM.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LMM.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LBR_MMBR_RT_F CREATE_LABOR_MEMBER_RATE ',20);
           BEN_LABOR_MEMBER_RATE_API.CREATE_LABOR_MEMBER_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_LMM.INFORMATION12
             ,P_LBR_MMBR_FLAG      => r_LMM.INFORMATION11
             ,P_LBR_MMBR_RT_ID      => l_lbr_mmbr_rt_id
             ,P_LMM_ATTRIBUTE1      => r_LMM.INFORMATION111
             ,P_LMM_ATTRIBUTE10      => r_LMM.INFORMATION120
             ,P_LMM_ATTRIBUTE11      => r_LMM.INFORMATION121
             ,P_LMM_ATTRIBUTE12      => r_LMM.INFORMATION122
             ,P_LMM_ATTRIBUTE13      => r_LMM.INFORMATION123
             ,P_LMM_ATTRIBUTE14      => r_LMM.INFORMATION124
             ,P_LMM_ATTRIBUTE15      => r_LMM.INFORMATION125
             ,P_LMM_ATTRIBUTE16      => r_LMM.INFORMATION126
             ,P_LMM_ATTRIBUTE17      => r_LMM.INFORMATION127
             ,P_LMM_ATTRIBUTE18      => r_LMM.INFORMATION128
             ,P_LMM_ATTRIBUTE19      => r_LMM.INFORMATION129
             ,P_LMM_ATTRIBUTE2      => r_LMM.INFORMATION112
             ,P_LMM_ATTRIBUTE20      => r_LMM.INFORMATION130
             ,P_LMM_ATTRIBUTE21      => r_LMM.INFORMATION131
             ,P_LMM_ATTRIBUTE22      => r_LMM.INFORMATION132
             ,P_LMM_ATTRIBUTE23      => r_LMM.INFORMATION133
             ,P_LMM_ATTRIBUTE24      => r_LMM.INFORMATION134
             ,P_LMM_ATTRIBUTE25      => r_LMM.INFORMATION135
             ,P_LMM_ATTRIBUTE26      => r_LMM.INFORMATION136
             ,P_LMM_ATTRIBUTE27      => r_LMM.INFORMATION137
             ,P_LMM_ATTRIBUTE28      => r_LMM.INFORMATION138
             ,P_LMM_ATTRIBUTE29      => r_LMM.INFORMATION139
             ,P_LMM_ATTRIBUTE3      => r_LMM.INFORMATION113
             ,P_LMM_ATTRIBUTE30      => r_LMM.INFORMATION140
             ,P_LMM_ATTRIBUTE4      => r_LMM.INFORMATION114
             ,P_LMM_ATTRIBUTE5      => r_LMM.INFORMATION115
             ,P_LMM_ATTRIBUTE6      => r_LMM.INFORMATION116
             ,P_LMM_ATTRIBUTE7      => r_LMM.INFORMATION117
             ,P_LMM_ATTRIBUTE8      => r_LMM.INFORMATION118
             ,P_LMM_ATTRIBUTE9      => r_LMM.INFORMATION119
             ,P_LMM_ATTRIBUTE_CATEGORY      => r_LMM.INFORMATION110
             ,P_ORDR_NUM      => r_LMM.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_lbr_mmbr_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'LBR_MMBR_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_LMM.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_LBR_MMBR_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_LMM_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LMM.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LMM.information3,
               p_effective_start_date  => r_LMM.information2,
               p_dml_operation         => r_LMM.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LBR_MMBR_RT_ID   := r_LMM.information1;
             l_object_version_number := r_LMM.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_LBR_MMBR_RT_F UPDATE_LABOR_MEMBER_RATE ',30);
           BEN_LABOR_MEMBER_RATE_API.UPDATE_LABOR_MEMBER_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_LMM.INFORMATION12
             ,P_LBR_MMBR_FLAG      => r_LMM.INFORMATION11
             ,P_LBR_MMBR_RT_ID      => l_lbr_mmbr_rt_id
             ,P_LMM_ATTRIBUTE1      => r_LMM.INFORMATION111
             ,P_LMM_ATTRIBUTE10      => r_LMM.INFORMATION120
             ,P_LMM_ATTRIBUTE11      => r_LMM.INFORMATION121
             ,P_LMM_ATTRIBUTE12      => r_LMM.INFORMATION122
             ,P_LMM_ATTRIBUTE13      => r_LMM.INFORMATION123
             ,P_LMM_ATTRIBUTE14      => r_LMM.INFORMATION124
             ,P_LMM_ATTRIBUTE15      => r_LMM.INFORMATION125
             ,P_LMM_ATTRIBUTE16      => r_LMM.INFORMATION126
             ,P_LMM_ATTRIBUTE17      => r_LMM.INFORMATION127
             ,P_LMM_ATTRIBUTE18      => r_LMM.INFORMATION128
             ,P_LMM_ATTRIBUTE19      => r_LMM.INFORMATION129
             ,P_LMM_ATTRIBUTE2      => r_LMM.INFORMATION112
             ,P_LMM_ATTRIBUTE20      => r_LMM.INFORMATION130
             ,P_LMM_ATTRIBUTE21      => r_LMM.INFORMATION131
             ,P_LMM_ATTRIBUTE22      => r_LMM.INFORMATION132
             ,P_LMM_ATTRIBUTE23      => r_LMM.INFORMATION133
             ,P_LMM_ATTRIBUTE24      => r_LMM.INFORMATION134
             ,P_LMM_ATTRIBUTE25      => r_LMM.INFORMATION135
             ,P_LMM_ATTRIBUTE26      => r_LMM.INFORMATION136
             ,P_LMM_ATTRIBUTE27      => r_LMM.INFORMATION137
             ,P_LMM_ATTRIBUTE28      => r_LMM.INFORMATION138
             ,P_LMM_ATTRIBUTE29      => r_LMM.INFORMATION139
             ,P_LMM_ATTRIBUTE3      => r_LMM.INFORMATION113
             ,P_LMM_ATTRIBUTE30      => r_LMM.INFORMATION140
             ,P_LMM_ATTRIBUTE4      => r_LMM.INFORMATION114
             ,P_LMM_ATTRIBUTE5      => r_LMM.INFORMATION115
             ,P_LMM_ATTRIBUTE6      => r_LMM.INFORMATION116
             ,P_LMM_ATTRIBUTE7      => r_LMM.INFORMATION117
             ,P_LMM_ATTRIBUTE8      => r_LMM.INFORMATION118
             ,P_LMM_ATTRIBUTE9      => r_LMM.INFORMATION119
             ,P_LMM_ATTRIBUTE_CATEGORY      => r_LMM.INFORMATION110
             ,P_ORDR_NUM      => r_LMM.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LMM.information3) then
             --
             BEN_LABOR_MEMBER_RATE_API.delete_LABOR_MEMBER_RATE(
                --
                p_validate                       => false
                ,p_lbr_mmbr_rt_id                   => l_lbr_mmbr_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LMM',r_lmm.information5 );
    --
 end create_LMM_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LAR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LAR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ABSENCE_ATTENDANCE_TYPE_ID  number;
   l_ABS_ATTENDANCE_REASON_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_LAR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LOA_RSN_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LAR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LAR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LAR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LAR.loa_rsn_rt_id new_value
   from BEN_LOA_RSN_RT_F LAR
   where
   LAR.ABSENCE_ATTENDANCE_TYPE_ID   = l_ABSENCE_ATTENDANCE_TYPE_ID  and
   nvl(LAR.ABS_ATTENDANCE_REASON_ID,-999)     = nvl(l_ABS_ATTENDANCE_REASON_ID,-999)  and
   LAR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   LAR.business_group_id  = c_business_group_id
   and   LAR.loa_rsn_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LOA_RSN_RT_F LAR1
                where
                LAR1.ABSENCE_ATTENDANCE_TYPE_ID  = l_ABSENCE_ATTENDANCE_TYPE_ID  and
                nvl(LAR1.ABS_ATTENDANCE_REASON_ID,-999)     = nvl(l_ABS_ATTENDANCE_REASON_ID,-999)  and
                LAR1.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                LAR1.business_group_id  = c_business_group_id
                and   LAR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LOA_RSN_RT_F LAR2
                where
                LAR2.ABSENCE_ATTENDANCE_TYPE_ID  = l_ABSENCE_ATTENDANCE_TYPE_ID  and
                nvl(LAR2.ABS_ATTENDANCE_REASON_ID,-999)     = nvl(l_ABS_ATTENDANCE_REASON_ID,-999)  and
                LAR2.VRBL_RT_PRFL_ID   = l_VRBL_RT_PRFL_ID  and
                LAR2.business_group_id  = c_business_group_id
                and   LAR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LAR                     c_LAR%rowtype;
   l_loa_rsn_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LAR_unique in c_unique_LAR('LAR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LAR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_LAR_unique.table_route_id '||r_LAR_unique.table_route_id,10);
       hr_utility.set_location(' r_LAR_unique.information1 '||r_LAR_unique.information1,10);
       hr_utility.set_location( 'r_LAR_unique.information2 '||r_LAR_unique.information2,10);
       hr_utility.set_location( 'r_LAR_unique.information3 '||r_LAR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LAR_min_max_dates(r_LAR_unique.table_route_id, r_LAR_unique.information1 ) ;
       fetch c_LAR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LAR_unique.information2);
       open c_LAR(r_LAR_unique.table_route_id,
                r_LAR_unique.information1,
                r_LAR_unique.information2,
                r_LAR_unique.information3 ) ;
       --
       fetch c_LAR into r_LAR ;
       --
       close c_LAR ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ABSENCE_ATTENDANCE_TYPE_ID := r_LAR.information176;
       else
         l_ABSENCE_ATTENDANCE_TYPE_ID := r_LAR.information174;
       end if;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ABS_ATTENDANCE_REASON_ID := r_LAR.information180;
       else
         l_ABS_ATTENDANCE_REASON_ID := r_LAR.information178;
       end if ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_LAR.INFORMATION262,r_LAR_unique.dml_operation);

       if l_ABSENCE_ATTENDANCE_TYPE_ID is null /*or l_ABS_ATTENDANCE_REASON_ID is null */ then
         close c_LAR_min_max_dates;
         --
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_LAR.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'LAR'
                     ,p_child_data           => r_LAR.information173 );

         --
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_LAR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LAR_unique.information2 and r_LAR_unique.information3 then
               l_update := true;
               if r_LAR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LOA_RSN_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LOA_RSN_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LAR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LAR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LAR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('LAR',l_new_value,l_prefix || r_LAR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_LAR_min_max_dates%found then
              -- cursor to find the object
              open c_find_LAR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_loa_rsn_rt_id, -999)  ) ;
              fetch c_find_LAR_in_target into l_new_value ;
              if c_find_LAR_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LOA_RSN_RT_F',
                  p_base_key_column => 'LOA_RSN_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_LAR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'LOA_RSN_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'LOA_RSN_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_LAR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_LAR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_LAR_in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_LAR_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_LAR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_LAR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_LOA_RSN_RT_F CREATE_LOA_REASON_RATE ',20);
             BEN_LOA_REASON_RATE_API.CREATE_LOA_REASON_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_ABSENCE_ATTENDANCE_TYPE_ID      => l_ABSENCE_ATTENDANCE_TYPE_ID
             ,P_ABS_ATTENDANCE_REASON_ID      => l_ABS_ATTENDANCE_REASON_ID
             ,P_EXCLD_FLAG      => r_LAR.INFORMATION11
             ,P_LAR_ATTRIBUTE1      => r_LAR.INFORMATION111
             ,P_LAR_ATTRIBUTE10      => r_LAR.INFORMATION120
             ,P_LAR_ATTRIBUTE11      => r_LAR.INFORMATION121
             ,P_LAR_ATTRIBUTE12      => r_LAR.INFORMATION122
             ,P_LAR_ATTRIBUTE13      => r_LAR.INFORMATION123
             ,P_LAR_ATTRIBUTE14      => r_LAR.INFORMATION124
             ,P_LAR_ATTRIBUTE15      => r_LAR.INFORMATION125
             ,P_LAR_ATTRIBUTE16      => r_LAR.INFORMATION126
             ,P_LAR_ATTRIBUTE17      => r_LAR.INFORMATION127
             ,P_LAR_ATTRIBUTE18      => r_LAR.INFORMATION128
             ,P_LAR_ATTRIBUTE19      => r_LAR.INFORMATION129
             ,P_LAR_ATTRIBUTE2      => r_LAR.INFORMATION112
             ,P_LAR_ATTRIBUTE20      => r_LAR.INFORMATION130
             ,P_LAR_ATTRIBUTE21      => r_LAR.INFORMATION131
             ,P_LAR_ATTRIBUTE22      => r_LAR.INFORMATION132
             ,P_LAR_ATTRIBUTE23      => r_LAR.INFORMATION133
             ,P_LAR_ATTRIBUTE24      => r_LAR.INFORMATION134
             ,P_LAR_ATTRIBUTE25      => r_LAR.INFORMATION135
             ,P_LAR_ATTRIBUTE26      => r_LAR.INFORMATION136
             ,P_LAR_ATTRIBUTE27      => r_LAR.INFORMATION137
             ,P_LAR_ATTRIBUTE28      => r_LAR.INFORMATION138
             ,P_LAR_ATTRIBUTE29      => r_LAR.INFORMATION139
             ,P_LAR_ATTRIBUTE3      => r_LAR.INFORMATION113
             ,P_LAR_ATTRIBUTE30      => r_LAR.INFORMATION140
             ,P_LAR_ATTRIBUTE4      => r_LAR.INFORMATION114
             ,P_LAR_ATTRIBUTE5      => r_LAR.INFORMATION115
             ,P_LAR_ATTRIBUTE6      => r_LAR.INFORMATION116
             ,P_LAR_ATTRIBUTE7      => r_LAR.INFORMATION117
             ,P_LAR_ATTRIBUTE8      => r_LAR.INFORMATION118
             ,P_LAR_ATTRIBUTE9      => r_LAR.INFORMATION119
             ,P_LAR_ATTRIBUTE_CATEGORY      => r_LAR.INFORMATION110
             ,P_LOA_RSN_CD      => r_LAR.INFORMATION12
             ,P_LOA_RSN_RT_ID      => l_loa_rsn_rt_id
             ,P_ORDR_NUM      => r_LAR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_loa_rsn_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'LOA_RSN_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_LAR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_LOA_RSN_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_LAR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LAR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LAR.information3,
               p_effective_start_date  => r_LAR.information2,
               p_dml_operation         => r_LAR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LOA_RSN_RT_ID   := r_LAR.information1;
             l_object_version_number := r_LAR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             hr_utility.set_location(' BEN_LOA_RSN_RT_F UPDATE_LOA_REASON_RATE ',30);
             BEN_LOA_REASON_RATE_API.UPDATE_LOA_REASON_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_ABSENCE_ATTENDANCE_TYPE_ID      => l_ABSENCE_ATTENDANCE_TYPE_ID
             ,P_ABS_ATTENDANCE_REASON_ID      => l_ABS_ATTENDANCE_REASON_ID
             ,P_EXCLD_FLAG      => r_LAR.INFORMATION11
             ,P_LAR_ATTRIBUTE1      => r_LAR.INFORMATION111
             ,P_LAR_ATTRIBUTE10      => r_LAR.INFORMATION120
             ,P_LAR_ATTRIBUTE11      => r_LAR.INFORMATION121
             ,P_LAR_ATTRIBUTE12      => r_LAR.INFORMATION122
             ,P_LAR_ATTRIBUTE13      => r_LAR.INFORMATION123
             ,P_LAR_ATTRIBUTE14      => r_LAR.INFORMATION124
             ,P_LAR_ATTRIBUTE15      => r_LAR.INFORMATION125
             ,P_LAR_ATTRIBUTE16      => r_LAR.INFORMATION126
             ,P_LAR_ATTRIBUTE17      => r_LAR.INFORMATION127
             ,P_LAR_ATTRIBUTE18      => r_LAR.INFORMATION128
             ,P_LAR_ATTRIBUTE19      => r_LAR.INFORMATION129
             ,P_LAR_ATTRIBUTE2      => r_LAR.INFORMATION112
             ,P_LAR_ATTRIBUTE20      => r_LAR.INFORMATION130
             ,P_LAR_ATTRIBUTE21      => r_LAR.INFORMATION131
             ,P_LAR_ATTRIBUTE22      => r_LAR.INFORMATION132
             ,P_LAR_ATTRIBUTE23      => r_LAR.INFORMATION133
             ,P_LAR_ATTRIBUTE24      => r_LAR.INFORMATION134
             ,P_LAR_ATTRIBUTE25      => r_LAR.INFORMATION135
             ,P_LAR_ATTRIBUTE26      => r_LAR.INFORMATION136
             ,P_LAR_ATTRIBUTE27      => r_LAR.INFORMATION137
             ,P_LAR_ATTRIBUTE28      => r_LAR.INFORMATION138
             ,P_LAR_ATTRIBUTE29      => r_LAR.INFORMATION139
             ,P_LAR_ATTRIBUTE3      => r_LAR.INFORMATION113
             ,P_LAR_ATTRIBUTE30      => r_LAR.INFORMATION140
             ,P_LAR_ATTRIBUTE4      => r_LAR.INFORMATION114
             ,P_LAR_ATTRIBUTE5      => r_LAR.INFORMATION115
             ,P_LAR_ATTRIBUTE6      => r_LAR.INFORMATION116
             ,P_LAR_ATTRIBUTE7      => r_LAR.INFORMATION117
             ,P_LAR_ATTRIBUTE8      => r_LAR.INFORMATION118
             ,P_LAR_ATTRIBUTE9      => r_LAR.INFORMATION119
             ,P_LAR_ATTRIBUTE_CATEGORY      => r_LAR.INFORMATION110
             ,P_LOA_RSN_CD      => r_LAR.INFORMATION12
             ,P_LOA_RSN_RT_ID      => l_loa_rsn_rt_id
             ,P_ORDR_NUM      => r_LAR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_LAR.information3) then
                --
                BEN_LOA_REASON_RATE_API.delete_LOA_REASON_RATE(
                   --
                   p_validate                       => false
                   ,p_loa_rsn_rt_id                   => l_loa_rsn_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LAR',r_lar.information5 );
    --
 end create_LAR_rows;

   --
   --
   ---------------------------------------------------------------
   ----------------------< create_OUR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_OUR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ORGANIZATION_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_OUR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ORG_UNIT_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_OUR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_OUR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_OUR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     OUR.org_unit_rt_id new_value
   from BEN_ORG_UNIT_RT_F OUR
   where
   OUR.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
   OUR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   OUR.business_group_id  = c_business_group_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and   OUR.org_unit_rt_id  <> c_new_pk_id
   and exists ( select null
                from BEN_ORG_UNIT_RT_F OUR1
                where
                OUR1.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
                OUR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                OUR1.business_group_id  = c_business_group_id
                and   OUR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ORG_UNIT_RT_F OUR2
                where
                OUR2.ORGANIZATION_ID    = l_ORGANIZATION_ID  and
                OUR2.VRBL_RT_PRFL_ID    =l_VRBL_RT_PRFL_ID  and
                OUR2.business_group_id  = c_business_group_id
                and   OUR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_OUR                     c_OUR%rowtype;
   l_org_unit_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_OUR_unique in c_unique_OUR('OUR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_OUR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_OUR_unique.table_route_id '||r_OUR_unique.table_route_id,10);
       hr_utility.set_location(' r_OUR_unique.information1 '||r_OUR_unique.information1,10);
       hr_utility.set_location( 'r_OUR_unique.information2 '||r_OUR_unique.information2,10);
       hr_utility.set_location( 'r_OUR_unique.information3 '||r_OUR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_OUR_min_max_dates(r_OUR_unique.table_route_id, r_OUR_unique.information1 ) ;
       fetch c_OUR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_OUR_unique.information2);
       open c_OUR(r_OUR_unique.table_route_id,
                r_OUR_unique.information1,
                r_OUR_unique.information2,
                r_OUR_unique.information3 ) ;
       --
       fetch c_OUR into r_OUR ;
       --
       close c_OUR ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ORGANIZATION_ID := r_OUR.information176;
       else
         l_ORGANIZATION_ID := r_OUR.information174;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_OUR.INFORMATION262,r_OUR_unique.dml_operation);

       if l_ORGANIZATION_ID is null then
         close c_OUR_min_max_dates;
         --
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_OUR.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'OUR'
                     ,p_child_data           => r_OUR.information173 );

         --
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_OUR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_OUR_unique.information2 and r_OUR_unique.information3 then
               l_update := true;
               if r_OUR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ORG_UNIT_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ORG_UNIT_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_OUR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_OUR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_OUR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('OUR',l_new_value,l_prefix || r_OUR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_OUR_min_max_dates%found then
              -- cursor to find the object
              open c_find_OUR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_org_unit_rt_id, -999)  ) ;
              fetch c_find_OUR_in_target into l_new_value ;
              if c_find_OUR_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ORG_UNIT_RT_F',
                  p_base_key_column => 'ORG_UNIT_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_OUR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'ORG_UNIT_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'ORG_UNIT_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_OUR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_OUR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_OUR_in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_OUR_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_OUR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_OUR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ORG_UNIT_RT_F CREATE_ORG_UNIT_RATE ',20);
             BEN_ORG_UNIT_RATE_API.CREATE_ORG_UNIT_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_OUR.INFORMATION11
             ,P_ORDR_NUM      => r_OUR.INFORMATION260
             ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
             ,P_ORG_UNIT_RT_ID      => l_org_unit_rt_id
             ,P_OUR_ATTRIBUTE1      => r_OUR.INFORMATION111
             ,P_OUR_ATTRIBUTE10      => r_OUR.INFORMATION120
             ,P_OUR_ATTRIBUTE11      => r_OUR.INFORMATION121
             ,P_OUR_ATTRIBUTE12      => r_OUR.INFORMATION122
             ,P_OUR_ATTRIBUTE13      => r_OUR.INFORMATION123
             ,P_OUR_ATTRIBUTE14      => r_OUR.INFORMATION124
             ,P_OUR_ATTRIBUTE15      => r_OUR.INFORMATION125
             ,P_OUR_ATTRIBUTE16      => r_OUR.INFORMATION126
             ,P_OUR_ATTRIBUTE17      => r_OUR.INFORMATION127
             ,P_OUR_ATTRIBUTE18      => r_OUR.INFORMATION128
             ,P_OUR_ATTRIBUTE19      => r_OUR.INFORMATION129
             ,P_OUR_ATTRIBUTE2      => r_OUR.INFORMATION112
             ,P_OUR_ATTRIBUTE20      => r_OUR.INFORMATION130
             ,P_OUR_ATTRIBUTE21      => r_OUR.INFORMATION131
             ,P_OUR_ATTRIBUTE22      => r_OUR.INFORMATION132
             ,P_OUR_ATTRIBUTE23      => r_OUR.INFORMATION133
             ,P_OUR_ATTRIBUTE24      => r_OUR.INFORMATION134
             ,P_OUR_ATTRIBUTE25      => r_OUR.INFORMATION135
             ,P_OUR_ATTRIBUTE26      => r_OUR.INFORMATION136
             ,P_OUR_ATTRIBUTE27      => r_OUR.INFORMATION137
             ,P_OUR_ATTRIBUTE28      => r_OUR.INFORMATION138
             ,P_OUR_ATTRIBUTE29      => r_OUR.INFORMATION139
             ,P_OUR_ATTRIBUTE3      => r_OUR.INFORMATION113
             ,P_OUR_ATTRIBUTE30      => r_OUR.INFORMATION140
             ,P_OUR_ATTRIBUTE4      => r_OUR.INFORMATION114
             ,P_OUR_ATTRIBUTE5      => r_OUR.INFORMATION115
             ,P_OUR_ATTRIBUTE6      => r_OUR.INFORMATION116
             ,P_OUR_ATTRIBUTE7      => r_OUR.INFORMATION117
             ,P_OUR_ATTRIBUTE8      => r_OUR.INFORMATION118
             ,P_OUR_ATTRIBUTE9      => r_OUR.INFORMATION119
             ,P_OUR_ATTRIBUTE_CATEGORY      => r_OUR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_org_unit_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'ORG_UNIT_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_OUR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_ORG_UNIT_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_OUR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_OUR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_OUR.information3,
               p_effective_start_date  => r_OUR.information2,
               p_dml_operation         => r_OUR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ORG_UNIT_RT_ID   := r_OUR.information1;
             l_object_version_number := r_OUR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             hr_utility.set_location(' BEN_ORG_UNIT_RT_F UPDATE_ORG_UNIT_RATE ',30);
             BEN_ORG_UNIT_RATE_API.UPDATE_ORG_UNIT_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_OUR.INFORMATION11
             ,P_ORDR_NUM      => r_OUR.INFORMATION260
             ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
             ,P_ORG_UNIT_RT_ID      => l_org_unit_rt_id
             ,P_OUR_ATTRIBUTE1      => r_OUR.INFORMATION111
             ,P_OUR_ATTRIBUTE10      => r_OUR.INFORMATION120
             ,P_OUR_ATTRIBUTE11      => r_OUR.INFORMATION121
             ,P_OUR_ATTRIBUTE12      => r_OUR.INFORMATION122
             ,P_OUR_ATTRIBUTE13      => r_OUR.INFORMATION123
             ,P_OUR_ATTRIBUTE14      => r_OUR.INFORMATION124
             ,P_OUR_ATTRIBUTE15      => r_OUR.INFORMATION125
             ,P_OUR_ATTRIBUTE16      => r_OUR.INFORMATION126
             ,P_OUR_ATTRIBUTE17      => r_OUR.INFORMATION127
             ,P_OUR_ATTRIBUTE18      => r_OUR.INFORMATION128
             ,P_OUR_ATTRIBUTE19      => r_OUR.INFORMATION129
             ,P_OUR_ATTRIBUTE2      => r_OUR.INFORMATION112
             ,P_OUR_ATTRIBUTE20      => r_OUR.INFORMATION130
             ,P_OUR_ATTRIBUTE21      => r_OUR.INFORMATION131
             ,P_OUR_ATTRIBUTE22      => r_OUR.INFORMATION132
             ,P_OUR_ATTRIBUTE23      => r_OUR.INFORMATION133
             ,P_OUR_ATTRIBUTE24      => r_OUR.INFORMATION134
             ,P_OUR_ATTRIBUTE25      => r_OUR.INFORMATION135
             ,P_OUR_ATTRIBUTE26      => r_OUR.INFORMATION136
             ,P_OUR_ATTRIBUTE27      => r_OUR.INFORMATION137
             ,P_OUR_ATTRIBUTE28      => r_OUR.INFORMATION138
             ,P_OUR_ATTRIBUTE29      => r_OUR.INFORMATION139
             ,P_OUR_ATTRIBUTE3      => r_OUR.INFORMATION113
             ,P_OUR_ATTRIBUTE30      => r_OUR.INFORMATION140
             ,P_OUR_ATTRIBUTE4      => r_OUR.INFORMATION114
             ,P_OUR_ATTRIBUTE5      => r_OUR.INFORMATION115
             ,P_OUR_ATTRIBUTE6      => r_OUR.INFORMATION116
             ,P_OUR_ATTRIBUTE7      => r_OUR.INFORMATION117
             ,P_OUR_ATTRIBUTE8      => r_OUR.INFORMATION118
             ,P_OUR_ATTRIBUTE9      => r_OUR.INFORMATION119
             ,P_OUR_ATTRIBUTE_CATEGORY      => r_OUR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_OUR.information3) then
                --
                BEN_ORG_UNIT_RATE_API.delete_ORG_UNIT_RATE(
                   --
                   p_validate                       => false
                   ,p_org_unit_rt_id                   => l_org_unit_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'OUR',r_our.information5 );
    --
 end create_OUR_rows;

   ---------------------------------------------------------------
   ----------------------< create_LER1_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LER1_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ORGANIZATION_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_LER1(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LGL_ENTY_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LER1_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LER1(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LER1_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LER1.lgl_enty_rt_id new_value
   from BEN_LGL_ENTY_RT_F LER1
   where
   LER1.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
   LER1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   LER1.business_group_id  = c_business_group_id
   and   LER1.lgl_enty_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LGL_ENTY_RT_F LER11
                where
                LER11.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
                LER11.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                LER11.business_group_id  = c_business_group_id
                and   LER11.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LGL_ENTY_RT_F LER12
                where
                LER12.ORGANIZATION_ID    = l_ORGANIZATION_ID  and
                LER12.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                LER12.business_group_id  = c_business_group_id
                and   LER12.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LER1                     c_LER1%rowtype;
   l_lgl_enty_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LER1_unique in c_unique_LER1('LER1') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LER1_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LER1_unique.table_route_id '||r_LER1_unique.table_route_id,10);
       hr_utility.set_location(' r_LER1_unique.information1 '||r_LER1_unique.information1,10);
       hr_utility.set_location( 'r_LER1_unique.information2 '||r_LER1_unique.information2,10);
       hr_utility.set_location( 'r_LER1_unique.information3 '||r_LER1_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LER1_min_max_dates(r_LER1_unique.table_route_id, r_LER1_unique.information1 ) ;
       fetch c_LER1_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LER1_unique.information2);
       open c_LER1(r_LER1_unique.table_route_id,
                r_LER1_unique.information1,
                r_LER1_unique.information2,
                r_LER1_unique.information3 ) ;
       --
       fetch c_LER1 into r_LER1 ;
       --
       close c_LER1 ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ORGANIZATION_ID := r_LER1.information176;
       else
         l_ORGANIZATION_ID := r_LER1.information174;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_LER1.information262,r_LER1_unique.dml_operation);

       if l_ORGANIZATION_ID is null then
         close c_LER1_min_max_dates;
         --
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_LER1.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'LER1'
                     ,p_child_data           => r_LER1.information173 );

         --
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_LER1_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LER1_unique.information2 and r_LER1_unique.information3 then
               l_update := true;
               if r_LER1_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LGL_ENTY_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LGL_ENTY_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LER1_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LER1_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LER1_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('LER1',l_new_value,l_prefix || r_LER1_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_LER1_min_max_dates%found then
              -- cursor to find the object
              open c_find_LER1_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_lgl_enty_rt_id, -999)  ) ;
              fetch c_find_LER1_in_target into l_new_value ;
              if c_find_LER1_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LGL_ENTY_RT_F',
                  p_base_key_column => 'LGL_ENTY_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_LER1_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'LGL_ENTY_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'LGL_ENTY_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_LER1_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_LER1_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_LER1_in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_LER1_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_LER1.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_LER1.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_LGL_ENTY_RT_F CREATE_LEGAL_ENTITY_RATE ',20);
             BEN_LEGAL_ENTITY_RATE_API.CREATE_LEGAL_ENTITY_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_LER1.INFORMATION11
             ,P_LER1_ATTRIBUTE1      => r_LER1.INFORMATION111
             ,P_LER1_ATTRIBUTE10      => r_LER1.INFORMATION120
             ,P_LER1_ATTRIBUTE11      => r_LER1.INFORMATION121
             ,P_LER1_ATTRIBUTE12      => r_LER1.INFORMATION122
             ,P_LER1_ATTRIBUTE13      => r_LER1.INFORMATION123
             ,P_LER1_ATTRIBUTE14      => r_LER1.INFORMATION124
             ,P_LER1_ATTRIBUTE15      => r_LER1.INFORMATION125
             ,P_LER1_ATTRIBUTE16      => r_LER1.INFORMATION126
             ,P_LER1_ATTRIBUTE17      => r_LER1.INFORMATION127
             ,P_LER1_ATTRIBUTE18      => r_LER1.INFORMATION128
             ,P_LER1_ATTRIBUTE19      => r_LER1.INFORMATION129
             ,P_LER1_ATTRIBUTE2      => r_LER1.INFORMATION112
             ,P_LER1_ATTRIBUTE20      => r_LER1.INFORMATION130
             ,P_LER1_ATTRIBUTE21      => r_LER1.INFORMATION131
             ,P_LER1_ATTRIBUTE22      => r_LER1.INFORMATION132
             ,P_LER1_ATTRIBUTE23      => r_LER1.INFORMATION133
             ,P_LER1_ATTRIBUTE24      => r_LER1.INFORMATION134
             ,P_LER1_ATTRIBUTE25      => r_LER1.INFORMATION135
             ,P_LER1_ATTRIBUTE26      => r_LER1.INFORMATION136
             ,P_LER1_ATTRIBUTE27      => r_LER1.INFORMATION137
             ,P_LER1_ATTRIBUTE28      => r_LER1.INFORMATION138
             ,P_LER1_ATTRIBUTE29      => r_LER1.INFORMATION139
             ,P_LER1_ATTRIBUTE3      => r_LER1.INFORMATION113
             ,P_LER1_ATTRIBUTE30      => r_LER1.INFORMATION140
             ,P_LER1_ATTRIBUTE4      => r_LER1.INFORMATION114
             ,P_LER1_ATTRIBUTE5      => r_LER1.INFORMATION115
             ,P_LER1_ATTRIBUTE6      => r_LER1.INFORMATION116
             ,P_LER1_ATTRIBUTE7      => r_LER1.INFORMATION117
             ,P_LER1_ATTRIBUTE8      => r_LER1.INFORMATION118
             ,P_LER1_ATTRIBUTE9      => r_LER1.INFORMATION119
             ,P_LER1_ATTRIBUTE_CATEGORY      => r_LER1.INFORMATION110
             ,P_LGL_ENTY_RT_ID      => l_lgl_enty_rt_id
             ,P_ORDR_NUM      => r_LER1.INFORMATION257
             ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_lgl_enty_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'LGL_ENTY_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_LER1.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_LGL_ENTY_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_LER1_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LER1.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LER1.information3,
               p_effective_start_date  => r_LER1.information2,
               p_dml_operation         => r_LER1.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LGL_ENTY_RT_ID   := r_LER1.information1;
             l_object_version_number := r_LER1.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             hr_utility.set_location(' BEN_LGL_ENTY_RT_F UPDATE_LEGAL_ENTITY_RATE ',30);
             BEN_LEGAL_ENTITY_RATE_API.UPDATE_LEGAL_ENTITY_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_LER1.INFORMATION11
             ,P_LER1_ATTRIBUTE1      => r_LER1.INFORMATION111
             ,P_LER1_ATTRIBUTE10      => r_LER1.INFORMATION120
             ,P_LER1_ATTRIBUTE11      => r_LER1.INFORMATION121
             ,P_LER1_ATTRIBUTE12      => r_LER1.INFORMATION122
             ,P_LER1_ATTRIBUTE13      => r_LER1.INFORMATION123
             ,P_LER1_ATTRIBUTE14      => r_LER1.INFORMATION124
             ,P_LER1_ATTRIBUTE15      => r_LER1.INFORMATION125
             ,P_LER1_ATTRIBUTE16      => r_LER1.INFORMATION126
             ,P_LER1_ATTRIBUTE17      => r_LER1.INFORMATION127
             ,P_LER1_ATTRIBUTE18      => r_LER1.INFORMATION128
             ,P_LER1_ATTRIBUTE19      => r_LER1.INFORMATION129
             ,P_LER1_ATTRIBUTE2      => r_LER1.INFORMATION112
             ,P_LER1_ATTRIBUTE20      => r_LER1.INFORMATION130
             ,P_LER1_ATTRIBUTE21      => r_LER1.INFORMATION131
             ,P_LER1_ATTRIBUTE22      => r_LER1.INFORMATION132
             ,P_LER1_ATTRIBUTE23      => r_LER1.INFORMATION133
             ,P_LER1_ATTRIBUTE24      => r_LER1.INFORMATION134
             ,P_LER1_ATTRIBUTE25      => r_LER1.INFORMATION135
             ,P_LER1_ATTRIBUTE26      => r_LER1.INFORMATION136
             ,P_LER1_ATTRIBUTE27      => r_LER1.INFORMATION137
             ,P_LER1_ATTRIBUTE28      => r_LER1.INFORMATION138
             ,P_LER1_ATTRIBUTE29      => r_LER1.INFORMATION139
             ,P_LER1_ATTRIBUTE3      => r_LER1.INFORMATION113
             ,P_LER1_ATTRIBUTE30      => r_LER1.INFORMATION140
             ,P_LER1_ATTRIBUTE4      => r_LER1.INFORMATION114
             ,P_LER1_ATTRIBUTE5      => r_LER1.INFORMATION115
             ,P_LER1_ATTRIBUTE6      => r_LER1.INFORMATION116
             ,P_LER1_ATTRIBUTE7      => r_LER1.INFORMATION117
             ,P_LER1_ATTRIBUTE8      => r_LER1.INFORMATION118
             ,P_LER1_ATTRIBUTE9      => r_LER1.INFORMATION119
             ,P_LER1_ATTRIBUTE_CATEGORY      => r_LER1.INFORMATION110
             ,P_LGL_ENTY_RT_ID      => l_lgl_enty_rt_id
             ,P_ORDR_NUM      => r_LER1.INFORMATION257
             ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             end if;
             --
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_LER1.information3) then
                --
                BEN_LEGAL_ENTITY_RATE_API.delete_LEGAL_ENTITY_RATE(
                   --
                   p_validate                       => false
                   ,p_lgl_enty_rt_id                   => l_lgl_enty_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LER1',r_ler1.information5 );
    --
 end create_LER1_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PR__rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PR__rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PAYROLL_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_PR_(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PYRL_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode ;
   --
   --
   cursor c_PR__min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PR_(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PR__in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PR_.pyrl_rt_id new_value
   from BEN_PYRL_RT_F PR_
   where
   PR_.PAYROLL_ID     = l_PAYROLL_ID  and
   PR_.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   PR_.business_group_id  = c_business_group_id
   and   PR_.pyrl_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PYRL_RT_F PR_1
                where
                PR_1.PAYROLL_ID     = l_PAYROLL_ID  and
                PR_1.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                PR_1.business_group_id  = c_business_group_id
                and   PR_1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PYRL_RT_F PR_2
                where
                PR_2.PAYROLL_ID     = l_PAYROLL_ID  and
                PR_2.VRBL_RT_PRFL_ID  = l_VRBL_RT_PRFL_ID  and
                PR_2.business_group_id  = c_business_group_id
                and   PR_2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PR_                     c_PR_%rowtype;
   l_pyrl_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PR__unique in c_unique_PR_('PR_') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PR__unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PR__unique.table_route_id '||r_PR__unique.table_route_id,10);
       hr_utility.set_location(' r_PR__unique.information1 '||r_PR__unique.information1,10);
       hr_utility.set_location( 'r_PR__unique.information2 '||r_PR__unique.information2,10);
       hr_utility.set_location( 'r_PR__unique.information3 '||r_PR__unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PR__min_max_dates(r_PR__unique.table_route_id, r_PR__unique.information1 ) ;
       fetch c_PR__min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PR__unique.information2);
       open c_PR_(r_PR__unique.table_route_id,
                r_PR__unique.information1,
                r_PR__unique.information2,
                r_PR__unique.information3 ) ;
       --
       fetch c_PR_ into r_PR_ ;
       --
       close c_PR_ ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_PAYROLL_ID := r_PR_.information176;
       else
         l_PAYROLL_ID := r_PR_.information174;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PR_.information262,r_PR__unique.dml_operation);

       if l_PAYROLL_ID is null then
         close c_PR__min_max_dates;
         --
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_PR_.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'PR_'
                     ,p_child_data           => r_PR_.information173 );

         --
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PR__unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PR__unique.information2 and r_PR__unique.information3 then
               l_update := true;
               if r_PR__unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PYRL_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PYRL_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PR__unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PR__unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PR__unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PR_',l_new_value,l_prefix || r_PR__unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         if p_reuse_object_flag = 'Y' then
           if c_PR__min_max_dates%found then
              -- cursor to find the object
              open c_find_PR__in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_pyrl_rt_id, -999)  ) ;
              fetch c_find_PR__in_target into l_new_value ;
              if c_find_PR__in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PYRL_RT_F',
                  p_base_key_column => 'PYRL_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_PR__unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'PYRL_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'PYRL_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PR__unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PR__unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_PR__in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_PR__min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_PR_.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_PR_.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_PYRL_RT_F CREATE_PAYROLL_RATE ',20);
             BEN_PAYROLL_RATE_API.CREATE_PAYROLL_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_PR_.INFORMATION11
             ,P_ORDR_NUM      => r_PR_.INFORMATION260
             ,P_PAYROLL_ID      => l_PAYROLL_ID
             ,P_PR_ATTRIBUTE1      => r_PR_.INFORMATION111
             ,P_PR_ATTRIBUTE10      => r_PR_.INFORMATION120
             ,P_PR_ATTRIBUTE11      => r_PR_.INFORMATION121
             ,P_PR_ATTRIBUTE12      => r_PR_.INFORMATION122
             ,P_PR_ATTRIBUTE13      => r_PR_.INFORMATION123
             ,P_PR_ATTRIBUTE14      => r_PR_.INFORMATION124
             ,P_PR_ATTRIBUTE15      => r_PR_.INFORMATION125
             ,P_PR_ATTRIBUTE16      => r_PR_.INFORMATION126
             ,P_PR_ATTRIBUTE17      => r_PR_.INFORMATION127
             ,P_PR_ATTRIBUTE18      => r_PR_.INFORMATION128
             ,P_PR_ATTRIBUTE19      => r_PR_.INFORMATION129
             ,P_PR_ATTRIBUTE2      => r_PR_.INFORMATION112
             ,P_PR_ATTRIBUTE20      => r_PR_.INFORMATION130
             ,P_PR_ATTRIBUTE21      => r_PR_.INFORMATION131
             ,P_PR_ATTRIBUTE22      => r_PR_.INFORMATION132
             ,P_PR_ATTRIBUTE23      => r_PR_.INFORMATION133
             ,P_PR_ATTRIBUTE24      => r_PR_.INFORMATION134
             ,P_PR_ATTRIBUTE25      => r_PR_.INFORMATION135
             ,P_PR_ATTRIBUTE26      => r_PR_.INFORMATION136
             ,P_PR_ATTRIBUTE27      => r_PR_.INFORMATION137
             ,P_PR_ATTRIBUTE28      => r_PR_.INFORMATION138
             ,P_PR_ATTRIBUTE29      => r_PR_.INFORMATION139
             ,P_PR_ATTRIBUTE3      => r_PR_.INFORMATION113
             ,P_PR_ATTRIBUTE30      => r_PR_.INFORMATION140
             ,P_PR_ATTRIBUTE4      => r_PR_.INFORMATION114
             ,P_PR_ATTRIBUTE5      => r_PR_.INFORMATION115
             ,P_PR_ATTRIBUTE6      => r_PR_.INFORMATION116
             ,P_PR_ATTRIBUTE7      => r_PR_.INFORMATION117
             ,P_PR_ATTRIBUTE8      => r_PR_.INFORMATION118
             ,P_PR_ATTRIBUTE9      => r_PR_.INFORMATION119
             ,P_PR_ATTRIBUTE_CATEGORY      => r_PR_.INFORMATION110
             ,P_PYRL_RT_ID      => l_pyrl_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_pyrl_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'PYRL_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PR_.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_PYRL_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PR__unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PR_.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PR_.information3,
               p_effective_start_date  => r_PR_.information2,
               p_dml_operation         => r_PR_.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PYRL_RT_ID   := r_PR_.information1;
             l_object_version_number := r_PR_.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
             hr_utility.set_location(' BEN_PYRL_RT_F UPDATE_PAYROLL_RATE ',30);
             BEN_PAYROLL_RATE_API.UPDATE_PAYROLL_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_PR_.INFORMATION11
             ,P_ORDR_NUM      => r_PR_.INFORMATION260
             ,P_PAYROLL_ID      => l_PAYROLL_ID
             ,P_PR_ATTRIBUTE1      => r_PR_.INFORMATION111
             ,P_PR_ATTRIBUTE10      => r_PR_.INFORMATION120
             ,P_PR_ATTRIBUTE11      => r_PR_.INFORMATION121
             ,P_PR_ATTRIBUTE12      => r_PR_.INFORMATION122
             ,P_PR_ATTRIBUTE13      => r_PR_.INFORMATION123
             ,P_PR_ATTRIBUTE14      => r_PR_.INFORMATION124
             ,P_PR_ATTRIBUTE15      => r_PR_.INFORMATION125
             ,P_PR_ATTRIBUTE16      => r_PR_.INFORMATION126
             ,P_PR_ATTRIBUTE17      => r_PR_.INFORMATION127
             ,P_PR_ATTRIBUTE18      => r_PR_.INFORMATION128
             ,P_PR_ATTRIBUTE19      => r_PR_.INFORMATION129
             ,P_PR_ATTRIBUTE2      => r_PR_.INFORMATION112
             ,P_PR_ATTRIBUTE20      => r_PR_.INFORMATION130
             ,P_PR_ATTRIBUTE21      => r_PR_.INFORMATION131
             ,P_PR_ATTRIBUTE22      => r_PR_.INFORMATION132
             ,P_PR_ATTRIBUTE23      => r_PR_.INFORMATION133
             ,P_PR_ATTRIBUTE24      => r_PR_.INFORMATION134
             ,P_PR_ATTRIBUTE25      => r_PR_.INFORMATION135
             ,P_PR_ATTRIBUTE26      => r_PR_.INFORMATION136
             ,P_PR_ATTRIBUTE27      => r_PR_.INFORMATION137
             ,P_PR_ATTRIBUTE28      => r_PR_.INFORMATION138
             ,P_PR_ATTRIBUTE29      => r_PR_.INFORMATION139
             ,P_PR_ATTRIBUTE3      => r_PR_.INFORMATION113
             ,P_PR_ATTRIBUTE30      => r_PR_.INFORMATION140
             ,P_PR_ATTRIBUTE4      => r_PR_.INFORMATION114
             ,P_PR_ATTRIBUTE5      => r_PR_.INFORMATION115
             ,P_PR_ATTRIBUTE6      => r_PR_.INFORMATION116
             ,P_PR_ATTRIBUTE7      => r_PR_.INFORMATION117
             ,P_PR_ATTRIBUTE8      => r_PR_.INFORMATION118
             ,P_PR_ATTRIBUTE9      => r_PR_.INFORMATION119
             ,P_PR_ATTRIBUTE_CATEGORY      => r_PR_.INFORMATION110
             ,P_PYRL_RT_ID      => l_pyrl_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_PR_.information3) then
                --
                BEN_PAYROLL_RATE_API.delete_PAYROLL_RATE(
                   --
                   p_validate                       => false
                   ,p_pyrl_rt_id                   => l_pyrl_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PR_',r_pr_.information5 );
    --
 end create_PR__rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PBR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PBR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PAY_BASIS_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_PBR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PY_BSS_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PBR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PBR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PBR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PBR.py_bss_rt_id new_value
   from BEN_PY_BSS_RT_F PBR
   where
   PBR.PAY_BASIS_ID     = l_PAY_BASIS_ID  and
   PBR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   PBR.business_group_id  = c_business_group_id
   and   PBR.py_bss_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PY_BSS_RT_F PBR1
                where
                PBR1.PAY_BASIS_ID     = l_PAY_BASIS_ID  and
                PBR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PBR1.business_group_id  = c_business_group_id
                and   PBR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PY_BSS_RT_F PBR2
                where
                PBR2.PAY_BASIS_ID     = l_PAY_BASIS_ID  and
                PBR2.VRBL_RT_PRFL_ID  = l_VRBL_RT_PRFL_ID  and
                PBR2.business_group_id  = c_business_group_id
                and   PBR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PBR                     c_PBR%rowtype;
   l_py_bss_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PBR_unique in c_unique_PBR('PBR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PBR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PBR_unique.table_route_id '||r_PBR_unique.table_route_id,10);
       hr_utility.set_location(' r_PBR_unique.information1 '||r_PBR_unique.information1,10);
       hr_utility.set_location( 'r_PBR_unique.information2 '||r_PBR_unique.information2,10);
       hr_utility.set_location( 'r_PBR_unique.information3 '||r_PBR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PBR_min_max_dates(r_PBR_unique.table_route_id, r_PBR_unique.information1 ) ;
       fetch c_PBR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PBR_unique.information2);
       open c_PBR(r_PBR_unique.table_route_id,
                r_PBR_unique.information1,
                r_PBR_unique.information2,
                r_PBR_unique.information3 ) ;
       --
       fetch c_PBR into r_PBR ;
       --
       close c_PBR ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_PAY_BASIS_ID := r_PBR.information176;
       else
         l_PAY_BASIS_ID := r_PBR.information174;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PBR.information262,r_PBR_unique.dml_operation);

       if l_PAY_BASIS_ID is null then
         close c_PBR_min_max_dates;
         --
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_PBR.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'PBR'
                     ,p_child_data           => r_PBR.information173 );

         --
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PBR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PBR_unique.information2 and r_PBR_unique.information3 then
               l_update := true;
               if r_PBR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PY_BSS_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PY_BSS_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PBR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PBR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PBR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PBR',l_new_value,l_prefix || r_PBR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_PBR_min_max_dates%found then
              -- cursor to find the object
              open c_find_PBR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_py_bss_rt_id, -999)  ) ;
              fetch c_find_PBR_in_target into l_new_value ;
              if c_find_PBR_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PY_BSS_RT_F',
                  p_base_key_column => 'PY_BSS_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_PBR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'PY_BSS_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'PY_BSS_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PBR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PBR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_PBR_in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_PBR_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_PBR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_PBR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_PY_BSS_RT_F CREATE_PAY_BASIS_RATE ',20);
             BEN_PAY_BASIS_RATE_API.CREATE_PAY_BASIS_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
              ,P_EXCLD_FLAG      => r_PBR.INFORMATION11
             ,P_ORDR_NUM      => r_PBR.INFORMATION257
             ,P_PAY_BASIS_ID      => l_PAY_BASIS_ID
             ,P_PBR_ATTRIBUTE1      => r_PBR.INFORMATION111
             ,P_PBR_ATTRIBUTE10      => r_PBR.INFORMATION120
             ,P_PBR_ATTRIBUTE11      => r_PBR.INFORMATION121
             ,P_PBR_ATTRIBUTE12      => r_PBR.INFORMATION122
             ,P_PBR_ATTRIBUTE13      => r_PBR.INFORMATION123
             ,P_PBR_ATTRIBUTE14      => r_PBR.INFORMATION124
             ,P_PBR_ATTRIBUTE15      => r_PBR.INFORMATION125
             ,P_PBR_ATTRIBUTE16      => r_PBR.INFORMATION126
             ,P_PBR_ATTRIBUTE17      => r_PBR.INFORMATION127
             ,P_PBR_ATTRIBUTE18      => r_PBR.INFORMATION128
             ,P_PBR_ATTRIBUTE19      => r_PBR.INFORMATION129
             ,P_PBR_ATTRIBUTE2      => r_PBR.INFORMATION112
             ,P_PBR_ATTRIBUTE20      => r_PBR.INFORMATION130
             ,P_PBR_ATTRIBUTE21      => r_PBR.INFORMATION131
             ,P_PBR_ATTRIBUTE22      => r_PBR.INFORMATION132
             ,P_PBR_ATTRIBUTE23      => r_PBR.INFORMATION133
             ,P_PBR_ATTRIBUTE24      => r_PBR.INFORMATION134
             ,P_PBR_ATTRIBUTE25      => r_PBR.INFORMATION135
             ,P_PBR_ATTRIBUTE26      => r_PBR.INFORMATION136
             ,P_PBR_ATTRIBUTE27      => r_PBR.INFORMATION137
             ,P_PBR_ATTRIBUTE28      => r_PBR.INFORMATION138
             ,P_PBR_ATTRIBUTE29      => r_PBR.INFORMATION139
             ,P_PBR_ATTRIBUTE3      => r_PBR.INFORMATION113
             ,P_PBR_ATTRIBUTE30      => r_PBR.INFORMATION140
             ,P_PBR_ATTRIBUTE4      => r_PBR.INFORMATION114
             ,P_PBR_ATTRIBUTE5      => r_PBR.INFORMATION115
             ,P_PBR_ATTRIBUTE6      => r_PBR.INFORMATION116
             ,P_PBR_ATTRIBUTE7      => r_PBR.INFORMATION117
             ,P_PBR_ATTRIBUTE8      => r_PBR.INFORMATION118
             ,P_PBR_ATTRIBUTE9      => r_PBR.INFORMATION119
             ,P_PBR_ATTRIBUTE_CATEGORY      => r_PBR.INFORMATION110
             ,P_PY_BSS_RT_ID      => l_py_bss_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_py_bss_rt_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'PY_BSS_RT_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PBR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_PY_BSS_RT_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PBR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PBR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PBR.information3,
               p_effective_start_date  => r_PBR.information2,
               p_dml_operation         => r_PBR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PY_BSS_RT_ID   := r_PBR.information1;
             l_object_version_number := r_PBR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_PY_BSS_RT_F UPDATE_PAY_BASIS_RATE ',30);
             BEN_PAY_BASIS_RATE_API.UPDATE_PAY_BASIS_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_PBR.INFORMATION11
             ,P_ORDR_NUM      => r_PBR.INFORMATION257
             ,P_PAY_BASIS_ID      => l_PAY_BASIS_ID
             ,P_PBR_ATTRIBUTE1      => r_PBR.INFORMATION111
             ,P_PBR_ATTRIBUTE10      => r_PBR.INFORMATION120
             ,P_PBR_ATTRIBUTE11      => r_PBR.INFORMATION121
             ,P_PBR_ATTRIBUTE12      => r_PBR.INFORMATION122
             ,P_PBR_ATTRIBUTE13      => r_PBR.INFORMATION123
             ,P_PBR_ATTRIBUTE14      => r_PBR.INFORMATION124
             ,P_PBR_ATTRIBUTE15      => r_PBR.INFORMATION125
             ,P_PBR_ATTRIBUTE16      => r_PBR.INFORMATION126
             ,P_PBR_ATTRIBUTE17      => r_PBR.INFORMATION127
             ,P_PBR_ATTRIBUTE18      => r_PBR.INFORMATION128
             ,P_PBR_ATTRIBUTE19      => r_PBR.INFORMATION129
             ,P_PBR_ATTRIBUTE2      => r_PBR.INFORMATION112
             ,P_PBR_ATTRIBUTE20      => r_PBR.INFORMATION130
             ,P_PBR_ATTRIBUTE21      => r_PBR.INFORMATION131
             ,P_PBR_ATTRIBUTE22      => r_PBR.INFORMATION132
             ,P_PBR_ATTRIBUTE23      => r_PBR.INFORMATION133
             ,P_PBR_ATTRIBUTE24      => r_PBR.INFORMATION134
             ,P_PBR_ATTRIBUTE25      => r_PBR.INFORMATION135
             ,P_PBR_ATTRIBUTE26      => r_PBR.INFORMATION136
             ,P_PBR_ATTRIBUTE27      => r_PBR.INFORMATION137
             ,P_PBR_ATTRIBUTE28      => r_PBR.INFORMATION138
             ,P_PBR_ATTRIBUTE29      => r_PBR.INFORMATION139
             ,P_PBR_ATTRIBUTE3      => r_PBR.INFORMATION113
             ,P_PBR_ATTRIBUTE30      => r_PBR.INFORMATION140
             ,P_PBR_ATTRIBUTE4      => r_PBR.INFORMATION114
             ,P_PBR_ATTRIBUTE5      => r_PBR.INFORMATION115
             ,P_PBR_ATTRIBUTE6      => r_PBR.INFORMATION116
             ,P_PBR_ATTRIBUTE7      => r_PBR.INFORMATION117
             ,P_PBR_ATTRIBUTE8      => r_PBR.INFORMATION118
             ,P_PBR_ATTRIBUTE9      => r_PBR.INFORMATION119
             ,P_PBR_ATTRIBUTE_CATEGORY      => r_PBR.INFORMATION110
             ,P_PY_BSS_RT_ID      => l_py_bss_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
             );
             --
             end if;
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_PBR.information3) then
                --
                BEN_PAY_BASIS_RATE_API.delete_PAY_BASIS_RATE(
                   --
                   p_validate                       => false
                   ,p_py_bss_rt_id                   => l_py_bss_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
         end if;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PBR',r_pbr.information5 );
    --
 end create_PBR_rows;

   --
   --
   --
   ---------------------------------------------------------------
   ----------------------< create_CQR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CQR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PGM_ID  number;
   l_PTIP_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_CQR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_CBR_QUALD_BNF_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CQR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CQR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CQR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CQR.cbr_quald_bnf_rt_id new_value
   from BEN_CBR_QUALD_BNF_RT_F CQR
   where
   nvl(CQR.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
   nvl(CQR.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
   CQR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   CQR.business_group_id  = c_business_group_id
   and   CQR.cbr_quald_bnf_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_CBR_QUALD_BNF_RT_F CQR1
                where
                nvl(CQR1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(CQR1.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                CQR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                CQR1.business_group_id  = c_business_group_id
                and   CQR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_CBR_QUALD_BNF_RT_F CQR2
                where
                nvl(CQR2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(CQR2.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                CQR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                CQR2.business_group_id  = c_business_group_id
                and   CQR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CQR                     c_CQR%rowtype;
   l_cbr_quald_bnf_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CQR_unique in c_unique_CQR('CQR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CQR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_CQR_unique.table_route_id '||r_CQR_unique.table_route_id,10);
       hr_utility.set_location(' r_CQR_unique.information1 '||r_CQR_unique.information1,10);
       hr_utility.set_location( 'r_CQR_unique.information2 '||r_CQR_unique.information2,10);
       hr_utility.set_location( 'r_CQR_unique.information3 '||r_CQR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CQR_min_max_dates(r_CQR_unique.table_route_id, r_CQR_unique.information1 ) ;
       fetch c_CQR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_CQR_unique.information2);
       open c_CQR(r_CQR_unique.table_route_id,
                r_CQR_unique.information1,
                r_CQR_unique.information2,
                r_CQR_unique.information3 ) ;
       --
       fetch c_CQR into r_CQR ;
       --
       close c_CQR ;
       --

       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_CQR.INFORMATION260,r_CQR_unique.dml_operation),
                       r_CQR.INFORMATION260);

       l_PTIP_ID := NVL(get_fk('PTIP_ID',  r_CQR.INFORMATION259,r_CQR_unique.dml_operation),
                        r_CQR.INFORMATION259);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_CQR.information262,r_CQR_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_CQR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CQR_unique.information2 and r_CQR_unique.information3 then
               l_update := true;
               if r_CQR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'CBR_QUALD_BNF_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'CBR_QUALD_BNF_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CQR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CQR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CQR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('CQR',l_new_value,l_prefix || r_CQR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_CQR_min_max_dates%found then
           -- cursor to find the object
           open c_find_CQR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_cbr_quald_bnf_rt_id, -999)  ) ;
           fetch c_find_CQR_in_target into l_new_value ;
           if c_find_CQR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_CBR_QUALD_BNF_RT_F',
                  p_base_key_column => 'CBR_QUALD_BNF_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_CQR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'CBR_QUALD_BNF_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'CBR_QUALD_BNF_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_CQR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CQR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_CQR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_CQR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_CQR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_CQR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_CBR_QUALD_BNF_RT_F CREATE_CBR_QUALD_BNF_RT ',20);
           BEN_CBR_QUALD_BNF_RT_API.CREATE_CBR_QUALD_BNF_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CBR_QUALD_BNF_RT_ID      => l_cbr_quald_bnf_rt_id
             ,P_CQR_ATTRIBUTE1      => r_CQR.INFORMATION111
             ,P_CQR_ATTRIBUTE10      => r_CQR.INFORMATION120
             ,P_CQR_ATTRIBUTE11      => r_CQR.INFORMATION121
             ,P_CQR_ATTRIBUTE12      => r_CQR.INFORMATION122
             ,P_CQR_ATTRIBUTE13      => r_CQR.INFORMATION123
             ,P_CQR_ATTRIBUTE14      => r_CQR.INFORMATION124
             ,P_CQR_ATTRIBUTE15      => r_CQR.INFORMATION125
             ,P_CQR_ATTRIBUTE16      => r_CQR.INFORMATION126
             ,P_CQR_ATTRIBUTE17      => r_CQR.INFORMATION127
             ,P_CQR_ATTRIBUTE18      => r_CQR.INFORMATION128
             ,P_CQR_ATTRIBUTE19      => r_CQR.INFORMATION129
             ,P_CQR_ATTRIBUTE2      => r_CQR.INFORMATION112
             ,P_CQR_ATTRIBUTE20      => r_CQR.INFORMATION130
             ,P_CQR_ATTRIBUTE21      => r_CQR.INFORMATION131
             ,P_CQR_ATTRIBUTE22      => r_CQR.INFORMATION132
             ,P_CQR_ATTRIBUTE23      => r_CQR.INFORMATION133
             ,P_CQR_ATTRIBUTE24      => r_CQR.INFORMATION134
             ,P_CQR_ATTRIBUTE25      => r_CQR.INFORMATION135
             ,P_CQR_ATTRIBUTE26      => r_CQR.INFORMATION136
             ,P_CQR_ATTRIBUTE27      => r_CQR.INFORMATION137
             ,P_CQR_ATTRIBUTE28      => r_CQR.INFORMATION138
             ,P_CQR_ATTRIBUTE29      => r_CQR.INFORMATION139
             ,P_CQR_ATTRIBUTE3      => r_CQR.INFORMATION113
             ,P_CQR_ATTRIBUTE30      => r_CQR.INFORMATION140
             ,P_CQR_ATTRIBUTE4      => r_CQR.INFORMATION114
             ,P_CQR_ATTRIBUTE5      => r_CQR.INFORMATION115
             ,P_CQR_ATTRIBUTE6      => r_CQR.INFORMATION116
             ,P_CQR_ATTRIBUTE7      => r_CQR.INFORMATION117
             ,P_CQR_ATTRIBUTE8      => r_CQR.INFORMATION118
             ,P_CQR_ATTRIBUTE9      => r_CQR.INFORMATION119
             ,P_CQR_ATTRIBUTE_CATEGORY      => r_CQR.INFORMATION110
             ,P_ORDR_NUM      => r_CQR.INFORMATION257
             ,P_PGM_ID      => l_PGM_ID
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_QUALD_BNF_FLAG      => r_CQR.INFORMATION11
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_cbr_quald_bnf_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'CBR_QUALD_BNF_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_CQR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_CBR_QUALD_BNF_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CQR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CQR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CQR.information3,
               p_effective_start_date  => r_CQR.information2,
               p_dml_operation         => r_CQR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_CBR_QUALD_BNF_RT_ID   := r_CQR.information1;
             l_object_version_number := r_CQR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_CBR_QUALD_BNF_RT_F UPDATE_CBR_QUALD_BNF_RT ',30);
           BEN_CBR_QUALD_BNF_RT_API.UPDATE_CBR_QUALD_BNF_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CBR_QUALD_BNF_RT_ID      => l_cbr_quald_bnf_rt_id
             ,P_CQR_ATTRIBUTE1      => r_CQR.INFORMATION111
             ,P_CQR_ATTRIBUTE10      => r_CQR.INFORMATION120
             ,P_CQR_ATTRIBUTE11      => r_CQR.INFORMATION121
             ,P_CQR_ATTRIBUTE12      => r_CQR.INFORMATION122
             ,P_CQR_ATTRIBUTE13      => r_CQR.INFORMATION123
             ,P_CQR_ATTRIBUTE14      => r_CQR.INFORMATION124
             ,P_CQR_ATTRIBUTE15      => r_CQR.INFORMATION125
             ,P_CQR_ATTRIBUTE16      => r_CQR.INFORMATION126
             ,P_CQR_ATTRIBUTE17      => r_CQR.INFORMATION127
             ,P_CQR_ATTRIBUTE18      => r_CQR.INFORMATION128
             ,P_CQR_ATTRIBUTE19      => r_CQR.INFORMATION129
             ,P_CQR_ATTRIBUTE2      => r_CQR.INFORMATION112
             ,P_CQR_ATTRIBUTE20      => r_CQR.INFORMATION130
             ,P_CQR_ATTRIBUTE21      => r_CQR.INFORMATION131
             ,P_CQR_ATTRIBUTE22      => r_CQR.INFORMATION132
             ,P_CQR_ATTRIBUTE23      => r_CQR.INFORMATION133
             ,P_CQR_ATTRIBUTE24      => r_CQR.INFORMATION134
             ,P_CQR_ATTRIBUTE25      => r_CQR.INFORMATION135
             ,P_CQR_ATTRIBUTE26      => r_CQR.INFORMATION136
             ,P_CQR_ATTRIBUTE27      => r_CQR.INFORMATION137
             ,P_CQR_ATTRIBUTE28      => r_CQR.INFORMATION138
             ,P_CQR_ATTRIBUTE29      => r_CQR.INFORMATION139
             ,P_CQR_ATTRIBUTE3      => r_CQR.INFORMATION113
             ,P_CQR_ATTRIBUTE30      => r_CQR.INFORMATION140
             ,P_CQR_ATTRIBUTE4      => r_CQR.INFORMATION114
             ,P_CQR_ATTRIBUTE5      => r_CQR.INFORMATION115
             ,P_CQR_ATTRIBUTE6      => r_CQR.INFORMATION116
             ,P_CQR_ATTRIBUTE7      => r_CQR.INFORMATION117
             ,P_CQR_ATTRIBUTE8      => r_CQR.INFORMATION118
             ,P_CQR_ATTRIBUTE9      => r_CQR.INFORMATION119
             ,P_CQR_ATTRIBUTE_CATEGORY      => r_CQR.INFORMATION110
             ,P_ORDR_NUM      => r_CQR.INFORMATION257
             ,P_PGM_ID      => l_PGM_ID
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_QUALD_BNF_FLAG      => r_CQR.INFORMATION11
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_CQR.information3) then
             --
             BEN_CBR_QUALD_BNF_RT_API.delete_CBR_QUALD_BNF_RT(
                --
                p_validate                       => false
                ,p_cbr_quald_bnf_rt_id                   => l_cbr_quald_bnf_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CQR',r_cqr.information5 );
    --
 end create_CQR_rows;

   ---------------------------------------------------------------
   ----------------------< create_BRG_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_BRG_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_BENFTS_GRP_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_BRG(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_BENFTS_GRP_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_BRG_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_BRG(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_BRG_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     BRG.benfts_grp_rt_id new_value
   from BEN_BENFTS_GRP_RT_F BRG
   where
   BRG.BENFTS_GRP_ID     = l_BENFTS_GRP_ID  and
   BRG.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   BRG.business_group_id  = c_business_group_id
   and   BRG.benfts_grp_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_BENFTS_GRP_RT_F BRG1
                where
                BRG1.BENFTS_GRP_ID     = l_BENFTS_GRP_ID  and
                BRG1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                BRG1.business_group_id  = c_business_group_id
                and   BRG1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_BENFTS_GRP_RT_F BRG2
                where
                BRG2.BENFTS_GRP_ID     = l_BENFTS_GRP_ID  and
                BRG2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                BRG2.business_group_id  = c_business_group_id
                and   BRG2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_BRG                     c_BRG%rowtype;
   l_benfts_grp_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_BRG_unique in c_unique_BRG('BRG') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_BRG_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_BRG_unique.table_route_id '||r_BRG_unique.table_route_id,10);
       hr_utility.set_location(' r_BRG_unique.information1 '||r_BRG_unique.information1,10);
       hr_utility.set_location( 'r_BRG_unique.information2 '||r_BRG_unique.information2,10);
       hr_utility.set_location( 'r_BRG_unique.information3 '||r_BRG_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_BRG_min_max_dates(r_BRG_unique.table_route_id, r_BRG_unique.information1 ) ;
       fetch c_BRG_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_BRG_unique.information2);
       open c_BRG(r_BRG_unique.table_route_id,
                r_BRG_unique.information1,
                r_BRG_unique.information2,
                r_BRG_unique.information3 ) ;
       --
       fetch c_BRG into r_BRG ;
       --
       close c_BRG ;
       --
       l_BENFTS_GRP_ID := get_fk('BENFTS_GRP_ID', r_BRG.information222,r_BRG_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_BRG.information262,r_BRG_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_BRG_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_BRG_unique.information2 and r_BRG_unique.information3 then
               l_update := true;
               if r_BRG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'BENFTS_GRP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'BENFTS_GRP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_BRG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_BRG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_BRG_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('BRG',l_new_value,l_prefix || r_BRG_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_BRG_min_max_dates%found then
           -- cursor to find the object
           open c_find_BRG_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_benfts_grp_rt_id, -999)  ) ;
           fetch c_find_BRG_in_target into l_new_value ;
           if c_find_BRG_in_target%found then
             --

             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_BENFTS_GRP_RT_F',
                  p_base_key_column => 'BENFTS_GRP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_BRG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'BENFTS_GRP_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'BENFTS_GRP_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_BRG_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_BRG_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_BRG_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_BRG_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_BRG.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_BRG.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_BENFTS_GRP_RT_F CREATE_BENEFIT_GRP_RATE ',20);
           BEN_BENEFIT_GRP_RATE_API.CREATE_BENEFIT_GRP_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BENFTS_GRP_ID      => l_BENFTS_GRP_ID
             ,P_BENFTS_GRP_RT_ID      => l_benfts_grp_rt_id
             ,P_BRG_ATTRIBUTE1      => r_BRG.INFORMATION111
             ,P_BRG_ATTRIBUTE10      => r_BRG.INFORMATION120
             ,P_BRG_ATTRIBUTE11      => r_BRG.INFORMATION121
             ,P_BRG_ATTRIBUTE12      => r_BRG.INFORMATION122
             ,P_BRG_ATTRIBUTE13      => r_BRG.INFORMATION123
             ,P_BRG_ATTRIBUTE14      => r_BRG.INFORMATION124
             ,P_BRG_ATTRIBUTE15      => r_BRG.INFORMATION125
             ,P_BRG_ATTRIBUTE16      => r_BRG.INFORMATION126
             ,P_BRG_ATTRIBUTE17      => r_BRG.INFORMATION127
             ,P_BRG_ATTRIBUTE18      => r_BRG.INFORMATION128
             ,P_BRG_ATTRIBUTE19      => r_BRG.INFORMATION129
             ,P_BRG_ATTRIBUTE2      => r_BRG.INFORMATION112
             ,P_BRG_ATTRIBUTE20      => r_BRG.INFORMATION130
             ,P_BRG_ATTRIBUTE21      => r_BRG.INFORMATION131
             ,P_BRG_ATTRIBUTE22      => r_BRG.INFORMATION132
             ,P_BRG_ATTRIBUTE23      => r_BRG.INFORMATION133
             ,P_BRG_ATTRIBUTE24      => r_BRG.INFORMATION134
             ,P_BRG_ATTRIBUTE25      => r_BRG.INFORMATION135
             ,P_BRG_ATTRIBUTE26      => r_BRG.INFORMATION136
             ,P_BRG_ATTRIBUTE27      => r_BRG.INFORMATION137
             ,P_BRG_ATTRIBUTE28      => r_BRG.INFORMATION138
             ,P_BRG_ATTRIBUTE29      => r_BRG.INFORMATION139
             ,P_BRG_ATTRIBUTE3      => r_BRG.INFORMATION113
             ,P_BRG_ATTRIBUTE30      => r_BRG.INFORMATION140
             ,P_BRG_ATTRIBUTE4      => r_BRG.INFORMATION114
             ,P_BRG_ATTRIBUTE5      => r_BRG.INFORMATION115
             ,P_BRG_ATTRIBUTE6      => r_BRG.INFORMATION116
             ,P_BRG_ATTRIBUTE7      => r_BRG.INFORMATION117
             ,P_BRG_ATTRIBUTE8      => r_BRG.INFORMATION118
             ,P_BRG_ATTRIBUTE9      => r_BRG.INFORMATION119
             ,P_BRG_ATTRIBUTE_CATEGORY      => r_BRG.INFORMATION110
             ,P_EXCLD_FLAG      => r_BRG.INFORMATION11
             ,P_ORDR_NUM      => r_BRG.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_benfts_grp_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'BENFTS_GRP_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_BRG.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_BENFTS_GRP_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_BRG_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_BRG.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_BRG.information3,
               p_effective_start_date  => r_BRG.information2,
               p_dml_operation         => r_BRG.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_BENFTS_GRP_RT_ID   := r_BRG.information1;
             l_object_version_number := r_BRG.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_BENFTS_GRP_RT_F UPDATE_BENEFIT_GRP_RATE ',30);
           BEN_BENEFIT_GRP_RATE_API.UPDATE_BENEFIT_GRP_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BENFTS_GRP_ID      => l_BENFTS_GRP_ID
             ,P_BENFTS_GRP_RT_ID      => l_benfts_grp_rt_id
             ,P_BRG_ATTRIBUTE1      => r_BRG.INFORMATION111
             ,P_BRG_ATTRIBUTE10      => r_BRG.INFORMATION120
             ,P_BRG_ATTRIBUTE11      => r_BRG.INFORMATION121
             ,P_BRG_ATTRIBUTE12      => r_BRG.INFORMATION122
             ,P_BRG_ATTRIBUTE13      => r_BRG.INFORMATION123
             ,P_BRG_ATTRIBUTE14      => r_BRG.INFORMATION124
             ,P_BRG_ATTRIBUTE15      => r_BRG.INFORMATION125
             ,P_BRG_ATTRIBUTE16      => r_BRG.INFORMATION126
             ,P_BRG_ATTRIBUTE17      => r_BRG.INFORMATION127
             ,P_BRG_ATTRIBUTE18      => r_BRG.INFORMATION128
             ,P_BRG_ATTRIBUTE19      => r_BRG.INFORMATION129
             ,P_BRG_ATTRIBUTE2      => r_BRG.INFORMATION112
             ,P_BRG_ATTRIBUTE20      => r_BRG.INFORMATION130
             ,P_BRG_ATTRIBUTE21      => r_BRG.INFORMATION131
             ,P_BRG_ATTRIBUTE22      => r_BRG.INFORMATION132
             ,P_BRG_ATTRIBUTE23      => r_BRG.INFORMATION133
             ,P_BRG_ATTRIBUTE24      => r_BRG.INFORMATION134
             ,P_BRG_ATTRIBUTE25      => r_BRG.INFORMATION135
             ,P_BRG_ATTRIBUTE26      => r_BRG.INFORMATION136
             ,P_BRG_ATTRIBUTE27      => r_BRG.INFORMATION137
             ,P_BRG_ATTRIBUTE28      => r_BRG.INFORMATION138
             ,P_BRG_ATTRIBUTE29      => r_BRG.INFORMATION139
             ,P_BRG_ATTRIBUTE3      => r_BRG.INFORMATION113
             ,P_BRG_ATTRIBUTE30      => r_BRG.INFORMATION140
             ,P_BRG_ATTRIBUTE4      => r_BRG.INFORMATION114
             ,P_BRG_ATTRIBUTE5      => r_BRG.INFORMATION115
             ,P_BRG_ATTRIBUTE6      => r_BRG.INFORMATION116
             ,P_BRG_ATTRIBUTE7      => r_BRG.INFORMATION117
             ,P_BRG_ATTRIBUTE8      => r_BRG.INFORMATION118
             ,P_BRG_ATTRIBUTE9      => r_BRG.INFORMATION119
             ,P_BRG_ATTRIBUTE_CATEGORY      => r_BRG.INFORMATION110
             ,P_EXCLD_FLAG      => r_BRG.INFORMATION11
             ,P_ORDR_NUM      => r_BRG.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_BRG.information3) then
             --
             BEN_BENEFIT_GRP_RATE_API.delete_BENEFIT_GRP_RATE(
                --
                p_validate                       => false
                ,p_benfts_grp_rt_id                   => l_benfts_grp_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'BRG',r_brg.information5 );
    --
 end create_BRG_rows;

   ---------------------------------------------------------------
   ----------------------< create_CMR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CMR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CMBN_AGE_LOS_FCTR_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_CMR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_CMBN_AGE_LOS_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CMR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CMR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CMR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CMR.cmbn_age_los_rt_id new_value
   from BEN_CMBN_AGE_LOS_RT_F CMR
   where
   CMR.CMBN_AGE_LOS_FCTR_ID     = l_CMBN_AGE_LOS_FCTR_ID  and
   CMR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   CMR.business_group_id  = c_business_group_id
   and   CMR.cmbn_age_los_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_CMBN_AGE_LOS_RT_F CMR1
                where
                CMR1.CMBN_AGE_LOS_FCTR_ID    = l_CMBN_AGE_LOS_FCTR_ID  and
                CMR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                CMR1.business_group_id  = c_business_group_id
                and   CMR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_CMBN_AGE_LOS_RT_F CMR2
                where
                CMR2.CMBN_AGE_LOS_FCTR_ID     = l_CMBN_AGE_LOS_FCTR_ID  and
                CMR2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                CMR2.business_group_id  = c_business_group_id
                and   CMR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CMR                     c_CMR%rowtype;
   l_cmbn_age_los_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CMR_unique in c_unique_CMR('CMR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CMR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_CMR_unique.table_route_id '||r_CMR_unique.table_route_id,10);
       hr_utility.set_location(' r_CMR_unique.information1 '||r_CMR_unique.information1,10);
       hr_utility.set_location( 'r_CMR_unique.information2 '||r_CMR_unique.information2,10);
       hr_utility.set_location( 'r_CMR_unique.information3 '||r_CMR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CMR_min_max_dates(r_CMR_unique.table_route_id, r_CMR_unique.information1 ) ;
       fetch c_CMR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_CMR_unique.information2);
       open c_CMR(r_CMR_unique.table_route_id,
                r_CMR_unique.information1,
                r_CMR_unique.information2,
                r_CMR_unique.information3 ) ;
       --
       fetch c_CMR into r_CMR ;
       --
       close c_CMR ;
       --
       l_CMBN_AGE_LOS_FCTR_ID := get_fk('CMBN_AGE_LOS_FCTR_ID', r_CMR.information223,r_CMR_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_CMR.information262,r_CMR_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_CMR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CMR_unique.information2 and r_CMR_unique.information3 then
               l_update := true;
               if r_CMR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'CMBN_AGE_LOS_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'CMBN_AGE_LOS_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CMR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CMR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CMR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('CMR',l_new_value,l_prefix || r_CMR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_CMR_min_max_dates%found then
           -- cursor to find the object
           open c_find_CMR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_cmbn_age_los_rt_id, -999)  ) ;
           fetch c_find_CMR_in_target into l_new_value ;
           if c_find_CMR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_CMBN_AGE_LOS_RT_F',
                  p_base_key_column => 'CMBN_AGE_LOS_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_CMR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'CMBN_AGE_LOS_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'CMBN_AGE_LOS_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_CMR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CMR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_CMR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_CMR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_CMR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_CMR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_CMBN_AGE_LOS_RT_F CREATE_CMBN_AGE_LOS_RT ',20);
           BEN_CMBN_AGE_LOS_RT_API.CREATE_CMBN_AGE_LOS_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CMBN_AGE_LOS_FCTR_ID      => l_CMBN_AGE_LOS_FCTR_ID
             ,P_CMBN_AGE_LOS_RT_ID      => l_cmbn_age_los_rt_id
             ,P_CMR_ATTRIBUTE1      => r_CMR.INFORMATION111
             ,P_CMR_ATTRIBUTE10      => r_CMR.INFORMATION120
             ,P_CMR_ATTRIBUTE11      => r_CMR.INFORMATION121
             ,P_CMR_ATTRIBUTE12      => r_CMR.INFORMATION122
             ,P_CMR_ATTRIBUTE13      => r_CMR.INFORMATION123
             ,P_CMR_ATTRIBUTE14      => r_CMR.INFORMATION124
             ,P_CMR_ATTRIBUTE15      => r_CMR.INFORMATION125
             ,P_CMR_ATTRIBUTE16      => r_CMR.INFORMATION126
             ,P_CMR_ATTRIBUTE17      => r_CMR.INFORMATION127
             ,P_CMR_ATTRIBUTE18      => r_CMR.INFORMATION128
             ,P_CMR_ATTRIBUTE19      => r_CMR.INFORMATION129
             ,P_CMR_ATTRIBUTE2      => r_CMR.INFORMATION112
             ,P_CMR_ATTRIBUTE20      => r_CMR.INFORMATION130
             ,P_CMR_ATTRIBUTE21      => r_CMR.INFORMATION131
             ,P_CMR_ATTRIBUTE22      => r_CMR.INFORMATION132
             ,P_CMR_ATTRIBUTE23      => r_CMR.INFORMATION133
             ,P_CMR_ATTRIBUTE24      => r_CMR.INFORMATION134
             ,P_CMR_ATTRIBUTE25      => r_CMR.INFORMATION135
             ,P_CMR_ATTRIBUTE26      => r_CMR.INFORMATION136
             ,P_CMR_ATTRIBUTE27      => r_CMR.INFORMATION137
             ,P_CMR_ATTRIBUTE28      => r_CMR.INFORMATION138
             ,P_CMR_ATTRIBUTE29      => r_CMR.INFORMATION139
             ,P_CMR_ATTRIBUTE3      => r_CMR.INFORMATION113
             ,P_CMR_ATTRIBUTE30      => r_CMR.INFORMATION140
             ,P_CMR_ATTRIBUTE4      => r_CMR.INFORMATION114
             ,P_CMR_ATTRIBUTE5      => r_CMR.INFORMATION115
             ,P_CMR_ATTRIBUTE6      => r_CMR.INFORMATION116
             ,P_CMR_ATTRIBUTE7      => r_CMR.INFORMATION117
             ,P_CMR_ATTRIBUTE8      => r_CMR.INFORMATION118
             ,P_CMR_ATTRIBUTE9      => r_CMR.INFORMATION119
             ,P_CMR_ATTRIBUTE_CATEGORY      => r_CMR.INFORMATION110
             ,P_EXCLD_FLAG      => r_CMR.INFORMATION11
             ,P_ORDR_NUM      => r_CMR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_cmbn_age_los_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'CMBN_AGE_LOS_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_CMR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_CMBN_AGE_LOS_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CMR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CMR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CMR.information3,
               p_effective_start_date  => r_CMR.information2,
               p_dml_operation         => r_CMR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_CMBN_AGE_LOS_RT_ID   := r_CMR.information1;
             l_object_version_number := r_CMR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_CMBN_AGE_LOS_RT_F UPDATE_CMBN_AGE_LOS_RT ',30);
           BEN_CMBN_AGE_LOS_RT_API.UPDATE_CMBN_AGE_LOS_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CMBN_AGE_LOS_FCTR_ID      => l_CMBN_AGE_LOS_FCTR_ID
             ,P_CMBN_AGE_LOS_RT_ID      => l_cmbn_age_los_rt_id
             ,P_CMR_ATTRIBUTE1      => r_CMR.INFORMATION111
             ,P_CMR_ATTRIBUTE10      => r_CMR.INFORMATION120
             ,P_CMR_ATTRIBUTE11      => r_CMR.INFORMATION121
             ,P_CMR_ATTRIBUTE12      => r_CMR.INFORMATION122
             ,P_CMR_ATTRIBUTE13      => r_CMR.INFORMATION123
             ,P_CMR_ATTRIBUTE14      => r_CMR.INFORMATION124
             ,P_CMR_ATTRIBUTE15      => r_CMR.INFORMATION125
             ,P_CMR_ATTRIBUTE16      => r_CMR.INFORMATION126
             ,P_CMR_ATTRIBUTE17      => r_CMR.INFORMATION127
             ,P_CMR_ATTRIBUTE18      => r_CMR.INFORMATION128
             ,P_CMR_ATTRIBUTE19      => r_CMR.INFORMATION129
             ,P_CMR_ATTRIBUTE2      => r_CMR.INFORMATION112
             ,P_CMR_ATTRIBUTE20      => r_CMR.INFORMATION130
             ,P_CMR_ATTRIBUTE21      => r_CMR.INFORMATION131
             ,P_CMR_ATTRIBUTE22      => r_CMR.INFORMATION132
             ,P_CMR_ATTRIBUTE23      => r_CMR.INFORMATION133
             ,P_CMR_ATTRIBUTE24      => r_CMR.INFORMATION134
             ,P_CMR_ATTRIBUTE25      => r_CMR.INFORMATION135
             ,P_CMR_ATTRIBUTE26      => r_CMR.INFORMATION136
             ,P_CMR_ATTRIBUTE27      => r_CMR.INFORMATION137
             ,P_CMR_ATTRIBUTE28      => r_CMR.INFORMATION138
             ,P_CMR_ATTRIBUTE29      => r_CMR.INFORMATION139
             ,P_CMR_ATTRIBUTE3      => r_CMR.INFORMATION113
             ,P_CMR_ATTRIBUTE30      => r_CMR.INFORMATION140
             ,P_CMR_ATTRIBUTE4      => r_CMR.INFORMATION114
             ,P_CMR_ATTRIBUTE5      => r_CMR.INFORMATION115
             ,P_CMR_ATTRIBUTE6      => r_CMR.INFORMATION116
             ,P_CMR_ATTRIBUTE7      => r_CMR.INFORMATION117
             ,P_CMR_ATTRIBUTE8      => r_CMR.INFORMATION118
             ,P_CMR_ATTRIBUTE9      => r_CMR.INFORMATION119
             ,P_CMR_ATTRIBUTE_CATEGORY      => r_CMR.INFORMATION110
             ,P_EXCLD_FLAG      => r_CMR.INFORMATION11
             ,P_ORDR_NUM      => r_CMR.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_CMR.information3) then
             --
             BEN_CMBN_AGE_LOS_RT_API.delete_CMBN_AGE_LOS_RT(
                --
                p_validate                       => false
                ,p_cmbn_age_los_rt_id                   => l_cmbn_age_los_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CMR',r_cmr.information5 );
    --
 end create_CMR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_VMR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_VMR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_MTCHG_RT_CALC_RL  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_VMR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_VRBL_MTCHG_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_VMR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_VMR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_VMR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     VMR.vrbl_mtchg_rt_id new_value
   from BEN_VRBL_MTCHG_RT_F VMR
   where
   VMR.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
   nvl(VMR.MTCHG_RT_CALC_RL, -999)   = nvl(l_MTCHG_RT_CALC_RL, -999) and
   VMR.business_group_id  = c_business_group_id
   and   VMR.vrbl_mtchg_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_VRBL_MTCHG_RT_F VMR1
                where
                VMR1.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                nvl(VMR1.MTCHG_RT_CALC_RL, -999)   = nvl(l_MTCHG_RT_CALC_RL, -999) and
                VMR1.business_group_id  = c_business_group_id
                and   VMR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_VRBL_MTCHG_RT_F VMR2
                where
                VMR2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                nvl(VMR2.MTCHG_RT_CALC_RL, -999)   = nvl(l_MTCHG_RT_CALC_RL, -999) and
                VMR2.business_group_id  = c_business_group_id
                and   VMR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_VMR                     c_VMR%rowtype;
   l_vrbl_mtchg_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_VMR_unique in c_unique_VMR('VMR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_VMR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_VMR_unique.table_route_id '||r_VMR_unique.table_route_id,10);
       hr_utility.set_location(' r_VMR_unique.information1 '||r_VMR_unique.information1,10);
       hr_utility.set_location( 'r_VMR_unique.information2 '||r_VMR_unique.information2,10);
       hr_utility.set_location( 'r_VMR_unique.information3 '||r_VMR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_VMR_min_max_dates(r_VMR_unique.table_route_id, r_VMR_unique.information1 ) ;
       fetch c_VMR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_VMR_unique.information2);
       open c_VMR(r_VMR_unique.table_route_id,
                r_VMR_unique.information1,
                r_VMR_unique.information2,
                r_VMR_unique.information3 ) ;
       --
       fetch c_VMR into r_VMR ;
       --
       close c_VMR ;
       --
       l_MTCHG_RT_CALC_RL := get_fk('FORMULA_ID', r_VMR.information261,r_VMR_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_VMR.information262,r_VMR_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_VMR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_VMR_unique.information2 and r_VMR_unique.information3 then
               l_update := true;
               if r_VMR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'VRBL_MTCHG_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'VRBL_MTCHG_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_VMR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_VMR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_VMR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('VMR',l_new_value,l_prefix || r_VMR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_VMR_min_max_dates%found then
           -- cursor to find the object
           open c_find_VMR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_vrbl_mtchg_rt_id, -999)  ) ;
           fetch c_find_VMR_in_target into l_new_value ;
           if c_find_VMR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_VRBL_MTCHG_RT_F',
                  p_base_key_column => 'VRBL_MTCHG_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_VMR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'VRBL_MTCHG_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'VRBL_MTCHG_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_VMR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_VMR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_VMR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_VMR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_VMR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_VMR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_VRBL_MTCHG_RT_F CREATE_VRBL_MATCHING_RATE ',20);
           BEN_VRBL_MATCHING_RATE_API.CREATE_VRBL_MATCHING_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CNTNU_MTCH_AFTR_MAX_RL_FLAG      => r_VMR.INFORMATION12
             ,P_FROM_PCT_VAL      => r_VMR.INFORMATION287
             ,P_MN_MTCH_AMT      => r_VMR.INFORMATION295
             ,P_MTCHG_RT_CALC_RL      => l_MTCHG_RT_CALC_RL
             ,P_MX_AMT_OF_PY_NUM      => r_VMR.INFORMATION294
             ,P_MX_MTCH_AMT      => r_VMR.INFORMATION293
             ,P_MX_PCT_OF_PY_NUM      => r_VMR.INFORMATION289
             ,P_NO_MX_AMT_OF_PY_NUM_FLAG      => r_VMR.INFORMATION14
             ,P_NO_MX_MTCH_AMT_FLAG      => r_VMR.INFORMATION11
             ,P_NO_MX_PCT_OF_PY_NUM_FLAG      => r_VMR.INFORMATION13
             ,P_ORDR_NUM      => r_VMR.INFORMATION257
             ,P_PCT_VAL      => r_VMR.INFORMATION290
             ,P_TO_PCT_VAL      => r_VMR.INFORMATION288
             ,P_VMR_ATTRIBUTE1      => r_VMR.INFORMATION111
             ,P_VMR_ATTRIBUTE10      => r_VMR.INFORMATION120
             ,P_VMR_ATTRIBUTE11      => r_VMR.INFORMATION121
             ,P_VMR_ATTRIBUTE12      => r_VMR.INFORMATION122
             ,P_VMR_ATTRIBUTE13      => r_VMR.INFORMATION123
             ,P_VMR_ATTRIBUTE14      => r_VMR.INFORMATION124
             ,P_VMR_ATTRIBUTE15      => r_VMR.INFORMATION125
             ,P_VMR_ATTRIBUTE16      => r_VMR.INFORMATION126
             ,P_VMR_ATTRIBUTE17      => r_VMR.INFORMATION127
             ,P_VMR_ATTRIBUTE18      => r_VMR.INFORMATION128
             ,P_VMR_ATTRIBUTE19      => r_VMR.INFORMATION129
             ,P_VMR_ATTRIBUTE2      => r_VMR.INFORMATION112
             ,P_VMR_ATTRIBUTE20      => r_VMR.INFORMATION130
             ,P_VMR_ATTRIBUTE21      => r_VMR.INFORMATION131
             ,P_VMR_ATTRIBUTE22      => r_VMR.INFORMATION132
             ,P_VMR_ATTRIBUTE23      => r_VMR.INFORMATION133
             ,P_VMR_ATTRIBUTE24      => r_VMR.INFORMATION134
             ,P_VMR_ATTRIBUTE25      => r_VMR.INFORMATION135
             ,P_VMR_ATTRIBUTE26      => r_VMR.INFORMATION136
             ,P_VMR_ATTRIBUTE27      => r_VMR.INFORMATION137
             ,P_VMR_ATTRIBUTE28      => r_VMR.INFORMATION138
             ,P_VMR_ATTRIBUTE29      => r_VMR.INFORMATION139
             ,P_VMR_ATTRIBUTE3      => r_VMR.INFORMATION113
             ,P_VMR_ATTRIBUTE30      => r_VMR.INFORMATION140
             ,P_VMR_ATTRIBUTE4      => r_VMR.INFORMATION114
             ,P_VMR_ATTRIBUTE5      => r_VMR.INFORMATION115
             ,P_VMR_ATTRIBUTE6      => r_VMR.INFORMATION116
             ,P_VMR_ATTRIBUTE7      => r_VMR.INFORMATION117
             ,P_VMR_ATTRIBUTE8      => r_VMR.INFORMATION118
             ,P_VMR_ATTRIBUTE9      => r_VMR.INFORMATION119
             ,P_VMR_ATTRIBUTE_CATEGORY      => r_VMR.INFORMATION110
             ,P_VRBL_MTCHG_RT_ID      => l_vrbl_mtchg_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_vrbl_mtchg_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'VRBL_MTCHG_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_VMR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_VRBL_MTCHG_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_VMR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_VMR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_VMR.information3,
               p_effective_start_date  => r_VMR.information2,
               p_dml_operation         => r_VMR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_VRBL_MTCHG_RT_ID   := r_VMR.information1;
             l_object_version_number := r_VMR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_VRBL_MTCHG_RT_F UPDATE_VRBL_MATCHING_RATE ',30);
           BEN_VRBL_MATCHING_RATE_API.UPDATE_VRBL_MATCHING_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CNTNU_MTCH_AFTR_MAX_RL_FLAG      => r_VMR.INFORMATION12
             ,P_FROM_PCT_VAL      => r_VMR.INFORMATION287
             ,P_MN_MTCH_AMT      => r_VMR.INFORMATION295
             ,P_MTCHG_RT_CALC_RL      => l_MTCHG_RT_CALC_RL
             ,P_MX_AMT_OF_PY_NUM      => r_VMR.INFORMATION294
             ,P_MX_MTCH_AMT      => r_VMR.INFORMATION293
             ,P_MX_PCT_OF_PY_NUM      => r_VMR.INFORMATION289
             ,P_NO_MX_AMT_OF_PY_NUM_FLAG      => r_VMR.INFORMATION14
             ,P_NO_MX_MTCH_AMT_FLAG      => r_VMR.INFORMATION11
             ,P_NO_MX_PCT_OF_PY_NUM_FLAG      => r_VMR.INFORMATION13
             ,P_ORDR_NUM      => r_VMR.INFORMATION257
             ,P_PCT_VAL      => r_VMR.INFORMATION290
             ,P_TO_PCT_VAL      => r_VMR.INFORMATION288
             ,P_VMR_ATTRIBUTE1      => r_VMR.INFORMATION111
             ,P_VMR_ATTRIBUTE10      => r_VMR.INFORMATION120
             ,P_VMR_ATTRIBUTE11      => r_VMR.INFORMATION121
             ,P_VMR_ATTRIBUTE12      => r_VMR.INFORMATION122
             ,P_VMR_ATTRIBUTE13      => r_VMR.INFORMATION123
             ,P_VMR_ATTRIBUTE14      => r_VMR.INFORMATION124
             ,P_VMR_ATTRIBUTE15      => r_VMR.INFORMATION125
             ,P_VMR_ATTRIBUTE16      => r_VMR.INFORMATION126
             ,P_VMR_ATTRIBUTE17      => r_VMR.INFORMATION127
             ,P_VMR_ATTRIBUTE18      => r_VMR.INFORMATION128
             ,P_VMR_ATTRIBUTE19      => r_VMR.INFORMATION129
             ,P_VMR_ATTRIBUTE2      => r_VMR.INFORMATION112
             ,P_VMR_ATTRIBUTE20      => r_VMR.INFORMATION130
             ,P_VMR_ATTRIBUTE21      => r_VMR.INFORMATION131
             ,P_VMR_ATTRIBUTE22      => r_VMR.INFORMATION132
             ,P_VMR_ATTRIBUTE23      => r_VMR.INFORMATION133
             ,P_VMR_ATTRIBUTE24      => r_VMR.INFORMATION134
             ,P_VMR_ATTRIBUTE25      => r_VMR.INFORMATION135
             ,P_VMR_ATTRIBUTE26      => r_VMR.INFORMATION136
             ,P_VMR_ATTRIBUTE27      => r_VMR.INFORMATION137
             ,P_VMR_ATTRIBUTE28      => r_VMR.INFORMATION138
             ,P_VMR_ATTRIBUTE29      => r_VMR.INFORMATION139
             ,P_VMR_ATTRIBUTE3      => r_VMR.INFORMATION113
             ,P_VMR_ATTRIBUTE30      => r_VMR.INFORMATION140
             ,P_VMR_ATTRIBUTE4      => r_VMR.INFORMATION114
             ,P_VMR_ATTRIBUTE5      => r_VMR.INFORMATION115
             ,P_VMR_ATTRIBUTE6      => r_VMR.INFORMATION116
             ,P_VMR_ATTRIBUTE7      => r_VMR.INFORMATION117
             ,P_VMR_ATTRIBUTE8      => r_VMR.INFORMATION118
             ,P_VMR_ATTRIBUTE9      => r_VMR.INFORMATION119
             ,P_VMR_ATTRIBUTE_CATEGORY      => r_VMR.INFORMATION110
             ,P_VRBL_MTCHG_RT_ID      => l_vrbl_mtchg_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_VMR.information3) then
             --
             BEN_VRBL_MATCHING_RATE_API.delete_VRBL_MATCHING_RATE(
                --
                p_validate                       => false
                ,p_vrbl_mtchg_rt_id                   => l_vrbl_mtchg_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'VMR',r_vmr.information5 );
    --
 end create_VMR_rows;

   ---------------------------------------------------------------
   ----------------------< create_PAP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PAP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PL_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_PAP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PRTT_ANTHR_PL_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PAP_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PAP(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PAP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PAP.prtt_anthr_pl_rt_id new_value
   from BEN_PRTT_ANTHR_PL_RT_F PAP
   where
   PAP.PL_ID     = l_PL_ID  and
   PAP.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   PAP.business_group_id  = c_business_group_id
   and   PAP.prtt_anthr_pl_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PRTT_ANTHR_PL_RT_F PAP1
                where
                PAP1.PL_ID     = l_PL_ID  and
                PAP1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PAP1.business_group_id  = c_business_group_id
                and   PAP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PRTT_ANTHR_PL_RT_F PAP2
                where
                PAP2.PL_ID     = l_PL_ID  and
                PAP2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PAP2.business_group_id  = c_business_group_id
                and   PAP2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PAP                     c_PAP%rowtype;
   l_prtt_anthr_pl_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PAP_unique in c_unique_PAP('PAP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PAP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PAP_unique.table_route_id '||r_PAP_unique.table_route_id,10);
       hr_utility.set_location(' r_PAP_unique.information1 '||r_PAP_unique.information1,10);
       hr_utility.set_location( 'r_PAP_unique.information2 '||r_PAP_unique.information2,10);
       hr_utility.set_location( 'r_PAP_unique.information3 '||r_PAP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PAP_min_max_dates(r_PAP_unique.table_route_id, r_PAP_unique.information1 ) ;
       fetch c_PAP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PAP_unique.information2);
       open c_PAP(r_PAP_unique.table_route_id,
                r_PAP_unique.information1,
                r_PAP_unique.information2,
                r_PAP_unique.information3 ) ;
       --
       fetch c_PAP into r_PAP ;
       --
       close c_PAP ;
       --

       -- Only For Use by Create Wizard - Same Business Group
       l_PL_ID := NVL(get_fk('PL_ID', r_PAP.information261,r_PAP_unique.dml_operation),
                      r_PAP.information261);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PAP.information262,r_PAP_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PAP_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PAP_unique.information2 and r_PAP_unique.information3 then
               l_update := true;
               if r_PAP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PRTT_ANTHR_PL_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PRTT_ANTHR_PL_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PAP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PAP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PAP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PAP',l_new_value,l_prefix || r_PAP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_PAP_min_max_dates%found then
           -- cursor to find the object
           open c_find_PAP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_prtt_anthr_pl_rt_id, -999)  ) ;
           fetch c_find_PAP_in_target into l_new_value ;
           if c_find_PAP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PRTT_ANTHR_PL_RT_F',
                  p_base_key_column => 'PRTT_ANTHR_PL_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PAP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'PRTT_ANTHR_PL_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'PRTT_ANTHR_PL_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PAP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PAP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PAP_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_PAP_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_PAP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PAP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PRTT_ANTHR_PL_RT_F CREATE_PRTT_ANTHR_PL_RT ',20);
           BEN_PRTT_ANTHR_PL_RT_API.CREATE_PRTT_ANTHR_PL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_PAP.INFORMATION11
             ,P_ORDR_NUM      => r_PAP.INFORMATION260
             ,P_PAP_ATTRIBUTE1      => r_PAP.INFORMATION111
             ,P_PAP_ATTRIBUTE10      => r_PAP.INFORMATION120
             ,P_PAP_ATTRIBUTE11      => r_PAP.INFORMATION121
             ,P_PAP_ATTRIBUTE12      => r_PAP.INFORMATION122
             ,P_PAP_ATTRIBUTE13      => r_PAP.INFORMATION123
             ,P_PAP_ATTRIBUTE14      => r_PAP.INFORMATION124
             ,P_PAP_ATTRIBUTE15      => r_PAP.INFORMATION125
             ,P_PAP_ATTRIBUTE16      => r_PAP.INFORMATION126
             ,P_PAP_ATTRIBUTE17      => r_PAP.INFORMATION127
             ,P_PAP_ATTRIBUTE18      => r_PAP.INFORMATION128
             ,P_PAP_ATTRIBUTE19      => r_PAP.INFORMATION129
             ,P_PAP_ATTRIBUTE2      => r_PAP.INFORMATION112
             ,P_PAP_ATTRIBUTE20      => r_PAP.INFORMATION130
             ,P_PAP_ATTRIBUTE21      => r_PAP.INFORMATION131
             ,P_PAP_ATTRIBUTE22      => r_PAP.INFORMATION132
             ,P_PAP_ATTRIBUTE23      => r_PAP.INFORMATION133
             ,P_PAP_ATTRIBUTE24      => r_PAP.INFORMATION134
             ,P_PAP_ATTRIBUTE25      => r_PAP.INFORMATION135
             ,P_PAP_ATTRIBUTE26      => r_PAP.INFORMATION136
             ,P_PAP_ATTRIBUTE27      => r_PAP.INFORMATION137
             ,P_PAP_ATTRIBUTE28      => r_PAP.INFORMATION138
             ,P_PAP_ATTRIBUTE29      => r_PAP.INFORMATION139
             ,P_PAP_ATTRIBUTE3      => r_PAP.INFORMATION113
             ,P_PAP_ATTRIBUTE30      => r_PAP.INFORMATION140
             ,P_PAP_ATTRIBUTE4      => r_PAP.INFORMATION114
             ,P_PAP_ATTRIBUTE5      => r_PAP.INFORMATION115
             ,P_PAP_ATTRIBUTE6      => r_PAP.INFORMATION116
             ,P_PAP_ATTRIBUTE7      => r_PAP.INFORMATION117
             ,P_PAP_ATTRIBUTE8      => r_PAP.INFORMATION118
             ,P_PAP_ATTRIBUTE9      => r_PAP.INFORMATION119
             ,P_PAP_ATTRIBUTE_CATEGORY      => r_PAP.INFORMATION110
             ,P_PL_ID      => l_PL_ID
             ,P_PRTT_ANTHR_PL_RT_ID      => l_prtt_anthr_pl_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_prtt_anthr_pl_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'PRTT_ANTHR_PL_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PAP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_PRTT_ANTHR_PL_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PAP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PAP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PAP.information3,
               p_effective_start_date  => r_PAP.information2,
               p_dml_operation         => r_PAP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PRTT_ANTHR_PL_RT_ID   := r_PAP.information1;
             l_object_version_number := r_PAP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_PRTT_ANTHR_PL_RT_F UPDATE_PRTT_ANTHR_PL_RT ',30);
           BEN_PRTT_ANTHR_PL_RT_API.UPDATE_PRTT_ANTHR_PL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_PAP.INFORMATION11
             ,P_ORDR_NUM      => r_PAP.INFORMATION260
             ,P_PAP_ATTRIBUTE1      => r_PAP.INFORMATION111
             ,P_PAP_ATTRIBUTE10      => r_PAP.INFORMATION120
             ,P_PAP_ATTRIBUTE11      => r_PAP.INFORMATION121
             ,P_PAP_ATTRIBUTE12      => r_PAP.INFORMATION122
             ,P_PAP_ATTRIBUTE13      => r_PAP.INFORMATION123
             ,P_PAP_ATTRIBUTE14      => r_PAP.INFORMATION124
             ,P_PAP_ATTRIBUTE15      => r_PAP.INFORMATION125
             ,P_PAP_ATTRIBUTE16      => r_PAP.INFORMATION126
             ,P_PAP_ATTRIBUTE17      => r_PAP.INFORMATION127
             ,P_PAP_ATTRIBUTE18      => r_PAP.INFORMATION128
             ,P_PAP_ATTRIBUTE19      => r_PAP.INFORMATION129
             ,P_PAP_ATTRIBUTE2      => r_PAP.INFORMATION112
             ,P_PAP_ATTRIBUTE20      => r_PAP.INFORMATION130
             ,P_PAP_ATTRIBUTE21      => r_PAP.INFORMATION131
             ,P_PAP_ATTRIBUTE22      => r_PAP.INFORMATION132
             ,P_PAP_ATTRIBUTE23      => r_PAP.INFORMATION133
             ,P_PAP_ATTRIBUTE24      => r_PAP.INFORMATION134
             ,P_PAP_ATTRIBUTE25      => r_PAP.INFORMATION135
             ,P_PAP_ATTRIBUTE26      => r_PAP.INFORMATION136
             ,P_PAP_ATTRIBUTE27      => r_PAP.INFORMATION137
             ,P_PAP_ATTRIBUTE28      => r_PAP.INFORMATION138
             ,P_PAP_ATTRIBUTE29      => r_PAP.INFORMATION139
             ,P_PAP_ATTRIBUTE3      => r_PAP.INFORMATION113
             ,P_PAP_ATTRIBUTE30      => r_PAP.INFORMATION140
             ,P_PAP_ATTRIBUTE4      => r_PAP.INFORMATION114
             ,P_PAP_ATTRIBUTE5      => r_PAP.INFORMATION115
             ,P_PAP_ATTRIBUTE6      => r_PAP.INFORMATION116
             ,P_PAP_ATTRIBUTE7      => r_PAP.INFORMATION117
             ,P_PAP_ATTRIBUTE8      => r_PAP.INFORMATION118
             ,P_PAP_ATTRIBUTE9      => r_PAP.INFORMATION119
             ,P_PAP_ATTRIBUTE_CATEGORY      => r_PAP.INFORMATION110
             ,P_PL_ID      => l_PL_ID
             ,P_PRTT_ANTHR_PL_RT_ID      => l_prtt_anthr_pl_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PAP.information3) then
             --
             BEN_PRTT_ANTHR_PL_RT_API.delete_PRTT_ANTHR_PL_RT(
                --
                p_validate                       => false
                ,p_prtt_anthr_pl_rt_id                   => l_prtt_anthr_pl_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PAP',r_pap.information5 );
    --
 end create_PAP_rows;

   ---------------------------------------------------------------
   ----------------------< create_OPR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_OPR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PTIP_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_OPR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_OTHR_PTIP_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_OPR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_OPR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_OPR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     OPR.othr_ptip_rt_id new_value
   from BEN_OTHR_PTIP_RT_F OPR
   where
   OPR.PTIP_ID     = l_PTIP_ID  and
   OPR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   OPR.business_group_id  = c_business_group_id
   and   OPR.othr_ptip_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_OTHR_PTIP_RT_F OPR1
                where
                OPR1.PTIP_ID     = l_PTIP_ID  and
                OPR1.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                OPR1.business_group_id  = c_business_group_id
                and   OPR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_OTHR_PTIP_RT_F OPR2
                where
                OPR2.PTIP_ID     = l_PTIP_ID  and
                OPR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                OPR2.business_group_id  = c_business_group_id
                and   OPR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_OPR                     c_OPR%rowtype;
   l_othr_ptip_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_OPR_unique in c_unique_OPR('OPR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_OPR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_OPR_unique.table_route_id '||r_OPR_unique.table_route_id,10);
       hr_utility.set_location(' r_OPR_unique.information1 '||r_OPR_unique.information1,10);
       hr_utility.set_location( 'r_OPR_unique.information2 '||r_OPR_unique.information2,10);
       hr_utility.set_location( 'r_OPR_unique.information3 '||r_OPR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_OPR_min_max_dates(r_OPR_unique.table_route_id, r_OPR_unique.information1 ) ;
       fetch c_OPR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_OPR_unique.information2);
       open c_OPR(r_OPR_unique.table_route_id,
                r_OPR_unique.information1,
                r_OPR_unique.information2,
                r_OPR_unique.information3 ) ;
       --
       fetch c_OPR into r_OPR ;
       --
       close c_OPR ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_OPR.information259,r_OPR_unique.dml_operation),
                        r_OPR.information259);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_OPR.information262,r_OPR_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_OPR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_OPR_unique.information2 and r_OPR_unique.information3 then
               l_update := true;
               if r_OPR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'OTHR_PTIP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'OTHR_PTIP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_OPR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_OPR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_OPR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('OPR',l_new_value,l_prefix || r_OPR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_OPR_min_max_dates%found then
           -- cursor to find the object
           open c_find_OPR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_othr_ptip_rt_id, -999)  ) ;
           fetch c_find_OPR_in_target into l_new_value ;
           if c_find_OPR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_OTHR_PTIP_RT_F',
                  p_base_key_column => 'OTHR_PTIP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_OPR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'OTHR_PTIP_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'OTHR_PTIP_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_OPR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_OPR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_OPR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_OPR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_OPR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_OPR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_OTHR_PTIP_RT_F CREATE_OTHR_PTIP_RT ',20);
           BEN_OTHR_PTIP_RT_API.CREATE_OTHR_PTIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_OPR.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_OPR.INFORMATION12
             ,P_OPR_ATTRIBUTE1      => r_OPR.INFORMATION111
             ,P_OPR_ATTRIBUTE10      => r_OPR.INFORMATION120
             ,P_OPR_ATTRIBUTE11      => r_OPR.INFORMATION121
             ,P_OPR_ATTRIBUTE12      => r_OPR.INFORMATION122
             ,P_OPR_ATTRIBUTE13      => r_OPR.INFORMATION123
             ,P_OPR_ATTRIBUTE14      => r_OPR.INFORMATION124
             ,P_OPR_ATTRIBUTE15      => r_OPR.INFORMATION125
             ,P_OPR_ATTRIBUTE16      => r_OPR.INFORMATION126
             ,P_OPR_ATTRIBUTE17      => r_OPR.INFORMATION127
             ,P_OPR_ATTRIBUTE18      => r_OPR.INFORMATION128
             ,P_OPR_ATTRIBUTE19      => r_OPR.INFORMATION129
             ,P_OPR_ATTRIBUTE2      => r_OPR.INFORMATION112
             ,P_OPR_ATTRIBUTE20      => r_OPR.INFORMATION130
             ,P_OPR_ATTRIBUTE21      => r_OPR.INFORMATION131
             ,P_OPR_ATTRIBUTE22      => r_OPR.INFORMATION132
             ,P_OPR_ATTRIBUTE23      => r_OPR.INFORMATION133
             ,P_OPR_ATTRIBUTE24      => r_OPR.INFORMATION134
             ,P_OPR_ATTRIBUTE25      => r_OPR.INFORMATION135
             ,P_OPR_ATTRIBUTE26      => r_OPR.INFORMATION136
             ,P_OPR_ATTRIBUTE27      => r_OPR.INFORMATION137
             ,P_OPR_ATTRIBUTE28      => r_OPR.INFORMATION138
             ,P_OPR_ATTRIBUTE29      => r_OPR.INFORMATION139
             ,P_OPR_ATTRIBUTE3      => r_OPR.INFORMATION113
             ,P_OPR_ATTRIBUTE30      => r_OPR.INFORMATION140
             ,P_OPR_ATTRIBUTE4      => r_OPR.INFORMATION114
             ,P_OPR_ATTRIBUTE5      => r_OPR.INFORMATION115
             ,P_OPR_ATTRIBUTE6      => r_OPR.INFORMATION116
             ,P_OPR_ATTRIBUTE7      => r_OPR.INFORMATION117
             ,P_OPR_ATTRIBUTE8      => r_OPR.INFORMATION118
             ,P_OPR_ATTRIBUTE9      => r_OPR.INFORMATION119
             ,P_OPR_ATTRIBUTE_CATEGORY      => r_OPR.INFORMATION110
             ,P_ORDR_NUM      => r_OPR.INFORMATION257
             ,P_OTHR_PTIP_RT_ID      => l_othr_ptip_rt_id
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_othr_ptip_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'OTHR_PTIP_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_OPR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_OTHR_PTIP_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_OPR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_OPR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_OPR.information3,
               p_effective_start_date  => r_OPR.information2,
               p_dml_operation         => r_OPR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_OTHR_PTIP_RT_ID   := r_OPR.information1;
             l_object_version_number := r_OPR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_OTHR_PTIP_RT_F UPDATE_OTHR_PTIP_RT ',30);
           BEN_OTHR_PTIP_RT_API.UPDATE_OTHR_PTIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_OPR.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_OPR.INFORMATION12
             ,P_OPR_ATTRIBUTE1      => r_OPR.INFORMATION111
             ,P_OPR_ATTRIBUTE10      => r_OPR.INFORMATION120
             ,P_OPR_ATTRIBUTE11      => r_OPR.INFORMATION121
             ,P_OPR_ATTRIBUTE12      => r_OPR.INFORMATION122
             ,P_OPR_ATTRIBUTE13      => r_OPR.INFORMATION123
             ,P_OPR_ATTRIBUTE14      => r_OPR.INFORMATION124
             ,P_OPR_ATTRIBUTE15      => r_OPR.INFORMATION125
             ,P_OPR_ATTRIBUTE16      => r_OPR.INFORMATION126
             ,P_OPR_ATTRIBUTE17      => r_OPR.INFORMATION127
             ,P_OPR_ATTRIBUTE18      => r_OPR.INFORMATION128
             ,P_OPR_ATTRIBUTE19      => r_OPR.INFORMATION129
             ,P_OPR_ATTRIBUTE2      => r_OPR.INFORMATION112
             ,P_OPR_ATTRIBUTE20      => r_OPR.INFORMATION130
             ,P_OPR_ATTRIBUTE21      => r_OPR.INFORMATION131
             ,P_OPR_ATTRIBUTE22      => r_OPR.INFORMATION132
             ,P_OPR_ATTRIBUTE23      => r_OPR.INFORMATION133
             ,P_OPR_ATTRIBUTE24      => r_OPR.INFORMATION134
             ,P_OPR_ATTRIBUTE25      => r_OPR.INFORMATION135
             ,P_OPR_ATTRIBUTE26      => r_OPR.INFORMATION136
             ,P_OPR_ATTRIBUTE27      => r_OPR.INFORMATION137
             ,P_OPR_ATTRIBUTE28      => r_OPR.INFORMATION138
             ,P_OPR_ATTRIBUTE29      => r_OPR.INFORMATION139
             ,P_OPR_ATTRIBUTE3      => r_OPR.INFORMATION113
             ,P_OPR_ATTRIBUTE30      => r_OPR.INFORMATION140
             ,P_OPR_ATTRIBUTE4      => r_OPR.INFORMATION114
             ,P_OPR_ATTRIBUTE5      => r_OPR.INFORMATION115
             ,P_OPR_ATTRIBUTE6      => r_OPR.INFORMATION116
             ,P_OPR_ATTRIBUTE7      => r_OPR.INFORMATION117
             ,P_OPR_ATTRIBUTE8      => r_OPR.INFORMATION118
             ,P_OPR_ATTRIBUTE9      => r_OPR.INFORMATION119
             ,P_OPR_ATTRIBUTE_CATEGORY      => r_OPR.INFORMATION110
             ,P_ORDR_NUM      => r_OPR.INFORMATION257
             ,P_OTHR_PTIP_RT_ID      => l_othr_ptip_rt_id
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_OPR.information3) then
             --
             BEN_OTHR_PTIP_RT_API.delete_OTHR_PTIP_RT(
                --
                p_validate                       => false
                ,p_othr_ptip_rt_id                   => l_othr_ptip_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'OPR',r_opr.information5 );
    --
 end create_OPR_rows;

   ---------------------------------------------------------------
   ----------------------< create_NOC_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_NOC_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_COORD_BEN_NO_CVG_FLAG varchar2(100);
   cursor c_unique_NOC(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_NO_OTHR_CVG_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_NOC_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_NOC(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_NOC_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     NOC.no_othr_cvg_rt_id new_value
   from BEN_NO_OTHR_CVG_RT_F NOC
   where
   NOC.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   NOC.COORD_BEN_NO_CVG_FLAG     = l_COORD_BEN_NO_CVG_FLAG  and
   NOC.business_group_id  = c_business_group_id
   and   NOC.no_othr_cvg_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_NO_OTHR_CVG_RT_F NOC1
                where
                NOC1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                NOC1.COORD_BEN_NO_CVG_FLAG     = l_COORD_BEN_NO_CVG_FLAG  and
                NOC1.business_group_id  = c_business_group_id
                and   NOC1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_NO_OTHR_CVG_RT_F NOC2
                where
                NOC2.VRBL_RT_PRFL_ID    =l_VRBL_RT_PRFL_ID  and
                NOC2.COORD_BEN_NO_CVG_FLAG     = l_COORD_BEN_NO_CVG_FLAG  and
                NOC2.business_group_id  = c_business_group_id
                and   NOC2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_NOC                     c_NOC%rowtype;
   l_no_othr_cvg_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_NOC_unique in c_unique_NOC('NOC') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_NOC_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then

       --
       hr_utility.set_location(' r_NOC_unique.table_route_id '||r_NOC_unique.table_route_id,10);
       hr_utility.set_location(' r_NOC_unique.information1 '||r_NOC_unique.information1,10);
       hr_utility.set_location( 'r_NOC_unique.information2 '||r_NOC_unique.information2,10);
       hr_utility.set_location( 'r_NOC_unique.information3 '||r_NOC_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_NOC_min_max_dates(r_NOC_unique.table_route_id, r_NOC_unique.information1 ) ;
       fetch c_NOC_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_NOC_unique.information2);
       open c_NOC(r_NOC_unique.table_route_id,
                r_NOC_unique.information1,
                r_NOC_unique.information2,
                r_NOC_unique.information3 ) ;
       --
       fetch c_NOC into r_NOC ;
       --
       close c_NOC ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_NOC.information262,r_NOC_unique.dml_operation);
       l_COORD_BEN_NO_CVG_FLAG      := r_NOC.information11;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_NOC_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_NOC_unique.information2 and r_NOC_unique.information3 then
               l_update := true;
               if r_NOC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'NO_OTHR_CVG_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'NO_OTHR_CVG_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_NOC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_NOC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_NOC_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('NOC',l_new_value,l_prefix || r_NOC_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_NOC_min_max_dates%found then
           -- cursor to find the object
           open c_find_NOC_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_no_othr_cvg_rt_id, -999)  ) ;
           fetch c_find_NOC_in_target into l_new_value ;
           if c_find_NOC_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_NO_OTHR_CVG_RT_F',
                  p_base_key_column => 'NO_OTHR_CVG_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_NOC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'NO_OTHR_CVG_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'NO_OTHR_CVG_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_NOC_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_NOC_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_NOC_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_NOC_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_NOC.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_NOC.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_NO_OTHR_CVG_RT_F CREATE_NO_OTHR_CVG_RT ',20);
           BEN_NO_OTHR_CVG_RT_API.CREATE_NO_OTHR_CVG_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_COORD_BEN_NO_CVG_FLAG      => r_NOC.INFORMATION11
             ,P_NOC_ATTRIBUTE1      => r_NOC.INFORMATION111
             ,P_NOC_ATTRIBUTE10      => r_NOC.INFORMATION120
             ,P_NOC_ATTRIBUTE11      => r_NOC.INFORMATION121
             ,P_NOC_ATTRIBUTE12      => r_NOC.INFORMATION122
             ,P_NOC_ATTRIBUTE13      => r_NOC.INFORMATION123
             ,P_NOC_ATTRIBUTE14      => r_NOC.INFORMATION124
             ,P_NOC_ATTRIBUTE15      => r_NOC.INFORMATION125
             ,P_NOC_ATTRIBUTE16      => r_NOC.INFORMATION126
             ,P_NOC_ATTRIBUTE17      => r_NOC.INFORMATION127
             ,P_NOC_ATTRIBUTE18      => r_NOC.INFORMATION128
             ,P_NOC_ATTRIBUTE19      => r_NOC.INFORMATION129
             ,P_NOC_ATTRIBUTE2      => r_NOC.INFORMATION112
             ,P_NOC_ATTRIBUTE20      => r_NOC.INFORMATION130
             ,P_NOC_ATTRIBUTE21      => r_NOC.INFORMATION131
             ,P_NOC_ATTRIBUTE22      => r_NOC.INFORMATION132
             ,P_NOC_ATTRIBUTE23      => r_NOC.INFORMATION133
             ,P_NOC_ATTRIBUTE24      => r_NOC.INFORMATION134
             ,P_NOC_ATTRIBUTE25      => r_NOC.INFORMATION135
             ,P_NOC_ATTRIBUTE26      => r_NOC.INFORMATION136
             ,P_NOC_ATTRIBUTE27      => r_NOC.INFORMATION137
             ,P_NOC_ATTRIBUTE28      => r_NOC.INFORMATION138
             ,P_NOC_ATTRIBUTE29      => r_NOC.INFORMATION139
             ,P_NOC_ATTRIBUTE3      => r_NOC.INFORMATION113
             ,P_NOC_ATTRIBUTE30      => r_NOC.INFORMATION140
             ,P_NOC_ATTRIBUTE4      => r_NOC.INFORMATION114
             ,P_NOC_ATTRIBUTE5      => r_NOC.INFORMATION115
             ,P_NOC_ATTRIBUTE6      => r_NOC.INFORMATION116
             ,P_NOC_ATTRIBUTE7      => r_NOC.INFORMATION117
             ,P_NOC_ATTRIBUTE8      => r_NOC.INFORMATION118
             ,P_NOC_ATTRIBUTE9      => r_NOC.INFORMATION119
             ,P_NOC_ATTRIBUTE_CATEGORY      => r_NOC.INFORMATION110
             ,P_NO_OTHR_CVG_RT_ID      => l_no_othr_cvg_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_no_othr_cvg_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'NO_OTHR_CVG_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_NOC.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_NO_OTHR_CVG_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_NOC_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_NOC.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_NOC.information3,
               p_effective_start_date  => r_NOC.information2,
               p_dml_operation         => r_NOC.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_NO_OTHR_CVG_RT_ID   := r_NOC.information1;
             l_object_version_number := r_NOC.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_NO_OTHR_CVG_RT_F UPDATE_NO_OTHR_CVG_RT ',30);
           BEN_NO_OTHR_CVG_RT_API.UPDATE_NO_OTHR_CVG_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_COORD_BEN_NO_CVG_FLAG      => r_NOC.INFORMATION11
             ,P_NOC_ATTRIBUTE1      => r_NOC.INFORMATION111
             ,P_NOC_ATTRIBUTE10      => r_NOC.INFORMATION120
             ,P_NOC_ATTRIBUTE11      => r_NOC.INFORMATION121
             ,P_NOC_ATTRIBUTE12      => r_NOC.INFORMATION122
             ,P_NOC_ATTRIBUTE13      => r_NOC.INFORMATION123
             ,P_NOC_ATTRIBUTE14      => r_NOC.INFORMATION124
             ,P_NOC_ATTRIBUTE15      => r_NOC.INFORMATION125
             ,P_NOC_ATTRIBUTE16      => r_NOC.INFORMATION126
             ,P_NOC_ATTRIBUTE17      => r_NOC.INFORMATION127
             ,P_NOC_ATTRIBUTE18      => r_NOC.INFORMATION128
             ,P_NOC_ATTRIBUTE19      => r_NOC.INFORMATION129
             ,P_NOC_ATTRIBUTE2      => r_NOC.INFORMATION112
             ,P_NOC_ATTRIBUTE20      => r_NOC.INFORMATION130
             ,P_NOC_ATTRIBUTE21      => r_NOC.INFORMATION131
             ,P_NOC_ATTRIBUTE22      => r_NOC.INFORMATION132
             ,P_NOC_ATTRIBUTE23      => r_NOC.INFORMATION133
             ,P_NOC_ATTRIBUTE24      => r_NOC.INFORMATION134
             ,P_NOC_ATTRIBUTE25      => r_NOC.INFORMATION135
             ,P_NOC_ATTRIBUTE26      => r_NOC.INFORMATION136
             ,P_NOC_ATTRIBUTE27      => r_NOC.INFORMATION137
             ,P_NOC_ATTRIBUTE28      => r_NOC.INFORMATION138
             ,P_NOC_ATTRIBUTE29      => r_NOC.INFORMATION139
             ,P_NOC_ATTRIBUTE3      => r_NOC.INFORMATION113
             ,P_NOC_ATTRIBUTE30      => r_NOC.INFORMATION140
             ,P_NOC_ATTRIBUTE4      => r_NOC.INFORMATION114
             ,P_NOC_ATTRIBUTE5      => r_NOC.INFORMATION115
             ,P_NOC_ATTRIBUTE6      => r_NOC.INFORMATION116
             ,P_NOC_ATTRIBUTE7      => r_NOC.INFORMATION117
             ,P_NOC_ATTRIBUTE8      => r_NOC.INFORMATION118
             ,P_NOC_ATTRIBUTE9      => r_NOC.INFORMATION119
             ,P_NOC_ATTRIBUTE_CATEGORY      => r_NOC.INFORMATION110
             ,P_NO_OTHR_CVG_RT_ID      => l_no_othr_cvg_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_NOC.information3) then
             --
             BEN_NO_OTHR_CVG_RT_API.delete_NO_OTHR_CVG_RT(
                --
                p_validate                       => false
                ,p_no_othr_cvg_rt_id                   => l_no_othr_cvg_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'NOC',r_noc.information5 );
    --
 end create_NOC_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_OMR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_OMR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_OPTD_MDCR_FLAG  varchar2(30);
   cursor c_unique_OMR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_OPTD_MDCR_RT_F
   and tr.table_alias = l_table_alias
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_OMR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_OMR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_OMR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     OMR.optd_mdcr_rt_id new_value
   from BEN_OPTD_MDCR_RT_F OMR
   where
   OMR.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
   OMR.OPTD_MDCR_FLAG    = l_OPTD_MDCR_FLAG and
   OMR.business_group_id  = c_business_group_id
   and   OMR.optd_mdcr_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_OPTD_MDCR_RT_F OMR1
                where
                OMR1.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                OMR1.OPTD_MDCR_FLAG    = l_OPTD_MDCR_FLAG and
                OMR1.business_group_id  = c_business_group_id
                and   OMR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_OPTD_MDCR_RT_F OMR2
                where
                OMR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                OMR2.OPTD_MDCR_FLAG    = l_OPTD_MDCR_FLAG and
                OMR2.business_group_id  = c_business_group_id
                and   OMR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_OMR                     c_OMR%rowtype;
   l_optd_mdcr_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_OMR_unique in c_unique_OMR('OMR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_OMR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_OMR_unique.table_route_id '||r_OMR_unique.table_route_id,10);
       hr_utility.set_location(' r_OMR_unique.information1 '||r_OMR_unique.information1,10);
       hr_utility.set_location( 'r_OMR_unique.information2 '||r_OMR_unique.information2,10);
       hr_utility.set_location( 'r_OMR_unique.information3 '||r_OMR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_OMR_min_max_dates(r_OMR_unique.table_route_id, r_OMR_unique.information1 ) ;
       fetch c_OMR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_OMR_unique.information2);
       open c_OMR(r_OMR_unique.table_route_id,
                r_OMR_unique.information1,
                r_OMR_unique.information2,
                r_OMR_unique.information3 ) ;
       --
       fetch c_OMR into r_OMR ;
       --
       close c_OMR ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_OMR.information262,r_OMR_unique.dml_operation);
       l_OPTD_MDCR_FLAG := r_OMR.information11 ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_OMR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_OMR_unique.information2 and r_OMR_unique.information3 then
               l_update := true;
               if r_OMR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'OPTD_MDCR_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'OPTD_MDCR_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_OMR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_OMR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_OMR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('OMR',l_new_value,l_prefix || r_OMR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_OMR_min_max_dates%found then
           -- cursor to find the object
           open c_find_OMR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_optd_mdcr_rt_id, -999)  ) ;
           fetch c_find_OMR_in_target into l_new_value ;
           if c_find_OMR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_OPTD_MDCR_RT_F',
                  p_base_key_column => 'OPTD_MDCR_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_OMR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'OPTD_MDCR_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'OPTD_MDCR_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_OMR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_OMR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_OMR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_OMR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_OMR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_OMR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_OPTD_MDCR_RT_F CREATE_OPTD_MDCR_RT ',20);
           BEN_OPTD_MDCR_RT_API.CREATE_OPTD_MDCR_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXLCD_FLAG      => r_OMR.INFORMATION12
             ,P_OMR_ATTRIBUTE1      => r_OMR.INFORMATION111
             ,P_OMR_ATTRIBUTE10      => r_OMR.INFORMATION120
             ,P_OMR_ATTRIBUTE11      => r_OMR.INFORMATION121
             ,P_OMR_ATTRIBUTE12      => r_OMR.INFORMATION122
             ,P_OMR_ATTRIBUTE13      => r_OMR.INFORMATION123
             ,P_OMR_ATTRIBUTE14      => r_OMR.INFORMATION124
             ,P_OMR_ATTRIBUTE15      => r_OMR.INFORMATION125
             ,P_OMR_ATTRIBUTE16      => r_OMR.INFORMATION126
             ,P_OMR_ATTRIBUTE17      => r_OMR.INFORMATION127
             ,P_OMR_ATTRIBUTE18      => r_OMR.INFORMATION128
             ,P_OMR_ATTRIBUTE19      => r_OMR.INFORMATION129
             ,P_OMR_ATTRIBUTE2      => r_OMR.INFORMATION112
             ,P_OMR_ATTRIBUTE20      => r_OMR.INFORMATION130
             ,P_OMR_ATTRIBUTE21      => r_OMR.INFORMATION131
             ,P_OMR_ATTRIBUTE22      => r_OMR.INFORMATION132
             ,P_OMR_ATTRIBUTE23      => r_OMR.INFORMATION133
             ,P_OMR_ATTRIBUTE24      => r_OMR.INFORMATION134
             ,P_OMR_ATTRIBUTE25      => r_OMR.INFORMATION135
             ,P_OMR_ATTRIBUTE26      => r_OMR.INFORMATION136
             ,P_OMR_ATTRIBUTE27      => r_OMR.INFORMATION137
             ,P_OMR_ATTRIBUTE28      => r_OMR.INFORMATION138
             ,P_OMR_ATTRIBUTE29      => r_OMR.INFORMATION139
             ,P_OMR_ATTRIBUTE3      => r_OMR.INFORMATION113
             ,P_OMR_ATTRIBUTE30      => r_OMR.INFORMATION140
             ,P_OMR_ATTRIBUTE4      => r_OMR.INFORMATION114
             ,P_OMR_ATTRIBUTE5      => r_OMR.INFORMATION115
             ,P_OMR_ATTRIBUTE6      => r_OMR.INFORMATION116
             ,P_OMR_ATTRIBUTE7      => r_OMR.INFORMATION117
             ,P_OMR_ATTRIBUTE8      => r_OMR.INFORMATION118
             ,P_OMR_ATTRIBUTE9      => r_OMR.INFORMATION119
             ,P_OMR_ATTRIBUTE_CATEGORY      => r_OMR.INFORMATION110
             ,P_OPTD_MDCR_FLAG      => r_OMR.INFORMATION11
             ,P_OPTD_MDCR_RT_ID      => l_optd_mdcr_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_optd_mdcr_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'OPTD_MDCR_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_OMR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_OPTD_MDCR_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_OMR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_OMR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_OMR.information3,
               p_effective_start_date  => r_OMR.information2,
               p_dml_operation         => r_OMR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_OPTD_MDCR_RT_ID   := r_OMR.information1;
             l_object_version_number := r_OMR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_OPTD_MDCR_RT_F UPDATE_OPTD_MDCR_RT ',30);
           BEN_OPTD_MDCR_RT_API.UPDATE_OPTD_MDCR_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXLCD_FLAG      => r_OMR.INFORMATION12
             ,P_OMR_ATTRIBUTE1      => r_OMR.INFORMATION111
             ,P_OMR_ATTRIBUTE10      => r_OMR.INFORMATION120
             ,P_OMR_ATTRIBUTE11      => r_OMR.INFORMATION121
             ,P_OMR_ATTRIBUTE12      => r_OMR.INFORMATION122
             ,P_OMR_ATTRIBUTE13      => r_OMR.INFORMATION123
             ,P_OMR_ATTRIBUTE14      => r_OMR.INFORMATION124
             ,P_OMR_ATTRIBUTE15      => r_OMR.INFORMATION125
             ,P_OMR_ATTRIBUTE16      => r_OMR.INFORMATION126
             ,P_OMR_ATTRIBUTE17      => r_OMR.INFORMATION127
             ,P_OMR_ATTRIBUTE18      => r_OMR.INFORMATION128
             ,P_OMR_ATTRIBUTE19      => r_OMR.INFORMATION129
             ,P_OMR_ATTRIBUTE2      => r_OMR.INFORMATION112
             ,P_OMR_ATTRIBUTE20      => r_OMR.INFORMATION130
             ,P_OMR_ATTRIBUTE21      => r_OMR.INFORMATION131
             ,P_OMR_ATTRIBUTE22      => r_OMR.INFORMATION132
             ,P_OMR_ATTRIBUTE23      => r_OMR.INFORMATION133
             ,P_OMR_ATTRIBUTE24      => r_OMR.INFORMATION134
             ,P_OMR_ATTRIBUTE25      => r_OMR.INFORMATION135
             ,P_OMR_ATTRIBUTE26      => r_OMR.INFORMATION136
             ,P_OMR_ATTRIBUTE27      => r_OMR.INFORMATION137
             ,P_OMR_ATTRIBUTE28      => r_OMR.INFORMATION138
             ,P_OMR_ATTRIBUTE29      => r_OMR.INFORMATION139
             ,P_OMR_ATTRIBUTE3      => r_OMR.INFORMATION113
             ,P_OMR_ATTRIBUTE30      => r_OMR.INFORMATION140
             ,P_OMR_ATTRIBUTE4      => r_OMR.INFORMATION114
             ,P_OMR_ATTRIBUTE5      => r_OMR.INFORMATION115
             ,P_OMR_ATTRIBUTE6      => r_OMR.INFORMATION116
             ,P_OMR_ATTRIBUTE7      => r_OMR.INFORMATION117
             ,P_OMR_ATTRIBUTE8      => r_OMR.INFORMATION118
             ,P_OMR_ATTRIBUTE9      => r_OMR.INFORMATION119
             ,P_OMR_ATTRIBUTE_CATEGORY      => r_OMR.INFORMATION110
             ,P_OPTD_MDCR_FLAG      => r_OMR.INFORMATION11
             ,P_OPTD_MDCR_RT_ID      => l_optd_mdcr_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           end if;
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_OMR.information3) then
             --
             BEN_OPTD_MDCR_RT_API.delete_OPTD_MDCR_RT(
                --
                p_validate                       => false
                ,p_optd_mdcr_rt_id                   => l_optd_mdcr_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'OMR',r_omr.information5 );
    --
 end create_OMR_rows;

   ---------------------------------------------------------------
   ----------------------< create_EPM_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EPM_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PGM_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_EPM(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ENRLD_ANTHR_PGM_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EPM_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EPM(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EPM_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EPM.enrld_anthr_pgm_rt_id new_value
   from BEN_ENRLD_ANTHR_PGM_RT_F EPM
   where
   EPM.PGM_ID     = l_PGM_ID  and
   EPM.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   EPM.business_group_id  = c_business_group_id
   and   EPM.enrld_anthr_pgm_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_ENRLD_ANTHR_PGM_RT_F EPM1
                where
                EPM1.PGM_ID     = l_PGM_ID  and
                EPM1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                EPM1.business_group_id  = c_business_group_id
                and   EPM1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ENRLD_ANTHR_PGM_RT_F EPM2
                where
                EPM2.PGM_ID     = l_PGM_ID  and
                EPM2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                EPM2.business_group_id  = c_business_group_id
                and   EPM2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EPM                     c_EPM%rowtype;
   l_enrld_anthr_pgm_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EPM_unique in c_unique_EPM('EPM') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EPM_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EPM_unique.table_route_id '||r_EPM_unique.table_route_id,10);
       hr_utility.set_location(' r_EPM_unique.information1 '||r_EPM_unique.information1,10);
       hr_utility.set_location( 'r_EPM_unique.information2 '||r_EPM_unique.information2,10);
       hr_utility.set_location( 'r_EPM_unique.information3 '||r_EPM_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EPM_min_max_dates(r_EPM_unique.table_route_id, r_EPM_unique.information1 ) ;
       fetch c_EPM_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EPM_unique.information2);
       open c_EPM(r_EPM_unique.table_route_id,
                r_EPM_unique.information1,
                r_EPM_unique.information2,
                r_EPM_unique.information3 ) ;
       --
       fetch c_EPM into r_EPM ;
       --
       close c_EPM ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_EPM.information260,r_EPM_unique.dml_operation),
                       r_EPM.information260);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_EPM.information262,r_EPM_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPM_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPM_unique.information2 and r_EPM_unique.information3 then
               l_update := true;
               if r_EPM_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ENRLD_ANTHR_PGM_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRLD_ANTHR_PGM_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPM_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPM_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPM_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPM',l_new_value,l_prefix || r_EPM_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_EPM_min_max_dates%found then
           -- cursor to find the object
           open c_find_EPM_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_enrld_anthr_pgm_rt_id, -999)  ) ;
           fetch c_find_EPM_in_target into l_new_value ;
           if c_find_EPM_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ENRLD_ANTHR_PGM_RT_F',
                  p_base_key_column => 'ENRLD_ANTHR_PGM_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_EPM_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'ENRLD_ANTHR_PGM_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'ENRLD_ANTHR_PGM_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_EPM_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_EPM_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_EPM_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_EPM_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_EPM.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EPM.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ENRLD_ANTHR_PGM_RT_F CREATE_ENRLD_ANTHR_PGM_RT ',20);
           BEN_ENRLD_ANTHR_PGM_RT_API.CREATE_ENRLD_ANTHR_PGM_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ENRLD_ANTHR_PGM_RT_ID      => l_enrld_anthr_pgm_rt_id
             ,P_ENRL_DET_DT_CD      => r_EPM.INFORMATION12
             ,P_EPM_ATTRIBUTE1      => r_EPM.INFORMATION111
             ,P_EPM_ATTRIBUTE10      => r_EPM.INFORMATION120
             ,P_EPM_ATTRIBUTE11      => r_EPM.INFORMATION121
             ,P_EPM_ATTRIBUTE12      => r_EPM.INFORMATION122
             ,P_EPM_ATTRIBUTE13      => r_EPM.INFORMATION123
             ,P_EPM_ATTRIBUTE14      => r_EPM.INFORMATION124
             ,P_EPM_ATTRIBUTE15      => r_EPM.INFORMATION125
             ,P_EPM_ATTRIBUTE16      => r_EPM.INFORMATION126
             ,P_EPM_ATTRIBUTE17      => r_EPM.INFORMATION127
             ,P_EPM_ATTRIBUTE18      => r_EPM.INFORMATION128
             ,P_EPM_ATTRIBUTE19      => r_EPM.INFORMATION129
             ,P_EPM_ATTRIBUTE2      => r_EPM.INFORMATION112
             ,P_EPM_ATTRIBUTE20      => r_EPM.INFORMATION130
             ,P_EPM_ATTRIBUTE21      => r_EPM.INFORMATION131
             ,P_EPM_ATTRIBUTE22      => r_EPM.INFORMATION132
             ,P_EPM_ATTRIBUTE23      => r_EPM.INFORMATION133
             ,P_EPM_ATTRIBUTE24      => r_EPM.INFORMATION134
             ,P_EPM_ATTRIBUTE25      => r_EPM.INFORMATION135
             ,P_EPM_ATTRIBUTE26      => r_EPM.INFORMATION136
             ,P_EPM_ATTRIBUTE27      => r_EPM.INFORMATION137
             ,P_EPM_ATTRIBUTE28      => r_EPM.INFORMATION138
             ,P_EPM_ATTRIBUTE29      => r_EPM.INFORMATION139
             ,P_EPM_ATTRIBUTE3      => r_EPM.INFORMATION113
             ,P_EPM_ATTRIBUTE30      => r_EPM.INFORMATION140
             ,P_EPM_ATTRIBUTE4      => r_EPM.INFORMATION114
             ,P_EPM_ATTRIBUTE5      => r_EPM.INFORMATION115
             ,P_EPM_ATTRIBUTE6      => r_EPM.INFORMATION116
             ,P_EPM_ATTRIBUTE7      => r_EPM.INFORMATION117
             ,P_EPM_ATTRIBUTE8      => r_EPM.INFORMATION118
             ,P_EPM_ATTRIBUTE9      => r_EPM.INFORMATION119
             ,P_EPM_ATTRIBUTE_CATEGORY      => r_EPM.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPM.INFORMATION11
             ,P_ORDR_NUM      => r_EPM.INFORMATION257
             ,P_PGM_ID      => l_PGM_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_enrld_anthr_pgm_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'ENRLD_ANTHR_PGM_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_EPM.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_ENRLD_ANTHR_PGM_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_EPM_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPM.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPM.information3,
               p_effective_start_date  => r_EPM.information2,
               p_dml_operation         => r_EPM.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ENRLD_ANTHR_PGM_RT_ID   := r_EPM.information1;
             l_object_version_number := r_EPM.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ENRLD_ANTHR_PGM_RT_F UPDATE_ENRLD_ANTHR_PGM_RT ',30);
           BEN_ENRLD_ANTHR_PGM_RT_API.UPDATE_ENRLD_ANTHR_PGM_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ENRLD_ANTHR_PGM_RT_ID      => l_enrld_anthr_pgm_rt_id
             ,P_ENRL_DET_DT_CD      => r_EPM.INFORMATION12
             ,P_EPM_ATTRIBUTE1      => r_EPM.INFORMATION111
             ,P_EPM_ATTRIBUTE10      => r_EPM.INFORMATION120
             ,P_EPM_ATTRIBUTE11      => r_EPM.INFORMATION121
             ,P_EPM_ATTRIBUTE12      => r_EPM.INFORMATION122
             ,P_EPM_ATTRIBUTE13      => r_EPM.INFORMATION123
             ,P_EPM_ATTRIBUTE14      => r_EPM.INFORMATION124
             ,P_EPM_ATTRIBUTE15      => r_EPM.INFORMATION125
             ,P_EPM_ATTRIBUTE16      => r_EPM.INFORMATION126
             ,P_EPM_ATTRIBUTE17      => r_EPM.INFORMATION127
             ,P_EPM_ATTRIBUTE18      => r_EPM.INFORMATION128
             ,P_EPM_ATTRIBUTE19      => r_EPM.INFORMATION129
             ,P_EPM_ATTRIBUTE2      => r_EPM.INFORMATION112
             ,P_EPM_ATTRIBUTE20      => r_EPM.INFORMATION130
             ,P_EPM_ATTRIBUTE21      => r_EPM.INFORMATION131
             ,P_EPM_ATTRIBUTE22      => r_EPM.INFORMATION132
             ,P_EPM_ATTRIBUTE23      => r_EPM.INFORMATION133
             ,P_EPM_ATTRIBUTE24      => r_EPM.INFORMATION134
             ,P_EPM_ATTRIBUTE25      => r_EPM.INFORMATION135
             ,P_EPM_ATTRIBUTE26      => r_EPM.INFORMATION136
             ,P_EPM_ATTRIBUTE27      => r_EPM.INFORMATION137
             ,P_EPM_ATTRIBUTE28      => r_EPM.INFORMATION138
             ,P_EPM_ATTRIBUTE29      => r_EPM.INFORMATION139
             ,P_EPM_ATTRIBUTE3      => r_EPM.INFORMATION113
             ,P_EPM_ATTRIBUTE30      => r_EPM.INFORMATION140
             ,P_EPM_ATTRIBUTE4      => r_EPM.INFORMATION114
             ,P_EPM_ATTRIBUTE5      => r_EPM.INFORMATION115
             ,P_EPM_ATTRIBUTE6      => r_EPM.INFORMATION116
             ,P_EPM_ATTRIBUTE7      => r_EPM.INFORMATION117
             ,P_EPM_ATTRIBUTE8      => r_EPM.INFORMATION118
             ,P_EPM_ATTRIBUTE9      => r_EPM.INFORMATION119
             ,P_EPM_ATTRIBUTE_CATEGORY      => r_EPM.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPM.INFORMATION11
             ,P_ORDR_NUM      => r_EPM.INFORMATION257
             ,P_PGM_ID      => l_PGM_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_EPM.information3) then
             --
             BEN_ENRLD_ANTHR_PGM_RT_API.delete_ENRLD_ANTHR_PGM_RT(
                --
                p_validate                        => false
                ,p_enrld_anthr_pgm_rt_id          => l_enrld_anthr_pgm_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPM',r_epm.information5 );
    --
 end create_EPM_rows;

   ---------------------------------------------------------------
   ----------------------< create_ENT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ENT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PTIP_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_ENT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ENRLD_ANTHR_PTIP_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ENT_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ENT(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ENT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ENT.enrld_anthr_ptip_rt_id new_value
   from BEN_ENRLD_ANTHR_PTIP_RT_F ENT
   where
   ENT.PTIP_ID     = l_PTIP_ID  and
   ENT.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   ENT.business_group_id  = c_business_group_id
   and   ENT.enrld_anthr_ptip_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_ENRLD_ANTHR_PTIP_RT_F ENT1
                where
                ENT1.PTIP_ID     = l_PTIP_ID  and
                ENT1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                ENT1.business_group_id  = c_business_group_id
                and   ENT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ENRLD_ANTHR_PTIP_RT_F ENT2
                where
                ENT2.PTIP_ID     = l_PTIP_ID  and
                ENT2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                ENT2.business_group_id  = c_business_group_id
                and   ENT2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ENT                     c_ENT%rowtype;
   l_enrld_anthr_ptip_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ENT_unique in c_unique_ENT('ENT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ENT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ENT_unique.table_route_id '||r_ENT_unique.table_route_id,10);
       hr_utility.set_location(' r_ENT_unique.information1 '||r_ENT_unique.information1,10);
       hr_utility.set_location( 'r_ENT_unique.information2 '||r_ENT_unique.information2,10);
       hr_utility.set_location( 'r_ENT_unique.information3 '||r_ENT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ENT_min_max_dates(r_ENT_unique.table_route_id, r_ENT_unique.information1 ) ;
       fetch c_ENT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ENT_unique.information2);
       open c_ENT(r_ENT_unique.table_route_id,
                r_ENT_unique.information1,
                r_ENT_unique.information2,
                r_ENT_unique.information3 ) ;
       --
       fetch c_ENT into r_ENT ;
       --
       close c_ENT ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_ENT.information259,r_ENT_unique.dml_operation),
                        r_ENT.information259);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_ENT.information262,r_ENT_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ENT_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ENT_unique.information2 and r_ENT_unique.information3 then
               l_update := true;
               if r_ENT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ENRLD_ANTHR_PTIP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRLD_ANTHR_PTIP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ENT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ENT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ENT_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ENT',l_new_value,l_prefix || r_ENT_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_ENT_min_max_dates%found then
           -- cursor to find the object
           open c_find_ENT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_enrld_anthr_ptip_rt_id, -999)  ) ;
           fetch c_find_ENT_in_target into l_new_value ;
           if c_find_ENT_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ENRLD_ANTHR_PTIP_RT_F',
                  p_base_key_column => 'ENRLD_ANTHR_PTIP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_ENT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'ENRLD_ANTHR_PTIP_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'ENRLD_ANTHR_PTIP_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_ENT_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ENT_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_ENT_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_ENT_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_ENT.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ENT.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ENRLD_ANTHR_PTIP_RT_F CREATE_ENRLD_ANTHR_PTIP_RT ',20);
           BEN_ENRLD_ANTHR_PTIP_RT_API.CREATE_ENRLD_ANTHR_PTIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ENRLD_ANTHR_PTIP_RT_ID      => l_enrld_anthr_ptip_rt_id
             ,P_ENRL_DET_DT_CD      => r_ENT.INFORMATION11
             ,P_ENT_ATTRIBUTE1      => r_ENT.INFORMATION111
             ,P_ENT_ATTRIBUTE10      => r_ENT.INFORMATION120
             ,P_ENT_ATTRIBUTE11      => r_ENT.INFORMATION121
             ,P_ENT_ATTRIBUTE12      => r_ENT.INFORMATION122
             ,P_ENT_ATTRIBUTE13      => r_ENT.INFORMATION123
             ,P_ENT_ATTRIBUTE14      => r_ENT.INFORMATION124
             ,P_ENT_ATTRIBUTE15      => r_ENT.INFORMATION125
             ,P_ENT_ATTRIBUTE16      => r_ENT.INFORMATION126
             ,P_ENT_ATTRIBUTE17      => r_ENT.INFORMATION127
             ,P_ENT_ATTRIBUTE18      => r_ENT.INFORMATION128
             ,P_ENT_ATTRIBUTE19      => r_ENT.INFORMATION129
             ,P_ENT_ATTRIBUTE2      => r_ENT.INFORMATION112
             ,P_ENT_ATTRIBUTE20      => r_ENT.INFORMATION130
             ,P_ENT_ATTRIBUTE21      => r_ENT.INFORMATION131
             ,P_ENT_ATTRIBUTE22      => r_ENT.INFORMATION132
             ,P_ENT_ATTRIBUTE23      => r_ENT.INFORMATION133
             ,P_ENT_ATTRIBUTE24      => r_ENT.INFORMATION134
             ,P_ENT_ATTRIBUTE25      => r_ENT.INFORMATION135
             ,P_ENT_ATTRIBUTE26      => r_ENT.INFORMATION136
             ,P_ENT_ATTRIBUTE27      => r_ENT.INFORMATION137
             ,P_ENT_ATTRIBUTE28      => r_ENT.INFORMATION138
             ,P_ENT_ATTRIBUTE29      => r_ENT.INFORMATION139
             ,P_ENT_ATTRIBUTE3      => r_ENT.INFORMATION113
             ,P_ENT_ATTRIBUTE30      => r_ENT.INFORMATION140
             ,P_ENT_ATTRIBUTE4      => r_ENT.INFORMATION114
             ,P_ENT_ATTRIBUTE5      => r_ENT.INFORMATION115
             ,P_ENT_ATTRIBUTE6      => r_ENT.INFORMATION116
             ,P_ENT_ATTRIBUTE7      => r_ENT.INFORMATION117
             ,P_ENT_ATTRIBUTE8      => r_ENT.INFORMATION118
             ,P_ENT_ATTRIBUTE9      => r_ENT.INFORMATION119
             ,P_ENT_ATTRIBUTE_CATEGORY      => r_ENT.INFORMATION110
             ,P_EXCLD_FLAG      => r_ENT.INFORMATION12
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_ENT.INFORMATION13
             ,P_ORDR_NUM      => r_ENT.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_enrld_anthr_ptip_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'ENRLD_ANTHR_PTIP_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_ENT.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_ENRLD_ANTHR_PTIP_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ENT_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ENT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ENT.information3,
               p_effective_start_date  => r_ENT.information2,
               p_dml_operation         => r_ENT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ENRLD_ANTHR_PTIP_RT_ID   := r_ENT.information1;
             l_object_version_number := r_ENT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_ENRLD_ANTHR_PTIP_RT_F UPDATE_ENRLD_ANTHR_PTIP_RT ',30);
           BEN_ENRLD_ANTHR_PTIP_RT_API.UPDATE_ENRLD_ANTHR_PTIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ENRLD_ANTHR_PTIP_RT_ID      => l_enrld_anthr_ptip_rt_id
             ,P_ENRL_DET_DT_CD      => r_ENT.INFORMATION11
             ,P_ENT_ATTRIBUTE1      => r_ENT.INFORMATION111
             ,P_ENT_ATTRIBUTE10      => r_ENT.INFORMATION120
             ,P_ENT_ATTRIBUTE11      => r_ENT.INFORMATION121
             ,P_ENT_ATTRIBUTE12      => r_ENT.INFORMATION122
             ,P_ENT_ATTRIBUTE13      => r_ENT.INFORMATION123
             ,P_ENT_ATTRIBUTE14      => r_ENT.INFORMATION124
             ,P_ENT_ATTRIBUTE15      => r_ENT.INFORMATION125
             ,P_ENT_ATTRIBUTE16      => r_ENT.INFORMATION126
             ,P_ENT_ATTRIBUTE17      => r_ENT.INFORMATION127
             ,P_ENT_ATTRIBUTE18      => r_ENT.INFORMATION128
             ,P_ENT_ATTRIBUTE19      => r_ENT.INFORMATION129
             ,P_ENT_ATTRIBUTE2      => r_ENT.INFORMATION112
             ,P_ENT_ATTRIBUTE20      => r_ENT.INFORMATION130
             ,P_ENT_ATTRIBUTE21      => r_ENT.INFORMATION131
             ,P_ENT_ATTRIBUTE22      => r_ENT.INFORMATION132
             ,P_ENT_ATTRIBUTE23      => r_ENT.INFORMATION133
             ,P_ENT_ATTRIBUTE24      => r_ENT.INFORMATION134
             ,P_ENT_ATTRIBUTE25      => r_ENT.INFORMATION135
             ,P_ENT_ATTRIBUTE26      => r_ENT.INFORMATION136
             ,P_ENT_ATTRIBUTE27      => r_ENT.INFORMATION137
             ,P_ENT_ATTRIBUTE28      => r_ENT.INFORMATION138
             ,P_ENT_ATTRIBUTE29      => r_ENT.INFORMATION139
             ,P_ENT_ATTRIBUTE3      => r_ENT.INFORMATION113
             ,P_ENT_ATTRIBUTE30      => r_ENT.INFORMATION140
             ,P_ENT_ATTRIBUTE4      => r_ENT.INFORMATION114
             ,P_ENT_ATTRIBUTE5      => r_ENT.INFORMATION115
             ,P_ENT_ATTRIBUTE6      => r_ENT.INFORMATION116
             ,P_ENT_ATTRIBUTE7      => r_ENT.INFORMATION117
             ,P_ENT_ATTRIBUTE8      => r_ENT.INFORMATION118
             ,P_ENT_ATTRIBUTE9      => r_ENT.INFORMATION119
             ,P_ENT_ATTRIBUTE_CATEGORY      => r_ENT.INFORMATION110
             ,P_EXCLD_FLAG      => r_ENT.INFORMATION12
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_ENT.INFORMATION13
             ,P_ORDR_NUM      => r_ENT.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_ENT.information3) then
             --
             BEN_ENRLD_ANTHR_PTIP_RT_API.delete_ENRLD_ANTHR_PTIP_RT(
                --
                p_validate                        => false
                ,p_enrld_anthr_ptip_rt_id         => l_enrld_anthr_ptip_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ENT',r_ent.information5 );
    --
 end create_ENT_rows;

   ---------------------------------------------------------------
   ----------------------< create_ENL_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ENL_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PL_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_ENL(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ENRLD_ANTHR_PL_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ENL_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ENL(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ENL_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ENL.enrld_anthr_pl_rt_id new_value
   from BEN_ENRLD_ANTHR_PL_RT_F ENL
   where
   ENL.PL_ID     = l_PL_ID  and
   ENL.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   ENL.business_group_id  = c_business_group_id
   and   ENL.enrld_anthr_pl_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_ENRLD_ANTHR_PL_RT_F ENL1
                where
                ENL1.PL_ID     = l_PL_ID  and
                ENL1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                ENL1.business_group_id  = c_business_group_id
                and   ENL1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ENRLD_ANTHR_PL_RT_F ENL2
                where
                ENL2.PL_ID     = l_PL_ID  and
                ENL2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                ENL2.business_group_id  = c_business_group_id
                and   ENL2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ENL                     c_ENL%rowtype;
   l_enrld_anthr_pl_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ENL_unique in c_unique_ENL('ENL') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ENL_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_ENL_unique.table_route_id '||r_ENL_unique.table_route_id,10);
       hr_utility.set_location(' r_ENL_unique.information1 '||r_ENL_unique.information1,10);
       hr_utility.set_location( 'r_ENL_unique.information2 '||r_ENL_unique.information2,10);
       hr_utility.set_location( 'r_ENL_unique.information3 '||r_ENL_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ENL_min_max_dates(r_ENL_unique.table_route_id, r_ENL_unique.information1 ) ;
       fetch c_ENL_min_max_dates into l_min_esd,l_max_eed ;

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ENL_unique.information2);
       --
       open c_ENL(r_ENL_unique.table_route_id,
                r_ENL_unique.information1,
                r_ENL_unique.information2,
                r_ENL_unique.information3 ) ;
       --
       fetch c_ENL into r_ENL ;
       --
       close c_ENL ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PL_ID := NVL(get_fk('PL_ID', r_ENL.information261,r_ENL_unique.dml_operation),
                      r_ENL.information261);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_ENL.information262,r_ENL_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ENL_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ENL_unique.information2 and r_ENL_unique.information3 then
               l_update := true;
               if r_ENL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ENRLD_ANTHR_PL_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRLD_ANTHR_PL_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ENL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ENL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ENL_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ENL',l_new_value,l_prefix || r_ENL_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_ENL_min_max_dates%found then
           -- cursor to find the object
           open c_find_ENL_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_enrld_anthr_pl_rt_id, -999)  ) ;
           fetch c_find_ENL_in_target into l_new_value ;
           if c_find_ENL_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ENRLD_ANTHR_PL_RT_F',
                  p_base_key_column => 'ENRLD_ANTHR_PL_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_ENL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'ENRLD_ANTHR_PL_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'ENRLD_ANTHR_PL_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_ENL_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ENL_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_ENL_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_ENL_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_ENL.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ENL.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ENRLD_ANTHR_PL_RT_F CREATE_ENRLD_ANTHR_PL_RT ',20);
           BEN_ENRLD_ANTHR_PL_RT_API.CREATE_ENRLD_ANTHR_PL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ENL_ATTRIBUTE1      => r_ENL.INFORMATION111
             ,P_ENL_ATTRIBUTE10      => r_ENL.INFORMATION120
             ,P_ENL_ATTRIBUTE11      => r_ENL.INFORMATION121
             ,P_ENL_ATTRIBUTE12      => r_ENL.INFORMATION122
             ,P_ENL_ATTRIBUTE13      => r_ENL.INFORMATION123
             ,P_ENL_ATTRIBUTE14      => r_ENL.INFORMATION124
             ,P_ENL_ATTRIBUTE15      => r_ENL.INFORMATION125
             ,P_ENL_ATTRIBUTE16      => r_ENL.INFORMATION126
             ,P_ENL_ATTRIBUTE17      => r_ENL.INFORMATION127
             ,P_ENL_ATTRIBUTE18      => r_ENL.INFORMATION128
             ,P_ENL_ATTRIBUTE19      => r_ENL.INFORMATION129
             ,P_ENL_ATTRIBUTE2      => r_ENL.INFORMATION112
             ,P_ENL_ATTRIBUTE20      => r_ENL.INFORMATION130
             ,P_ENL_ATTRIBUTE21      => r_ENL.INFORMATION131
             ,P_ENL_ATTRIBUTE22      => r_ENL.INFORMATION132
             ,P_ENL_ATTRIBUTE23      => r_ENL.INFORMATION133
             ,P_ENL_ATTRIBUTE24      => r_ENL.INFORMATION134
             ,P_ENL_ATTRIBUTE25      => r_ENL.INFORMATION135
             ,P_ENL_ATTRIBUTE26      => r_ENL.INFORMATION136
             ,P_ENL_ATTRIBUTE27      => r_ENL.INFORMATION137
             ,P_ENL_ATTRIBUTE28      => r_ENL.INFORMATION138
             ,P_ENL_ATTRIBUTE29      => r_ENL.INFORMATION139
             ,P_ENL_ATTRIBUTE3      => r_ENL.INFORMATION113
             ,P_ENL_ATTRIBUTE30      => r_ENL.INFORMATION140
             ,P_ENL_ATTRIBUTE4      => r_ENL.INFORMATION114
             ,P_ENL_ATTRIBUTE5      => r_ENL.INFORMATION115
             ,P_ENL_ATTRIBUTE6      => r_ENL.INFORMATION116
             ,P_ENL_ATTRIBUTE7      => r_ENL.INFORMATION117
             ,P_ENL_ATTRIBUTE8      => r_ENL.INFORMATION118
             ,P_ENL_ATTRIBUTE9      => r_ENL.INFORMATION119
             ,P_ENL_ATTRIBUTE_CATEGORY      => r_ENL.INFORMATION110
             ,P_ENRLD_ANTHR_PL_RT_ID      => l_enrld_anthr_pl_rt_id
             ,P_ENRL_DET_DT_CD      => r_ENL.INFORMATION12
             ,P_EXCLD_FLAG      => r_ENL.INFORMATION11
             ,P_ORDR_NUM      => r_ENL.INFORMATION260
             ,P_PL_ID      => l_PL_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_enrld_anthr_pl_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'ENRLD_ANTHR_PL_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_ENL.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_ENRLD_ANTHR_PL_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ENL_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ENL.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ENL.information3,
               p_effective_start_date  => r_ENL.information2,
               p_dml_operation         => r_ENL.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ENRLD_ANTHR_PL_RT_ID   := r_ENL.information1;
             l_object_version_number := r_ENL.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_ENRLD_ANTHR_PL_RT_F UPDATE_ENRLD_ANTHR_PL_RT ',30);
           BEN_ENRLD_ANTHR_PL_RT_API.UPDATE_ENRLD_ANTHR_PL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ENL_ATTRIBUTE1      => r_ENL.INFORMATION111
             ,P_ENL_ATTRIBUTE10      => r_ENL.INFORMATION120
             ,P_ENL_ATTRIBUTE11      => r_ENL.INFORMATION121
             ,P_ENL_ATTRIBUTE12      => r_ENL.INFORMATION122
             ,P_ENL_ATTRIBUTE13      => r_ENL.INFORMATION123
             ,P_ENL_ATTRIBUTE14      => r_ENL.INFORMATION124
             ,P_ENL_ATTRIBUTE15      => r_ENL.INFORMATION125
             ,P_ENL_ATTRIBUTE16      => r_ENL.INFORMATION126
             ,P_ENL_ATTRIBUTE17      => r_ENL.INFORMATION127
             ,P_ENL_ATTRIBUTE18      => r_ENL.INFORMATION128
             ,P_ENL_ATTRIBUTE19      => r_ENL.INFORMATION129
             ,P_ENL_ATTRIBUTE2      => r_ENL.INFORMATION112
             ,P_ENL_ATTRIBUTE20      => r_ENL.INFORMATION130
             ,P_ENL_ATTRIBUTE21      => r_ENL.INFORMATION131
             ,P_ENL_ATTRIBUTE22      => r_ENL.INFORMATION132
             ,P_ENL_ATTRIBUTE23      => r_ENL.INFORMATION133
             ,P_ENL_ATTRIBUTE24      => r_ENL.INFORMATION134
             ,P_ENL_ATTRIBUTE25      => r_ENL.INFORMATION135
             ,P_ENL_ATTRIBUTE26      => r_ENL.INFORMATION136
             ,P_ENL_ATTRIBUTE27      => r_ENL.INFORMATION137
             ,P_ENL_ATTRIBUTE28      => r_ENL.INFORMATION138
             ,P_ENL_ATTRIBUTE29      => r_ENL.INFORMATION139
             ,P_ENL_ATTRIBUTE3      => r_ENL.INFORMATION113
             ,P_ENL_ATTRIBUTE30      => r_ENL.INFORMATION140
             ,P_ENL_ATTRIBUTE4      => r_ENL.INFORMATION114
             ,P_ENL_ATTRIBUTE5      => r_ENL.INFORMATION115
             ,P_ENL_ATTRIBUTE6      => r_ENL.INFORMATION116
             ,P_ENL_ATTRIBUTE7      => r_ENL.INFORMATION117
             ,P_ENL_ATTRIBUTE8      => r_ENL.INFORMATION118
             ,P_ENL_ATTRIBUTE9      => r_ENL.INFORMATION119
             ,P_ENL_ATTRIBUTE_CATEGORY      => r_ENL.INFORMATION110
             ,P_ENRLD_ANTHR_PL_RT_ID      => l_enrld_anthr_pl_rt_id
             ,P_ENRL_DET_DT_CD      => r_ENL.INFORMATION12
             ,P_EXCLD_FLAG      => r_ENL.INFORMATION11
             ,P_ORDR_NUM      => r_ENL.INFORMATION260
             ,P_PL_ID      => l_PL_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_ENL.information3) then
             --
             BEN_ENRLD_ANTHR_PL_RT_API.delete_ENRLD_ANTHR_PL_RT(
                --
                p_validate                       => false
                ,p_enrld_anthr_pl_rt_id                   => l_enrld_anthr_pl_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ENL',r_enl.information5 );
    --
 end create_ENL_rows;

   ---------------------------------------------------------------
   ----------------------< create_EAR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EAR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PLIP_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_EAR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ENRLD_ANTHR_PLIP_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EAR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EAR(c_table_route_id number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EAR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EAR.enrld_anthr_plip_rt_id new_value
   from BEN_ENRLD_ANTHR_PLIP_RT_F EAR
   where
   EAR.PLIP_ID     = l_PLIP_ID  and
   EAR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   EAR.business_group_id  = c_business_group_id
   and   EAR.enrld_anthr_plip_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_ENRLD_ANTHR_PLIP_RT_F EAR1
                where
                EAR1.PLIP_ID     = l_PLIP_ID  and
                EAR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                EAR1.business_group_id  = c_business_group_id
                and   EAR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ENRLD_ANTHR_PLIP_RT_F EAR2
                where
                EAR2.PLIP_ID     = l_PLIP_ID and
                EAR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                EAR2.business_group_id  = c_business_group_id
                and   EAR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EAR                     c_EAR%rowtype;
   l_enrld_anthr_plip_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EAR_unique in c_unique_EAR('EAR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EAR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EAR_unique.table_route_id '||r_EAR_unique.table_route_id,10);
       hr_utility.set_location(' r_EAR_unique.information1 '||r_EAR_unique.information1,10);
       hr_utility.set_location( 'r_EAR_unique.information2 '||r_EAR_unique.information2,10);
       hr_utility.set_location( 'r_EAR_unique.information3 '||r_EAR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EAR_min_max_dates(r_EAR_unique.table_route_id, r_EAR_unique.information1 ) ;
       fetch c_EAR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EAR_unique.information2);
       open c_EAR(r_EAR_unique.table_route_id,
                r_EAR_unique.information1,
                r_EAR_unique.information2,
                r_EAR_unique.information3 ) ;
       --
       fetch c_EAR into r_EAR ;
       --
       close c_EAR ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PLIP_ID := NVL(get_fk('PLIP_ID', r_EAR.information256,r_EAR_unique.dml_operation),
                        r_EAR.information256);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_EAR.information262,r_EAR_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EAR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EAR_unique.information2 and r_EAR_unique.information3 then
               l_update := true;
               if r_EAR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ENRLD_ANTHR_PLIP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRLD_ANTHR_PLIP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EAR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EAR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EAR',l_new_value,l_prefix || r_EAR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_EAR_min_max_dates%found then
           -- cursor to find the object
           open c_find_EAR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_enrld_anthr_plip_rt_id, -999)  ) ;
           fetch c_find_EAR_in_target into l_new_value ;
           if c_find_EAR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ENRLD_ANTHR_PLIP_RT_F',
                  p_base_key_column => 'ENRLD_ANTHR_PLIP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_EAR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'ENRLD_ANTHR_PLIP_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'ENRLD_ANTHR_PLIP_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_EAR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_EAR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_EAR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_EAR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_EAR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EAR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ENRLD_ANTHR_PLIP_RT_F CREATE_ENRLD_ANTHR_PLIP_RT ',20);
           BEN_ENRLD_ANTHR_PLIP_RT_API.CREATE_ENRLD_ANTHR_PLIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EAR_ATTRIBUTE1      => r_EAR.INFORMATION111
             ,P_EAR_ATTRIBUTE10      => r_EAR.INFORMATION120
             ,P_EAR_ATTRIBUTE11      => r_EAR.INFORMATION121
             ,P_EAR_ATTRIBUTE12      => r_EAR.INFORMATION122
             ,P_EAR_ATTRIBUTE13      => r_EAR.INFORMATION123
             ,P_EAR_ATTRIBUTE14      => r_EAR.INFORMATION124
             ,P_EAR_ATTRIBUTE15      => r_EAR.INFORMATION125
             ,P_EAR_ATTRIBUTE16      => r_EAR.INFORMATION126
             ,P_EAR_ATTRIBUTE17      => r_EAR.INFORMATION127
             ,P_EAR_ATTRIBUTE18      => r_EAR.INFORMATION128
             ,P_EAR_ATTRIBUTE19      => r_EAR.INFORMATION129
             ,P_EAR_ATTRIBUTE2      => r_EAR.INFORMATION112
             ,P_EAR_ATTRIBUTE20      => r_EAR.INFORMATION130
             ,P_EAR_ATTRIBUTE21      => r_EAR.INFORMATION131
             ,P_EAR_ATTRIBUTE22      => r_EAR.INFORMATION132
             ,P_EAR_ATTRIBUTE23      => r_EAR.INFORMATION133
             ,P_EAR_ATTRIBUTE24      => r_EAR.INFORMATION134
             ,P_EAR_ATTRIBUTE25      => r_EAR.INFORMATION135
             ,P_EAR_ATTRIBUTE26      => r_EAR.INFORMATION136
             ,P_EAR_ATTRIBUTE27      => r_EAR.INFORMATION137
             ,P_EAR_ATTRIBUTE28      => r_EAR.INFORMATION138
             ,P_EAR_ATTRIBUTE29      => r_EAR.INFORMATION139
             ,P_EAR_ATTRIBUTE3      => r_EAR.INFORMATION113
             ,P_EAR_ATTRIBUTE30      => r_EAR.INFORMATION140
             ,P_EAR_ATTRIBUTE4      => r_EAR.INFORMATION114
             ,P_EAR_ATTRIBUTE5      => r_EAR.INFORMATION115
             ,P_EAR_ATTRIBUTE6      => r_EAR.INFORMATION116
             ,P_EAR_ATTRIBUTE7      => r_EAR.INFORMATION117
             ,P_EAR_ATTRIBUTE8      => r_EAR.INFORMATION118
             ,P_EAR_ATTRIBUTE9      => r_EAR.INFORMATION119
             ,P_EAR_ATTRIBUTE_CATEGORY      => r_EAR.INFORMATION110
             ,P_ENRLD_ANTHR_PLIP_RT_ID      => l_enrld_anthr_plip_rt_id
             ,P_ENRL_DET_DT_CD      => r_EAR.INFORMATION11
             ,P_EXCLD_FLAG      => r_EAR.INFORMATION12
             ,P_ORDR_NUM      => r_EAR.INFORMATION257
             ,P_PLIP_ID      => l_PLIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_enrld_anthr_plip_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'ENRLD_ANTHR_PLIP_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_EAR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_ENRLD_ANTHR_PLIP_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_EAR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EAR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EAR.information3,
               p_effective_start_date  => r_EAR.information2,
               p_dml_operation         => r_EAR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ENRLD_ANTHR_PLIP_RT_ID   := r_EAR.information1;
             l_object_version_number := r_EAR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_ENRLD_ANTHR_PLIP_RT_F UPDATE_ENRLD_ANTHR_PLIP_RT ',30);
           BEN_ENRLD_ANTHR_PLIP_RT_API.UPDATE_ENRLD_ANTHR_PLIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EAR_ATTRIBUTE1      => r_EAR.INFORMATION111
             ,P_EAR_ATTRIBUTE10      => r_EAR.INFORMATION120
             ,P_EAR_ATTRIBUTE11      => r_EAR.INFORMATION121
             ,P_EAR_ATTRIBUTE12      => r_EAR.INFORMATION122
             ,P_EAR_ATTRIBUTE13      => r_EAR.INFORMATION123
             ,P_EAR_ATTRIBUTE14      => r_EAR.INFORMATION124
             ,P_EAR_ATTRIBUTE15      => r_EAR.INFORMATION125
             ,P_EAR_ATTRIBUTE16      => r_EAR.INFORMATION126
             ,P_EAR_ATTRIBUTE17      => r_EAR.INFORMATION127
             ,P_EAR_ATTRIBUTE18      => r_EAR.INFORMATION128
             ,P_EAR_ATTRIBUTE19      => r_EAR.INFORMATION129
             ,P_EAR_ATTRIBUTE2      => r_EAR.INFORMATION112
             ,P_EAR_ATTRIBUTE20      => r_EAR.INFORMATION130
             ,P_EAR_ATTRIBUTE21      => r_EAR.INFORMATION131
             ,P_EAR_ATTRIBUTE22      => r_EAR.INFORMATION132
             ,P_EAR_ATTRIBUTE23      => r_EAR.INFORMATION133
             ,P_EAR_ATTRIBUTE24      => r_EAR.INFORMATION134
             ,P_EAR_ATTRIBUTE25      => r_EAR.INFORMATION135
             ,P_EAR_ATTRIBUTE26      => r_EAR.INFORMATION136
             ,P_EAR_ATTRIBUTE27      => r_EAR.INFORMATION137
             ,P_EAR_ATTRIBUTE28      => r_EAR.INFORMATION138
             ,P_EAR_ATTRIBUTE29      => r_EAR.INFORMATION139
             ,P_EAR_ATTRIBUTE3      => r_EAR.INFORMATION113
             ,P_EAR_ATTRIBUTE30      => r_EAR.INFORMATION140
             ,P_EAR_ATTRIBUTE4      => r_EAR.INFORMATION114
             ,P_EAR_ATTRIBUTE5      => r_EAR.INFORMATION115
             ,P_EAR_ATTRIBUTE6      => r_EAR.INFORMATION116
             ,P_EAR_ATTRIBUTE7      => r_EAR.INFORMATION117
             ,P_EAR_ATTRIBUTE8      => r_EAR.INFORMATION118
             ,P_EAR_ATTRIBUTE9      => r_EAR.INFORMATION119
             ,P_EAR_ATTRIBUTE_CATEGORY      => r_EAR.INFORMATION110
             ,P_ENRLD_ANTHR_PLIP_RT_ID      => l_enrld_anthr_plip_rt_id
             ,P_ENRL_DET_DT_CD      => r_EAR.INFORMATION11
             ,P_EXCLD_FLAG      => r_EAR.INFORMATION12
             ,P_ORDR_NUM      => r_EAR.INFORMATION257
             ,P_PLIP_ID      => l_PLIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_EAR.information3) then
             --
             BEN_ENRLD_ANTHR_PLIP_RT_API.delete_ENRLD_ANTHR_PLIP_RT(
                --
                p_validate                       => false
                ,p_enrld_anthr_plip_rt_id                   => l_enrld_anthr_plip_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EAR',r_ear.information5 );
    --
 end create_EAR_rows;

   ---------------------------------------------------------------
   ----------------------< create_EAO_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EAO_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_OIPL_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_EAO(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ENRLD_ANTHR_OIPL_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EAO_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EAO(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EAO_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EAO.enrld_anthr_oipl_rt_id new_value
   from BEN_ENRLD_ANTHR_OIPL_RT_F EAO
   where
   EAO.OIPL_ID     = l_OIPL_ID  and
   EAO.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   EAO.business_group_id  = c_business_group_id
   and   EAO.enrld_anthr_oipl_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_ENRLD_ANTHR_OIPL_RT_F EAO1
                where
                EAO1.OIPL_ID     = l_OIPL_ID  and
                EAO1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                EAO1.business_group_id  = c_business_group_id
                and   EAO1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ENRLD_ANTHR_OIPL_RT_F EAO2
                where
                EAO2.OIPL_ID     = l_OIPL_ID  and
                EAO2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                EAO2.business_group_id  = c_business_group_id
                and   EAO2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EAO                     c_EAO%rowtype;
   l_enrld_anthr_oipl_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EAO_unique in c_unique_EAO('EAO') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_EAO_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_EAO_unique.table_route_id '||r_EAO_unique.table_route_id,10);
       hr_utility.set_location(' r_EAO_unique.information1 '||r_EAO_unique.information1,10);
       hr_utility.set_location( 'r_EAO_unique.information2 '||r_EAO_unique.information2,10);
       hr_utility.set_location( 'r_EAO_unique.information3 '||r_EAO_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EAO_min_max_dates(r_EAO_unique.table_route_id, r_EAO_unique.information1 ) ;
       fetch c_EAO_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EAO_unique.information2);
       open c_EAO(r_EAO_unique.table_route_id,
                r_EAO_unique.information1,
                r_EAO_unique.information2,
                r_EAO_unique.information3 ) ;
       --
       fetch c_EAO into r_EAO ;
       --
       close c_EAO ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_OIPL_ID := NVL(get_fk('OIPL_ID', r_EAO.information25,r_EAO_unique.dml_operation),
                        r_EAO.information258);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_EAO.information262,r_EAO_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EAO_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EAO_unique.information2 and r_EAO_unique.information3 then
               l_update := true;
               if r_EAO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ENRLD_ANTHR_OIPL_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ENRLD_ANTHR_OIPL_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EAO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EAO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAO_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EAO',l_new_value,l_prefix || r_EAO_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_EAO_min_max_dates%found then
           -- cursor to find the object
           open c_find_EAO_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_enrld_anthr_oipl_rt_id, -999)  ) ;
           fetch c_find_EAO_in_target into l_new_value ;
           if c_find_EAO_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_ENRLD_ANTHR_OIPL_RT_F',
                  p_base_key_column => 'ENRLD_ANTHR_OIPL_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_EAO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'ENRLD_ANTHR_OIPL_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'ENRLD_ANTHR_OIPL_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_EAO_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_EAO_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_EAO_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_EAO_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_EAO.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EAO.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ENRLD_ANTHR_OIPL_RT_F CREATE_ENRLD_ANTHR_OIPL_RT ',20);
           BEN_ENRLD_ANTHR_OIPL_RT_API.CREATE_ENRLD_ANTHR_OIPL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_EAO_ATTRIBUTE1      => r_EAO.INFORMATION111
             ,P_EAO_ATTRIBUTE10      => r_EAO.INFORMATION120
             ,P_EAO_ATTRIBUTE11      => r_EAO.INFORMATION121
             ,P_EAO_ATTRIBUTE12      => r_EAO.INFORMATION122
             ,P_EAO_ATTRIBUTE13      => r_EAO.INFORMATION123
             ,P_EAO_ATTRIBUTE14      => r_EAO.INFORMATION124
             ,P_EAO_ATTRIBUTE15      => r_EAO.INFORMATION125
             ,P_EAO_ATTRIBUTE16      => r_EAO.INFORMATION126
             ,P_EAO_ATTRIBUTE17      => r_EAO.INFORMATION127
             ,P_EAO_ATTRIBUTE18      => r_EAO.INFORMATION128
             ,P_EAO_ATTRIBUTE19      => r_EAO.INFORMATION129
             ,P_EAO_ATTRIBUTE2      => r_EAO.INFORMATION112
             ,P_EAO_ATTRIBUTE20      => r_EAO.INFORMATION130
             ,P_EAO_ATTRIBUTE21      => r_EAO.INFORMATION131
             ,P_EAO_ATTRIBUTE22      => r_EAO.INFORMATION132
             ,P_EAO_ATTRIBUTE23      => r_EAO.INFORMATION133
             ,P_EAO_ATTRIBUTE24      => r_EAO.INFORMATION134
             ,P_EAO_ATTRIBUTE25      => r_EAO.INFORMATION135
             ,P_EAO_ATTRIBUTE26      => r_EAO.INFORMATION136
             ,P_EAO_ATTRIBUTE27      => r_EAO.INFORMATION137
             ,P_EAO_ATTRIBUTE28      => r_EAO.INFORMATION138
             ,P_EAO_ATTRIBUTE29      => r_EAO.INFORMATION139
             ,P_EAO_ATTRIBUTE3      => r_EAO.INFORMATION113
             ,P_EAO_ATTRIBUTE30      => r_EAO.INFORMATION140
             ,P_EAO_ATTRIBUTE4      => r_EAO.INFORMATION114
             ,P_EAO_ATTRIBUTE5      => r_EAO.INFORMATION115
             ,P_EAO_ATTRIBUTE6      => r_EAO.INFORMATION116
             ,P_EAO_ATTRIBUTE7      => r_EAO.INFORMATION117
             ,P_EAO_ATTRIBUTE8      => r_EAO.INFORMATION118
             ,P_EAO_ATTRIBUTE9      => r_EAO.INFORMATION119
             ,P_EAO_ATTRIBUTE_CATEGORY      => r_EAO.INFORMATION110
             ,P_ENRLD_ANTHR_OIPL_RT_ID      => l_enrld_anthr_oipl_rt_id
             ,P_ENRL_DET_DT_CD      => r_EAO.INFORMATION12
             ,P_EXCLD_FLAG      => r_EAO.INFORMATION11
             ,P_OIPL_ID      => l_OIPL_ID
             ,P_ORDR_NUM      => r_EAO.INFORMATION261
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_enrld_anthr_oipl_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'ENRLD_ANTHR_OIPL_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_EAO.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_ENRLD_ANTHR_OIPL_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_EAO_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EAO.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EAO.information3,
               p_effective_start_date  => r_EAO.information2,
               p_dml_operation         => r_EAO.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ENRLD_ANTHR_OIPL_RT_ID   := r_EAO.information1;
             l_object_version_number := r_EAO.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_ENRLD_ANTHR_OIPL_RT_F UPDATE_ENRLD_ANTHR_OIPL_RT ',30);
           BEN_ENRLD_ANTHR_OIPL_RT_API.UPDATE_ENRLD_ANTHR_OIPL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EAO_ATTRIBUTE1      => r_EAO.INFORMATION111
             ,P_EAO_ATTRIBUTE10      => r_EAO.INFORMATION120
             ,P_EAO_ATTRIBUTE11      => r_EAO.INFORMATION121
             ,P_EAO_ATTRIBUTE12      => r_EAO.INFORMATION122
             ,P_EAO_ATTRIBUTE13      => r_EAO.INFORMATION123
             ,P_EAO_ATTRIBUTE14      => r_EAO.INFORMATION124
             ,P_EAO_ATTRIBUTE15      => r_EAO.INFORMATION125
             ,P_EAO_ATTRIBUTE16      => r_EAO.INFORMATION126
             ,P_EAO_ATTRIBUTE17      => r_EAO.INFORMATION127
             ,P_EAO_ATTRIBUTE18      => r_EAO.INFORMATION128
             ,P_EAO_ATTRIBUTE19      => r_EAO.INFORMATION129
             ,P_EAO_ATTRIBUTE2      => r_EAO.INFORMATION112
             ,P_EAO_ATTRIBUTE20      => r_EAO.INFORMATION130
             ,P_EAO_ATTRIBUTE21      => r_EAO.INFORMATION131
             ,P_EAO_ATTRIBUTE22      => r_EAO.INFORMATION132
             ,P_EAO_ATTRIBUTE23      => r_EAO.INFORMATION133
             ,P_EAO_ATTRIBUTE24      => r_EAO.INFORMATION134
             ,P_EAO_ATTRIBUTE25      => r_EAO.INFORMATION135
             ,P_EAO_ATTRIBUTE26      => r_EAO.INFORMATION136
             ,P_EAO_ATTRIBUTE27      => r_EAO.INFORMATION137
             ,P_EAO_ATTRIBUTE28      => r_EAO.INFORMATION138
             ,P_EAO_ATTRIBUTE29      => r_EAO.INFORMATION139
             ,P_EAO_ATTRIBUTE3      => r_EAO.INFORMATION113
             ,P_EAO_ATTRIBUTE30      => r_EAO.INFORMATION140
             ,P_EAO_ATTRIBUTE4      => r_EAO.INFORMATION114
             ,P_EAO_ATTRIBUTE5      => r_EAO.INFORMATION115
             ,P_EAO_ATTRIBUTE6      => r_EAO.INFORMATION116
             ,P_EAO_ATTRIBUTE7      => r_EAO.INFORMATION117
             ,P_EAO_ATTRIBUTE8      => r_EAO.INFORMATION118
             ,P_EAO_ATTRIBUTE9      => r_EAO.INFORMATION119
             ,P_EAO_ATTRIBUTE_CATEGORY      => r_EAO.INFORMATION110
             ,P_ENRLD_ANTHR_OIPL_RT_ID      => l_enrld_anthr_oipl_rt_id
             ,P_ENRL_DET_DT_CD      => r_EAO.INFORMATION12
             ,P_EXCLD_FLAG      => r_EAO.INFORMATION11
             ,P_OIPL_ID      => l_OIPL_ID
             ,P_ORDR_NUM      => r_EAO.INFORMATION261
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_EAO.information3) then
             --
             BEN_ENRLD_ANTHR_OIPL_RT_API.delete_ENRLD_ANTHR_OIPL_RT(
                --
                p_validate                       => false
                ,p_enrld_anthr_oipl_rt_id                   => l_enrld_anthr_oipl_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EAO',r_eao.information5 );
    --
 end create_EAO_rows;

   ---------------------------------------------------------------
   ----------------------< create_DOT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_DOT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PTIP_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_DOT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_DPNT_OTHR_PTIP_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_DOT_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_DOT(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_DOT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     DOT.dpnt_othr_ptip_rt_id new_value
   from BEN_DPNT_OTHR_PTIP_RT_F DOT
   where
   DOT.PTIP_ID     = l_PTIP_ID  and
   DOT.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   DOT.business_group_id  = c_business_group_id
   and   DOT.dpnt_othr_ptip_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_DPNT_OTHR_PTIP_RT_F DOT1
                where
                DOT1.PTIP_ID     = l_PTIP_ID  and
                DOT1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DOT1.business_group_id  = c_business_group_id
                and   DOT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_DPNT_OTHR_PTIP_RT_F DOT2
                where
                DOT2.PTIP_ID     = l_PTIP_ID  and
                DOT2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DOT2.business_group_id  = c_business_group_id
                and   DOT2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_DOT                     c_DOT%rowtype;
   l_dpnt_othr_ptip_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_DOT_unique in c_unique_DOT('DOT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_DOT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_DOT_unique.table_route_id '||r_DOT_unique.table_route_id,10);
       hr_utility.set_location(' r_DOT_unique.information1 '||r_DOT_unique.information1,10);
       hr_utility.set_location( 'r_DOT_unique.information2 '||r_DOT_unique.information2,10);
       hr_utility.set_location( 'r_DOT_unique.information3 '||r_DOT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_DOT_min_max_dates(r_DOT_unique.table_route_id, r_DOT_unique.information1 ) ;
       fetch c_DOT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_DOT_unique.information2);
       open c_DOT(r_DOT_unique.table_route_id,
                r_DOT_unique.information1,
                r_DOT_unique.information2,
                r_DOT_unique.information3 ) ;
       --
       fetch c_DOT into r_DOT ;
       --
       close c_DOT ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_DOT.information259,r_DOT_unique.dml_operation),
                        r_DOT.information259);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_DOT.information262,r_DOT_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_DOT_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_DOT_unique.information2 and r_DOT_unique.information3 then
               l_update := true;
               if r_DOT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'DPNT_OTHR_PTIP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DPNT_OTHR_PTIP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DOT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_DOT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DOT_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('DOT',l_new_value,l_prefix || r_DOT_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_DOT_min_max_dates%found then
           -- cursor to find the object
           open c_find_DOT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_dpnt_othr_ptip_rt_id, -999)  ) ;
           fetch c_find_DOT_in_target into l_new_value ;
           if c_find_DOT_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_DPNT_OTHR_PTIP_RT_F',
                  p_base_key_column => 'DPNT_OTHR_PTIP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_DOT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'DPNT_OTHR_PTIP_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'DPNT_OTHR_PTIP_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_DOT_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DOT_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_DOT_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_DOT_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_DOT.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_DOT.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_DPNT_OTHR_PTIP_RT_F CREATE_DPNT_OTHR_PTIP_RT ',20);
           BEN_DPNT_OTHR_PTIP_RT_API.CREATE_DPNT_OTHR_PTIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DOT_ATTRIBUTE1      => r_DOT.INFORMATION111
             ,P_DOT_ATTRIBUTE10      => r_DOT.INFORMATION120
             ,P_DOT_ATTRIBUTE11      => r_DOT.INFORMATION121
             ,P_DOT_ATTRIBUTE12      => r_DOT.INFORMATION122
             ,P_DOT_ATTRIBUTE13      => r_DOT.INFORMATION123
             ,P_DOT_ATTRIBUTE14      => r_DOT.INFORMATION124
             ,P_DOT_ATTRIBUTE15      => r_DOT.INFORMATION125
             ,P_DOT_ATTRIBUTE16      => r_DOT.INFORMATION126
             ,P_DOT_ATTRIBUTE17      => r_DOT.INFORMATION127
             ,P_DOT_ATTRIBUTE18      => r_DOT.INFORMATION128
             ,P_DOT_ATTRIBUTE19      => r_DOT.INFORMATION129
             ,P_DOT_ATTRIBUTE2      => r_DOT.INFORMATION112
             ,P_DOT_ATTRIBUTE20      => r_DOT.INFORMATION130
             ,P_DOT_ATTRIBUTE21      => r_DOT.INFORMATION131
             ,P_DOT_ATTRIBUTE22      => r_DOT.INFORMATION132
             ,P_DOT_ATTRIBUTE23      => r_DOT.INFORMATION133
             ,P_DOT_ATTRIBUTE24      => r_DOT.INFORMATION134
             ,P_DOT_ATTRIBUTE25      => r_DOT.INFORMATION135
             ,P_DOT_ATTRIBUTE26      => r_DOT.INFORMATION136
             ,P_DOT_ATTRIBUTE27      => r_DOT.INFORMATION137
             ,P_DOT_ATTRIBUTE28      => r_DOT.INFORMATION138
             ,P_DOT_ATTRIBUTE29      => r_DOT.INFORMATION139
             ,P_DOT_ATTRIBUTE3      => r_DOT.INFORMATION113
             ,P_DOT_ATTRIBUTE30      => r_DOT.INFORMATION140
             ,P_DOT_ATTRIBUTE4      => r_DOT.INFORMATION114
             ,P_DOT_ATTRIBUTE5      => r_DOT.INFORMATION115
             ,P_DOT_ATTRIBUTE6      => r_DOT.INFORMATION116
             ,P_DOT_ATTRIBUTE7      => r_DOT.INFORMATION117
             ,P_DOT_ATTRIBUTE8      => r_DOT.INFORMATION118
             ,P_DOT_ATTRIBUTE9      => r_DOT.INFORMATION119
             ,P_DOT_ATTRIBUTE_CATEGORY      => r_DOT.INFORMATION110
             ,P_DPNT_OTHR_PTIP_RT_ID      => l_dpnt_othr_ptip_rt_id
             ,P_EXCLD_FLAG      => r_DOT.INFORMATION11
             ,P_ORDR_NUM      => r_DOT.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_dpnt_othr_ptip_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'DPNT_OTHR_PTIP_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_DOT.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_DPNT_OTHR_PTIP_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DOT_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_DOT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_DOT.information3,
               p_effective_start_date  => r_DOT.information2,
               p_dml_operation         => r_DOT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_DPNT_OTHR_PTIP_RT_ID   := r_DOT.information1;
             l_object_version_number := r_DOT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_DPNT_OTHR_PTIP_RT_F UPDATE_DPNT_OTHR_PTIP_RT ',30);
           BEN_DPNT_OTHR_PTIP_RT_API.UPDATE_DPNT_OTHR_PTIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_DOT_ATTRIBUTE1      => r_DOT.INFORMATION111
             ,P_DOT_ATTRIBUTE10      => r_DOT.INFORMATION120
             ,P_DOT_ATTRIBUTE11      => r_DOT.INFORMATION121
             ,P_DOT_ATTRIBUTE12      => r_DOT.INFORMATION122
             ,P_DOT_ATTRIBUTE13      => r_DOT.INFORMATION123
             ,P_DOT_ATTRIBUTE14      => r_DOT.INFORMATION124
             ,P_DOT_ATTRIBUTE15      => r_DOT.INFORMATION125
             ,P_DOT_ATTRIBUTE16      => r_DOT.INFORMATION126
             ,P_DOT_ATTRIBUTE17      => r_DOT.INFORMATION127
             ,P_DOT_ATTRIBUTE18      => r_DOT.INFORMATION128
             ,P_DOT_ATTRIBUTE19      => r_DOT.INFORMATION129
             ,P_DOT_ATTRIBUTE2      => r_DOT.INFORMATION112
             ,P_DOT_ATTRIBUTE20      => r_DOT.INFORMATION130
             ,P_DOT_ATTRIBUTE21      => r_DOT.INFORMATION131
             ,P_DOT_ATTRIBUTE22      => r_DOT.INFORMATION132
             ,P_DOT_ATTRIBUTE23      => r_DOT.INFORMATION133
             ,P_DOT_ATTRIBUTE24      => r_DOT.INFORMATION134
             ,P_DOT_ATTRIBUTE25      => r_DOT.INFORMATION135
             ,P_DOT_ATTRIBUTE26      => r_DOT.INFORMATION136
             ,P_DOT_ATTRIBUTE27      => r_DOT.INFORMATION137
             ,P_DOT_ATTRIBUTE28      => r_DOT.INFORMATION138
             ,P_DOT_ATTRIBUTE29      => r_DOT.INFORMATION139
             ,P_DOT_ATTRIBUTE3      => r_DOT.INFORMATION113
             ,P_DOT_ATTRIBUTE30      => r_DOT.INFORMATION140
             ,P_DOT_ATTRIBUTE4      => r_DOT.INFORMATION114
             ,P_DOT_ATTRIBUTE5      => r_DOT.INFORMATION115
             ,P_DOT_ATTRIBUTE6      => r_DOT.INFORMATION116
             ,P_DOT_ATTRIBUTE7      => r_DOT.INFORMATION117
             ,P_DOT_ATTRIBUTE8      => r_DOT.INFORMATION118
             ,P_DOT_ATTRIBUTE9      => r_DOT.INFORMATION119
             ,P_DOT_ATTRIBUTE_CATEGORY      => r_DOT.INFORMATION110
             ,P_DPNT_OTHR_PTIP_RT_ID      => l_dpnt_othr_ptip_rt_id
             ,P_EXCLD_FLAG      => r_DOT.INFORMATION11
             ,P_ORDR_NUM      => r_DOT.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_DOT.information3) then
             --
             BEN_DPNT_OTHR_PTIP_RT_API.delete_DPNT_OTHR_PTIP_RT(
                --
                p_validate                       => false
                ,p_dpnt_othr_ptip_rt_id                   => l_dpnt_othr_ptip_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'DOT',r_dot.information5 );
    --
 end create_DOT_rows;

   ---------------------------------------------------------------
   ----------------------< create_DOP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_DOP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PGM_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_DOP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_DPNT_CVRD_OTHR_PGM_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_DOP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_DOP(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_DOP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     DOP.dpnt_cvrd_othr_pgm_rt_id new_value
   from BEN_DPNT_CVRD_OTHR_PGM_RT_F DOP
   where
   DOP.PGM_ID     = l_PGM_ID  and
   DOP.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   DOP.business_group_id  = c_business_group_id
   and   DOP.dpnt_cvrd_othr_pgm_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_DPNT_CVRD_OTHR_PGM_RT_F DOP1
                where
                DOP1.PGM_ID     = l_PGM_ID  and
                DOP1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DOP1.business_group_id  = c_business_group_id
                and   DOP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_DPNT_CVRD_OTHR_PGM_RT_F DOP2
                where
                DOP2.PGM_ID     = l_PGM_ID  and
               DOP2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                DOP2.business_group_id  = c_business_group_id
                and   DOP2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_DOP                     c_DOP%rowtype;
   l_dpnt_cvrd_othr_pgm_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_DOP_unique in c_unique_DOP('DOP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_DOP_unique.information3 >=
         ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_DOP_unique.table_route_id '||r_DOP_unique.table_route_id,10);
       hr_utility.set_location(' r_DOP_unique.information1 '||r_DOP_unique.information1,10);
       hr_utility.set_location( 'r_DOP_unique.information2 '||r_DOP_unique.information2,10);
       hr_utility.set_location( 'r_DOP_unique.information3 '||r_DOP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_DOP_min_max_dates(r_DOP_unique.table_route_id, r_DOP_unique.information1 ) ;
       fetch c_DOP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_DOP_unique.information2);
       open c_DOP(r_DOP_unique.table_route_id,
                r_DOP_unique.information1,
                r_DOP_unique.information2,
                r_DOP_unique.information3 ) ;
       --
       fetch c_DOP into r_DOP ;
       --
       close c_DOP ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_DOP.information260,r_DOP_unique.dml_operation),
                       r_DOP.information260);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_DOP.information262,r_DOP_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_DOP_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_DOP_unique.information2 and r_DOP_unique.information3 then
               l_update := true;
               if r_DOP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'DPNT_CVRD_OTHR_PGM_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DPNT_CVRD_OTHR_PGM_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DOP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_DOP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DOP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('DOP',l_new_value,l_prefix || r_DOP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_DOP_min_max_dates%found then
           -- cursor to find the object
           open c_find_DOP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_dpnt_cvrd_othr_pgm_rt_id, -999)  ) ;
           fetch c_find_DOP_in_target into l_new_value ;
           if c_find_DOP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_DPNT_CVRD_OTHR_PGM_RT_F',
                  p_base_key_column => 'DPNT_CVRD_OTHR_PGM_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_DOP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'DPNT_CVRD_OTHR_PGM_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'DPNT_CVRD_OTHR_PGM_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_DOP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DOP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_DOP_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_DOP_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_DOP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_DOP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_DPNT_CVRD_OTHR_PGM_RT_F CREATE_DPNT_CVRD_OTHR_PGM_RT ',20);
           BEN_DPNT_CVRD_OTHR_PGM_RT_API.CREATE_DPNT_CVRD_OTHR_PGM_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_DOP_ATTRIBUTE1      => r_DOP.INFORMATION111
             ,P_DOP_ATTRIBUTE10      => r_DOP.INFORMATION120
             ,P_DOP_ATTRIBUTE11      => r_DOP.INFORMATION121
             ,P_DOP_ATTRIBUTE12      => r_DOP.INFORMATION122
             ,P_DOP_ATTRIBUTE13      => r_DOP.INFORMATION123
             ,P_DOP_ATTRIBUTE14      => r_DOP.INFORMATION124
             ,P_DOP_ATTRIBUTE15      => r_DOP.INFORMATION125
             ,P_DOP_ATTRIBUTE16      => r_DOP.INFORMATION126
             ,P_DOP_ATTRIBUTE17      => r_DOP.INFORMATION127
             ,P_DOP_ATTRIBUTE18      => r_DOP.INFORMATION128
             ,P_DOP_ATTRIBUTE19      => r_DOP.INFORMATION129
             ,P_DOP_ATTRIBUTE2      => r_DOP.INFORMATION112
             ,P_DOP_ATTRIBUTE20      => r_DOP.INFORMATION130
             ,P_DOP_ATTRIBUTE21      => r_DOP.INFORMATION131
             ,P_DOP_ATTRIBUTE22      => r_DOP.INFORMATION132
             ,P_DOP_ATTRIBUTE23      => r_DOP.INFORMATION133
             ,P_DOP_ATTRIBUTE24      => r_DOP.INFORMATION134
             ,P_DOP_ATTRIBUTE25      => r_DOP.INFORMATION135
             ,P_DOP_ATTRIBUTE26      => r_DOP.INFORMATION136
             ,P_DOP_ATTRIBUTE27      => r_DOP.INFORMATION137
             ,P_DOP_ATTRIBUTE28      => r_DOP.INFORMATION138
             ,P_DOP_ATTRIBUTE29      => r_DOP.INFORMATION139
             ,P_DOP_ATTRIBUTE3      => r_DOP.INFORMATION113
             ,P_DOP_ATTRIBUTE30      => r_DOP.INFORMATION140
             ,P_DOP_ATTRIBUTE4      => r_DOP.INFORMATION114
             ,P_DOP_ATTRIBUTE5      => r_DOP.INFORMATION115
             ,P_DOP_ATTRIBUTE6      => r_DOP.INFORMATION116
             ,P_DOP_ATTRIBUTE7      => r_DOP.INFORMATION117
             ,P_DOP_ATTRIBUTE8      => r_DOP.INFORMATION118
             ,P_DOP_ATTRIBUTE9      => r_DOP.INFORMATION119
             ,P_DOP_ATTRIBUTE_CATEGORY      => r_DOP.INFORMATION110
             ,P_DPNT_CVRD_OTHR_PGM_RT_ID      => l_dpnt_cvrd_othr_pgm_rt_id
             ,P_ENRL_DET_DT_CD      => r_DOP.INFORMATION13
             ,P_EXCLD_FLAG      => r_DOP.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_DOP.INFORMATION12
             ,P_ORDR_NUM      => r_DOP.INFORMATION261
             ,P_PGM_ID      => l_PGM_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_dpnt_cvrd_othr_pgm_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'DPNT_CVRD_OTHR_PGM_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_DOP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_DPNT_CVRD_OTHR_PGM_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DOP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_DOP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_DOP.information3,
               p_effective_start_date  => r_DOP.information2,
               p_dml_operation         => r_DOP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_DPNT_CVRD_OTHR_PGM_RT_ID   := r_DOP.information1;
             l_object_version_number := r_DOP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_DPNT_CVRD_OTHR_PGM_RT_F UPDATE_DPNT_CVRD_OTHR_PGM_RT ',30);
           BEN_DPNT_CVRD_OTHR_PGM_RT_API.UPDATE_DPNT_CVRD_OTHR_PGM_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_DOP_ATTRIBUTE1      => r_DOP.INFORMATION111
             ,P_DOP_ATTRIBUTE10      => r_DOP.INFORMATION120
             ,P_DOP_ATTRIBUTE11      => r_DOP.INFORMATION121
             ,P_DOP_ATTRIBUTE12      => r_DOP.INFORMATION122
             ,P_DOP_ATTRIBUTE13      => r_DOP.INFORMATION123
             ,P_DOP_ATTRIBUTE14      => r_DOP.INFORMATION124
             ,P_DOP_ATTRIBUTE15      => r_DOP.INFORMATION125
             ,P_DOP_ATTRIBUTE16      => r_DOP.INFORMATION126
             ,P_DOP_ATTRIBUTE17      => r_DOP.INFORMATION127
             ,P_DOP_ATTRIBUTE18      => r_DOP.INFORMATION128
             ,P_DOP_ATTRIBUTE19      => r_DOP.INFORMATION129
             ,P_DOP_ATTRIBUTE2      => r_DOP.INFORMATION112
             ,P_DOP_ATTRIBUTE20      => r_DOP.INFORMATION130
             ,P_DOP_ATTRIBUTE21      => r_DOP.INFORMATION131
             ,P_DOP_ATTRIBUTE22      => r_DOP.INFORMATION132
             ,P_DOP_ATTRIBUTE23      => r_DOP.INFORMATION133
             ,P_DOP_ATTRIBUTE24      => r_DOP.INFORMATION134
             ,P_DOP_ATTRIBUTE25      => r_DOP.INFORMATION135
             ,P_DOP_ATTRIBUTE26      => r_DOP.INFORMATION136
             ,P_DOP_ATTRIBUTE27      => r_DOP.INFORMATION137
             ,P_DOP_ATTRIBUTE28      => r_DOP.INFORMATION138
             ,P_DOP_ATTRIBUTE29      => r_DOP.INFORMATION139
             ,P_DOP_ATTRIBUTE3      => r_DOP.INFORMATION113
             ,P_DOP_ATTRIBUTE30      => r_DOP.INFORMATION140
             ,P_DOP_ATTRIBUTE4      => r_DOP.INFORMATION114
             ,P_DOP_ATTRIBUTE5      => r_DOP.INFORMATION115
             ,P_DOP_ATTRIBUTE6      => r_DOP.INFORMATION116
             ,P_DOP_ATTRIBUTE7      => r_DOP.INFORMATION117
             ,P_DOP_ATTRIBUTE8      => r_DOP.INFORMATION118
             ,P_DOP_ATTRIBUTE9      => r_DOP.INFORMATION119
             ,P_DOP_ATTRIBUTE_CATEGORY      => r_DOP.INFORMATION110
             ,P_DPNT_CVRD_OTHR_PGM_RT_ID      => l_dpnt_cvrd_othr_pgm_rt_id
             ,P_ENRL_DET_DT_CD      => r_DOP.INFORMATION13
             ,P_EXCLD_FLAG      => r_DOP.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_DOP.INFORMATION12
             ,P_ORDR_NUM      => r_DOP.INFORMATION261
             ,P_PGM_ID      => l_PGM_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_DOP.information3) then
             --
             BEN_DPNT_CVRD_OTHR_PGM_RT_API.delete_DPNT_CVRD_OTHR_PGM_RT(
                --
                p_validate                       => false
                ,p_dpnt_cvrd_othr_pgm_rt_id                   => l_dpnt_cvrd_othr_pgm_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'DOP',r_dop.information5 );
    --
 end create_DOP_rows;

   ---------------------------------------------------------------
   ----------------------< create_DCP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_DCP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PLIP_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_DCP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_DPNT_CVRD_PLIP_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_DCP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_DCP(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_DCP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     DCP.dpnt_cvrd_plip_rt_id new_value
   from BEN_DPNT_CVRD_PLIP_RT_F DCP
   where
   DCP.PLIP_ID     = l_PLIP_ID  and
   DCP.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   DCP.business_group_id  = c_business_group_id
   and   DCP.dpnt_cvrd_plip_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_DPNT_CVRD_PLIP_RT_F DCP1
                where
                DCP1.PLIP_ID     = l_PLIP_ID  and
                DCP1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DCP1.business_group_id  = c_business_group_id
                and   DCP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_DPNT_CVRD_PLIP_RT_F DCP2
                where
                DCP2.PLIP_ID     = l_PLIP_ID  and
                DCP2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DCP2.business_group_id  = c_business_group_id
                and   DCP2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_DCP                     c_DCP%rowtype;
   l_dpnt_cvrd_plip_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_DCP_unique in c_unique_DCP('DCP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_DCP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_DCP_unique.table_route_id '||r_DCP_unique.table_route_id,10);
       hr_utility.set_location(' r_DCP_unique.information1 '||r_DCP_unique.information1,10);
       hr_utility.set_location( 'r_DCP_unique.information2 '||r_DCP_unique.information2,10);
       hr_utility.set_location( 'r_DCP_unique.information3 '||r_DCP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_DCP_min_max_dates(r_DCP_unique.table_route_id, r_DCP_unique.information1 ) ;
       fetch c_DCP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_DCP_unique.information2);
       open c_DCP(r_DCP_unique.table_route_id,
                r_DCP_unique.information1,
                r_DCP_unique.information2,
                r_DCP_unique.information3 ) ;
       --
       fetch c_DCP into r_DCP ;
       --
       close c_DCP ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PLIP_ID := NVL(get_fk('PLIP_ID', r_DCP.information256,r_DCP_unique.dml_operation),
                        r_DCP.information256);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_DCP.information262,r_DCP_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_DCP_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_DCP_unique.information2 and r_DCP_unique.information3 then
               l_update := true;
               if r_DCP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'DPNT_CVRD_PLIP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DPNT_CVRD_PLIP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DCP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_DCP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DCP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('DCP',l_new_value,l_prefix || r_DCP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_DCP_min_max_dates%found then
           -- cursor to find the object
           open c_find_DCP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_dpnt_cvrd_plip_rt_id, -999)  ) ;
           fetch c_find_DCP_in_target into l_new_value ;
           if c_find_DCP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_DPNT_CVRD_PLIP_RT_F',
                  p_base_key_column => 'DPNT_CVRD_PLIP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_DCP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'DPNT_CVRD_PLIP_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'DPNT_CVRD_PLIP_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_DCP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DCP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_DCP_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_DCP_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_DCP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_DCP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_DPNT_CVRD_PLIP_RT_F CREATE_DPNT_CVRD_PLIP_RT ',20);
           BEN_DPNT_CVRD_PLIP_RT_API.CREATE_DPNT_CVRD_PLIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DCP_ATTRIBUTE1      => r_DCP.INFORMATION111
             ,P_DCP_ATTRIBUTE10      => r_DCP.INFORMATION120
             ,P_DCP_ATTRIBUTE11      => r_DCP.INFORMATION121
             ,P_DCP_ATTRIBUTE12      => r_DCP.INFORMATION122
             ,P_DCP_ATTRIBUTE13      => r_DCP.INFORMATION123
             ,P_DCP_ATTRIBUTE14      => r_DCP.INFORMATION124
             ,P_DCP_ATTRIBUTE15      => r_DCP.INFORMATION125
             ,P_DCP_ATTRIBUTE16      => r_DCP.INFORMATION126
             ,P_DCP_ATTRIBUTE17      => r_DCP.INFORMATION127
             ,P_DCP_ATTRIBUTE18      => r_DCP.INFORMATION128
             ,P_DCP_ATTRIBUTE19      => r_DCP.INFORMATION129
             ,P_DCP_ATTRIBUTE2      => r_DCP.INFORMATION112
             ,P_DCP_ATTRIBUTE20      => r_DCP.INFORMATION130
             ,P_DCP_ATTRIBUTE21      => r_DCP.INFORMATION131
             ,P_DCP_ATTRIBUTE22      => r_DCP.INFORMATION132
             ,P_DCP_ATTRIBUTE23      => r_DCP.INFORMATION133
             ,P_DCP_ATTRIBUTE24      => r_DCP.INFORMATION134
             ,P_DCP_ATTRIBUTE25      => r_DCP.INFORMATION135
             ,P_DCP_ATTRIBUTE26      => r_DCP.INFORMATION136
             ,P_DCP_ATTRIBUTE27      => r_DCP.INFORMATION137
             ,P_DCP_ATTRIBUTE28      => r_DCP.INFORMATION138
             ,P_DCP_ATTRIBUTE29      => r_DCP.INFORMATION139
             ,P_DCP_ATTRIBUTE3      => r_DCP.INFORMATION113
             ,P_DCP_ATTRIBUTE30      => r_DCP.INFORMATION140
             ,P_DCP_ATTRIBUTE4      => r_DCP.INFORMATION114
             ,P_DCP_ATTRIBUTE5      => r_DCP.INFORMATION115
             ,P_DCP_ATTRIBUTE6      => r_DCP.INFORMATION116
             ,P_DCP_ATTRIBUTE7      => r_DCP.INFORMATION117
             ,P_DCP_ATTRIBUTE8      => r_DCP.INFORMATION118
             ,P_DCP_ATTRIBUTE9      => r_DCP.INFORMATION119
             ,P_DCP_ATTRIBUTE_CATEGORY      => r_DCP.INFORMATION110
             ,P_DPNT_CVRD_PLIP_RT_ID      => l_dpnt_cvrd_plip_rt_id
             ,P_ENRL_DET_DT_CD      => r_DCP.INFORMATION11
             ,P_EXCLD_FLAG      => r_DCP.INFORMATION12
             ,P_ORDR_NUM      => r_DCP.INFORMATION260
             ,P_PLIP_ID      => l_PLIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_dpnt_cvrd_plip_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'DPNT_CVRD_PLIP_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_DCP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_DPNT_CVRD_PLIP_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DCP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_DCP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_DCP.information3,
               p_effective_start_date  => r_DCP.information2,
               p_dml_operation         => r_DCP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_DPNT_CVRD_PLIP_RT_ID   := r_DCP.information1;
             l_object_version_number := r_DCP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_DPNT_CVRD_PLIP_RT_F UPDATE_DPNT_CVRD_PLIP_RT ',30);
           BEN_DPNT_CVRD_PLIP_RT_API.UPDATE_DPNT_CVRD_PLIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DCP_ATTRIBUTE1      => r_DCP.INFORMATION111
             ,P_DCP_ATTRIBUTE10      => r_DCP.INFORMATION120
             ,P_DCP_ATTRIBUTE11      => r_DCP.INFORMATION121
             ,P_DCP_ATTRIBUTE12      => r_DCP.INFORMATION122
             ,P_DCP_ATTRIBUTE13      => r_DCP.INFORMATION123
             ,P_DCP_ATTRIBUTE14      => r_DCP.INFORMATION124
             ,P_DCP_ATTRIBUTE15      => r_DCP.INFORMATION125
             ,P_DCP_ATTRIBUTE16      => r_DCP.INFORMATION126
             ,P_DCP_ATTRIBUTE17      => r_DCP.INFORMATION127
             ,P_DCP_ATTRIBUTE18      => r_DCP.INFORMATION128
             ,P_DCP_ATTRIBUTE19      => r_DCP.INFORMATION129
             ,P_DCP_ATTRIBUTE2      => r_DCP.INFORMATION112
             ,P_DCP_ATTRIBUTE20      => r_DCP.INFORMATION130
             ,P_DCP_ATTRIBUTE21      => r_DCP.INFORMATION131
             ,P_DCP_ATTRIBUTE22      => r_DCP.INFORMATION132
             ,P_DCP_ATTRIBUTE23      => r_DCP.INFORMATION133
             ,P_DCP_ATTRIBUTE24      => r_DCP.INFORMATION134
             ,P_DCP_ATTRIBUTE25      => r_DCP.INFORMATION135
             ,P_DCP_ATTRIBUTE26      => r_DCP.INFORMATION136
             ,P_DCP_ATTRIBUTE27      => r_DCP.INFORMATION137
             ,P_DCP_ATTRIBUTE28      => r_DCP.INFORMATION138
             ,P_DCP_ATTRIBUTE29      => r_DCP.INFORMATION139
             ,P_DCP_ATTRIBUTE3      => r_DCP.INFORMATION113
             ,P_DCP_ATTRIBUTE30      => r_DCP.INFORMATION140
             ,P_DCP_ATTRIBUTE4      => r_DCP.INFORMATION114
             ,P_DCP_ATTRIBUTE5      => r_DCP.INFORMATION115
             ,P_DCP_ATTRIBUTE6      => r_DCP.INFORMATION116
             ,P_DCP_ATTRIBUTE7      => r_DCP.INFORMATION117
             ,P_DCP_ATTRIBUTE8      => r_DCP.INFORMATION118
             ,P_DCP_ATTRIBUTE9      => r_DCP.INFORMATION119
             ,P_DCP_ATTRIBUTE_CATEGORY      => r_DCP.INFORMATION110
             ,P_DPNT_CVRD_PLIP_RT_ID      => l_dpnt_cvrd_plip_rt_id
             ,P_ENRL_DET_DT_CD      => r_DCP.INFORMATION11
             ,P_EXCLD_FLAG      => r_DCP.INFORMATION12
             ,P_ORDR_NUM      => r_DCP.INFORMATION260
             ,P_PLIP_ID      => l_PLIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_DCP.information3) then
             --
             BEN_DPNT_CVRD_PLIP_RT_API.delete_DPNT_CVRD_PLIP_RT(
                --
                p_validate                       => false
                ,p_dpnt_cvrd_plip_rt_id                   => l_dpnt_cvrd_plip_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'DCP',r_dcp.information5 );
    --
 end create_DCP_rows;

   ---------------------------------------------------------------
   ----------------------< create_DCO_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_DCO_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PTIP_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_DCO(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_DPNT_CVRD_OTHR_PTIP_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_DCO_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_DCO(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_DCO_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     DCO.dpnt_cvrd_othr_ptip_rt_id new_value
   from BEN_DPNT_CVRD_OTHR_PTIP_RT_F DCO
   where
   DCO.PTIP_ID     = l_PTIP_ID  and
   DCO.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   DCO.business_group_id  = c_business_group_id
   and   DCO.dpnt_cvrd_othr_ptip_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_DPNT_CVRD_OTHR_PTIP_RT_F DCO1
                where
                DCO1.PTIP_ID     = l_PTIP_ID  and
                DCO1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DCO1.business_group_id  = c_business_group_id
                and   DCO1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_DPNT_CVRD_OTHR_PTIP_RT_F DCO2
                where
                DCO2.PTIP_ID     = l_PTIP_ID  and
                DCO2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DCO2.business_group_id  = c_business_group_id
                and   DCO2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_DCO                     c_DCO%rowtype;
   l_dpnt_cvrd_othr_ptip_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_DCO_unique in c_unique_DCO('DCO') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_DCO_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_DCO_unique.table_route_id '||r_DCO_unique.table_route_id,10);
       hr_utility.set_location(' r_DCO_unique.information1 '||r_DCO_unique.information1,10);
       hr_utility.set_location( 'r_DCO_unique.information2 '||r_DCO_unique.information2,10);
       hr_utility.set_location( 'r_DCO_unique.information3 '||r_DCO_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_DCO_min_max_dates(r_DCO_unique.table_route_id, r_DCO_unique.information1 ) ;
       fetch c_DCO_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_DCO_unique.information2);
       open c_DCO(r_DCO_unique.table_route_id,
                r_DCO_unique.information1,
                r_DCO_unique.information2,
                r_DCO_unique.information3 ) ;
       --
       fetch c_DCO into r_DCO ;
       --
       close c_DCO ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_DCO.information259,r_DCO_unique.dml_operation),
                        r_DCO.information259);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_DCO.information262,r_DCO_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_DCO_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_DCO_unique.information2 and r_DCO_unique.information3 then
               l_update := true;
               if r_DCO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'DPNT_CVRD_OTHR_PTIP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DPNT_CVRD_OTHR_PTIP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DCO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_DCO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DCO_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('DCO',l_new_value,l_prefix || r_DCO_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_DCO_min_max_dates%found then
           -- cursor to find the object
           open c_find_DCO_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_dpnt_cvrd_othr_ptip_rt_id, -999)  ) ;
           fetch c_find_DCO_in_target into l_new_value ;
           if c_find_DCO_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_DPNT_CVRD_OTHR_PTIP_RT_F',
                  p_base_key_column => 'DPNT_CVRD_OTHR_PTIP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_DCO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'DPNT_CVRD_OTHR_PTIP_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'DPNT_CVRD_OTHR_PTIP_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_DCO_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DCO_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_DCO_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_DCO_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_DCO.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_DCO.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_DPNT_CVRD_OTHR_PTIP_RT_F CREATE_DPNT_CVD_O_PTIP_RT ',20);
           BEN_DPNT_CVD_O_PTIP_RT_API.CREATE_DPNT_CVD_O_PTIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DCO_ATTRIBUTE1      => r_DCO.INFORMATION111
             ,P_DCO_ATTRIBUTE10      => r_DCO.INFORMATION120
             ,P_DCO_ATTRIBUTE11      => r_DCO.INFORMATION121
             ,P_DCO_ATTRIBUTE12      => r_DCO.INFORMATION122
             ,P_DCO_ATTRIBUTE13      => r_DCO.INFORMATION123
             ,P_DCO_ATTRIBUTE14      => r_DCO.INFORMATION124
             ,P_DCO_ATTRIBUTE15      => r_DCO.INFORMATION125
             ,P_DCO_ATTRIBUTE16      => r_DCO.INFORMATION126
             ,P_DCO_ATTRIBUTE17      => r_DCO.INFORMATION127
             ,P_DCO_ATTRIBUTE18      => r_DCO.INFORMATION128
             ,P_DCO_ATTRIBUTE19      => r_DCO.INFORMATION129
             ,P_DCO_ATTRIBUTE2      => r_DCO.INFORMATION112
             ,P_DCO_ATTRIBUTE20      => r_DCO.INFORMATION130
             ,P_DCO_ATTRIBUTE21      => r_DCO.INFORMATION131
             ,P_DCO_ATTRIBUTE22      => r_DCO.INFORMATION132
             ,P_DCO_ATTRIBUTE23      => r_DCO.INFORMATION133
             ,P_DCO_ATTRIBUTE24      => r_DCO.INFORMATION134
             ,P_DCO_ATTRIBUTE25      => r_DCO.INFORMATION135
             ,P_DCO_ATTRIBUTE26      => r_DCO.INFORMATION136
             ,P_DCO_ATTRIBUTE27      => r_DCO.INFORMATION137
             ,P_DCO_ATTRIBUTE28      => r_DCO.INFORMATION138
             ,P_DCO_ATTRIBUTE29      => r_DCO.INFORMATION139
             ,P_DCO_ATTRIBUTE3      => r_DCO.INFORMATION113
             ,P_DCO_ATTRIBUTE30      => r_DCO.INFORMATION140
             ,P_DCO_ATTRIBUTE4      => r_DCO.INFORMATION114
             ,P_DCO_ATTRIBUTE5      => r_DCO.INFORMATION115
             ,P_DCO_ATTRIBUTE6      => r_DCO.INFORMATION116
             ,P_DCO_ATTRIBUTE7      => r_DCO.INFORMATION117
             ,P_DCO_ATTRIBUTE8      => r_DCO.INFORMATION118
             ,P_DCO_ATTRIBUTE9      => r_DCO.INFORMATION119
             ,P_DCO_ATTRIBUTE_CATEGORY      => r_DCO.INFORMATION110
             ,P_DPNT_CVRD_OTHR_PTIP_RT_ID      => l_dpnt_cvrd_othr_ptip_rt_id
             ,P_ENRL_DET_DT_CD      => r_DCO.INFORMATION13
             ,P_EXCLD_FLAG      => r_DCO.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_DCO.INFORMATION12
             ,P_ORDR_NUM      => r_DCO.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_dpnt_cvrd_othr_ptip_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'DPNT_CVRD_OTHR_PTIP_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_DCO.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_DPNT_CVRD_OTHR_PTIP_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DCO_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_DCO.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_DCO.information3,
               p_effective_start_date  => r_DCO.information2,
               p_dml_operation         => r_DCO.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_DPNT_CVRD_OTHR_PTIP_RT_ID   := r_DCO.information1;
             l_object_version_number := r_DCO.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_DPNT_CVRD_OTHR_PTIP_RT_F UPDATE_DPNT_CVD_O_PTIP_RT ',30);
           BEN_DPNT_CVD_O_PTIP_RT_API.UPDATE_DPNT_CVD_O_PTIP_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DCO_ATTRIBUTE1      => r_DCO.INFORMATION111
             ,P_DCO_ATTRIBUTE10      => r_DCO.INFORMATION120
             ,P_DCO_ATTRIBUTE11      => r_DCO.INFORMATION121
             ,P_DCO_ATTRIBUTE12      => r_DCO.INFORMATION122
             ,P_DCO_ATTRIBUTE13      => r_DCO.INFORMATION123
             ,P_DCO_ATTRIBUTE14      => r_DCO.INFORMATION124
             ,P_DCO_ATTRIBUTE15      => r_DCO.INFORMATION125
             ,P_DCO_ATTRIBUTE16      => r_DCO.INFORMATION126
             ,P_DCO_ATTRIBUTE17      => r_DCO.INFORMATION127
             ,P_DCO_ATTRIBUTE18      => r_DCO.INFORMATION128
             ,P_DCO_ATTRIBUTE19      => r_DCO.INFORMATION129
             ,P_DCO_ATTRIBUTE2      => r_DCO.INFORMATION112
             ,P_DCO_ATTRIBUTE20      => r_DCO.INFORMATION130
             ,P_DCO_ATTRIBUTE21      => r_DCO.INFORMATION131
             ,P_DCO_ATTRIBUTE22      => r_DCO.INFORMATION132
             ,P_DCO_ATTRIBUTE23      => r_DCO.INFORMATION133
             ,P_DCO_ATTRIBUTE24      => r_DCO.INFORMATION134
             ,P_DCO_ATTRIBUTE25      => r_DCO.INFORMATION135
             ,P_DCO_ATTRIBUTE26      => r_DCO.INFORMATION136
             ,P_DCO_ATTRIBUTE27      => r_DCO.INFORMATION137
             ,P_DCO_ATTRIBUTE28      => r_DCO.INFORMATION138
             ,P_DCO_ATTRIBUTE29      => r_DCO.INFORMATION139
             ,P_DCO_ATTRIBUTE3      => r_DCO.INFORMATION113
             ,P_DCO_ATTRIBUTE30      => r_DCO.INFORMATION140
             ,P_DCO_ATTRIBUTE4      => r_DCO.INFORMATION114
             ,P_DCO_ATTRIBUTE5      => r_DCO.INFORMATION115
             ,P_DCO_ATTRIBUTE6      => r_DCO.INFORMATION116
             ,P_DCO_ATTRIBUTE7      => r_DCO.INFORMATION117
             ,P_DCO_ATTRIBUTE8      => r_DCO.INFORMATION118
             ,P_DCO_ATTRIBUTE9      => r_DCO.INFORMATION119
             ,P_DCO_ATTRIBUTE_CATEGORY      => r_DCO.INFORMATION110
             ,P_DPNT_CVRD_OTHR_PTIP_RT_ID      => l_dpnt_cvrd_othr_ptip_rt_id
             ,P_ENRL_DET_DT_CD      => r_DCO.INFORMATION13
             ,P_EXCLD_FLAG      => r_DCO.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_DCO.INFORMATION12
             ,P_ORDR_NUM      => r_DCO.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_DCO.information3) then
             --
             BEN_DPNT_CVD_O_PTIP_RT_API.delete_DPNT_CVD_O_PTIP_RT(
                --
                p_validate                       => false
                ,p_dpnt_cvrd_othr_ptip_rt_id                   => l_dpnt_cvrd_othr_ptip_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'DCO',r_dco.information5 );
    --
 end create_DCO_rows;

   ---------------------------------------------------------------
   ----------------------< create_DCL_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_DCL_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PL_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_DCL(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_DPNT_CVRD_OTHR_PL_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_DCL_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_DCL(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_DCL_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     DCL.dpnt_cvrd_othr_pl_rt_id new_value
   from BEN_DPNT_CVRD_OTHR_PL_RT_F DCL
   where
   DCL.PL_ID     = l_PL_ID  and
   DCL.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   DCL.business_group_id  = c_business_group_id
   and   DCL.dpnt_cvrd_othr_pl_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_DPNT_CVRD_OTHR_PL_RT_F DCL1
                where
                DCL1.PL_ID     = l_PL_ID  and
                DCL1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DCL1.business_group_id  = c_business_group_id
                and   DCL1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_DPNT_CVRD_OTHR_PL_RT_F DCL2
                where
                DCL2.PL_ID     = l_PL_ID  and
                DCL2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                DCL2.business_group_id  = c_business_group_id
                and   DCL2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_DCL                     c_DCL%rowtype;
   l_dpnt_cvrd_othr_pl_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_DCL_unique in c_unique_DCL('DCL') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_DCL_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_DCL_unique.table_route_id '||r_DCL_unique.table_route_id,10);
       hr_utility.set_location(' r_DCL_unique.information1 '||r_DCL_unique.information1,10);
       hr_utility.set_location( 'r_DCL_unique.information2 '||r_DCL_unique.information2,10);
       hr_utility.set_location( 'r_DCL_unique.information3 '||r_DCL_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_DCL_min_max_dates(r_DCL_unique.table_route_id, r_DCL_unique.information1 ) ;
       fetch c_DCL_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_DCL_unique.information2);
       open c_DCL(r_DCL_unique.table_route_id,
                r_DCL_unique.information1,
                r_DCL_unique.information2,
                r_DCL_unique.information3 ) ;
       --
       fetch c_DCL into r_DCL ;
       --
       close c_DCL ;
       --
       -- Only For Use by Create Wizard - Same Business Group
       l_PL_ID := NVL(get_fk('PL_ID', r_DCL.information261,r_DCL_unique.dml_operation),
                      r_DCL.information261);

       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_DCL.information262,r_DCL_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_DCL_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_DCL_unique.information2 and r_DCL_unique.information3 then
               l_update := true;
               if r_DCL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'DPNT_CVRD_OTHR_PL_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'DPNT_CVRD_OTHR_PL_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_DCL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_DCL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_DCL_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('DCL',l_new_value,l_prefix || r_DCL_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_DCL_min_max_dates%found then
           -- cursor to find the object
           open c_find_DCL_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_dpnt_cvrd_othr_pl_rt_id, -999)  ) ;
           fetch c_find_DCL_in_target into l_new_value ;
           if c_find_DCL_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_DPNT_CVRD_OTHR_PL_RT_F',
                  p_base_key_column => 'DPNT_CVRD_OTHR_PL_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_DCL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'DPNT_CVRD_OTHR_PL_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'DPNT_CVRD_OTHR_PL_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_DCL_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DCL_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_DCL_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_DCL_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_DCL.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_DCL.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_DPNT_CVRD_OTHR_PL_RT_F CREATE_DPNT_CVRD_OTHR_PL_RT ',20);
           BEN_DPNT_CVRD_OTHR_PL_RT_API.CREATE_DPNT_CVRD_OTHR_PL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_DET_DT_CD      => r_DCL.INFORMATION12
             ,P_DCL_ATTRIBUTE1      => r_DCL.INFORMATION111
             ,P_DCL_ATTRIBUTE10      => r_DCL.INFORMATION120
             ,P_DCL_ATTRIBUTE11      => r_DCL.INFORMATION121
             ,P_DCL_ATTRIBUTE12      => r_DCL.INFORMATION122
             ,P_DCL_ATTRIBUTE13      => r_DCL.INFORMATION123
             ,P_DCL_ATTRIBUTE14      => r_DCL.INFORMATION124
             ,P_DCL_ATTRIBUTE15      => r_DCL.INFORMATION125
             ,P_DCL_ATTRIBUTE16      => r_DCL.INFORMATION126
             ,P_DCL_ATTRIBUTE17      => r_DCL.INFORMATION127
             ,P_DCL_ATTRIBUTE18      => r_DCL.INFORMATION128
             ,P_DCL_ATTRIBUTE19      => r_DCL.INFORMATION129
             ,P_DCL_ATTRIBUTE2      => r_DCL.INFORMATION112
             ,P_DCL_ATTRIBUTE20      => r_DCL.INFORMATION130
             ,P_DCL_ATTRIBUTE21      => r_DCL.INFORMATION131
             ,P_DCL_ATTRIBUTE22      => r_DCL.INFORMATION132
             ,P_DCL_ATTRIBUTE23      => r_DCL.INFORMATION133
             ,P_DCL_ATTRIBUTE24      => r_DCL.INFORMATION134
             ,P_DCL_ATTRIBUTE25      => r_DCL.INFORMATION135
             ,P_DCL_ATTRIBUTE26      => r_DCL.INFORMATION136
             ,P_DCL_ATTRIBUTE27      => r_DCL.INFORMATION137
             ,P_DCL_ATTRIBUTE28      => r_DCL.INFORMATION138
             ,P_DCL_ATTRIBUTE29      => r_DCL.INFORMATION139
             ,P_DCL_ATTRIBUTE3      => r_DCL.INFORMATION113
             ,P_DCL_ATTRIBUTE30      => r_DCL.INFORMATION140
             ,P_DCL_ATTRIBUTE4      => r_DCL.INFORMATION114
             ,P_DCL_ATTRIBUTE5      => r_DCL.INFORMATION115
             ,P_DCL_ATTRIBUTE6      => r_DCL.INFORMATION116
             ,P_DCL_ATTRIBUTE7      => r_DCL.INFORMATION117
             ,P_DCL_ATTRIBUTE8      => r_DCL.INFORMATION118
             ,P_DCL_ATTRIBUTE9      => r_DCL.INFORMATION119
             ,P_DCL_ATTRIBUTE_CATEGORY      => r_DCL.INFORMATION110
             ,P_DPNT_CVRD_OTHR_PL_RT_ID      => l_dpnt_cvrd_othr_pl_rt_id
             ,P_EXCLD_FLAG      => r_DCL.INFORMATION11
             ,P_ORDR_NUM      => r_DCL.INFORMATION257
             ,P_PL_ID      => l_PL_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_dpnt_cvrd_othr_pl_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'DPNT_CVRD_OTHR_PL_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_DCL.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_DPNT_CVRD_OTHR_PL_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_DCL_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_DCL.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_DCL.information3,
               p_effective_start_date  => r_DCL.information2,
               p_dml_operation         => r_DCL.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_DPNT_CVRD_OTHR_PL_RT_ID   := r_DCL.information1;
             l_object_version_number := r_DCL.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_DPNT_CVRD_OTHR_PL_RT_F UPDATE_DPNT_CVRD_OTHR_PL_RT ',30);
           BEN_DPNT_CVRD_OTHR_PL_RT_API.UPDATE_DPNT_CVRD_OTHR_PL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_DET_DT_CD      => r_DCL.INFORMATION12
             ,P_DCL_ATTRIBUTE1      => r_DCL.INFORMATION111
             ,P_DCL_ATTRIBUTE10      => r_DCL.INFORMATION120
             ,P_DCL_ATTRIBUTE11      => r_DCL.INFORMATION121
             ,P_DCL_ATTRIBUTE12      => r_DCL.INFORMATION122
             ,P_DCL_ATTRIBUTE13      => r_DCL.INFORMATION123
             ,P_DCL_ATTRIBUTE14      => r_DCL.INFORMATION124
             ,P_DCL_ATTRIBUTE15      => r_DCL.INFORMATION125
             ,P_DCL_ATTRIBUTE16      => r_DCL.INFORMATION126
             ,P_DCL_ATTRIBUTE17      => r_DCL.INFORMATION127
             ,P_DCL_ATTRIBUTE18      => r_DCL.INFORMATION128
             ,P_DCL_ATTRIBUTE19      => r_DCL.INFORMATION129
             ,P_DCL_ATTRIBUTE2      => r_DCL.INFORMATION112
             ,P_DCL_ATTRIBUTE20      => r_DCL.INFORMATION130
             ,P_DCL_ATTRIBUTE21      => r_DCL.INFORMATION131
             ,P_DCL_ATTRIBUTE22      => r_DCL.INFORMATION132
             ,P_DCL_ATTRIBUTE23      => r_DCL.INFORMATION133
             ,P_DCL_ATTRIBUTE24      => r_DCL.INFORMATION134
             ,P_DCL_ATTRIBUTE25      => r_DCL.INFORMATION135
             ,P_DCL_ATTRIBUTE26      => r_DCL.INFORMATION136
             ,P_DCL_ATTRIBUTE27      => r_DCL.INFORMATION137
             ,P_DCL_ATTRIBUTE28      => r_DCL.INFORMATION138
             ,P_DCL_ATTRIBUTE29      => r_DCL.INFORMATION139
             ,P_DCL_ATTRIBUTE3      => r_DCL.INFORMATION113
             ,P_DCL_ATTRIBUTE30      => r_DCL.INFORMATION140
             ,P_DCL_ATTRIBUTE4      => r_DCL.INFORMATION114
             ,P_DCL_ATTRIBUTE5      => r_DCL.INFORMATION115
             ,P_DCL_ATTRIBUTE6      => r_DCL.INFORMATION116
             ,P_DCL_ATTRIBUTE7      => r_DCL.INFORMATION117
             ,P_DCL_ATTRIBUTE8      => r_DCL.INFORMATION118
             ,P_DCL_ATTRIBUTE9      => r_DCL.INFORMATION119
             ,P_DCL_ATTRIBUTE_CATEGORY      => r_DCL.INFORMATION110
             ,P_DPNT_CVRD_OTHR_PL_RT_ID      => l_dpnt_cvrd_othr_pl_rt_id
             ,P_EXCLD_FLAG      => r_DCL.INFORMATION11
             ,P_ORDR_NUM      => r_DCL.INFORMATION257
             ,P_PL_ID      => l_PL_ID
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_DCL.information3) then
             --
             BEN_DPNT_CVRD_OTHR_PL_RT_API.delete_DPNT_CVRD_OTHR_PL_RT(
                --
                p_validate                       => false
                ,p_dpnt_cvrd_othr_pl_rt_id                   => l_dpnt_cvrd_othr_pl_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'DCL',r_dcl.information5 );
    --
 end create_DCL_rows;

   ---------------------------------------------------------------
   ----------------------< create_TTP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_TTP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PRTT_DET_RL  number;
   l_VRBL_RT_PRFL_ID  number;
   l_PRTT_DET_CD      varchar2(100);
   l_EXCLD_FLAG      varchar2(100);
   l_MN_PRTT_NUM      number;
   l_MX_PRTT_NUM      number;
   l_NO_MN_PRTT_NUM_APLS_FLAG      varchar2(100);
   l_NO_MX_PRTT_NUM_APLS_FLAG      varchar2(100);
   --
   cursor c_unique_TTP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_TTL_PRTT_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_TTP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_TTP(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_TTP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     TTP.ttl_prtt_rt_id new_value
   from BEN_TTL_PRTT_RT_F TTP
   where
   TTP.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
   nvl(TTP.PRTT_DET_CD, '-YYYY') = nvl(l_PRTT_DET_CD, '-YYYY') and
   nvl(TTP.PRTT_DET_RL, -999) = nvl(l_PRTT_DET_RL , -999)and
   nvl(TTP.EXCLD_FLAG, '-YYYY') = nvl(l_EXCLD_FLAG, '-YYYY')     and
   nvl(TTP.MN_PRTT_NUM, -999) = nvl(l_MN_PRTT_NUM, -999) and
   nvl(TTP.MX_PRTT_NUM, -999) = nvl(l_MX_PRTT_NUM, -999) and
   nvl(TTP.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
   nvl(TTP.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
   TTP.business_group_id  = c_business_group_id
   and   TTP.ttl_prtt_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_TTL_PRTT_RT_F TTP1
                where
                TTP1.VRBL_RT_PRFL_ID   = l_VRBL_RT_PRFL_ID  and
   nvl(TTP1.PRTT_DET_CD, '-YYYY') = nvl(l_PRTT_DET_CD, '-YYYY') and
   nvl(TTP1.PRTT_DET_RL, -999) = nvl(l_PRTT_DET_RL , -999)and
   nvl(TTP1.EXCLD_FLAG, '-YYYY') = nvl(l_EXCLD_FLAG, '-YYYY')     and
   nvl(TTP1.MN_PRTT_NUM, -999) = nvl(l_MN_PRTT_NUM, -999) and
   nvl(TTP1.MX_PRTT_NUM, -999) = nvl(l_MX_PRTT_NUM, -999) and
   nvl(TTP1.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
   nvl(TTP1.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
                TTP1.business_group_id  = c_business_group_id
                and   TTP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_TTL_PRTT_RT_F TTP2
                where
                TTP2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
   nvl(TTP2.PRTT_DET_CD, '-YYYY') = nvl(l_PRTT_DET_CD, '-YYYY') and
   nvl(TTP2.PRTT_DET_RL, -999) = nvl(l_PRTT_DET_RL , -999)and
   nvl(TTP2.EXCLD_FLAG, '-YYYY') = nvl(l_EXCLD_FLAG, '-YYYY')     and
   nvl(TTP2.MN_PRTT_NUM, -999) = nvl(l_MN_PRTT_NUM, -999) and
   nvl(TTP2.MX_PRTT_NUM, -999) = nvl(l_MX_PRTT_NUM, -999) and
   nvl(TTP2.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
   nvl(TTP2.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
                TTP2.business_group_id  = c_business_group_id
                and   TTP2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_TTP                     c_TTP%rowtype;
   l_ttl_prtt_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_TTP_unique in c_unique_TTP('TTP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_TTP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_TTP_unique.table_route_id '||r_TTP_unique.table_route_id,10);
       hr_utility.set_location(' r_TTP_unique.information1 '||r_TTP_unique.information1,10);
       hr_utility.set_location( 'r_TTP_unique.information2 '||r_TTP_unique.information2,10);
       hr_utility.set_location( 'r_TTP_unique.information3 '||r_TTP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_TTP_min_max_dates(r_TTP_unique.table_route_id, r_TTP_unique.information1 ) ;
       fetch c_TTP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_TTP_unique.information2);
       open c_TTP(r_TTP_unique.table_route_id,
                r_TTP_unique.information1,
                r_TTP_unique.information2,
                r_TTP_unique.information3 ) ;
       --
       fetch c_TTP into r_TTP ;
       --
       close c_TTP ;
       --
       l_PRTT_DET_RL := get_fk('FORMULA_ID', r_TTP.information264,r_TTP_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_TTP.information262,r_TTP_unique.dml_operation);
       l_EXCLD_FLAG     :=  r_TTP.information11;
       l_MN_PRTT_NUM    := r_TTP.information261;
       l_MX_PRTT_NUM    := r_TTP.information263;
       l_NO_MN_PRTT_NUM_APLS_FLAG      := r_TTP.information12;
       l_NO_MX_PRTT_NUM_APLS_FLAG      := r_TTP.information13;
       -- l_ORDR_NUM      := r_TTP.information260;
       l_PRTT_DET_CD      := r_TTP.information14;
       --
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_TTP_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_TTP_unique.information2 and r_TTP_unique.information3 then
               l_update := true;
               if r_TTP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'TTL_PRTT_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'TTL_PRTT_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_TTP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_TTP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_TTP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('TTP',l_new_value,l_prefix || r_TTP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_TTP_min_max_dates%found then
           -- cursor to find the object
           open c_find_TTP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ttl_prtt_rt_id, -999)  ) ;
           fetch c_find_TTP_in_target into l_new_value ;
           if c_find_TTP_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_TTL_PRTT_RT_F',
                  p_base_key_column => 'TTL_PRTT_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_TTP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'TTL_PRTT_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'TTL_PRTT_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_TTP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_TTP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_TTP_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_TTP_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_TTP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_TTP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_TTL_PRTT_RT_F CREATE_TTL_PRTT_RT ',20);
           BEN_TTL_PRTT_RT_API.CREATE_TTL_PRTT_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_TTP.INFORMATION11
             ,P_MN_PRTT_NUM      => r_TTP.INFORMATION261
             ,P_MX_PRTT_NUM      => r_TTP.INFORMATION263
             ,P_NO_MN_PRTT_NUM_APLS_FLAG      => r_TTP.INFORMATION12
             ,P_NO_MX_PRTT_NUM_APLS_FLAG      => r_TTP.INFORMATION13
             ,P_ORDR_NUM      => r_TTP.INFORMATION260
             ,P_PRTT_DET_CD      => r_TTP.INFORMATION14
             ,P_PRTT_DET_RL      => l_PRTT_DET_RL
             ,P_TTL_PRTT_RT_ID      => l_ttl_prtt_rt_id
             ,P_TTP_ATTRIBUTE1      => r_TTP.INFORMATION111
             ,P_TTP_ATTRIBUTE10      => r_TTP.INFORMATION120
             ,P_TTP_ATTRIBUTE11      => r_TTP.INFORMATION121
             ,P_TTP_ATTRIBUTE12      => r_TTP.INFORMATION122
             ,P_TTP_ATTRIBUTE13      => r_TTP.INFORMATION123
             ,P_TTP_ATTRIBUTE14      => r_TTP.INFORMATION124
             ,P_TTP_ATTRIBUTE15      => r_TTP.INFORMATION125
             ,P_TTP_ATTRIBUTE16      => r_TTP.INFORMATION126
             ,P_TTP_ATTRIBUTE17      => r_TTP.INFORMATION127
             ,P_TTP_ATTRIBUTE18      => r_TTP.INFORMATION128
             ,P_TTP_ATTRIBUTE19      => r_TTP.INFORMATION129
             ,P_TTP_ATTRIBUTE2      => r_TTP.INFORMATION112
             ,P_TTP_ATTRIBUTE20      => r_TTP.INFORMATION130
             ,P_TTP_ATTRIBUTE21      => r_TTP.INFORMATION131
             ,P_TTP_ATTRIBUTE22      => r_TTP.INFORMATION132
             ,P_TTP_ATTRIBUTE23      => r_TTP.INFORMATION133
             ,P_TTP_ATTRIBUTE24      => r_TTP.INFORMATION134
             ,P_TTP_ATTRIBUTE25      => r_TTP.INFORMATION135
             ,P_TTP_ATTRIBUTE26      => r_TTP.INFORMATION136
             ,P_TTP_ATTRIBUTE27      => r_TTP.INFORMATION137
             ,P_TTP_ATTRIBUTE28      => r_TTP.INFORMATION138
             ,P_TTP_ATTRIBUTE29      => r_TTP.INFORMATION139
             ,P_TTP_ATTRIBUTE3      => r_TTP.INFORMATION113
             ,P_TTP_ATTRIBUTE30      => r_TTP.INFORMATION140
             ,P_TTP_ATTRIBUTE4      => r_TTP.INFORMATION114
             ,P_TTP_ATTRIBUTE5      => r_TTP.INFORMATION115
             ,P_TTP_ATTRIBUTE6      => r_TTP.INFORMATION116
             ,P_TTP_ATTRIBUTE7      => r_TTP.INFORMATION117
             ,P_TTP_ATTRIBUTE8      => r_TTP.INFORMATION118
             ,P_TTP_ATTRIBUTE9      => r_TTP.INFORMATION119
             ,P_TTP_ATTRIBUTE_CATEGORY      => r_TTP.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ttl_prtt_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'TTL_PRTT_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_TTP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_TTL_PRTT_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_TTP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_TTP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_TTP.information3,
               p_effective_start_date  => r_TTP.information2,
               p_dml_operation         => r_TTP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_TTL_PRTT_RT_ID   := r_TTP.information1;
             l_object_version_number := r_TTP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_TTL_PRTT_RT_F UPDATE_TTL_PRTT_RT ',30);
           BEN_TTL_PRTT_RT_API.UPDATE_TTL_PRTT_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_TTP.INFORMATION11
             ,P_MN_PRTT_NUM      => r_TTP.INFORMATION261
             ,P_MX_PRTT_NUM      => r_TTP.INFORMATION263
             ,P_NO_MN_PRTT_NUM_APLS_FLAG      => r_TTP.INFORMATION12
             ,P_NO_MX_PRTT_NUM_APLS_FLAG      => r_TTP.INFORMATION13
             ,P_ORDR_NUM      => r_TTP.INFORMATION260
             ,P_PRTT_DET_CD      => r_TTP.INFORMATION14
             ,P_PRTT_DET_RL      => l_PRTT_DET_RL
             ,P_TTL_PRTT_RT_ID      => l_ttl_prtt_rt_id
             ,P_TTP_ATTRIBUTE1      => r_TTP.INFORMATION111
             ,P_TTP_ATTRIBUTE10      => r_TTP.INFORMATION120
             ,P_TTP_ATTRIBUTE11      => r_TTP.INFORMATION121
             ,P_TTP_ATTRIBUTE12      => r_TTP.INFORMATION122
             ,P_TTP_ATTRIBUTE13      => r_TTP.INFORMATION123
             ,P_TTP_ATTRIBUTE14      => r_TTP.INFORMATION124
             ,P_TTP_ATTRIBUTE15      => r_TTP.INFORMATION125
             ,P_TTP_ATTRIBUTE16      => r_TTP.INFORMATION126
             ,P_TTP_ATTRIBUTE17      => r_TTP.INFORMATION127
             ,P_TTP_ATTRIBUTE18      => r_TTP.INFORMATION128
             ,P_TTP_ATTRIBUTE19      => r_TTP.INFORMATION129
             ,P_TTP_ATTRIBUTE2      => r_TTP.INFORMATION112
             ,P_TTP_ATTRIBUTE20      => r_TTP.INFORMATION130
             ,P_TTP_ATTRIBUTE21      => r_TTP.INFORMATION131
             ,P_TTP_ATTRIBUTE22      => r_TTP.INFORMATION132
             ,P_TTP_ATTRIBUTE23      => r_TTP.INFORMATION133
             ,P_TTP_ATTRIBUTE24      => r_TTP.INFORMATION134
             ,P_TTP_ATTRIBUTE25      => r_TTP.INFORMATION135
             ,P_TTP_ATTRIBUTE26      => r_TTP.INFORMATION136
             ,P_TTP_ATTRIBUTE27      => r_TTP.INFORMATION137
             ,P_TTP_ATTRIBUTE28      => r_TTP.INFORMATION138
             ,P_TTP_ATTRIBUTE29      => r_TTP.INFORMATION139
             ,P_TTP_ATTRIBUTE3      => r_TTP.INFORMATION113
             ,P_TTP_ATTRIBUTE30      => r_TTP.INFORMATION140
             ,P_TTP_ATTRIBUTE4      => r_TTP.INFORMATION114
             ,P_TTP_ATTRIBUTE5      => r_TTP.INFORMATION115
             ,P_TTP_ATTRIBUTE6      => r_TTP.INFORMATION116
             ,P_TTP_ATTRIBUTE7      => r_TTP.INFORMATION117
             ,P_TTP_ATTRIBUTE8      => r_TTP.INFORMATION118
             ,P_TTP_ATTRIBUTE9      => r_TTP.INFORMATION119
             ,P_TTP_ATTRIBUTE_CATEGORY      => r_TTP.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_TTP.information3) then
             --
             BEN_TTL_PRTT_RT_API.delete_TTL_PRTT_RT(
                --
                p_validate                       => false
                ,p_ttl_prtt_rt_id                   => l_ttl_prtt_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'TTP',r_ttp.information5 );
    --
 end create_TTP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_TCV_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_TCV_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CVG_VOL_DET_RL  number;
   l_VRBL_RT_PRFL_ID  number;
   l_CVG_VOL_DET_CD      varchar2(100);
   l_EXCLD_FLAG      varchar2(100);
   l_MN_CVG_VOL_AMT      number;
   l_MX_CVG_VOL_AMT      number;
   l_NO_MN_CVG_VOL_AMT_APLS_FLAG      varchar2(100);
   l_NO_MX_CVG_VOL_AMT_APLS_FLAG      varchar2(100);
   --
   cursor c_unique_TCV(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_TTL_CVG_VOL_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_TCV_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_TCV(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_TCV_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     TCV.ttl_cvg_vol_rt_id new_value
   from BEN_TTL_CVG_VOL_RT_F TCV
   where
   TCV.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
   nvl(TCV.CVG_VOL_DET_CD, '-YYYY') = nvl(l_CVG_VOL_DET_CD, '-YYYY') and
   nvl(TCV.CVG_VOL_DET_RL, -999) = nvl(l_CVG_VOL_DET_RL , -999)and
   nvl(TCV.EXCLD_FLAG, '-YYYY') = nvl(l_EXCLD_FLAG, '-YYYY')     and
   nvl(TCV.MN_CVG_VOL_AMT, -999) = nvl(l_MN_CVG_VOL_AMT, -999) and
   nvl(TCV.MX_CVG_VOL_AMT, -999) = nvl(l_MX_CVG_VOL_AMT, -999) and
   nvl(TCV.NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
   nvl(TCV.NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
   TCV.business_group_id  = c_business_group_id
   and   TCV.ttl_cvg_vol_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_TTL_CVG_VOL_RT_F TCV1
                where
                TCV1.VRBL_RT_PRFL_ID  = l_VRBL_RT_PRFL_ID  and
                nvl(TCV1.CVG_VOL_DET_CD, '-YYYY') = nvl(l_CVG_VOL_DET_CD, '-YYYY') and
                nvl(TCV1.CVG_VOL_DET_RL, -999) = nvl(l_CVG_VOL_DET_RL , -999)and
                nvl(TCV1.EXCLD_FLAG, '-YYYY') = nvl(l_EXCLD_FLAG, '-YYYY')     and
                nvl(TCV1.MN_CVG_VOL_AMT, -999) = nvl(l_MN_CVG_VOL_AMT, -999) and
                nvl(TCV1.MX_CVG_VOL_AMT, -999) = nvl(l_MX_CVG_VOL_AMT, -999) and
                nvl(TCV1.NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
                nvl(TCV1.NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
                TCV1.business_group_id  = c_business_group_id
                and   TCV1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_TTL_CVG_VOL_RT_F TCV2
                where
                TCV2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                nvl(TCV2.CVG_VOL_DET_CD, '-YYYY') = nvl(l_CVG_VOL_DET_CD, '-YYYY') and
                nvl(TCV2.CVG_VOL_DET_RL, -999) = nvl(l_CVG_VOL_DET_RL , -999)and
                nvl(TCV2.EXCLD_FLAG, '-YYYY') = nvl(l_EXCLD_FLAG, '-YYYY')     and
                nvl(TCV2.MN_CVG_VOL_AMT, -999) = nvl(l_MN_CVG_VOL_AMT, -999) and
                nvl(TCV2.MX_CVG_VOL_AMT, -999) = nvl(l_MX_CVG_VOL_AMT, -999) and
                nvl(TCV2.NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
                nvl(TCV2.NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
                TCV2.business_group_id  = c_business_group_id
                and   TCV2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_TCV                     c_TCV%rowtype;
   l_ttl_cvg_vol_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_TCV_unique in c_unique_TCV('TCV') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_TCV_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_TCV_unique.table_route_id '||r_TCV_unique.table_route_id,10);
       hr_utility.set_location(' r_TCV_unique.information1 '||r_TCV_unique.information1,10);
       hr_utility.set_location( 'r_TCV_unique.information2 '||r_TCV_unique.information2,10);
       hr_utility.set_location( 'r_TCV_unique.information3 '||r_TCV_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_TCV_min_max_dates(r_TCV_unique.table_route_id, r_TCV_unique.information1 ) ;
       fetch c_TCV_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_TCV_unique.information2);
       open c_TCV(r_TCV_unique.table_route_id,
                r_TCV_unique.information1,
                r_TCV_unique.information2,
                r_TCV_unique.information3 ) ;
       --
       fetch c_TCV into r_TCV ;
       --
       close c_TCV ;
       --
       l_CVG_VOL_DET_RL := get_fk('FORMULA_ID', r_TCV.information261,r_TCV_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_TCV.information262,r_TCV_unique.dml_operation);
       l_CVG_VOL_DET_CD      :=  r_TCV.information14;
       l_EXCLD_FLAG      :=  r_TCV.information11;
       l_MN_CVG_VOL_AMT      :=  r_TCV.information293;
       l_MX_CVG_VOL_AMT      :=  r_TCV.information294;
       l_NO_MN_CVG_VOL_AMT_APLS_FLAG      :=  r_TCV.information12;
       l_NO_MX_CVG_VOL_AMT_APLS_FLAG      :=  r_TCV.information13;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_TCV_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_TCV_unique.information2 and r_TCV_unique.information3 then
               l_update := true;
               if r_TCV_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'TTL_CVG_VOL_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'TTL_CVG_VOL_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_TCV_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_TCV_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_TCV_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('TCV',l_new_value,l_prefix || r_TCV_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_TCV_min_max_dates%found then
           -- cursor to find the object
           open c_find_TCV_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ttl_cvg_vol_rt_id, -999)  ) ;
           fetch c_find_TCV_in_target into l_new_value ;
           if c_find_TCV_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_TTL_CVG_VOL_RT_F',
                  p_base_key_column => 'TTL_CVG_VOL_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_TCV_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'TTL_CVG_VOL_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'TTL_CVG_VOL_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_TCV_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_TCV_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_TCV_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_TCV_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_TCV.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_TCV.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_TTL_CVG_VOL_RT_F CREATE_TTL_CVG_VOL_RT ',20);
           BEN_TTL_CVG_VOL_RT_API.CREATE_TTL_CVG_VOL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_VOL_DET_CD      => r_TCV.INFORMATION14
             ,P_CVG_VOL_DET_RL      => l_CVG_VOL_DET_RL
             ,P_EXCLD_FLAG      => r_TCV.INFORMATION11
             ,P_MN_CVG_VOL_AMT      => r_TCV.INFORMATION293
             ,P_MX_CVG_VOL_AMT      => r_TCV.INFORMATION294
             ,P_NO_MN_CVG_VOL_AMT_APLS_FLAG      => r_TCV.INFORMATION12
             ,P_NO_MX_CVG_VOL_AMT_APLS_FLAG      => r_TCV.INFORMATION13
             ,P_ORDR_NUM      => r_TCV.INFORMATION260
             ,P_TCV_ATTRIBUTE1      => r_TCV.INFORMATION111
             ,P_TCV_ATTRIBUTE10      => r_TCV.INFORMATION120
             ,P_TCV_ATTRIBUTE11      => r_TCV.INFORMATION121
             ,P_TCV_ATTRIBUTE12      => r_TCV.INFORMATION122
             ,P_TCV_ATTRIBUTE13      => r_TCV.INFORMATION123
             ,P_TCV_ATTRIBUTE14      => r_TCV.INFORMATION124
             ,P_TCV_ATTRIBUTE15      => r_TCV.INFORMATION125
             ,P_TCV_ATTRIBUTE16      => r_TCV.INFORMATION126
             ,P_TCV_ATTRIBUTE17      => r_TCV.INFORMATION127
             ,P_TCV_ATTRIBUTE18      => r_TCV.INFORMATION128
             ,P_TCV_ATTRIBUTE19      => r_TCV.INFORMATION129
             ,P_TCV_ATTRIBUTE2      => r_TCV.INFORMATION112
             ,P_TCV_ATTRIBUTE20      => r_TCV.INFORMATION130
             ,P_TCV_ATTRIBUTE21      => r_TCV.INFORMATION131
             ,P_TCV_ATTRIBUTE22      => r_TCV.INFORMATION132
             ,P_TCV_ATTRIBUTE23      => r_TCV.INFORMATION133
             ,P_TCV_ATTRIBUTE24      => r_TCV.INFORMATION134
             ,P_TCV_ATTRIBUTE25      => r_TCV.INFORMATION135
             ,P_TCV_ATTRIBUTE26      => r_TCV.INFORMATION136
             ,P_TCV_ATTRIBUTE27      => r_TCV.INFORMATION137
             ,P_TCV_ATTRIBUTE28      => r_TCV.INFORMATION138
             ,P_TCV_ATTRIBUTE29      => r_TCV.INFORMATION139
             ,P_TCV_ATTRIBUTE3      => r_TCV.INFORMATION113
             ,P_TCV_ATTRIBUTE30      => r_TCV.INFORMATION140
             ,P_TCV_ATTRIBUTE4      => r_TCV.INFORMATION114
             ,P_TCV_ATTRIBUTE5      => r_TCV.INFORMATION115
             ,P_TCV_ATTRIBUTE6      => r_TCV.INFORMATION116
             ,P_TCV_ATTRIBUTE7      => r_TCV.INFORMATION117
             ,P_TCV_ATTRIBUTE8      => r_TCV.INFORMATION118
             ,P_TCV_ATTRIBUTE9      => r_TCV.INFORMATION119
             ,P_TCV_ATTRIBUTE_CATEGORY      => r_TCV.INFORMATION110
             ,P_TTL_CVG_VOL_RT_ID      => l_ttl_cvg_vol_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ttl_cvg_vol_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'TTL_CVG_VOL_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_TCV.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_TTL_CVG_VOL_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_TCV_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_TCV.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_TCV.information3,
               p_effective_start_date  => r_TCV.information2,
               p_dml_operation         => r_TCV.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_TTL_CVG_VOL_RT_ID   := r_TCV.information1;
             l_object_version_number := r_TCV.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_TTL_CVG_VOL_RT_F UPDATE_TTL_CVG_VOL_RT ',30);
           BEN_TTL_CVG_VOL_RT_API.UPDATE_TTL_CVG_VOL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_VOL_DET_CD      => r_TCV.INFORMATION14
             ,P_CVG_VOL_DET_RL      => l_CVG_VOL_DET_RL
             ,P_EXCLD_FLAG      => r_TCV.INFORMATION11
             ,P_MN_CVG_VOL_AMT      => r_TCV.INFORMATION293
             ,P_MX_CVG_VOL_AMT      => r_TCV.INFORMATION294
             ,P_NO_MN_CVG_VOL_AMT_APLS_FLAG      => r_TCV.INFORMATION12
             ,P_NO_MX_CVG_VOL_AMT_APLS_FLAG      => r_TCV.INFORMATION13
             ,P_ORDR_NUM      => r_TCV.INFORMATION260
             ,P_TCV_ATTRIBUTE1      => r_TCV.INFORMATION111
             ,P_TCV_ATTRIBUTE10      => r_TCV.INFORMATION120
             ,P_TCV_ATTRIBUTE11      => r_TCV.INFORMATION121
             ,P_TCV_ATTRIBUTE12      => r_TCV.INFORMATION122
             ,P_TCV_ATTRIBUTE13      => r_TCV.INFORMATION123
             ,P_TCV_ATTRIBUTE14      => r_TCV.INFORMATION124
             ,P_TCV_ATTRIBUTE15      => r_TCV.INFORMATION125
             ,P_TCV_ATTRIBUTE16      => r_TCV.INFORMATION126
             ,P_TCV_ATTRIBUTE17      => r_TCV.INFORMATION127
             ,P_TCV_ATTRIBUTE18      => r_TCV.INFORMATION128
             ,P_TCV_ATTRIBUTE19      => r_TCV.INFORMATION129
             ,P_TCV_ATTRIBUTE2      => r_TCV.INFORMATION112
             ,P_TCV_ATTRIBUTE20      => r_TCV.INFORMATION130
             ,P_TCV_ATTRIBUTE21      => r_TCV.INFORMATION131
             ,P_TCV_ATTRIBUTE22      => r_TCV.INFORMATION132
             ,P_TCV_ATTRIBUTE23      => r_TCV.INFORMATION133
             ,P_TCV_ATTRIBUTE24      => r_TCV.INFORMATION134
             ,P_TCV_ATTRIBUTE25      => r_TCV.INFORMATION135
             ,P_TCV_ATTRIBUTE26      => r_TCV.INFORMATION136
             ,P_TCV_ATTRIBUTE27      => r_TCV.INFORMATION137
             ,P_TCV_ATTRIBUTE28      => r_TCV.INFORMATION138
             ,P_TCV_ATTRIBUTE29      => r_TCV.INFORMATION139
             ,P_TCV_ATTRIBUTE3      => r_TCV.INFORMATION113
             ,P_TCV_ATTRIBUTE30      => r_TCV.INFORMATION140
             ,P_TCV_ATTRIBUTE4      => r_TCV.INFORMATION114
             ,P_TCV_ATTRIBUTE5      => r_TCV.INFORMATION115
             ,P_TCV_ATTRIBUTE6      => r_TCV.INFORMATION116
             ,P_TCV_ATTRIBUTE7      => r_TCV.INFORMATION117
             ,P_TCV_ATTRIBUTE8      => r_TCV.INFORMATION118
             ,P_TCV_ATTRIBUTE9      => r_TCV.INFORMATION119
             ,P_TCV_ATTRIBUTE_CATEGORY      => r_TCV.INFORMATION110
             ,P_TTL_CVG_VOL_RT_ID      => l_ttl_cvg_vol_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_TCV.information3) then
             --
             BEN_TTL_CVG_VOL_RT_API.delete_TTL_CVG_VOL_RT(
                --
                p_validate                       => false
                ,p_ttl_cvg_vol_rt_id                   => l_ttl_cvg_vol_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'TCV',r_tcv.information5 );
    --
 end create_TCV_rows;

   ---------------------------------------------------------------
   ----------------------< create_VPR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_VPR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_FORMULA_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_VPR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_VRBL_RT_PRFL_RL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_VPR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_VPR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_VPR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     VPR.vrbl_rt_prfl_rl_id new_value
   from BEN_VRBL_RT_PRFL_RL_F VPR
   where
   nvl(VPR.FORMULA_ID,-999)     = nvl(l_FORMULA_ID,-999)  and
   VPR.VRBL_RT_PRFL_ID   = l_VRBL_RT_PRFL_ID  and
   VPR.business_group_id  = c_business_group_id
   and   VPR.vrbl_rt_prfl_rl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_VRBL_RT_PRFL_RL_F VPR1
                where
                nvl(VPR1.FORMULA_ID,-999)     = nvl(l_FORMULA_ID,-999)  and
                VPR1.VRBL_RT_PRFL_ID   = l_VRBL_RT_PRFL_ID  and
                VPR1.business_group_id  = c_business_group_id
                and   VPR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_VRBL_RT_PRFL_RL_F VPR2
                where
                nvl(VPR2.FORMULA_ID,-999)     = nvl(l_FORMULA_ID,-999)  and
                VPR2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                VPR2.business_group_id  = c_business_group_id
                and   VPR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_VPR                     c_VPR%rowtype;
   l_vrbl_rt_prfl_rl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_VPR_unique in c_unique_VPR('VPR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_VPR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_VPR_unique.table_route_id '||r_VPR_unique.table_route_id,10);
       hr_utility.set_location(' r_VPR_unique.information1 '||r_VPR_unique.information1,10);
       hr_utility.set_location( 'r_VPR_unique.information2 '||r_VPR_unique.information2,10);
       hr_utility.set_location( 'r_VPR_unique.information3 '||r_VPR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_VPR_min_max_dates(r_VPR_unique.table_route_id, r_VPR_unique.information1 ) ;
       fetch c_VPR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_VPR_unique.information2);
       open c_VPR(r_VPR_unique.table_route_id,
                r_VPR_unique.information1,
                r_VPR_unique.information2,
                r_VPR_unique.information3 ) ;
       --
       fetch c_VPR into r_VPR ;
       --
       close c_VPR ;
       --
       l_FORMULA_ID := get_fk('FORMULA_ID', r_VPR.information251,r_VPR_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_VPR.information262,r_VPR_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_VPR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_VPR_unique.information2 and r_VPR_unique.information3 then
               l_update := true;
               if r_VPR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'VRBL_RT_PRFL_RL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'VRBL_RT_PRFL_RL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_VPR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_VPR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_VPR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('VPR',l_new_value,l_prefix || r_VPR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_VPR_min_max_dates%found then
           -- cursor to find the object
           open c_find_VPR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_vrbl_rt_prfl_rl_id, -999)  ) ;
           fetch c_find_VPR_in_target into l_new_value ;
           if c_find_VPR_in_target%found then
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_VRBL_RT_PRFL_RL_F',
                  p_base_key_column => 'VRBL_RT_PRFL_RL_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             --
             if r_VPR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'VRBL_RT_PRFL_RL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'VRBL_RT_PRFL_RL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_VPR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_VPR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_VPR_in_target ;
         --
         end if;
       end if ;
       --
       end if ;
       close c_VPR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_VPR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_VPR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_VRBL_RT_PRFL_RL_F CREATE_VRBL_RT_PRFL_RULE ',20);
           BEN_VRBL_RT_PRFL_RULE_API.CREATE_VRBL_RT_PRFL_RULE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DRVBL_FCTR_APLS_FLAG      => r_VPR.INFORMATION11
             ,P_FORMULA_ID      => l_FORMULA_ID
             ,P_ORDR_TO_APLY_NUM      => r_VPR.INFORMATION260
             ,P_VPR_ATTRIBUTE1      => r_VPR.INFORMATION111
             ,P_VPR_ATTRIBUTE10      => r_VPR.INFORMATION120
             ,P_VPR_ATTRIBUTE11      => r_VPR.INFORMATION121
             ,P_VPR_ATTRIBUTE12      => r_VPR.INFORMATION122
             ,P_VPR_ATTRIBUTE13      => r_VPR.INFORMATION123
             ,P_VPR_ATTRIBUTE14      => r_VPR.INFORMATION124
             ,P_VPR_ATTRIBUTE15      => r_VPR.INFORMATION125
             ,P_VPR_ATTRIBUTE16      => r_VPR.INFORMATION126
             ,P_VPR_ATTRIBUTE17      => r_VPR.INFORMATION127
             ,P_VPR_ATTRIBUTE18      => r_VPR.INFORMATION128
             ,P_VPR_ATTRIBUTE19      => r_VPR.INFORMATION129
             ,P_VPR_ATTRIBUTE2      => r_VPR.INFORMATION112
             ,P_VPR_ATTRIBUTE20      => r_VPR.INFORMATION130
             ,P_VPR_ATTRIBUTE21      => r_VPR.INFORMATION131
             ,P_VPR_ATTRIBUTE22      => r_VPR.INFORMATION132
             ,P_VPR_ATTRIBUTE23      => r_VPR.INFORMATION133
             ,P_VPR_ATTRIBUTE24      => r_VPR.INFORMATION134
             ,P_VPR_ATTRIBUTE25      => r_VPR.INFORMATION135
             ,P_VPR_ATTRIBUTE26      => r_VPR.INFORMATION136
             ,P_VPR_ATTRIBUTE27      => r_VPR.INFORMATION137
             ,P_VPR_ATTRIBUTE28      => r_VPR.INFORMATION138
             ,P_VPR_ATTRIBUTE29      => r_VPR.INFORMATION139
             ,P_VPR_ATTRIBUTE3      => r_VPR.INFORMATION113
             ,P_VPR_ATTRIBUTE30      => r_VPR.INFORMATION140
             ,P_VPR_ATTRIBUTE4      => r_VPR.INFORMATION114
             ,P_VPR_ATTRIBUTE5      => r_VPR.INFORMATION115
             ,P_VPR_ATTRIBUTE6      => r_VPR.INFORMATION116
             ,P_VPR_ATTRIBUTE7      => r_VPR.INFORMATION117
             ,P_VPR_ATTRIBUTE8      => r_VPR.INFORMATION118
             ,P_VPR_ATTRIBUTE9      => r_VPR.INFORMATION119
             ,P_VPR_ATTRIBUTE_CATEGORY      => r_VPR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             ,P_VRBL_RT_PRFL_RL_ID      => l_vrbl_rt_prfl_rl_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_vrbl_rt_prfl_rl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'VRBL_RT_PRFL_RL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_VPR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_VRBL_RT_PRFL_RL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_VPR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_VPR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_VPR.information3,
               p_effective_start_date  => r_VPR.information2,
               p_dml_operation         => r_VPR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_VRBL_RT_PRFL_RL_ID   := r_VPR.information1;
             l_object_version_number := r_VPR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_VRBL_RT_PRFL_RL_F UPDATE_VRBL_RT_PRFL_RULE ',30);
           BEN_VRBL_RT_PRFL_RULE_API.UPDATE_VRBL_RT_PRFL_RULE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DRVBL_FCTR_APLS_FLAG      => r_VPR.INFORMATION11
             ,P_FORMULA_ID      => l_FORMULA_ID
             ,P_ORDR_TO_APLY_NUM      => r_VPR.INFORMATION260
             ,P_VPR_ATTRIBUTE1      => r_VPR.INFORMATION111
             ,P_VPR_ATTRIBUTE10      => r_VPR.INFORMATION120
             ,P_VPR_ATTRIBUTE11      => r_VPR.INFORMATION121
             ,P_VPR_ATTRIBUTE12      => r_VPR.INFORMATION122
             ,P_VPR_ATTRIBUTE13      => r_VPR.INFORMATION123
             ,P_VPR_ATTRIBUTE14      => r_VPR.INFORMATION124
             ,P_VPR_ATTRIBUTE15      => r_VPR.INFORMATION125
             ,P_VPR_ATTRIBUTE16      => r_VPR.INFORMATION126
             ,P_VPR_ATTRIBUTE17      => r_VPR.INFORMATION127
             ,P_VPR_ATTRIBUTE18      => r_VPR.INFORMATION128
             ,P_VPR_ATTRIBUTE19      => r_VPR.INFORMATION129
             ,P_VPR_ATTRIBUTE2      => r_VPR.INFORMATION112
             ,P_VPR_ATTRIBUTE20      => r_VPR.INFORMATION130
             ,P_VPR_ATTRIBUTE21      => r_VPR.INFORMATION131
             ,P_VPR_ATTRIBUTE22      => r_VPR.INFORMATION132
             ,P_VPR_ATTRIBUTE23      => r_VPR.INFORMATION133
             ,P_VPR_ATTRIBUTE24      => r_VPR.INFORMATION134
             ,P_VPR_ATTRIBUTE25      => r_VPR.INFORMATION135
             ,P_VPR_ATTRIBUTE26      => r_VPR.INFORMATION136
             ,P_VPR_ATTRIBUTE27      => r_VPR.INFORMATION137
             ,P_VPR_ATTRIBUTE28      => r_VPR.INFORMATION138
             ,P_VPR_ATTRIBUTE29      => r_VPR.INFORMATION139
             ,P_VPR_ATTRIBUTE3      => r_VPR.INFORMATION113
             ,P_VPR_ATTRIBUTE30      => r_VPR.INFORMATION140
             ,P_VPR_ATTRIBUTE4      => r_VPR.INFORMATION114
             ,P_VPR_ATTRIBUTE5      => r_VPR.INFORMATION115
             ,P_VPR_ATTRIBUTE6      => r_VPR.INFORMATION116
             ,P_VPR_ATTRIBUTE7      => r_VPR.INFORMATION117
             ,P_VPR_ATTRIBUTE8      => r_VPR.INFORMATION118
             ,P_VPR_ATTRIBUTE9      => r_VPR.INFORMATION119
             ,P_VPR_ATTRIBUTE_CATEGORY      => r_VPR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             ,P_VRBL_RT_PRFL_RL_ID      => l_vrbl_rt_prfl_rl_id
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_VPR.information3) then
             --
             BEN_VRBL_RT_PRFL_RULE_API.delete_VRBL_RT_PRFL_RULE(
                --
                p_validate                       => false
                ,p_vrbl_rt_prfl_rl_id                   => l_vrbl_rt_prfl_rl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'VPR',r_vpr.information5 );
    --
 end create_VPR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PRT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PRT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_RNDG_RL  number;
   l_VRBL_RT_PRFL_ID  number;
   l_MN_POE_NUM      number;
   l_MX_POE_NUM      number;
   l_NO_MN_POE_FLAG      varchar2(100);
   l_NO_MX_POE_FLAG      varchar2(100);
   l_POE_NNMNTRY_UOM      varchar2(100);
   l_RNDG_CD      varchar2(100);
   cursor c_unique_PRT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_POE_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PRT_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PRT(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PRT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PRT.poe_rt_id new_value
   from BEN_POE_RT_F PRT
   where
   PRT.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   nvl(PRT.RNDG_CD, 'YYYY')          = nvl(l_RNDG_CD, 'YYYY')          and
   nvl(PRT.RNDG_RL, -9999)          = nvl(l_RNDG_RL, -9999)          and
   nvl(PRT.POE_NNMNTRY_UOM, 'YYYY')  = nvl(l_POE_NNMNTRY_UOM, 'YYYY')  and
   nvl(PRT.NO_MX_POE_FLAG, 'YYYY')   = nvl(l_NO_MX_POE_FLAG, 'YYYY')   and
   nvl(PRT.NO_MN_POE_FLAG, 'YYYY')   = nvl(l_NO_MN_POE_FLAG, 'YYYY')   and
   nvl(PRT.MX_POE_NUM, -9999)       = nvl(l_MX_POE_NUM, -9999)       and
   nvl(PRT.MN_POE_NUM, -9999)       = nvl(l_MN_POE_NUM, -9999)       and
   PRT.business_group_id  = c_business_group_id
   and   PRT.poe_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_POE_RT_F PRT1
                where
                PRT1.VRBL_RT_PRFL_ID  = l_VRBL_RT_PRFL_ID  and
                nvl(PRT1.RNDG_CD, 'YYYY')          = nvl(l_RNDG_CD, 'YYYY')          and
                nvl(PRT1.RNDG_RL, -9999)          = nvl(l_RNDG_RL, -9999)          and
                nvl(PRT1.POE_NNMNTRY_UOM, 'YYYY')  = nvl(l_POE_NNMNTRY_UOM, 'YYYY')  and
                nvl(PRT1.NO_MX_POE_FLAG, 'YYYY')   = nvl(l_NO_MX_POE_FLAG, 'YYYY')   and
                nvl(PRT1.NO_MN_POE_FLAG, 'YYYY')   = nvl(l_NO_MN_POE_FLAG, 'YYYY')   and
                nvl(PRT1.MX_POE_NUM, -9999)       = nvl(l_MX_POE_NUM, -9999)       and
                nvl(PRT1.MN_POE_NUM, -9999)       = nvl(l_MN_POE_NUM, -9999)       and
                PRT1.business_group_id  = c_business_group_id
                and   PRT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_POE_RT_F PRT2
                where
                PRT2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID  and
                nvl(PRT2.RNDG_CD, 'YYYY')          = nvl(l_RNDG_CD, 'YYYY')          and
                nvl(PRT2.RNDG_RL, -9999)          = nvl(l_RNDG_RL, -9999)          and
                nvl(PRT2.POE_NNMNTRY_UOM, 'YYYY')  = nvl(l_POE_NNMNTRY_UOM, 'YYYY')  and
                nvl(PRT2.NO_MX_POE_FLAG, 'YYYY')   = nvl(l_NO_MX_POE_FLAG, 'YYYY')   and
                nvl(PRT2.NO_MN_POE_FLAG, 'YYYY')   = nvl(l_NO_MN_POE_FLAG, 'YYYY')   and
                nvl(PRT2.MX_POE_NUM, -9999)       = nvl(l_MX_POE_NUM, -9999)       and
                nvl(PRT2.MN_POE_NUM, -9999)       = nvl(l_MN_POE_NUM, -9999)       and
                PRT2.business_group_id  = c_business_group_id
                and   PRT2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PRT                     c_PRT%rowtype;
   l_poe_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PRT_unique in c_unique_PRT('PRT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PRT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PRT_unique.table_route_id '||r_PRT_unique.table_route_id,10);
       hr_utility.set_location(' r_PRT_unique.information1 '||r_PRT_unique.information1,10);
       hr_utility.set_location( 'r_PRT_unique.information2 '||r_PRT_unique.information2,10);
       hr_utility.set_location( 'r_PRT_unique.information3 '||r_PRT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PRT_min_max_dates(r_PRT_unique.table_route_id, r_PRT_unique.information1 ) ;
       fetch c_PRT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PRT_unique.information2);
       open c_PRT(r_PRT_unique.table_route_id,
                r_PRT_unique.information1,
                r_PRT_unique.information2,
                r_PRT_unique.information3 ) ;
       --
       fetch c_PRT into r_PRT ;
       --
       close c_PRT ;
       --
       l_RNDG_RL := get_fk('FORMULA_ID', r_PRT.information263,r_PRT_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PRT.information262,r_PRT_unique.dml_operation);
       l_MN_POE_NUM      := r_PRT.information260;
       l_MX_POE_NUM      := r_PRT.information261;
       l_NO_MN_POE_FLAG      := r_PRT.information13;
       l_NO_MX_POE_FLAG      := r_PRT.information14;
       l_POE_NNMNTRY_UOM      := r_PRT.information12;
       l_RNDG_CD      := r_PRT.information11;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PRT_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PRT_unique.information2 and r_PRT_unique.information3 then
               l_update := true;
               if r_PRT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'POE_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'POE_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PRT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PRT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRT_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PRT',l_new_value,l_prefix || r_PRT_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_PRT_min_max_dates%found then
           -- cursor to find the object
           open c_find_PRT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_poe_rt_id, -999)  ) ;
           fetch c_find_PRT_in_target into l_new_value ;
           if c_find_PRT_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_POE_RT_F',
                  p_base_key_column => 'POE_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PRT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'POE_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'POE_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PRT_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PRT_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PRT_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_PRT_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_PRT.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PRT.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_POE_RT_F CREATE_POE_RT ',20);
           BEN_POE_RT_API.CREATE_POE_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CBR_DSBLTY_APLS_FLAG      => r_PRT.INFORMATION15
             ,P_MN_POE_NUM      => r_PRT.INFORMATION260
             ,P_MX_POE_NUM      => r_PRT.INFORMATION261
             ,P_NO_MN_POE_FLAG      => r_PRT.INFORMATION13
             ,P_NO_MX_POE_FLAG      => r_PRT.INFORMATION14
             ,P_POE_NNMNTRY_UOM      => r_PRT.INFORMATION12
             ,P_POE_RT_ID      => l_poe_rt_id
             ,P_PRT_ATTRIBUTE1      => r_PRT.INFORMATION111
             ,P_PRT_ATTRIBUTE10      => r_PRT.INFORMATION120
             ,P_PRT_ATTRIBUTE11      => r_PRT.INFORMATION121
             ,P_PRT_ATTRIBUTE12      => r_PRT.INFORMATION122
             ,P_PRT_ATTRIBUTE13      => r_PRT.INFORMATION123
             ,P_PRT_ATTRIBUTE14      => r_PRT.INFORMATION124
             ,P_PRT_ATTRIBUTE15      => r_PRT.INFORMATION125
             ,P_PRT_ATTRIBUTE16      => r_PRT.INFORMATION126
             ,P_PRT_ATTRIBUTE17      => r_PRT.INFORMATION127
             ,P_PRT_ATTRIBUTE18      => r_PRT.INFORMATION128
             ,P_PRT_ATTRIBUTE19      => r_PRT.INFORMATION129
             ,P_PRT_ATTRIBUTE2      => r_PRT.INFORMATION112
             ,P_PRT_ATTRIBUTE20      => r_PRT.INFORMATION130
             ,P_PRT_ATTRIBUTE21      => r_PRT.INFORMATION131
             ,P_PRT_ATTRIBUTE22      => r_PRT.INFORMATION132
             ,P_PRT_ATTRIBUTE23      => r_PRT.INFORMATION133
             ,P_PRT_ATTRIBUTE24      => r_PRT.INFORMATION134
             ,P_PRT_ATTRIBUTE25      => r_PRT.INFORMATION135
             ,P_PRT_ATTRIBUTE26      => r_PRT.INFORMATION136
             ,P_PRT_ATTRIBUTE27      => r_PRT.INFORMATION137
             ,P_PRT_ATTRIBUTE28      => r_PRT.INFORMATION138
             ,P_PRT_ATTRIBUTE29      => r_PRT.INFORMATION139
             ,P_PRT_ATTRIBUTE3      => r_PRT.INFORMATION113
             ,P_PRT_ATTRIBUTE30      => r_PRT.INFORMATION140
             ,P_PRT_ATTRIBUTE4      => r_PRT.INFORMATION114
             ,P_PRT_ATTRIBUTE5      => r_PRT.INFORMATION115
             ,P_PRT_ATTRIBUTE6      => r_PRT.INFORMATION116
             ,P_PRT_ATTRIBUTE7      => r_PRT.INFORMATION117
             ,P_PRT_ATTRIBUTE8      => r_PRT.INFORMATION118
             ,P_PRT_ATTRIBUTE9      => r_PRT.INFORMATION119
             ,P_PRT_ATTRIBUTE_CATEGORY      => r_PRT.INFORMATION110
             ,P_RNDG_CD      => r_PRT.INFORMATION11
             ,P_RNDG_RL      => l_RNDG_RL
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_poe_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'POE_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PRT.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_POE_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PRT_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PRT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PRT.information3,
               p_effective_start_date  => r_PRT.information2,
               p_dml_operation         => r_PRT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_POE_RT_ID   := r_PRT.information1;
             l_object_version_number := r_PRT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_POE_RT_F UPDATE_POE_RT ',30);
           BEN_POE_RT_API.UPDATE_POE_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CBR_DSBLTY_APLS_FLAG      => r_PRT.INFORMATION15
             ,P_MN_POE_NUM      => r_PRT.INFORMATION260
             ,P_MX_POE_NUM      => r_PRT.INFORMATION261
             ,P_NO_MN_POE_FLAG      => r_PRT.INFORMATION13
             ,P_NO_MX_POE_FLAG      => r_PRT.INFORMATION14
             ,P_POE_NNMNTRY_UOM      => r_PRT.INFORMATION12
             ,P_POE_RT_ID      => l_poe_rt_id
             ,P_PRT_ATTRIBUTE1      => r_PRT.INFORMATION111
             ,P_PRT_ATTRIBUTE10      => r_PRT.INFORMATION120
             ,P_PRT_ATTRIBUTE11      => r_PRT.INFORMATION121
             ,P_PRT_ATTRIBUTE12      => r_PRT.INFORMATION122
             ,P_PRT_ATTRIBUTE13      => r_PRT.INFORMATION123
             ,P_PRT_ATTRIBUTE14      => r_PRT.INFORMATION124
             ,P_PRT_ATTRIBUTE15      => r_PRT.INFORMATION125
             ,P_PRT_ATTRIBUTE16      => r_PRT.INFORMATION126
             ,P_PRT_ATTRIBUTE17      => r_PRT.INFORMATION127
             ,P_PRT_ATTRIBUTE18      => r_PRT.INFORMATION128
             ,P_PRT_ATTRIBUTE19      => r_PRT.INFORMATION129
             ,P_PRT_ATTRIBUTE2      => r_PRT.INFORMATION112
             ,P_PRT_ATTRIBUTE20      => r_PRT.INFORMATION130
             ,P_PRT_ATTRIBUTE21      => r_PRT.INFORMATION131
             ,P_PRT_ATTRIBUTE22      => r_PRT.INFORMATION132
             ,P_PRT_ATTRIBUTE23      => r_PRT.INFORMATION133
             ,P_PRT_ATTRIBUTE24      => r_PRT.INFORMATION134
             ,P_PRT_ATTRIBUTE25      => r_PRT.INFORMATION135
             ,P_PRT_ATTRIBUTE26      => r_PRT.INFORMATION136
             ,P_PRT_ATTRIBUTE27      => r_PRT.INFORMATION137
             ,P_PRT_ATTRIBUTE28      => r_PRT.INFORMATION138
             ,P_PRT_ATTRIBUTE29      => r_PRT.INFORMATION139
             ,P_PRT_ATTRIBUTE3      => r_PRT.INFORMATION113
             ,P_PRT_ATTRIBUTE30      => r_PRT.INFORMATION140
             ,P_PRT_ATTRIBUTE4      => r_PRT.INFORMATION114
             ,P_PRT_ATTRIBUTE5      => r_PRT.INFORMATION115
             ,P_PRT_ATTRIBUTE6      => r_PRT.INFORMATION116
             ,P_PRT_ATTRIBUTE7      => r_PRT.INFORMATION117
             ,P_PRT_ATTRIBUTE8      => r_PRT.INFORMATION118
             ,P_PRT_ATTRIBUTE9      => r_PRT.INFORMATION119
             ,P_PRT_ATTRIBUTE_CATEGORY      => r_PRT.INFORMATION110
             ,P_RNDG_CD      => r_PRT.INFORMATION11
             ,P_RNDG_RL      => l_RNDG_RL
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PRT.information3) then
             --
             BEN_POE_RT_API.delete_POE_RT(
                --
                p_validate                       => false
                ,p_poe_rt_id                   => l_poe_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PRT',r_prt.information5 );
    --
 end create_PRT_rows;

   ---------------------------------------------------------------
   ----------------------< create_CPN_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CPN_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PYMT_MUST_BE_RCVD_RL  number;
   l_VRBL_RT_PRFL_ID  number;
   l_PYMT_MUST_BE_RCVD_NUM  number;
   l_PYMT_MUST_BE_RCVD_UOM  varchar2(30);
   --
   cursor c_unique_CPN(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.information170 name,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_CNTNG_PRTN_PRFL_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.information170, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CPN_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CPN(c_table_route_id  number,
                c_information1    number,
                c_information2    Date,
                c_information3    Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CPN_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CPN.cntng_prtn_prfl_rt_id new_value
   from BEN_CNTNG_PRTN_PRFL_RT_F CPN
   where
   CPN.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   CPN.PYMT_MUST_BE_RCVD_NUM = l_PYMT_MUST_BE_RCVD_NUM and
   CPN.business_group_id  = c_business_group_id
   and   CPN.cntng_prtn_prfl_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_CNTNG_PRTN_PRFL_RT_F CPN1
                where
                CPN1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                CPN1.PYMT_MUST_BE_RCVD_NUM = l_PYMT_MUST_BE_RCVD_NUM and
                CPN1.business_group_id  = c_business_group_id
                and   CPN1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_CNTNG_PRTN_PRFL_RT_F CPN2
                where
                CPN2.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID  and
                CPN2.PYMT_MUST_BE_RCVD_NUM = l_PYMT_MUST_BE_RCVD_NUM and
                CPN2.business_group_id  = c_business_group_id
                and   CPN2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CPN                     c_CPN%rowtype;
   l_cntng_prtn_prfl_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CPN_unique in c_unique_CPN('CPN') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CPN_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_CPN_unique.table_route_id '||r_CPN_unique.table_route_id,10);
       hr_utility.set_location(' r_CPN_unique.information1 '||r_CPN_unique.information1,10);
       hr_utility.set_location( 'r_CPN_unique.information2 '||r_CPN_unique.information2,10);
       hr_utility.set_location( 'r_CPN_unique.information3 '||r_CPN_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CPN_min_max_dates(r_CPN_unique.table_route_id, r_CPN_unique.information1 ) ;
       fetch c_CPN_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_CPN_unique.information2);
       open c_CPN(r_CPN_unique.table_route_id,
                r_CPN_unique.information1,
                r_CPN_unique.information2,
                r_CPN_unique.information3 ) ;
       --
       fetch c_CPN into r_CPN ;
       --
       close c_CPN ;
       --
       l_PYMT_MUST_BE_RCVD_RL := get_fk('FORMULA_ID', r_CPN.information261,r_CPN_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_CPN.information262,r_CPN_unique.dml_operation);
       l_PYMT_MUST_BE_RCVD_NUM := r_CPN.information260;
       l_PYMT_MUST_BE_RCVD_UOM := r_CPN.information11;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_CPN_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CPN_unique.information2 and r_CPN_unique.information3 then
               l_update := true;
               if r_CPN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'CNTNG_PRTN_PRFL_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'CNTNG_PRTN_PRFL_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CPN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CPN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CPN_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('CPN',l_new_value,l_prefix || r_CPN_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_CPN_min_max_dates%found then
           -- cursor to find the object
           open c_find_CPN_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_cntng_prtn_prfl_rt_id, -999)  ) ;
           fetch c_find_CPN_in_target into l_new_value ;
           if c_find_CPN_in_target%found then
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_CNTNG_PRTN_PRFL_RT_F',
                  p_base_key_column => 'CNTNG_PRTN_PRFL_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             --
             if r_CPN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'CNTNG_PRTN_PRFL_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'CNTNG_PRTN_PRFL_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_CPN_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CPN_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_CPN_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_CPN_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_CPN.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --
         ben_pd_copy_to_ben_one.ben_chk_col_len('NAME' ,'BEN_CNTNG_PRTN_PRFL_RT_F',l_prefix || r_CPN.information170 || l_suffix);
         --

         l_effective_date := r_CPN.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_CNTNG_PRTN_PRFL_RT_F CREATE_CNTNG_PRTN_PRFL_RT ',20);
           BEN_CNTNG_PRTN_PRFL_RT_API.CREATE_CNTNG_PRTN_PRFL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CNTNG_PRTN_PRFL_RT_ID      => l_cntng_prtn_prfl_rt_id
             ,P_CPN_ATTRIBUTE1      => r_CPN.INFORMATION111
             ,P_CPN_ATTRIBUTE10      => r_CPN.INFORMATION120
             ,P_CPN_ATTRIBUTE11      => r_CPN.INFORMATION121
             ,P_CPN_ATTRIBUTE12      => r_CPN.INFORMATION122
             ,P_CPN_ATTRIBUTE13      => r_CPN.INFORMATION123
             ,P_CPN_ATTRIBUTE14      => r_CPN.INFORMATION124
             ,P_CPN_ATTRIBUTE15      => r_CPN.INFORMATION125
             ,P_CPN_ATTRIBUTE16      => r_CPN.INFORMATION126
             ,P_CPN_ATTRIBUTE17      => r_CPN.INFORMATION127
             ,P_CPN_ATTRIBUTE18      => r_CPN.INFORMATION128
             ,P_CPN_ATTRIBUTE19      => r_CPN.INFORMATION129
             ,P_CPN_ATTRIBUTE2      => r_CPN.INFORMATION112
             ,P_CPN_ATTRIBUTE20      => r_CPN.INFORMATION130
             ,P_CPN_ATTRIBUTE21      => r_CPN.INFORMATION131
             ,P_CPN_ATTRIBUTE22      => r_CPN.INFORMATION132
             ,P_CPN_ATTRIBUTE23      => r_CPN.INFORMATION133
             ,P_CPN_ATTRIBUTE24      => r_CPN.INFORMATION134
             ,P_CPN_ATTRIBUTE25      => r_CPN.INFORMATION135
             ,P_CPN_ATTRIBUTE26      => r_CPN.INFORMATION136
             ,P_CPN_ATTRIBUTE27      => r_CPN.INFORMATION137
             ,P_CPN_ATTRIBUTE28      => r_CPN.INFORMATION138
             ,P_CPN_ATTRIBUTE29      => r_CPN.INFORMATION139
             ,P_CPN_ATTRIBUTE3      => r_CPN.INFORMATION113
             ,P_CPN_ATTRIBUTE30      => r_CPN.INFORMATION140
             ,P_CPN_ATTRIBUTE4      => r_CPN.INFORMATION114
             ,P_CPN_ATTRIBUTE5      => r_CPN.INFORMATION115
             ,P_CPN_ATTRIBUTE6      => r_CPN.INFORMATION116
             ,P_CPN_ATTRIBUTE7      => r_CPN.INFORMATION117
             ,P_CPN_ATTRIBUTE8      => r_CPN.INFORMATION118
             ,P_CPN_ATTRIBUTE9      => r_CPN.INFORMATION119
             ,P_CPN_ATTRIBUTE_CATEGORY      => r_CPN.INFORMATION110
             ,P_NAME      => l_prefix || r_CPN.INFORMATION170 || l_suffix
             ,P_PYMT_MUST_BE_RCVD_NUM      => r_CPN.INFORMATION260
             ,P_PYMT_MUST_BE_RCVD_RL      => l_PYMT_MUST_BE_RCVD_RL
             ,P_PYMT_MUST_BE_RCVD_UOM      => r_CPN.INFORMATION11
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_cntng_prtn_prfl_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'CNTNG_PRTN_PRFL_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_CPN.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_CNTNG_PRTN_PRFL_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CPN_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CPN.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CPN.information3,
               p_effective_start_date  => r_CPN.information2,
               p_dml_operation         => r_CPN.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_CNTNG_PRTN_PRFL_RT_ID   := r_CPN.information1;
             l_object_version_number := r_CPN.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_CNTNG_PRTN_PRFL_RT_F UPDATE_CNTNG_PRTN_PRFL_RT ',30);
           BEN_CNTNG_PRTN_PRFL_RT_API.UPDATE_CNTNG_PRTN_PRFL_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
              ,P_CNTNG_PRTN_PRFL_RT_ID      => l_cntng_prtn_prfl_rt_id
             ,P_CPN_ATTRIBUTE1      => r_CPN.INFORMATION111
             ,P_CPN_ATTRIBUTE10      => r_CPN.INFORMATION120
             ,P_CPN_ATTRIBUTE11      => r_CPN.INFORMATION121
             ,P_CPN_ATTRIBUTE12      => r_CPN.INFORMATION122
             ,P_CPN_ATTRIBUTE13      => r_CPN.INFORMATION123
             ,P_CPN_ATTRIBUTE14      => r_CPN.INFORMATION124
             ,P_CPN_ATTRIBUTE15      => r_CPN.INFORMATION125
             ,P_CPN_ATTRIBUTE16      => r_CPN.INFORMATION126
             ,P_CPN_ATTRIBUTE17      => r_CPN.INFORMATION127
             ,P_CPN_ATTRIBUTE18      => r_CPN.INFORMATION128
             ,P_CPN_ATTRIBUTE19      => r_CPN.INFORMATION129
             ,P_CPN_ATTRIBUTE2      => r_CPN.INFORMATION112
             ,P_CPN_ATTRIBUTE20      => r_CPN.INFORMATION130
             ,P_CPN_ATTRIBUTE21      => r_CPN.INFORMATION131
             ,P_CPN_ATTRIBUTE22      => r_CPN.INFORMATION132
             ,P_CPN_ATTRIBUTE23      => r_CPN.INFORMATION133
             ,P_CPN_ATTRIBUTE24      => r_CPN.INFORMATION134
             ,P_CPN_ATTRIBUTE25      => r_CPN.INFORMATION135
             ,P_CPN_ATTRIBUTE26      => r_CPN.INFORMATION136
             ,P_CPN_ATTRIBUTE27      => r_CPN.INFORMATION137
             ,P_CPN_ATTRIBUTE28      => r_CPN.INFORMATION138
             ,P_CPN_ATTRIBUTE29      => r_CPN.INFORMATION139
             ,P_CPN_ATTRIBUTE3      => r_CPN.INFORMATION113
             ,P_CPN_ATTRIBUTE30      => r_CPN.INFORMATION140
             ,P_CPN_ATTRIBUTE4      => r_CPN.INFORMATION114
             ,P_CPN_ATTRIBUTE5      => r_CPN.INFORMATION115
             ,P_CPN_ATTRIBUTE6      => r_CPN.INFORMATION116
             ,P_CPN_ATTRIBUTE7      => r_CPN.INFORMATION117
             ,P_CPN_ATTRIBUTE8      => r_CPN.INFORMATION118
             ,P_CPN_ATTRIBUTE9      => r_CPN.INFORMATION119
             ,P_CPN_ATTRIBUTE_CATEGORY      => r_CPN.INFORMATION110
             ,P_NAME      => l_prefix || r_CPN.INFORMATION170 || l_suffix
             ,P_PYMT_MUST_BE_RCVD_NUM      => r_CPN.INFORMATION260
             ,P_PYMT_MUST_BE_RCVD_RL      => l_PYMT_MUST_BE_RCVD_RL
             ,P_PYMT_MUST_BE_RCVD_UOM      => r_CPN.INFORMATION11
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_CPN.information3) then
             --
             BEN_CNTNG_PRTN_PRFL_RT_API.delete_CNTNG_PRTN_PRFL_RT(
                --
                p_validate                       => false
                ,p_cntng_prtn_prfl_rt_id                   => l_cntng_prtn_prfl_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CPN',l_prefix || r_CPN.information170 || l_suffix);
    --
 end create_CPN_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_PST_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PST_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_POSITION_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG     varchar2(100);
   l_ORDR_NUM       varchar2(100);
   --
   cursor c_unique_PST(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PSTN_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PST_min_max_dates(c_table_route_id  number,
                c_information1  number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PST(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PST_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PST.pstn_rt_id new_value
   from BEN_PSTN_RT_F PST
   where
   PST.POSITION_ID     = l_POSITION_ID  and
   PST.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   PST.ORDR_NUM        = l_ORDR_NUM       and
   PST.business_group_id  = c_business_group_id
   and   PST.pstn_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PSTN_RT_F PST1
                where
                PST1.POSITION_ID     = l_POSITION_ID  and
                PST1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PST1.ORDR_NUM        = l_ORDR_NUM       and
                PST1.business_group_id  = c_business_group_id
                and   PST1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PSTN_RT_F PST2
                where
                PST2.POSITION_ID     = l_POSITION_ID  and
                PST2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PST2.ORDR_NUM        = l_ORDR_NUM       and
                PST2.business_group_id  = c_business_group_id
                and   PST2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PST                     c_PST%rowtype;
   l_pstn_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PST_unique in c_unique_PST('PST') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PST_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PST_unique.table_route_id '||r_PST_unique.table_route_id,10);
       hr_utility.set_location(' r_PST_unique.information1 '||r_PST_unique.information1,10);
       hr_utility.set_location( 'r_PST_unique.information2 '||r_PST_unique.information2,10);
       hr_utility.set_location( 'r_PST_unique.information3 '||r_PST_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PST_min_max_dates(r_PST_unique.table_route_id, r_PST_unique.information1 ) ;
       fetch c_PST_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PST_unique.information2);
       open c_PST(r_PST_unique.table_route_id,
                r_PST_unique.information1,
                r_PST_unique.information2,
                r_PST_unique.information3 ) ;
       --
       fetch c_PST into r_PST ;
       --
       close c_PST ;
       --

       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_POSITION_ID := r_PST.information176;
       else
         l_POSITION_ID := r_PST.information174;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PST.information262,r_PST_unique.dml_operation);
       l_EXCLD_FLAG      := r_PST.information11;
       l_ORDR_NUM        := r_PST.INFORMATION257;

       if l_POSITION_ID is null then
         close c_PST_min_max_dates;
         --
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_PST.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'PST'
                     ,p_child_data           => r_PST.information173 );

            --
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PST_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PST_unique.information2 and r_PST_unique.information3 then
               l_update := true;
               if r_PST_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PSTN_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PSTN_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PST_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PST_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PST_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PST',l_new_value,l_prefix || r_PST_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_PST_min_max_dates%found then
              -- cursor to find the object
              open c_find_PST_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_pstn_rt_id, -999)  ) ;
              fetch c_find_PST_in_target into l_new_value ;
              if c_find_PST_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PSTN_RT_F',
                  p_base_key_column => 'PSTN_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_PST_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'PSTN_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'PSTN_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PST_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PST_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_PST_in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_PST_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_PST.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_PST.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_PSTN_RT_F CREATE_PSTN_RT ',20);
             BEN_PSTN_RT_API.CREATE_PSTN_RT(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_PST.INFORMATION11
             ,P_ORDR_NUM      => r_PST.INFORMATION257
             ,P_POSITION_ID      => l_POSITION_ID
             ,P_PSTN_RT_ID      => l_pstn_rt_id
             ,P_PST_ATTRIBUTE1      => r_PST.INFORMATION111
             ,P_PST_ATTRIBUTE10      => r_PST.INFORMATION120
             ,P_PST_ATTRIBUTE11      => r_PST.INFORMATION121
             ,P_PST_ATTRIBUTE12      => r_PST.INFORMATION122
             ,P_PST_ATTRIBUTE13      => r_PST.INFORMATION123
             ,P_PST_ATTRIBUTE14      => r_PST.INFORMATION124
             ,P_PST_ATTRIBUTE15      => r_PST.INFORMATION125
             ,P_PST_ATTRIBUTE16      => r_PST.INFORMATION126
             ,P_PST_ATTRIBUTE17      => r_PST.INFORMATION127
             ,P_PST_ATTRIBUTE18      => r_PST.INFORMATION128
             ,P_PST_ATTRIBUTE19      => r_PST.INFORMATION129
             ,P_PST_ATTRIBUTE2      => r_PST.INFORMATION112
             ,P_PST_ATTRIBUTE20      => r_PST.INFORMATION130
             ,P_PST_ATTRIBUTE21      => r_PST.INFORMATION131
             ,P_PST_ATTRIBUTE22      => r_PST.INFORMATION132
             ,P_PST_ATTRIBUTE23      => r_PST.INFORMATION133
             ,P_PST_ATTRIBUTE24      => r_PST.INFORMATION134
             ,P_PST_ATTRIBUTE25      => r_PST.INFORMATION135
             ,P_PST_ATTRIBUTE26      => r_PST.INFORMATION136
             ,P_PST_ATTRIBUTE27      => r_PST.INFORMATION137
             ,P_PST_ATTRIBUTE28      => r_PST.INFORMATION138
             ,P_PST_ATTRIBUTE29      => r_PST.INFORMATION139
             ,P_PST_ATTRIBUTE3      => r_PST.INFORMATION113
             ,P_PST_ATTRIBUTE30      => r_PST.INFORMATION140
             ,P_PST_ATTRIBUTE4      => r_PST.INFORMATION114
             ,P_PST_ATTRIBUTE5      => r_PST.INFORMATION115
             ,P_PST_ATTRIBUTE6      => r_PST.INFORMATION116
             ,P_PST_ATTRIBUTE7      => r_PST.INFORMATION117
             ,P_PST_ATTRIBUTE8      => r_PST.INFORMATION118
             ,P_PST_ATTRIBUTE9      => r_PST.INFORMATION119
             ,P_PST_ATTRIBUTE_CATEGORY      => r_PST.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              );
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_pstn_rt_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'PSTN_RT_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PST.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_PSTN_RT_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PST_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
              --
            else
              --
              -- Call Update routine for the pk_id created in prev run .
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PST.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PST.information3,
               p_effective_start_date  => r_PST.information2,
               p_dml_operation         => r_PST.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PSTN_RT_ID   := r_PST.information1;
             l_object_version_number := r_PST.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
              hr_utility.set_location(' BEN_PSTN_RT_F UPDATE_PSTN_RT ',30);
              BEN_PSTN_RT_API.UPDATE_PSTN_RT(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_PST.INFORMATION11
             ,P_ORDR_NUM      => r_PST.INFORMATION257
             ,P_POSITION_ID      => l_POSITION_ID
             ,P_PSTN_RT_ID      => l_pstn_rt_id
             ,P_PST_ATTRIBUTE1      => r_PST.INFORMATION111
             ,P_PST_ATTRIBUTE10      => r_PST.INFORMATION120
             ,P_PST_ATTRIBUTE11      => r_PST.INFORMATION121
             ,P_PST_ATTRIBUTE12      => r_PST.INFORMATION122
             ,P_PST_ATTRIBUTE13      => r_PST.INFORMATION123
             ,P_PST_ATTRIBUTE14      => r_PST.INFORMATION124
             ,P_PST_ATTRIBUTE15      => r_PST.INFORMATION125
             ,P_PST_ATTRIBUTE16      => r_PST.INFORMATION126
             ,P_PST_ATTRIBUTE17      => r_PST.INFORMATION127
             ,P_PST_ATTRIBUTE18      => r_PST.INFORMATION128
             ,P_PST_ATTRIBUTE19      => r_PST.INFORMATION129
             ,P_PST_ATTRIBUTE2      => r_PST.INFORMATION112
             ,P_PST_ATTRIBUTE20      => r_PST.INFORMATION130
             ,P_PST_ATTRIBUTE21      => r_PST.INFORMATION131
             ,P_PST_ATTRIBUTE22      => r_PST.INFORMATION132
             ,P_PST_ATTRIBUTE23      => r_PST.INFORMATION133
             ,P_PST_ATTRIBUTE24      => r_PST.INFORMATION134
             ,P_PST_ATTRIBUTE25      => r_PST.INFORMATION135
             ,P_PST_ATTRIBUTE26      => r_PST.INFORMATION136
             ,P_PST_ATTRIBUTE27      => r_PST.INFORMATION137
             ,P_PST_ATTRIBUTE28      => r_PST.INFORMATION138
             ,P_PST_ATTRIBUTE29      => r_PST.INFORMATION139
             ,P_PST_ATTRIBUTE3      => r_PST.INFORMATION113
             ,P_PST_ATTRIBUTE30      => r_PST.INFORMATION140
             ,P_PST_ATTRIBUTE4      => r_PST.INFORMATION114
             ,P_PST_ATTRIBUTE5      => r_PST.INFORMATION115
             ,P_PST_ATTRIBUTE6      => r_PST.INFORMATION116
             ,P_PST_ATTRIBUTE7      => r_PST.INFORMATION117
             ,P_PST_ATTRIBUTE8      => r_PST.INFORMATION118
             ,P_PST_ATTRIBUTE9      => r_PST.INFORMATION119
             ,P_PST_ATTRIBUTE_CATEGORY      => r_PST.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
              );
              --
              end if;
            end if;
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_PST.information3) then
                --
                BEN_PSTN_RT_API.delete_PSTN_RT(
                   --
                   p_validate                       => false
                   ,p_pstn_rt_id                   => l_pstn_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
          end if;
          --
        end if;
        --
      end if;
      --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PST',r_pst.information5 );
    --
 end create_PST_rows;

   --
   --
   ---------------------------------------------------------------
   ----------------------< create_WLR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_WLR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_LOCATION_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_WLR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_WK_LOC_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_WLR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_WLR(c_table_route_id number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_WLR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     WLR.wk_loc_rt_id new_value
   from BEN_WK_LOC_RT_F WLR
   where
   WLR.LOCATION_ID     = l_LOCATION_ID  and
   WLR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   WLR.business_group_id  = c_business_group_id
   and   WLR.wk_loc_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_WK_LOC_RT_F WLR1
                where
                WLR1.LOCATION_ID     = l_LOCATION_ID  and
                WLR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                WLR1.business_group_id  = c_business_group_id
                and   WLR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_WK_LOC_RT_F WLR2
                where
                WLR2.LOCATION_ID     = l_LOCATION_ID  and
                WLR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                WLR2.business_group_id  = c_business_group_id
                and   WLR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_WLR                     c_WLR%rowtype;
   l_wk_loc_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_WLR_unique in c_unique_WLR('WLR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_WLR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_WLR_unique.table_route_id '||r_WLR_unique.table_route_id,10);
       hr_utility.set_location(' r_WLR_unique.information1 '||r_WLR_unique.information1,10);
       hr_utility.set_location( 'r_WLR_unique.information2 '||r_WLR_unique.information2,10);
       hr_utility.set_location( 'r_WLR_unique.information3 '||r_WLR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_WLR_min_max_dates(r_WLR_unique.table_route_id, r_WLR_unique.information1 ) ;
       fetch c_WLR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_WLR_unique.information2);
       open c_WLR(r_WLR_unique.table_route_id,
                r_WLR_unique.information1,
                r_WLR_unique.information2,
                r_WLR_unique.information3 ) ;
       --
       fetch c_WLR into r_WLR ;
       --
       close c_WLR ;
       --

       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_LOCATION_ID := r_WLR.information176;
       else
         l_LOCATION_ID := r_WLR.information174;
       end if;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_WLR.information262,r_WLR_unique.dml_operation);

       if l_LOCATION_ID is null then
         close c_WLR_min_max_dates;
         --
         log_nomapping_data(p_parent_table_alias =>'VPF'
                     ,p_parent_pk_id         => r_WLR.information262
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'WLR'
                     ,p_child_data           => r_WLR.information173 );

         --
       else
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_WLR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_WLR_unique.information2 and r_WLR_unique.information3 then
               l_update := true;
               if r_WLR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'WK_LOC_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'WK_LOC_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_WLR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_WLR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_WLR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('WLR',l_new_value,l_prefix || r_WLR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
         if p_reuse_object_flag = 'Y' then
           if c_WLR_min_max_dates%found then
              -- cursor to find the object
              open c_find_WLR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_wk_loc_rt_id, -999)  ) ;
              fetch c_find_WLR_in_target into l_new_value ;
              if c_find_WLR_in_target%found then
                --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_WK_LOC_RT_F',
                  p_base_key_column => 'WK_LOC_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
                if r_WLR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'WK_LOC_RT_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'WK_LOC_RT_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_WLR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_WLR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
              end if;
              close c_find_WLR_in_target ;
           --
           end if;
         end if ;
         --
         end if;
         close c_WLR_min_max_dates ;
         if not l_object_found_in_target OR l_update   then
           --
           l_current_pk_id := r_WLR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_WLR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_WK_LOC_RT_F CREATE_WORK_LOC_RATE ',20);
             BEN_WORK_LOC_RATE_API.CREATE_WORK_LOC_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_WLR.INFORMATION11
             ,P_LOCATION_ID      => l_LOCATION_ID
             ,P_ORDR_NUM      => r_WLR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             ,P_WK_LOC_RT_ID      => l_wk_loc_rt_id
             ,P_WLR_ATTRIBUTE1      => r_WLR.INFORMATION111
             ,P_WLR_ATTRIBUTE10      => r_WLR.INFORMATION120
             ,P_WLR_ATTRIBUTE11      => r_WLR.INFORMATION121
             ,P_WLR_ATTRIBUTE12      => r_WLR.INFORMATION122
             ,P_WLR_ATTRIBUTE13      => r_WLR.INFORMATION123
             ,P_WLR_ATTRIBUTE14      => r_WLR.INFORMATION124
             ,P_WLR_ATTRIBUTE15      => r_WLR.INFORMATION125
             ,P_WLR_ATTRIBUTE16      => r_WLR.INFORMATION126
             ,P_WLR_ATTRIBUTE17      => r_WLR.INFORMATION127
             ,P_WLR_ATTRIBUTE18      => r_WLR.INFORMATION128
             ,P_WLR_ATTRIBUTE19      => r_WLR.INFORMATION129
             ,P_WLR_ATTRIBUTE2      => r_WLR.INFORMATION112
             ,P_WLR_ATTRIBUTE20      => r_WLR.INFORMATION130
             ,P_WLR_ATTRIBUTE21      => r_WLR.INFORMATION131
             ,P_WLR_ATTRIBUTE22      => r_WLR.INFORMATION132
             ,P_WLR_ATTRIBUTE23      => r_WLR.INFORMATION133
             ,P_WLR_ATTRIBUTE24      => r_WLR.INFORMATION134
             ,P_WLR_ATTRIBUTE25      => r_WLR.INFORMATION135
             ,P_WLR_ATTRIBUTE26      => r_WLR.INFORMATION136
             ,P_WLR_ATTRIBUTE27      => r_WLR.INFORMATION137
             ,P_WLR_ATTRIBUTE28      => r_WLR.INFORMATION138
             ,P_WLR_ATTRIBUTE29      => r_WLR.INFORMATION139
             ,P_WLR_ATTRIBUTE3      => r_WLR.INFORMATION113
             ,P_WLR_ATTRIBUTE30      => r_WLR.INFORMATION140
             ,P_WLR_ATTRIBUTE4      => r_WLR.INFORMATION114
             ,P_WLR_ATTRIBUTE5      => r_WLR.INFORMATION115
             ,P_WLR_ATTRIBUTE6      => r_WLR.INFORMATION116
             ,P_WLR_ATTRIBUTE7      => r_WLR.INFORMATION117
             ,P_WLR_ATTRIBUTE8      => r_WLR.INFORMATION118
             ,P_WLR_ATTRIBUTE9      => r_WLR.INFORMATION119
             ,P_WLR_ATTRIBUTE_CATEGORY      => r_WLR.INFORMATION110
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              );
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_wk_loc_rt_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'WK_LOC_RT_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_WLR.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_WK_LOC_RT_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_WLR_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
              --
            else
              --
              -- Call Update routine for the pk_id created in prev run .
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_WLR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_WLR.information3,
               p_effective_start_date  => r_WLR.information2,
               p_dml_operation         => r_WLR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_WK_LOC_RT_ID   := r_WLR.information1;
             l_object_version_number := r_WLR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
              hr_utility.set_location(' BEN_WK_LOC_RT_F UPDATE_WORK_LOC_RATE ',30);
              BEN_WORK_LOC_RATE_API.UPDATE_WORK_LOC_RATE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EXCLD_FLAG      => r_WLR.INFORMATION11
             ,P_LOCATION_ID      => l_LOCATION_ID
             ,P_ORDR_NUM      => r_WLR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             ,P_WK_LOC_RT_ID      => l_wk_loc_rt_id
             ,P_WLR_ATTRIBUTE1      => r_WLR.INFORMATION111
             ,P_WLR_ATTRIBUTE10      => r_WLR.INFORMATION120
             ,P_WLR_ATTRIBUTE11      => r_WLR.INFORMATION121
             ,P_WLR_ATTRIBUTE12      => r_WLR.INFORMATION122
             ,P_WLR_ATTRIBUTE13      => r_WLR.INFORMATION123
             ,P_WLR_ATTRIBUTE14      => r_WLR.INFORMATION124
             ,P_WLR_ATTRIBUTE15      => r_WLR.INFORMATION125
             ,P_WLR_ATTRIBUTE16      => r_WLR.INFORMATION126
             ,P_WLR_ATTRIBUTE17      => r_WLR.INFORMATION127
             ,P_WLR_ATTRIBUTE18      => r_WLR.INFORMATION128
             ,P_WLR_ATTRIBUTE19      => r_WLR.INFORMATION129
             ,P_WLR_ATTRIBUTE2      => r_WLR.INFORMATION112
             ,P_WLR_ATTRIBUTE20      => r_WLR.INFORMATION130
             ,P_WLR_ATTRIBUTE21      => r_WLR.INFORMATION131
             ,P_WLR_ATTRIBUTE22      => r_WLR.INFORMATION132
             ,P_WLR_ATTRIBUTE23      => r_WLR.INFORMATION133
             ,P_WLR_ATTRIBUTE24      => r_WLR.INFORMATION134
             ,P_WLR_ATTRIBUTE25      => r_WLR.INFORMATION135
             ,P_WLR_ATTRIBUTE26      => r_WLR.INFORMATION136
             ,P_WLR_ATTRIBUTE27      => r_WLR.INFORMATION137
             ,P_WLR_ATTRIBUTE28      => r_WLR.INFORMATION138
             ,P_WLR_ATTRIBUTE29      => r_WLR.INFORMATION139
             ,P_WLR_ATTRIBUTE3      => r_WLR.INFORMATION113
             ,P_WLR_ATTRIBUTE30      => r_WLR.INFORMATION140
             ,P_WLR_ATTRIBUTE4      => r_WLR.INFORMATION114
             ,P_WLR_ATTRIBUTE5      => r_WLR.INFORMATION115
             ,P_WLR_ATTRIBUTE6      => r_WLR.INFORMATION116
             ,P_WLR_ATTRIBUTE7      => r_WLR.INFORMATION117
             ,P_WLR_ATTRIBUTE8      => r_WLR.INFORMATION118
             ,P_WLR_ATTRIBUTE9      => r_WLR.INFORMATION119
             ,P_WLR_ATTRIBUTE_CATEGORY      => r_WLR.INFORMATION110
                --
                ,P_EFFECTIVE_START_DATE  => l_effective_start_date
                ,P_EFFECTIVE_END_DATE    => l_effective_end_date
                ,P_OBJECT_VERSION_NUMBER => l_object_version_number
                ,P_DATETRACK_MODE        => l_datetrack_mode
              );
              --
              end if;
            end if;
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = r_WLR.information3) then
                --
                BEN_WORK_LOC_RATE_API.delete_WORK_LOC_RATE(
                   --
                   p_validate                       => false
                   ,p_wk_loc_rt_id                   => l_wk_loc_rt_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
          end if;
          --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'WLR',r_wlr.information5 );
    --
 end create_WLR_rows;

   --
   --
   ---------------------------------------------------------------
   ----------------------< create_PFR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PFR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_PCT_FL_TM_FCTR_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_ORDR_NUM           number;
   cursor c_unique_PFR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PCT_FL_TM_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PFR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PFR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PFR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PFR.pct_fl_tm_rt_id new_value
   from BEN_PCT_FL_TM_RT_F PFR
   where
   PFR.PCT_FL_TM_FCTR_ID     = l_PCT_FL_TM_FCTR_ID  and
   PFR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   PFR.ORDR_NUM            = l_ORDR_NUM and
   PFR.business_group_id  = c_business_group_id
   and   PFR.pct_fl_tm_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PCT_FL_TM_RT_F PFR1
                where
                PFR1.PCT_FL_TM_FCTR_ID     = l_PCT_FL_TM_FCTR_ID  and
                PFR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PFR1.ORDR_NUM            = l_ORDR_NUM and
                PFR1.business_group_id  = c_business_group_id
                and   PFR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PCT_FL_TM_RT_F PFR2
                where
                PFR2.PCT_FL_TM_FCTR_ID     = l_PCT_FL_TM_FCTR_ID  and
                PFR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PFR2.ORDR_NUM            = l_ORDR_NUM and
                PFR2.business_group_id  = c_business_group_id
                and   PFR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PFR                     c_PFR%rowtype;
   l_pct_fl_tm_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PFR_unique in c_unique_PFR('PFR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_PFR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PFR_unique.table_route_id '||r_PFR_unique.table_route_id,10);
       hr_utility.set_location(' r_PFR_unique.information1 '||r_PFR_unique.information1,10);
       hr_utility.set_location( 'r_PFR_unique.information2 '||r_PFR_unique.information2,10);
       hr_utility.set_location( 'r_PFR_unique.information3 '||r_PFR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PFR_min_max_dates(r_PFR_unique.table_route_id, r_PFR_unique.information1 ) ;
       fetch c_PFR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PFR_unique.information2);
       open c_PFR(r_PFR_unique.table_route_id,
                r_PFR_unique.information1,
                r_PFR_unique.information2,
                r_PFR_unique.information3 ) ;
       --
       fetch c_PFR into r_PFR ;
       --
       close c_PFR ;
       --
       l_PCT_FL_TM_FCTR_ID := get_fk('PCT_FL_TM_FCTR_ID', r_PFR.information233,r_PFR_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PFR.information262,r_PFR_unique.dml_operation);
       l_ORDR_NUM := r_PFR.INFORMATION257 ;
       --
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PFR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PFR_unique.information2 and r_PFR_unique.information3 then
               l_update := true;
               if r_PFR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PCT_FL_TM_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PCT_FL_TM_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PFR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PFR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PFR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PFR',l_new_value,l_prefix || r_PFR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_PFR_min_max_dates%found then
           -- cursor to find the object
           open c_find_PFR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_pct_fl_tm_rt_id, -999)  ) ;
           fetch c_find_PFR_in_target into l_new_value ;
           if c_find_PFR_in_target%found then
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PCT_FL_TM_RT_F',
                  p_base_key_column => 'PCT_FL_TM_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             --
             if r_PFR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'PCT_FL_TM_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'PCT_FL_TM_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PFR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PFR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PFR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_PFR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_PFR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PFR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PCT_FL_TM_RT_F CREATE_PCT_FULL_TIME_RATE ',20);
           BEN_PCT_FULL_TIME_RATE_API.CREATE_PCT_FULL_TIME_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_PFR.INFORMATION11
             ,P_ORDR_NUM      => r_PFR.INFORMATION257
             ,P_PCT_FL_TM_FCTR_ID      => l_PCT_FL_TM_FCTR_ID
             ,P_PCT_FL_TM_RT_ID      => l_pct_fl_tm_rt_id
             ,P_PFR_ATTRIBUTE1      => r_PFR.INFORMATION111
             ,P_PFR_ATTRIBUTE10      => r_PFR.INFORMATION120
             ,P_PFR_ATTRIBUTE11      => r_PFR.INFORMATION121
             ,P_PFR_ATTRIBUTE12      => r_PFR.INFORMATION122
             ,P_PFR_ATTRIBUTE13      => r_PFR.INFORMATION123
             ,P_PFR_ATTRIBUTE14      => r_PFR.INFORMATION124
             ,P_PFR_ATTRIBUTE15      => r_PFR.INFORMATION125
             ,P_PFR_ATTRIBUTE16      => r_PFR.INFORMATION126
             ,P_PFR_ATTRIBUTE17      => r_PFR.INFORMATION127
             ,P_PFR_ATTRIBUTE18      => r_PFR.INFORMATION128
             ,P_PFR_ATTRIBUTE19      => r_PFR.INFORMATION129
             ,P_PFR_ATTRIBUTE2      => r_PFR.INFORMATION112
             ,P_PFR_ATTRIBUTE20      => r_PFR.INFORMATION130
             ,P_PFR_ATTRIBUTE21      => r_PFR.INFORMATION131
             ,P_PFR_ATTRIBUTE22      => r_PFR.INFORMATION132
             ,P_PFR_ATTRIBUTE23      => r_PFR.INFORMATION133
             ,P_PFR_ATTRIBUTE24      => r_PFR.INFORMATION134
             ,P_PFR_ATTRIBUTE25      => r_PFR.INFORMATION135
             ,P_PFR_ATTRIBUTE26      => r_PFR.INFORMATION136
             ,P_PFR_ATTRIBUTE27      => r_PFR.INFORMATION137
             ,P_PFR_ATTRIBUTE28      => r_PFR.INFORMATION138
             ,P_PFR_ATTRIBUTE29      => r_PFR.INFORMATION139
             ,P_PFR_ATTRIBUTE3      => r_PFR.INFORMATION113
             ,P_PFR_ATTRIBUTE30      => r_PFR.INFORMATION140
             ,P_PFR_ATTRIBUTE4      => r_PFR.INFORMATION114
             ,P_PFR_ATTRIBUTE5      => r_PFR.INFORMATION115
             ,P_PFR_ATTRIBUTE6      => r_PFR.INFORMATION116
             ,P_PFR_ATTRIBUTE7      => r_PFR.INFORMATION117
             ,P_PFR_ATTRIBUTE8      => r_PFR.INFORMATION118
             ,P_PFR_ATTRIBUTE9      => r_PFR.INFORMATION119
             ,P_PFR_ATTRIBUTE_CATEGORY      => r_PFR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_pct_fl_tm_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'PCT_FL_TM_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PFR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_PCT_FL_TM_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PFR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PFR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PFR.information3,
               p_effective_start_date  => r_PFR.information2,
               p_dml_operation         => r_PFR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PCT_FL_TM_RT_ID   := r_PFR.information1;
             l_object_version_number := r_PFR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_PCT_FL_TM_RT_F UPDATE_PCT_FULL_TIME_RATE ',30);
           BEN_PCT_FULL_TIME_RATE_API.UPDATE_PCT_FULL_TIME_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_PFR.INFORMATION11
             ,P_ORDR_NUM      => r_PFR.INFORMATION257
             ,P_PCT_FL_TM_FCTR_ID      => l_PCT_FL_TM_FCTR_ID
             ,P_PCT_FL_TM_RT_ID      => l_pct_fl_tm_rt_id
             ,P_PFR_ATTRIBUTE1      => r_PFR.INFORMATION111
             ,P_PFR_ATTRIBUTE10      => r_PFR.INFORMATION120
             ,P_PFR_ATTRIBUTE11      => r_PFR.INFORMATION121
             ,P_PFR_ATTRIBUTE12      => r_PFR.INFORMATION122
             ,P_PFR_ATTRIBUTE13      => r_PFR.INFORMATION123
             ,P_PFR_ATTRIBUTE14      => r_PFR.INFORMATION124
             ,P_PFR_ATTRIBUTE15      => r_PFR.INFORMATION125
             ,P_PFR_ATTRIBUTE16      => r_PFR.INFORMATION126
             ,P_PFR_ATTRIBUTE17      => r_PFR.INFORMATION127
             ,P_PFR_ATTRIBUTE18      => r_PFR.INFORMATION128
             ,P_PFR_ATTRIBUTE19      => r_PFR.INFORMATION129
             ,P_PFR_ATTRIBUTE2      => r_PFR.INFORMATION112
             ,P_PFR_ATTRIBUTE20      => r_PFR.INFORMATION130
             ,P_PFR_ATTRIBUTE21      => r_PFR.INFORMATION131
             ,P_PFR_ATTRIBUTE22      => r_PFR.INFORMATION132
             ,P_PFR_ATTRIBUTE23      => r_PFR.INFORMATION133
             ,P_PFR_ATTRIBUTE24      => r_PFR.INFORMATION134
             ,P_PFR_ATTRIBUTE25      => r_PFR.INFORMATION135
             ,P_PFR_ATTRIBUTE26      => r_PFR.INFORMATION136
             ,P_PFR_ATTRIBUTE27      => r_PFR.INFORMATION137
             ,P_PFR_ATTRIBUTE28      => r_PFR.INFORMATION138
             ,P_PFR_ATTRIBUTE29      => r_PFR.INFORMATION139
             ,P_PFR_ATTRIBUTE3      => r_PFR.INFORMATION113
             ,P_PFR_ATTRIBUTE30      => r_PFR.INFORMATION140
             ,P_PFR_ATTRIBUTE4      => r_PFR.INFORMATION114
             ,P_PFR_ATTRIBUTE5      => r_PFR.INFORMATION115
             ,P_PFR_ATTRIBUTE6      => r_PFR.INFORMATION116
             ,P_PFR_ATTRIBUTE7      => r_PFR.INFORMATION117
             ,P_PFR_ATTRIBUTE8      => r_PFR.INFORMATION118
             ,P_PFR_ATTRIBUTE9      => r_PFR.INFORMATION119
             ,P_PFR_ATTRIBUTE_CATEGORY      => r_PFR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PFR.information3) then
             --
             BEN_PCT_FULL_TIME_RATE_API.delete_PCT_FULL_TIME_RATE(
                --
                p_validate                       => false
                ,p_pct_fl_tm_rt_id                   => l_pct_fl_tm_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PFR',r_pfr.information5 );
    --
 end create_PFR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_HWR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_HWR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_HRS_WKD_IN_PERD_FCTR_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   cursor c_unique_HWR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_HRS_WKD_IN_PERD_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_HWR_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_HWR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_HWR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     HWR.hrs_wkd_in_perd_rt_id new_value
   from BEN_HRS_WKD_IN_PERD_RT_F HWR
   where
   HWR.HRS_WKD_IN_PERD_FCTR_ID     = l_HRS_WKD_IN_PERD_FCTR_ID  and
   HWR.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
   HWR.ORDR_NUM           = l_ORDR_NUM and
   HWR.business_group_id  = c_business_group_id
   and   HWR.hrs_wkd_in_perd_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_HRS_WKD_IN_PERD_RT_F HWR1
                where
                HWR1.HRS_WKD_IN_PERD_FCTR_ID     = l_HRS_WKD_IN_PERD_FCTR_ID  and
                HWR1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                HWR1.ORDR_NUM           = l_ORDR_NUM and
                HWR1.business_group_id  = c_business_group_id
                and   HWR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_HRS_WKD_IN_PERD_RT_F HWR2
                where
                HWR2.HRS_WKD_IN_PERD_FCTR_ID     = l_HRS_WKD_IN_PERD_FCTR_ID  and
                HWR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                HWR2.ORDR_NUM           = l_ORDR_NUM and
                HWR2.business_group_id  = c_business_group_id
                and   HWR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_HWR                     c_HWR%rowtype;
   l_hrs_wkd_in_perd_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_HWR_unique in c_unique_HWR('HWR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_HWR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_HWR_unique.table_route_id '||r_HWR_unique.table_route_id,10);
       hr_utility.set_location(' r_HWR_unique.information1 '||r_HWR_unique.information1,10);
       hr_utility.set_location( 'r_HWR_unique.information2 '||r_HWR_unique.information2,10);
       hr_utility.set_location( 'r_HWR_unique.information3 '||r_HWR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_HWR_min_max_dates(r_HWR_unique.table_route_id, r_HWR_unique.information1 ) ;
       fetch c_HWR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_HWR_unique.information2);
       open c_HWR(r_HWR_unique.table_route_id,
                r_HWR_unique.information1,
                r_HWR_unique.information2,
                r_HWR_unique.information3 ) ;
       --
       fetch c_HWR into r_HWR ;
       --
       close c_HWR ;
       --
       l_HRS_WKD_IN_PERD_FCTR_ID := get_fk('HRS_WKD_IN_PERD_FCTR_ID', r_HWR.information224,r_HWR_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_HWR.information262,r_HWR_unique.dml_operation);
       l_ORDR_NUM         := r_HWR.INFORMATION260;
       l_EXCLD_FLAG      := r_HWR.information11;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_HWR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_HWR_unique.information2 and r_HWR_unique.information3 then
               l_update := true;
               if r_HWR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'HRS_WKD_IN_PERD_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'HRS_WKD_IN_PERD_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_HWR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_HWR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_HWR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('HWR',l_new_value,l_prefix || r_HWR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_HWR_min_max_dates%found then
           -- cursor to find the object
           open c_find_HWR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_hrs_wkd_in_perd_rt_id, -999)  ) ;
           fetch c_find_HWR_in_target into l_new_value ;
           if c_find_HWR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_HRS_WKD_IN_PERD_RT_F',
                  p_base_key_column => 'HRS_WKD_IN_PERD_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_HWR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'HRS_WKD_IN_PERD_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'HRS_WKD_IN_PERD_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_HWR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_HWR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_HWR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_HWR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_HWR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_HWR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_HRS_WKD_IN_PERD_RT_F CREATE_HRS_WKD_IN_PERIOD_RT ',20);
           BEN_HRS_WKD_IN_PERIOD_RT_API.CREATE_HRS_WKD_IN_PERIOD_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_HWR.INFORMATION11
             ,P_HRS_WKD_IN_PERD_FCTR_ID      => l_HRS_WKD_IN_PERD_FCTR_ID
             ,P_HRS_WKD_IN_PERD_RT_ID      => l_hrs_wkd_in_perd_rt_id
             ,P_HWR_ATTRIBUTE1      => r_HWR.INFORMATION111
             ,P_HWR_ATTRIBUTE10      => r_HWR.INFORMATION120
             ,P_HWR_ATTRIBUTE11      => r_HWR.INFORMATION121
             ,P_HWR_ATTRIBUTE12      => r_HWR.INFORMATION122
             ,P_HWR_ATTRIBUTE13      => r_HWR.INFORMATION123
             ,P_HWR_ATTRIBUTE14      => r_HWR.INFORMATION124
             ,P_HWR_ATTRIBUTE15      => r_HWR.INFORMATION125
             ,P_HWR_ATTRIBUTE16      => r_HWR.INFORMATION126
             ,P_HWR_ATTRIBUTE17      => r_HWR.INFORMATION127
             ,P_HWR_ATTRIBUTE18      => r_HWR.INFORMATION128
             ,P_HWR_ATTRIBUTE19      => r_HWR.INFORMATION129
             ,P_HWR_ATTRIBUTE2      => r_HWR.INFORMATION112
             ,P_HWR_ATTRIBUTE20      => r_HWR.INFORMATION130
             ,P_HWR_ATTRIBUTE21      => r_HWR.INFORMATION131
             ,P_HWR_ATTRIBUTE22      => r_HWR.INFORMATION132
             ,P_HWR_ATTRIBUTE23      => r_HWR.INFORMATION133
             ,P_HWR_ATTRIBUTE24      => r_HWR.INFORMATION134
             ,P_HWR_ATTRIBUTE25      => r_HWR.INFORMATION135
             ,P_HWR_ATTRIBUTE26      => r_HWR.INFORMATION136
             ,P_HWR_ATTRIBUTE27      => r_HWR.INFORMATION137
             ,P_HWR_ATTRIBUTE28      => r_HWR.INFORMATION138
             ,P_HWR_ATTRIBUTE29      => r_HWR.INFORMATION139
             ,P_HWR_ATTRIBUTE3      => r_HWR.INFORMATION113
             ,P_HWR_ATTRIBUTE30      => r_HWR.INFORMATION140
             ,P_HWR_ATTRIBUTE4      => r_HWR.INFORMATION114
             ,P_HWR_ATTRIBUTE5      => r_HWR.INFORMATION115
             ,P_HWR_ATTRIBUTE6      => r_HWR.INFORMATION116
             ,P_HWR_ATTRIBUTE7      => r_HWR.INFORMATION117
             ,P_HWR_ATTRIBUTE8      => r_HWR.INFORMATION118
             ,P_HWR_ATTRIBUTE9      => r_HWR.INFORMATION119
             ,P_HWR_ATTRIBUTE_CATEGORY      => r_HWR.INFORMATION110
             ,P_ORDR_NUM      => r_HWR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_hrs_wkd_in_perd_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'HRS_WKD_IN_PERD_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_HWR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_HRS_WKD_IN_PERD_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_HWR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_HWR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_HWR.information3,
               p_effective_start_date  => r_HWR.information2,
               p_dml_operation         => r_HWR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_HRS_WKD_IN_PERD_RT_ID   := r_HWR.information1;
             l_object_version_number := r_HWR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_HRS_WKD_IN_PERD_RT_F UPDATE_HRS_WKD_IN_PERIOD_RT ',30);
           BEN_HRS_WKD_IN_PERIOD_RT_API.UPDATE_HRS_WKD_IN_PERIOD_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_HWR.INFORMATION11
             ,P_HRS_WKD_IN_PERD_FCTR_ID      => l_HRS_WKD_IN_PERD_FCTR_ID
             ,P_HRS_WKD_IN_PERD_RT_ID      => l_hrs_wkd_in_perd_rt_id
             ,P_HWR_ATTRIBUTE1      => r_HWR.INFORMATION111
             ,P_HWR_ATTRIBUTE10      => r_HWR.INFORMATION120
             ,P_HWR_ATTRIBUTE11      => r_HWR.INFORMATION121
             ,P_HWR_ATTRIBUTE12      => r_HWR.INFORMATION122
             ,P_HWR_ATTRIBUTE13      => r_HWR.INFORMATION123
             ,P_HWR_ATTRIBUTE14      => r_HWR.INFORMATION124
             ,P_HWR_ATTRIBUTE15      => r_HWR.INFORMATION125
             ,P_HWR_ATTRIBUTE16      => r_HWR.INFORMATION126
             ,P_HWR_ATTRIBUTE17      => r_HWR.INFORMATION127
             ,P_HWR_ATTRIBUTE18      => r_HWR.INFORMATION128
             ,P_HWR_ATTRIBUTE19      => r_HWR.INFORMATION129
             ,P_HWR_ATTRIBUTE2      => r_HWR.INFORMATION112
             ,P_HWR_ATTRIBUTE20      => r_HWR.INFORMATION130
             ,P_HWR_ATTRIBUTE21      => r_HWR.INFORMATION131
             ,P_HWR_ATTRIBUTE22      => r_HWR.INFORMATION132
             ,P_HWR_ATTRIBUTE23      => r_HWR.INFORMATION133
             ,P_HWR_ATTRIBUTE24      => r_HWR.INFORMATION134
             ,P_HWR_ATTRIBUTE25      => r_HWR.INFORMATION135
             ,P_HWR_ATTRIBUTE26      => r_HWR.INFORMATION136
             ,P_HWR_ATTRIBUTE27      => r_HWR.INFORMATION137
             ,P_HWR_ATTRIBUTE28      => r_HWR.INFORMATION138
             ,P_HWR_ATTRIBUTE29      => r_HWR.INFORMATION139
             ,P_HWR_ATTRIBUTE3      => r_HWR.INFORMATION113
             ,P_HWR_ATTRIBUTE30      => r_HWR.INFORMATION140
             ,P_HWR_ATTRIBUTE4      => r_HWR.INFORMATION114
             ,P_HWR_ATTRIBUTE5      => r_HWR.INFORMATION115
             ,P_HWR_ATTRIBUTE6      => r_HWR.INFORMATION116
             ,P_HWR_ATTRIBUTE7      => r_HWR.INFORMATION117
             ,P_HWR_ATTRIBUTE8      => r_HWR.INFORMATION118
             ,P_HWR_ATTRIBUTE9      => r_HWR.INFORMATION119
             ,P_HWR_ATTRIBUTE_CATEGORY      => r_HWR.INFORMATION110
             ,P_ORDR_NUM      => r_HWR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_HWR.information3) then
             --
             BEN_HRS_WKD_IN_PERIOD_RT_API.delete_HRS_WKD_IN_PERIOD_RT(
                --
                p_validate                       => false
                ,p_hrs_wkd_in_perd_rt_id                   => l_hrs_wkd_in_perd_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'HWR',r_hwr.information5 );
    --
 end create_HWR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_CLR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_CLR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_COMP_LVL_FCTR_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG       varchar2(100);
   l_ORDR_NUM         number;
   cursor c_unique_CLR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_COMP_LVL_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_CLR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_CLR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_CLR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     CLR.comp_lvl_rt_id new_value
   from BEN_COMP_LVL_RT_F CLR
   where
   CLR.COMP_LVL_FCTR_ID   = l_COMP_LVL_FCTR_ID  and
   CLR.VRBL_RT_PRFL_ID    = l_VRBL_RT_PRFL_ID and
   CLR.ORDR_NUM           = l_ORDR_NUM and
   CLR.business_group_id  = c_business_group_id
   and   CLR.comp_lvl_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_COMP_LVL_RT_F CLR1
                where
                CLR1.COMP_LVL_FCTR_ID     = l_COMP_LVL_FCTR_ID  and
                CLR1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                CLR1.ORDR_NUM           = l_ORDR_NUM and
                CLR1.business_group_id  = c_business_group_id
                and   CLR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_COMP_LVL_RT_F CLR2
                where
                CLR2.COMP_LVL_FCTR_ID     = l_COMP_LVL_FCTR_ID  and
                CLR2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                CLR2.ORDR_NUM           = l_ORDR_NUM and
                CLR2.business_group_id  = c_business_group_id
                and   CLR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_CLR                     c_CLR%rowtype;
   l_comp_lvl_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_CLR_unique in c_unique_CLR('CLR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CLR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_CLR_unique.table_route_id '||r_CLR_unique.table_route_id,10);
       hr_utility.set_location(' r_CLR_unique.information1 '||r_CLR_unique.information1,10);
       hr_utility.set_location( 'r_CLR_unique.information2 '||r_CLR_unique.information2,10);
       hr_utility.set_location( 'r_CLR_unique.information3 '||r_CLR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_CLR_min_max_dates(r_CLR_unique.table_route_id, r_CLR_unique.information1 ) ;
       fetch c_CLR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_CLR_unique.information2);
       open c_CLR(r_CLR_unique.table_route_id,
                r_CLR_unique.information1,
                r_CLR_unique.information2,
                r_CLR_unique.information3 ) ;
       --
       fetch c_CLR into r_CLR ;
       --
       close c_CLR ;
       --
       l_COMP_LVL_FCTR_ID := get_fk('COMP_LVL_FCTR_ID', r_CLR.information254,r_CLR_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_CLR.information262,r_CLR_unique.dml_operation);
       l_ORDR_NUM         := r_CLR.INFORMATION260;
       l_EXCLD_FLAG      := r_CLR.information11;
       --
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_CLR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CLR_unique.information2 and r_CLR_unique.information3 then
               l_update := true;
               if r_CLR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'COMP_LVL_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'COMP_LVL_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CLR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CLR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CLR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('CLR',l_new_value,l_prefix || r_CLR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_CLR_min_max_dates%found then
           -- cursor to find the object
           open c_find_CLR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_comp_lvl_rt_id, -999)  ) ;
           fetch c_find_CLR_in_target into l_new_value ;
           if c_find_CLR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_COMP_LVL_RT_F',
                  p_base_key_column => 'COMP_LVL_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_CLR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'COMP_LVL_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'COMP_LVL_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_CLR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CLR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_CLR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_CLR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_CLR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_CLR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_COMP_LVL_RT_F CREATE_COMP_LEVEL_RATE ',20);
           BEN_COMP_LEVEL_RATE_API.CREATE_COMP_LEVEL_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CLR_ATTRIBUTE1      => r_CLR.INFORMATION111
             ,P_CLR_ATTRIBUTE10      => r_CLR.INFORMATION120
             ,P_CLR_ATTRIBUTE11      => r_CLR.INFORMATION121
             ,P_CLR_ATTRIBUTE12      => r_CLR.INFORMATION122
             ,P_CLR_ATTRIBUTE13      => r_CLR.INFORMATION123
             ,P_CLR_ATTRIBUTE14      => r_CLR.INFORMATION124
             ,P_CLR_ATTRIBUTE15      => r_CLR.INFORMATION125
             ,P_CLR_ATTRIBUTE16      => r_CLR.INFORMATION126
             ,P_CLR_ATTRIBUTE17      => r_CLR.INFORMATION127
             ,P_CLR_ATTRIBUTE18      => r_CLR.INFORMATION128
             ,P_CLR_ATTRIBUTE19      => r_CLR.INFORMATION129
             ,P_CLR_ATTRIBUTE2      => r_CLR.INFORMATION112
             ,P_CLR_ATTRIBUTE20      => r_CLR.INFORMATION130
             ,P_CLR_ATTRIBUTE21      => r_CLR.INFORMATION131
             ,P_CLR_ATTRIBUTE22      => r_CLR.INFORMATION132
             ,P_CLR_ATTRIBUTE23      => r_CLR.INFORMATION133
             ,P_CLR_ATTRIBUTE24      => r_CLR.INFORMATION134
             ,P_CLR_ATTRIBUTE25      => r_CLR.INFORMATION135
             ,P_CLR_ATTRIBUTE26      => r_CLR.INFORMATION136
             ,P_CLR_ATTRIBUTE27      => r_CLR.INFORMATION137
             ,P_CLR_ATTRIBUTE28      => r_CLR.INFORMATION138
             ,P_CLR_ATTRIBUTE29      => r_CLR.INFORMATION139
             ,P_CLR_ATTRIBUTE3      => r_CLR.INFORMATION113
             ,P_CLR_ATTRIBUTE30      => r_CLR.INFORMATION140
             ,P_CLR_ATTRIBUTE4      => r_CLR.INFORMATION114
             ,P_CLR_ATTRIBUTE5      => r_CLR.INFORMATION115
             ,P_CLR_ATTRIBUTE6      => r_CLR.INFORMATION116
             ,P_CLR_ATTRIBUTE7      => r_CLR.INFORMATION117
             ,P_CLR_ATTRIBUTE8      => r_CLR.INFORMATION118
             ,P_CLR_ATTRIBUTE9      => r_CLR.INFORMATION119
             ,P_CLR_ATTRIBUTE_CATEGORY      => r_CLR.INFORMATION110
             ,P_COMP_LVL_FCTR_ID      => l_COMP_LVL_FCTR_ID
             ,P_COMP_LVL_RT_ID      => l_comp_lvl_rt_id
             ,P_EXCLD_FLAG      => r_CLR.INFORMATION11
             ,P_ORDR_NUM      => r_CLR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_comp_lvl_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'COMP_LVL_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_CLR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_COMP_LVL_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_CLR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CLR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CLR.information3,
               p_effective_start_date  => r_CLR.information2,
               p_dml_operation         => r_CLR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_COMP_LVL_RT_ID   := r_CLR.information1;
             l_object_version_number := r_CLR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_COMP_LVL_RT_F UPDATE_COMP_LEVEL_RATE ',30);
           BEN_COMP_LEVEL_RATE_API.UPDATE_COMP_LEVEL_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
            ,P_CLR_ATTRIBUTE1      => r_CLR.INFORMATION111
             ,P_CLR_ATTRIBUTE10      => r_CLR.INFORMATION120
             ,P_CLR_ATTRIBUTE11      => r_CLR.INFORMATION121
             ,P_CLR_ATTRIBUTE12      => r_CLR.INFORMATION122
             ,P_CLR_ATTRIBUTE13      => r_CLR.INFORMATION123
             ,P_CLR_ATTRIBUTE14      => r_CLR.INFORMATION124
             ,P_CLR_ATTRIBUTE15      => r_CLR.INFORMATION125
             ,P_CLR_ATTRIBUTE16      => r_CLR.INFORMATION126
             ,P_CLR_ATTRIBUTE17      => r_CLR.INFORMATION127
             ,P_CLR_ATTRIBUTE18      => r_CLR.INFORMATION128
             ,P_CLR_ATTRIBUTE19      => r_CLR.INFORMATION129
             ,P_CLR_ATTRIBUTE2      => r_CLR.INFORMATION112
             ,P_CLR_ATTRIBUTE20      => r_CLR.INFORMATION130
             ,P_CLR_ATTRIBUTE21      => r_CLR.INFORMATION131
             ,P_CLR_ATTRIBUTE22      => r_CLR.INFORMATION132
             ,P_CLR_ATTRIBUTE23      => r_CLR.INFORMATION133
             ,P_CLR_ATTRIBUTE24      => r_CLR.INFORMATION134
             ,P_CLR_ATTRIBUTE25      => r_CLR.INFORMATION135
             ,P_CLR_ATTRIBUTE26      => r_CLR.INFORMATION136
             ,P_CLR_ATTRIBUTE27      => r_CLR.INFORMATION137
             ,P_CLR_ATTRIBUTE28      => r_CLR.INFORMATION138
             ,P_CLR_ATTRIBUTE29      => r_CLR.INFORMATION139
             ,P_CLR_ATTRIBUTE3      => r_CLR.INFORMATION113
             ,P_CLR_ATTRIBUTE30      => r_CLR.INFORMATION140
             ,P_CLR_ATTRIBUTE4      => r_CLR.INFORMATION114
             ,P_CLR_ATTRIBUTE5      => r_CLR.INFORMATION115
             ,P_CLR_ATTRIBUTE6      => r_CLR.INFORMATION116
             ,P_CLR_ATTRIBUTE7      => r_CLR.INFORMATION117
             ,P_CLR_ATTRIBUTE8      => r_CLR.INFORMATION118
             ,P_CLR_ATTRIBUTE9      => r_CLR.INFORMATION119
             ,P_CLR_ATTRIBUTE_CATEGORY      => r_CLR.INFORMATION110
             ,P_COMP_LVL_FCTR_ID      => l_COMP_LVL_FCTR_ID
             ,P_COMP_LVL_RT_ID      => l_comp_lvl_rt_id
             ,P_EXCLD_FLAG      => r_CLR.INFORMATION11
             ,P_ORDR_NUM      => r_CLR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_CLR.information3) then
             --
             BEN_COMP_LEVEL_RATE_API.delete_COMP_LEVEL_RATE(
                --
                p_validate                       => false
                ,p_comp_lvl_rt_id                   => l_comp_lvl_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CLR',r_clr.information5 );
    --
 end create_CLR_rows;

   ---------------------------------------------------------------
   ----------------------< create_LSR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LSR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_LOS_FCTR_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   cursor c_unique_LSR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LOS_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LSR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LSR(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LSR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LSR.los_rt_id new_value
   from BEN_LOS_RT_F LSR
   where
   LSR.LOS_FCTR_ID     = l_LOS_FCTR_ID  and
   LSR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   LSR.business_group_id  = c_business_group_id
   and   LSR.los_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LOS_RT_F LSR1
                where
                LSR1.LOS_FCTR_ID     = l_LOS_FCTR_ID  and
                LSR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                LSR1.business_group_id  = c_business_group_id
                and   LSR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LOS_RT_F LSR2
                where
                LSR2.LOS_FCTR_ID     = l_LOS_FCTR_ID  and
                LSR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                LSR2.business_group_id  = c_business_group_id
                and   LSR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LSR                     c_LSR%rowtype;
   l_los_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LSR_unique in c_unique_LSR('LSR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LSR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LSR_unique.table_route_id '||r_LSR_unique.table_route_id,10);
       hr_utility.set_location(' r_LSR_unique.information1 '||r_LSR_unique.information1,10);
       hr_utility.set_location( 'r_LSR_unique.information2 '||r_LSR_unique.information2,10);
       hr_utility.set_location( 'r_LSR_unique.information3 '||r_LSR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LSR_min_max_dates(r_LSR_unique.table_route_id, r_LSR_unique.information1 ) ;
       fetch c_LSR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LSR_unique.information2);
       open c_LSR(r_LSR_unique.table_route_id,
                r_LSR_unique.information1,
                r_LSR_unique.information2,
                r_LSR_unique.information3 ) ;
       --
       fetch c_LSR into r_LSR ;
       --
       close c_LSR ;
       --
       l_LOS_FCTR_ID := get_fk('LOS_FCTR_ID', r_LSR.information243,r_LSR_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_LSR.information262,r_LSR_unique.dml_operation);
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_LSR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LSR_unique.information2 and r_LSR_unique.information3 then
               l_update := true;
               if r_LSR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'VRBL_RT_PRFL_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'VRBL_RT_PRFL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LSR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LSR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LSR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('LSR',l_new_value,l_prefix || r_LSR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_LSR_min_max_dates%found then
           -- cursor to find the object
           open c_find_LSR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_los_rt_id, -999)  ) ;
           fetch c_find_LSR_in_target into l_new_value ;
           if c_find_LSR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LOS_RT_F',
                  p_base_key_column => 'LOS_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LSR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'LOS_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'LOS_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_LSR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_LSR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LSR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_LSR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_LSR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LSR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LOS_RT_F CREATE_LENGTH_OF_SVC_RATE ',20);
           BEN_LENGTH_OF_SVC_RATE_API.CREATE_LENGTH_OF_SVC_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_LSR.INFORMATION11
             ,P_LOS_FCTR_ID      => l_LOS_FCTR_ID
             ,P_LOS_RT_ID      => l_los_rt_id
             ,P_LSR_ATTRIBUTE1      => r_LSR.INFORMATION111
             ,P_LSR_ATTRIBUTE10      => r_LSR.INFORMATION120
             ,P_LSR_ATTRIBUTE11      => r_LSR.INFORMATION121
             ,P_LSR_ATTRIBUTE12      => r_LSR.INFORMATION122
             ,P_LSR_ATTRIBUTE13      => r_LSR.INFORMATION123
             ,P_LSR_ATTRIBUTE14      => r_LSR.INFORMATION124
             ,P_LSR_ATTRIBUTE15      => r_LSR.INFORMATION125
             ,P_LSR_ATTRIBUTE16      => r_LSR.INFORMATION126
             ,P_LSR_ATTRIBUTE17      => r_LSR.INFORMATION127
             ,P_LSR_ATTRIBUTE18      => r_LSR.INFORMATION128
             ,P_LSR_ATTRIBUTE19      => r_LSR.INFORMATION129
             ,P_LSR_ATTRIBUTE2      => r_LSR.INFORMATION112
             ,P_LSR_ATTRIBUTE20      => r_LSR.INFORMATION130
             ,P_LSR_ATTRIBUTE21      => r_LSR.INFORMATION131
             ,P_LSR_ATTRIBUTE22      => r_LSR.INFORMATION132
             ,P_LSR_ATTRIBUTE23      => r_LSR.INFORMATION133
             ,P_LSR_ATTRIBUTE24      => r_LSR.INFORMATION134
             ,P_LSR_ATTRIBUTE25      => r_LSR.INFORMATION135
             ,P_LSR_ATTRIBUTE26      => r_LSR.INFORMATION136
             ,P_LSR_ATTRIBUTE27      => r_LSR.INFORMATION137
             ,P_LSR_ATTRIBUTE28      => r_LSR.INFORMATION138
             ,P_LSR_ATTRIBUTE29      => r_LSR.INFORMATION139
             ,P_LSR_ATTRIBUTE3      => r_LSR.INFORMATION113
             ,P_LSR_ATTRIBUTE30      => r_LSR.INFORMATION140
             ,P_LSR_ATTRIBUTE4      => r_LSR.INFORMATION114
             ,P_LSR_ATTRIBUTE5      => r_LSR.INFORMATION115
             ,P_LSR_ATTRIBUTE6      => r_LSR.INFORMATION116
             ,P_LSR_ATTRIBUTE7      => r_LSR.INFORMATION117
             ,P_LSR_ATTRIBUTE8      => r_LSR.INFORMATION118
             ,P_LSR_ATTRIBUTE9      => r_LSR.INFORMATION119
             ,P_LSR_ATTRIBUTE_CATEGORY      => r_LSR.INFORMATION110
             ,P_ORDR_NUM      => r_LSR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_los_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'LOS_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_LSR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_LOS_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_LSR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LSR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LSR.information3,
               p_effective_start_date  => r_LSR.information2,
               p_dml_operation         => r_LSR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_VRBL_RT_PRFL_ID   := r_LSR.information1;
             l_object_version_number := r_LSR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_LOS_RT_F UPDATE_LENGTH_OF_SVC_RATE ',30);
           BEN_LENGTH_OF_SVC_RATE_API.UPDATE_LENGTH_OF_SVC_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_LSR.INFORMATION11
             ,P_LOS_FCTR_ID      => l_LOS_FCTR_ID
             ,P_LOS_RT_ID      => l_los_rt_id
             ,P_LSR_ATTRIBUTE1      => r_LSR.INFORMATION111
             ,P_LSR_ATTRIBUTE10      => r_LSR.INFORMATION120
             ,P_LSR_ATTRIBUTE11      => r_LSR.INFORMATION121
             ,P_LSR_ATTRIBUTE12      => r_LSR.INFORMATION122
             ,P_LSR_ATTRIBUTE13      => r_LSR.INFORMATION123
             ,P_LSR_ATTRIBUTE14      => r_LSR.INFORMATION124
             ,P_LSR_ATTRIBUTE15      => r_LSR.INFORMATION125
             ,P_LSR_ATTRIBUTE16      => r_LSR.INFORMATION126
             ,P_LSR_ATTRIBUTE17      => r_LSR.INFORMATION127
             ,P_LSR_ATTRIBUTE18      => r_LSR.INFORMATION128
             ,P_LSR_ATTRIBUTE19      => r_LSR.INFORMATION129
             ,P_LSR_ATTRIBUTE2      => r_LSR.INFORMATION112
             ,P_LSR_ATTRIBUTE20      => r_LSR.INFORMATION130
             ,P_LSR_ATTRIBUTE21      => r_LSR.INFORMATION131
             ,P_LSR_ATTRIBUTE22      => r_LSR.INFORMATION132
             ,P_LSR_ATTRIBUTE23      => r_LSR.INFORMATION133
             ,P_LSR_ATTRIBUTE24      => r_LSR.INFORMATION134
             ,P_LSR_ATTRIBUTE25      => r_LSR.INFORMATION135
             ,P_LSR_ATTRIBUTE26      => r_LSR.INFORMATION136
             ,P_LSR_ATTRIBUTE27      => r_LSR.INFORMATION137
             ,P_LSR_ATTRIBUTE28      => r_LSR.INFORMATION138
             ,P_LSR_ATTRIBUTE29      => r_LSR.INFORMATION139
             ,P_LSR_ATTRIBUTE3      => r_LSR.INFORMATION113
             ,P_LSR_ATTRIBUTE30      => r_LSR.INFORMATION140
             ,P_LSR_ATTRIBUTE4      => r_LSR.INFORMATION114
             ,P_LSR_ATTRIBUTE5      => r_LSR.INFORMATION115
             ,P_LSR_ATTRIBUTE6      => r_LSR.INFORMATION116
             ,P_LSR_ATTRIBUTE7      => r_LSR.INFORMATION117
             ,P_LSR_ATTRIBUTE8      => r_LSR.INFORMATION118
             ,P_LSR_ATTRIBUTE9      => r_LSR.INFORMATION119
             ,P_LSR_ATTRIBUTE_CATEGORY      => r_LSR.INFORMATION110
             ,P_ORDR_NUM      => r_LSR.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LSR.information3) then
             --
             BEN_LENGTH_OF_SVC_RATE_API.delete_LENGTH_OF_SVC_RATE(
                --
                p_validate                       => false
                ,p_los_rt_id                   => l_los_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LSR',r_lsr.information5 );
    --
 end create_LSR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_LRN_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_LRN_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_LVG_RSN_CD     varchar2(30); -- IK Added
   cursor c_unique_LRN(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_LVG_RSN_RT_F
   and tr.table_alias = l_table_alias
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_LRN_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_LRN(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_LRN_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     LRN.lvg_rsn_rt_id new_value
   from BEN_LVG_RSN_RT_F LRN
   where
   LRN.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
   LRN.LVG_RSN_CD        = l_LVG_RSN_CD and
   LRN.business_group_id  = c_business_group_id
   and   LRN.lvg_rsn_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_LVG_RSN_RT_F LRN1
                where
                LRN1.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                LRN1.LVG_RSN_CD        = l_LVG_RSN_CD and
                LRN1.business_group_id  = c_business_group_id
                and   LRN1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_LVG_RSN_RT_F LRN2
                where
                LRN2.VRBL_RT_PRFL_ID = l_VRBL_RT_PRFL_ID and
                LRN2.LVG_RSN_CD        = l_LVG_RSN_CD and
                LRN2.business_group_id  = c_business_group_id
                and   LRN2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_LRN                     c_LRN%rowtype;
   l_lvg_rsn_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_LRN_unique in c_unique_LRN('LRN') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_LRN_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_LRN_unique.table_route_id '||r_LRN_unique.table_route_id,10);
       hr_utility.set_location(' r_LRN_unique.information1 '||r_LRN_unique.information1,10);
       hr_utility.set_location( 'r_LRN_unique.information2 '||r_LRN_unique.information2,10);
       hr_utility.set_location( 'r_LRN_unique.information3 '||r_LRN_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_LRN_min_max_dates(r_LRN_unique.table_route_id, r_LRN_unique.information1 ) ;
       fetch c_LRN_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_LRN_unique.information2);
       open c_LRN(r_LRN_unique.table_route_id,
                r_LRN_unique.information1,
                r_LRN_unique.information2,
                r_LRN_unique.information3 ) ;
       --
       fetch c_LRN into r_LRN ;
       --
       close c_LRN ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_LRN.information262,r_LRN_unique.dml_operation);
       l_LVG_RSN_CD    := r_LRN.information11;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_LRN_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_LRN_unique.information2 and r_LRN_unique.information3 then
               l_update := true;
               if r_LRN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'LVG_RSN_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LVG_RSN_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LRN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_LRN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LRN_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('LRN',l_new_value,l_prefix || r_LRN_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_LRN_min_max_dates%found then
           -- cursor to find the object
           open c_find_LRN_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_lvg_rsn_rt_id, -999)  ) ;
           fetch c_find_LRN_in_target into l_new_value ;
           if c_find_LRN_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_LVG_RSN_RT_F',
                  p_base_key_column => 'LVG_RSN_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_LRN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'LVG_RSN_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'LVG_RSN_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_LRN_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LRN_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_LRN_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_LRN_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_LRN.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_LRN.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_LVG_RSN_RT_F CREATE_LVG_RSN_RT ',20);
           BEN_LVG_RSN_RT_API.CREATE_LVG_RSN_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_LRN.INFORMATION12
             ,P_LRN_ATTRIBUTE1      => r_LRN.INFORMATION111
             ,P_LRN_ATTRIBUTE10      => r_LRN.INFORMATION120
             ,P_LRN_ATTRIBUTE11      => r_LRN.INFORMATION121
             ,P_LRN_ATTRIBUTE12      => r_LRN.INFORMATION122
             ,P_LRN_ATTRIBUTE13      => r_LRN.INFORMATION123
             ,P_LRN_ATTRIBUTE14      => r_LRN.INFORMATION124
             ,P_LRN_ATTRIBUTE15      => r_LRN.INFORMATION125
             ,P_LRN_ATTRIBUTE16      => r_LRN.INFORMATION126
             ,P_LRN_ATTRIBUTE17      => r_LRN.INFORMATION127
             ,P_LRN_ATTRIBUTE18      => r_LRN.INFORMATION128
             ,P_LRN_ATTRIBUTE19      => r_LRN.INFORMATION129
             ,P_LRN_ATTRIBUTE2      => r_LRN.INFORMATION112
             ,P_LRN_ATTRIBUTE20      => r_LRN.INFORMATION130
             ,P_LRN_ATTRIBUTE21      => r_LRN.INFORMATION131
             ,P_LRN_ATTRIBUTE22      => r_LRN.INFORMATION132
             ,P_LRN_ATTRIBUTE23      => r_LRN.INFORMATION133
             ,P_LRN_ATTRIBUTE24      => r_LRN.INFORMATION134
             ,P_LRN_ATTRIBUTE25      => r_LRN.INFORMATION135
             ,P_LRN_ATTRIBUTE26      => r_LRN.INFORMATION136
             ,P_LRN_ATTRIBUTE27      => r_LRN.INFORMATION137
             ,P_LRN_ATTRIBUTE28      => r_LRN.INFORMATION138
             ,P_LRN_ATTRIBUTE29      => r_LRN.INFORMATION139
             ,P_LRN_ATTRIBUTE3      => r_LRN.INFORMATION113
             ,P_LRN_ATTRIBUTE30      => r_LRN.INFORMATION140
             ,P_LRN_ATTRIBUTE4      => r_LRN.INFORMATION114
             ,P_LRN_ATTRIBUTE5      => r_LRN.INFORMATION115
             ,P_LRN_ATTRIBUTE6      => r_LRN.INFORMATION116
             ,P_LRN_ATTRIBUTE7      => r_LRN.INFORMATION117
             ,P_LRN_ATTRIBUTE8      => r_LRN.INFORMATION118
             ,P_LRN_ATTRIBUTE9      => r_LRN.INFORMATION119
             ,P_LRN_ATTRIBUTE_CATEGORY      => r_LRN.INFORMATION110
             ,P_LVG_RSN_CD      => r_LRN.INFORMATION11
             ,P_LVG_RSN_RT_ID      => l_lvg_rsn_rt_id
             ,P_ORDR_NUM      => r_LRN.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_lvg_rsn_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'LVG_RSN_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_LRN.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_LVG_RSN_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_LRN_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_LRN.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_LRN.information3,
               p_effective_start_date  => r_LRN.information2,
               p_dml_operation         => r_LRN.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_LVG_RSN_RT_ID   := r_LRN.information1;
             l_object_version_number := r_LRN.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_LVG_RSN_RT_F UPDATE_LVG_RSN_RT ',30);
           BEN_LVG_RSN_RT_API.UPDATE_LVG_RSN_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_LRN.INFORMATION12
             ,P_LRN_ATTRIBUTE1      => r_LRN.INFORMATION111
             ,P_LRN_ATTRIBUTE10      => r_LRN.INFORMATION120
             ,P_LRN_ATTRIBUTE11      => r_LRN.INFORMATION121
             ,P_LRN_ATTRIBUTE12      => r_LRN.INFORMATION122
             ,P_LRN_ATTRIBUTE13      => r_LRN.INFORMATION123
             ,P_LRN_ATTRIBUTE14      => r_LRN.INFORMATION124
             ,P_LRN_ATTRIBUTE15      => r_LRN.INFORMATION125
             ,P_LRN_ATTRIBUTE16      => r_LRN.INFORMATION126
             ,P_LRN_ATTRIBUTE17      => r_LRN.INFORMATION127
             ,P_LRN_ATTRIBUTE18      => r_LRN.INFORMATION128
             ,P_LRN_ATTRIBUTE19      => r_LRN.INFORMATION129
             ,P_LRN_ATTRIBUTE2      => r_LRN.INFORMATION112
             ,P_LRN_ATTRIBUTE20      => r_LRN.INFORMATION130
             ,P_LRN_ATTRIBUTE21      => r_LRN.INFORMATION131
             ,P_LRN_ATTRIBUTE22      => r_LRN.INFORMATION132
             ,P_LRN_ATTRIBUTE23      => r_LRN.INFORMATION133
             ,P_LRN_ATTRIBUTE24      => r_LRN.INFORMATION134
             ,P_LRN_ATTRIBUTE25      => r_LRN.INFORMATION135
             ,P_LRN_ATTRIBUTE26      => r_LRN.INFORMATION136
             ,P_LRN_ATTRIBUTE27      => r_LRN.INFORMATION137
             ,P_LRN_ATTRIBUTE28      => r_LRN.INFORMATION138
             ,P_LRN_ATTRIBUTE29      => r_LRN.INFORMATION139
             ,P_LRN_ATTRIBUTE3      => r_LRN.INFORMATION113
             ,P_LRN_ATTRIBUTE30      => r_LRN.INFORMATION140
             ,P_LRN_ATTRIBUTE4      => r_LRN.INFORMATION114
             ,P_LRN_ATTRIBUTE5      => r_LRN.INFORMATION115
             ,P_LRN_ATTRIBUTE6      => r_LRN.INFORMATION116
             ,P_LRN_ATTRIBUTE7      => r_LRN.INFORMATION117
             ,P_LRN_ATTRIBUTE8      => r_LRN.INFORMATION118
             ,P_LRN_ATTRIBUTE9      => r_LRN.INFORMATION119
             ,P_LRN_ATTRIBUTE_CATEGORY      => r_LRN.INFORMATION110
             ,P_LVG_RSN_CD      => r_LRN.INFORMATION11
             ,P_LVG_RSN_RT_ID      => l_lvg_rsn_rt_id
             ,P_ORDR_NUM      => r_LRN.INFORMATION257
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_LRN.information3) then
             --
             BEN_LVG_RSN_RT_API.delete_LVG_RSN_RT(
                --
                p_validate                       => false
                ,p_lvg_rsn_rt_id                   => l_lvg_rsn_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'LRN',r_lrn.information5 );
    --
 end create_LRN_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ART_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ART_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_AGE_FCTR_ID      number;
   l_VRBL_RT_PRFL_ID  number;
   l_ORDR_NUM         number;
   --
   cursor c_unique_ART(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_AGE_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ART_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ART(c_table_route_id number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ART_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ART.age_rt_id new_value
   from BEN_AGE_RT_F ART
   where
   ART.AGE_FCTR_ID     = l_AGE_FCTR_ID  and
   ART.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   ART.ORDR_NUM            = l_ORDR_NUM and
   ART.business_group_id  = c_business_group_id
   and   ART.age_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_AGE_RT_F ART1
                where
                ART1.AGE_FCTR_ID     = l_AGE_FCTR_ID  and
                ART1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                ART1.ORDR_NUM            = l_ORDR_NUM and
                ART1.business_group_id  = c_business_group_id
                and   ART1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_AGE_RT_F ART2
                where
                ART2.AGE_FCTR_ID     = l_AGE_FCTR_ID  and
                ART2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                ART2.ORDR_NUM            = l_ORDR_NUM and
                ART2.business_group_id  = c_business_group_id
                and   ART2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ART                     c_ART%rowtype;
   l_age_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ART_unique in c_unique_ART('ART') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ART_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ART_unique.table_route_id '||r_ART_unique.table_route_id,10);
       hr_utility.set_location(' r_ART_unique.information1 '||r_ART_unique.information1,10);
       hr_utility.set_location( 'r_ART_unique.information2 '||r_ART_unique.information2,10);
       hr_utility.set_location( 'r_ART_unique.information3 '||r_ART_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ART_min_max_dates(r_ART_unique.table_route_id, r_ART_unique.information1 ) ;
       fetch c_ART_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ART_unique.information2);
       open c_ART(r_ART_unique.table_route_id,
                r_ART_unique.information1,
                r_ART_unique.information2,
                r_ART_unique.information3 ) ;
       --
       fetch c_ART into r_ART ;
       --
       close c_ART ;
       --
       l_AGE_FCTR_ID := get_fk('AGE_FCTR_ID', r_ART.information246,r_ART_unique.dml_operation);
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_ART.information262,r_ART_unique.dml_operation);
       l_ORDR_NUM        := r_ART.INFORMATION260 ;
       --
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ART_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ART_unique.information2 and r_ART_unique.information3 then
               l_update := true;
               if r_ART_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'AGE_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'AGE_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ART_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ART_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ART_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ART',l_new_value,l_prefix || r_ART_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_ART_min_max_dates%found then
           -- cursor to find the object
           open c_find_ART_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_age_rt_id, -999)  ) ;
           fetch c_find_ART_in_target into l_new_value ;
           if c_find_ART_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_AGE_RT_F',
                  p_base_key_column => 'AGE_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_ART_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'AGE_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'AGE_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_ART_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ART_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_ART_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_ART_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_ART.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ART.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_AGE_RT_F CREATE_AGE_RATES ',20);
           BEN_AGE_RATES_API.CREATE_AGE_RATES(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_AGE_FCTR_ID      => l_AGE_FCTR_ID
             ,P_AGE_RT_ID      => l_age_rt_id
             ,P_ART_ATTRIBUTE1      => r_ART.INFORMATION111
             ,P_ART_ATTRIBUTE10      => r_ART.INFORMATION120
             ,P_ART_ATTRIBUTE11      => r_ART.INFORMATION121
             ,P_ART_ATTRIBUTE12      => r_ART.INFORMATION122
             ,P_ART_ATTRIBUTE13      => r_ART.INFORMATION123
             ,P_ART_ATTRIBUTE14      => r_ART.INFORMATION124
             ,P_ART_ATTRIBUTE15      => r_ART.INFORMATION125
             ,P_ART_ATTRIBUTE16      => r_ART.INFORMATION126
             ,P_ART_ATTRIBUTE17      => r_ART.INFORMATION127
             ,P_ART_ATTRIBUTE18      => r_ART.INFORMATION128
             ,P_ART_ATTRIBUTE19      => r_ART.INFORMATION129
             ,P_ART_ATTRIBUTE2      => r_ART.INFORMATION112
             ,P_ART_ATTRIBUTE20      => r_ART.INFORMATION130
             ,P_ART_ATTRIBUTE21      => r_ART.INFORMATION131
             ,P_ART_ATTRIBUTE22      => r_ART.INFORMATION132
             ,P_ART_ATTRIBUTE23      => r_ART.INFORMATION133
             ,P_ART_ATTRIBUTE24      => r_ART.INFORMATION134
             ,P_ART_ATTRIBUTE25      => r_ART.INFORMATION135
             ,P_ART_ATTRIBUTE26      => r_ART.INFORMATION136
             ,P_ART_ATTRIBUTE27      => r_ART.INFORMATION137
             ,P_ART_ATTRIBUTE28      => r_ART.INFORMATION138
             ,P_ART_ATTRIBUTE29      => r_ART.INFORMATION139
             ,P_ART_ATTRIBUTE3      => r_ART.INFORMATION113
             ,P_ART_ATTRIBUTE30      => r_ART.INFORMATION140
             ,P_ART_ATTRIBUTE4      => r_ART.INFORMATION114
             ,P_ART_ATTRIBUTE5      => r_ART.INFORMATION115
             ,P_ART_ATTRIBUTE6      => r_ART.INFORMATION116
             ,P_ART_ATTRIBUTE7      => r_ART.INFORMATION117
             ,P_ART_ATTRIBUTE8      => r_ART.INFORMATION118
             ,P_ART_ATTRIBUTE9      => r_ART.INFORMATION119
             ,P_ART_ATTRIBUTE_CATEGORY      => r_ART.INFORMATION110
             ,P_EXCLD_FLAG      => r_ART.INFORMATION11
             ,P_ORDR_NUM      => r_ART.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_age_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'AGE_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_ART.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_AGE_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_ART_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ART.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ART.information3,
               p_effective_start_date  => r_ART.information2,
               p_dml_operation         => r_ART.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_AGE_RT_ID   := r_ART.information1;
             l_object_version_number := r_ART.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_AGE_RT_F UPDATE_AGE_RATES ',30);
           BEN_AGE_RATES_API.UPDATE_AGE_RATES(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_AGE_FCTR_ID      => l_AGE_FCTR_ID
             ,P_AGE_RT_ID      => l_age_rt_id
             ,P_ART_ATTRIBUTE1      => r_ART.INFORMATION111
             ,P_ART_ATTRIBUTE10      => r_ART.INFORMATION120
             ,P_ART_ATTRIBUTE11      => r_ART.INFORMATION121
             ,P_ART_ATTRIBUTE12      => r_ART.INFORMATION122
             ,P_ART_ATTRIBUTE13      => r_ART.INFORMATION123
             ,P_ART_ATTRIBUTE14      => r_ART.INFORMATION124
             ,P_ART_ATTRIBUTE15      => r_ART.INFORMATION125
             ,P_ART_ATTRIBUTE16      => r_ART.INFORMATION126
             ,P_ART_ATTRIBUTE17      => r_ART.INFORMATION127
             ,P_ART_ATTRIBUTE18      => r_ART.INFORMATION128
             ,P_ART_ATTRIBUTE19      => r_ART.INFORMATION129
             ,P_ART_ATTRIBUTE2      => r_ART.INFORMATION112
             ,P_ART_ATTRIBUTE20      => r_ART.INFORMATION130
             ,P_ART_ATTRIBUTE21      => r_ART.INFORMATION131
             ,P_ART_ATTRIBUTE22      => r_ART.INFORMATION132
             ,P_ART_ATTRIBUTE23      => r_ART.INFORMATION133
             ,P_ART_ATTRIBUTE24      => r_ART.INFORMATION134
             ,P_ART_ATTRIBUTE25      => r_ART.INFORMATION135
             ,P_ART_ATTRIBUTE26      => r_ART.INFORMATION136
             ,P_ART_ATTRIBUTE27      => r_ART.INFORMATION137
             ,P_ART_ATTRIBUTE28      => r_ART.INFORMATION138
             ,P_ART_ATTRIBUTE29      => r_ART.INFORMATION139
             ,P_ART_ATTRIBUTE3      => r_ART.INFORMATION113
             ,P_ART_ATTRIBUTE30      => r_ART.INFORMATION140
             ,P_ART_ATTRIBUTE4      => r_ART.INFORMATION114
             ,P_ART_ATTRIBUTE5      => r_ART.INFORMATION115
             ,P_ART_ATTRIBUTE6      => r_ART.INFORMATION116
             ,P_ART_ATTRIBUTE7      => r_ART.INFORMATION117
             ,P_ART_ATTRIBUTE8      => r_ART.INFORMATION118
             ,P_ART_ATTRIBUTE9      => r_ART.INFORMATION119
             ,P_ART_ATTRIBUTE_CATEGORY      => r_ART.INFORMATION110
             ,P_EXCLD_FLAG      => r_ART.INFORMATION11
             ,P_ORDR_NUM      => r_ART.INFORMATION260
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_ART.information3) then
             --
             BEN_AGE_RATES_API.delete_AGE_RATES(
                --
                p_validate                       => false
                ,p_age_rt_id                   => l_age_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
               --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ART',r_art.information5 );
    --
 end create_ART_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_SHR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_SHR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_HRS_NUM          number;
   l_EXCLD_FLAG     varchar2(100);
   l_FREQ_CD        varchar2(100);
   l_DETERMINATION_CD varchar2(30);
   l_DETERMINATION_RL number;
   l_MAX_HRS_NUM number;
   l_ROUNDING_CD varchar2(30);
   l_ROUNDING_RL number;
   l_SCHEDD_HRS_RL number;
   l_ORDR_NUM number;

   cursor c_unique_SHR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_SCHEDD_HRS_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_SHR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_SHR(c_table_route_id number,
                c_information1   number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_SHR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     SHR.schedd_hrs_rt_id new_value
   from BEN_SCHEDD_HRS_RT_F SHR
   where
    SHR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
    NVL(SHR.HRS_NUM,-999)   = NVL(l_HRS_NUM,-999) and
    NVL(SHR.FREQ_CD,-999)   =  NVL(l_FREQ_CD,-999) and
    NVL(SHR.DETERMINATION_CD,-999) = NVL(l_DETERMINATION_CD,-999) and
    NVL(SHR.DETERMINATION_RL,-999) = NVL(l_DETERMINATION_RL,-999) and
    NVL(SHR.MAX_HRS_NUM,-999) = NVL(l_MAX_HRS_NUM,-999) and
    NVL(SHR.ROUNDING_CD,-999) = NVL(l_ROUNDING_CD,-999) and
    NVL(SHR.ROUNDING_RL,-999) = NVL(l_ROUNDING_RL,-999) and
    NVL(SHR.SCHEDD_HRS_RL,-999) = NVL(l_SCHEDD_HRS_RL,-999) and
    SHR.ORDR_NUM      = l_ORDR_NUM and
    SHR.business_group_id  = c_business_group_id
   and   SHR.schedd_hrs_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_SCHEDD_HRS_RT_F SHR1
                where
                SHR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                NVL(SHR1.HRS_NUM,-999)   = NVL(l_HRS_NUM,-999) and
                NVL(SHR1.FREQ_CD,-999)   =  NVL(l_FREQ_CD,-999) and
                NVL(SHR1.DETERMINATION_CD,-999) = NVL(l_DETERMINATION_CD,-999) and
                NVL(SHR1.DETERMINATION_RL,-999) = NVL(l_DETERMINATION_RL,-999) and
                NVL(SHR1.MAX_HRS_NUM,-999) = NVL(l_MAX_HRS_NUM,-999) and
                NVL(SHR1.ROUNDING_CD,-999) = NVL(l_ROUNDING_CD,-999) and
                NVL(SHR1.ROUNDING_RL,-999) = NVL(l_ROUNDING_RL,-999) and
                NVL(SHR1.SCHEDD_HRS_RL,-999) = NVL(l_SCHEDD_HRS_RL,-999) and
                SHR1.ORDR_NUM      = l_ORDR_NUM and
                SHR1.business_group_id  = c_business_group_id
                and   SHR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_SCHEDD_HRS_RT_F SHR2
                where
                SHR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                NVL(SHR2.HRS_NUM,-999)   = NVL(l_HRS_NUM,-999) and
                NVL(SHR2.FREQ_CD,-999)   =  NVL(l_FREQ_CD,-999) and
                NVL(SHR2.DETERMINATION_CD,-999) = NVL(l_DETERMINATION_CD,-999) and
                NVL(SHR2.DETERMINATION_RL,-999) = NVL(l_DETERMINATION_RL,-999) and
                NVL(SHR2.MAX_HRS_NUM,-999) = NVL(l_MAX_HRS_NUM,-999) and
                NVL(SHR2.ROUNDING_CD,-999) = NVL(l_ROUNDING_CD,-999) and
                NVL(SHR2.ROUNDING_RL,-999) = NVL(l_ROUNDING_RL,-999) and
                NVL(SHR2.SCHEDD_HRS_RL,-999) = NVL(l_SCHEDD_HRS_RL,-999)and
                SHR2.ORDR_NUM      = l_ORDR_NUM and
                SHR2.business_group_id  = c_business_group_id
                and   SHR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_SHR                     c_SHR%rowtype;
   l_schedd_hrs_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_SHR_unique in c_unique_SHR('SHR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_SHR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_SHR_unique.table_route_id '||r_SHR_unique.table_route_id,10);
       hr_utility.set_location(' r_SHR_unique.information1 '||r_SHR_unique.information1,10);
       hr_utility.set_location( 'r_SHR_unique.information2 '||r_SHR_unique.information2,10);
       hr_utility.set_location( 'r_SHR_unique.information3 '||r_SHR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_SHR_min_max_dates(r_SHR_unique.table_route_id, r_SHR_unique.information1 ) ;
       fetch c_SHR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_SHR_unique.information2);
       open c_SHR(r_SHR_unique.table_route_id,
                r_SHR_unique.information1,
                r_SHR_unique.information2,
                r_SHR_unique.information3 ) ;
       --
       fetch c_SHR into r_SHR ;
       --
       close c_SHR ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_SHR.information262,r_SHR_unique.dml_operation);
       l_EXCLD_FLAG      := r_SHR.information13;
       l_FREQ_CD         := r_SHR.information14;
       l_HRS_NUM         := r_SHR.information288;
       l_DETERMINATION_CD := r_SHR.information12;
       l_DETERMINATION_RL := get_fk('FORMULA_ID', r_SHR.information259,r_SHR_unique.dml_operation);
       l_ROUNDING_CD      := r_SHR.information11;
       l_ROUNDING_RL      := get_fk('FORMULA_ID', r_SHR.information257,r_SHR_unique.dml_operation);
       l_SCHEDD_HRS_RL    := get_fk('FORMULA_ID', r_SHR.information258,r_SHR_unique.dml_operation);
       l_MAX_HRS_NUM      := r_SHR.information287;
       l_ORDR_NUM         := r_SHR.INFORMATION260;
        --UPD STSHR
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_SHR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_SHR_unique.information2 and r_SHR_unique.information3 then
               l_update := true;
               if r_SHR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'SCHEDD_HRS_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'SCHEDD_HRS_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_SHR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_SHR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_SHR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('SHR',l_new_value,l_prefix || r_SHR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_SHR_min_max_dates%found then
           -- cursor to find the object
           open c_find_SHR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_schedd_hrs_rt_id, -999)  ) ;
           fetch c_find_SHR_in_target into l_new_value ;
           if c_find_SHR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_SCHEDD_HRS_RT_F',
                  p_base_key_column => 'SCHEDD_HRS_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_SHR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'SCHEDD_HRS_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'SCHEDD_HRS_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_SHR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_SHR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_SHR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_SHR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_SHR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_SHR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_SCHEDD_HRS_RT_F CREATE_SCHEDD_HRS_RATE ',20);
           BEN_SCHEDD_HRS_RATE_API.CREATE_SCHEDD_HRS_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DETERMINATION_CD      => r_SHR.INFORMATION12
             ,P_DETERMINATION_RL      => l_DETERMINATION_RL
             ,P_EXCLD_FLAG      => r_SHR.INFORMATION13
             ,P_FREQ_CD      => r_SHR.INFORMATION14
             ,P_HRS_NUM      => r_SHR.INFORMATION288
             ,P_MAX_HRS_NUM      => r_SHR.INFORMATION287
             ,P_ORDR_NUM      => r_SHR.INFORMATION260
             ,P_ROUNDING_CD      => r_SHR.INFORMATION11
             ,P_ROUNDING_RL      => l_ROUNDING_RL
             ,P_SCHEDD_HRS_RL      => l_SCHEDD_HRS_RL
             ,P_SCHEDD_HRS_RT_ID      => l_schedd_hrs_rt_id
             ,P_SHR_ATTRIBUTE1      => r_SHR.INFORMATION111
             ,P_SHR_ATTRIBUTE10      => r_SHR.INFORMATION120
             ,P_SHR_ATTRIBUTE11      => r_SHR.INFORMATION121
             ,P_SHR_ATTRIBUTE12      => r_SHR.INFORMATION122
             ,P_SHR_ATTRIBUTE13      => r_SHR.INFORMATION123
             ,P_SHR_ATTRIBUTE14      => r_SHR.INFORMATION124
             ,P_SHR_ATTRIBUTE15      => r_SHR.INFORMATION125
             ,P_SHR_ATTRIBUTE16      => r_SHR.INFORMATION126
             ,P_SHR_ATTRIBUTE17      => r_SHR.INFORMATION127
             ,P_SHR_ATTRIBUTE18      => r_SHR.INFORMATION128
             ,P_SHR_ATTRIBUTE19      => r_SHR.INFORMATION129
             ,P_SHR_ATTRIBUTE2      => r_SHR.INFORMATION112
             ,P_SHR_ATTRIBUTE20      => r_SHR.INFORMATION130
             ,P_SHR_ATTRIBUTE21      => r_SHR.INFORMATION131
             ,P_SHR_ATTRIBUTE22      => r_SHR.INFORMATION132
             ,P_SHR_ATTRIBUTE23      => r_SHR.INFORMATION133
             ,P_SHR_ATTRIBUTE24      => r_SHR.INFORMATION134
             ,P_SHR_ATTRIBUTE25      => r_SHR.INFORMATION135
             ,P_SHR_ATTRIBUTE26      => r_SHR.INFORMATION136
             ,P_SHR_ATTRIBUTE27      => r_SHR.INFORMATION137
             ,P_SHR_ATTRIBUTE28      => r_SHR.INFORMATION138
             ,P_SHR_ATTRIBUTE29      => r_SHR.INFORMATION139
             ,P_SHR_ATTRIBUTE3      => r_SHR.INFORMATION113
             ,P_SHR_ATTRIBUTE30      => r_SHR.INFORMATION140
             ,P_SHR_ATTRIBUTE4      => r_SHR.INFORMATION114
             ,P_SHR_ATTRIBUTE5      => r_SHR.INFORMATION115
             ,P_SHR_ATTRIBUTE6      => r_SHR.INFORMATION116
             ,P_SHR_ATTRIBUTE7      => r_SHR.INFORMATION117
             ,P_SHR_ATTRIBUTE8      => r_SHR.INFORMATION118
             ,P_SHR_ATTRIBUTE9      => r_SHR.INFORMATION119
             ,P_SHR_ATTRIBUTE_CATEGORY      => r_SHR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_schedd_hrs_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'SCHEDD_HRS_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_SHR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_SCHEDD_HRS_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_SHR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD STSHR
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_SHR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_SHR.information3,
               p_effective_start_date  => r_SHR.information2,
               p_dml_operation         => r_SHR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_SCHEDD_HRS_RT_ID   := r_SHR.information1;
             l_object_version_number := r_SHR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_SCHEDD_HRS_RT_F UPDATE_SCHEDD_HRS_RATE ',30);
           BEN_SCHEDD_HRS_RATE_API.UPDATE_SCHEDD_HRS_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DETERMINATION_CD      => r_SHR.INFORMATION12
             ,P_DETERMINATION_RL      => l_DETERMINATION_RL
             ,P_EXCLD_FLAG      => r_SHR.INFORMATION13
             ,P_FREQ_CD      => r_SHR.INFORMATION14
             ,P_HRS_NUM      => r_SHR.INFORMATION288
             ,P_MAX_HRS_NUM      => r_SHR.INFORMATION287
             ,P_ORDR_NUM      => r_SHR.INFORMATION260
             ,P_ROUNDING_CD      => r_SHR.INFORMATION11
             ,P_ROUNDING_RL      => l_ROUNDING_RL
             ,P_SCHEDD_HRS_RL      => l_SCHEDD_HRS_RL
             ,P_SCHEDD_HRS_RT_ID      => l_schedd_hrs_rt_id
             ,P_SHR_ATTRIBUTE1      => r_SHR.INFORMATION111
             ,P_SHR_ATTRIBUTE10      => r_SHR.INFORMATION120
             ,P_SHR_ATTRIBUTE11      => r_SHR.INFORMATION121
             ,P_SHR_ATTRIBUTE12      => r_SHR.INFORMATION122
             ,P_SHR_ATTRIBUTE13      => r_SHR.INFORMATION123
             ,P_SHR_ATTRIBUTE14      => r_SHR.INFORMATION124
             ,P_SHR_ATTRIBUTE15      => r_SHR.INFORMATION125
             ,P_SHR_ATTRIBUTE16      => r_SHR.INFORMATION126
             ,P_SHR_ATTRIBUTE17      => r_SHR.INFORMATION127
             ,P_SHR_ATTRIBUTE18      => r_SHR.INFORMATION128
             ,P_SHR_ATTRIBUTE19      => r_SHR.INFORMATION129
             ,P_SHR_ATTRIBUTE2      => r_SHR.INFORMATION112
             ,P_SHR_ATTRIBUTE20      => r_SHR.INFORMATION130
             ,P_SHR_ATTRIBUTE21      => r_SHR.INFORMATION131
             ,P_SHR_ATTRIBUTE22      => r_SHR.INFORMATION132
             ,P_SHR_ATTRIBUTE23      => r_SHR.INFORMATION133
             ,P_SHR_ATTRIBUTE24      => r_SHR.INFORMATION134
             ,P_SHR_ATTRIBUTE25      => r_SHR.INFORMATION135
             ,P_SHR_ATTRIBUTE26      => r_SHR.INFORMATION136
             ,P_SHR_ATTRIBUTE27      => r_SHR.INFORMATION137
             ,P_SHR_ATTRIBUTE28      => r_SHR.INFORMATION138
             ,P_SHR_ATTRIBUTE29      => r_SHR.INFORMATION139
             ,P_SHR_ATTRIBUTE3      => r_SHR.INFORMATION113
             ,P_SHR_ATTRIBUTE30      => r_SHR.INFORMATION140
             ,P_SHR_ATTRIBUTE4      => r_SHR.INFORMATION114
             ,P_SHR_ATTRIBUTE5      => r_SHR.INFORMATION115
             ,P_SHR_ATTRIBUTE6      => r_SHR.INFORMATION116
             ,P_SHR_ATTRIBUTE7      => r_SHR.INFORMATION117
             ,P_SHR_ATTRIBUTE8      => r_SHR.INFORMATION118
             ,P_SHR_ATTRIBUTE9      => r_SHR.INFORMATION119
             ,P_SHR_ATTRIBUTE_CATEGORY      => r_SHR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_SHR.information3) then
             --
             BEN_SCHEDD_HRS_RATE_API.delete_SCHEDD_HRS_RATE(
                --
                p_validate                       => false
                ,p_schedd_hrs_rt_id                   => l_schedd_hrs_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'SHR',r_shr.information5 );
    --
 end create_SHR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_QIG_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_QIG_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_EXCLD_FLAG     varchar2(100);
   l_QUAR_IN_GRADE_CD varchar2(100);
   l_ORDR_NUM         varchar2(100);
   --
   cursor c_unique_QIG(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_QUA_IN_GR_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_QIG_min_max_dates(c_table_route_id  number,
                c_information1   Number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_QIG(c_table_route_id  number,
                c_information1   number,
                c_information2   Date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_QIG_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     QIG.qua_in_gr_rt_id new_value
   from BEN_QUA_IN_GR_RT_F QIG
   where
   QIG.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   QIG.QUAR_IN_GRADE_CD     = l_QUAR_IN_GRADE_CD  and
   QIG.ORDR_NUM             =  l_ORDR_NUM and
   QIG.business_group_id  = c_business_group_id
   and   QIG.qua_in_gr_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_QUA_IN_GR_RT_F QIG1
                where
                QIG1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                QIG1.QUAR_IN_GRADE_CD     = l_QUAR_IN_GRADE_CD  and
                QIG1.ORDR_NUM             =  l_ORDR_NUM and
                QIG1.business_group_id  = c_business_group_id
                and   QIG1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_QUA_IN_GR_RT_F QIG2
                where
                QIG2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                QIG2.QUAR_IN_GRADE_CD     = l_QUAR_IN_GRADE_CD  and
                QIG2.ORDR_NUM             =  l_ORDR_NUM and
                QIG2.business_group_id  = c_business_group_id
                and   QIG2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_QIG                     c_QIG%rowtype;
   l_qua_in_gr_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_QIG_unique in c_unique_QIG('QIG') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_QIG_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_QIG_unique.table_route_id '||r_QIG_unique.table_route_id,10);
       hr_utility.set_location(' r_QIG_unique.information1 '||r_QIG_unique.information1,10);
       hr_utility.set_location( 'r_QIG_unique.information2 '||r_QIG_unique.information2,10);
       hr_utility.set_location( 'r_QIG_unique.information3 '||r_QIG_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_QIG_min_max_dates(r_QIG_unique.table_route_id, r_QIG_unique.information1 ) ;
       fetch c_QIG_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_QIG_unique.information2);
       open c_QIG(r_QIG_unique.table_route_id,
                r_QIG_unique.information1,
                r_QIG_unique.information2,
                r_QIG_unique.information3 ) ;
       --
       fetch c_QIG into r_QIG ;
       --
       close c_QIG ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_QIG.information262,r_QIG_unique.dml_operation);
       l_EXCLD_FLAG      := r_QIG.information12;
       l_QUAR_IN_GRADE_CD     := r_QIG.INFORMATION11;
       l_ORDR_NUM      := r_QIG.INFORMATION257;
       --UPD STQIG
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_QIG_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_QIG_unique.information2 and r_QIG_unique.information3 then
               l_update := true;
               if r_QIG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'QUA_IN_GR_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'QUA_IN_GR_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_QIG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_QIG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_QIG_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('QIG',l_new_value,l_prefix || r_QIG_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_QIG_min_max_dates%found then
           -- cursor to find the object
           open c_find_QIG_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_qua_in_gr_rt_id, -999)  ) ;
           fetch c_find_QIG_in_target into l_new_value ;
           if c_find_QIG_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_QUA_IN_GR_RT_F',
                  p_base_key_column => 'QUA_IN_GR_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_QIG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'QUA_IN_GR_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'QUA_IN_GR_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_QIG_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_QIG_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_QIG_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_QIG_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_QIG.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_QIG.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_QUA_IN_GR_RT_F CREATE_QUA_IN_GR_RT ',20);
           BEN_QUA_IN_GR_RT_API.CREATE_QUA_IN_GR_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_QIG.INFORMATION12
             ,P_ORDR_NUM      => r_QIG.INFORMATION257
             ,P_QIG_ATTRIBUTE1      => r_QIG.INFORMATION111
             ,P_QIG_ATTRIBUTE10      => r_QIG.INFORMATION120
             ,P_QIG_ATTRIBUTE11      => r_QIG.INFORMATION121
             ,P_QIG_ATTRIBUTE12      => r_QIG.INFORMATION122
             ,P_QIG_ATTRIBUTE13      => r_QIG.INFORMATION123
             ,P_QIG_ATTRIBUTE14      => r_QIG.INFORMATION124
             ,P_QIG_ATTRIBUTE15      => r_QIG.INFORMATION125
             ,P_QIG_ATTRIBUTE16      => r_QIG.INFORMATION126
             ,P_QIG_ATTRIBUTE17      => r_QIG.INFORMATION127
             ,P_QIG_ATTRIBUTE18      => r_QIG.INFORMATION128
             ,P_QIG_ATTRIBUTE19      => r_QIG.INFORMATION129
             ,P_QIG_ATTRIBUTE2      => r_QIG.INFORMATION112
             ,P_QIG_ATTRIBUTE20      => r_QIG.INFORMATION130
             ,P_QIG_ATTRIBUTE21      => r_QIG.INFORMATION131
             ,P_QIG_ATTRIBUTE22      => r_QIG.INFORMATION132
             ,P_QIG_ATTRIBUTE23      => r_QIG.INFORMATION133
             ,P_QIG_ATTRIBUTE24      => r_QIG.INFORMATION134
             ,P_QIG_ATTRIBUTE25      => r_QIG.INFORMATION135
             ,P_QIG_ATTRIBUTE26      => r_QIG.INFORMATION136
             ,P_QIG_ATTRIBUTE27      => r_QIG.INFORMATION137
             ,P_QIG_ATTRIBUTE28      => r_QIG.INFORMATION138
             ,P_QIG_ATTRIBUTE29      => r_QIG.INFORMATION139
             ,P_QIG_ATTRIBUTE3      => r_QIG.INFORMATION113
             ,P_QIG_ATTRIBUTE30      => r_QIG.INFORMATION140
             ,P_QIG_ATTRIBUTE4      => r_QIG.INFORMATION114
             ,P_QIG_ATTRIBUTE5      => r_QIG.INFORMATION115
             ,P_QIG_ATTRIBUTE6      => r_QIG.INFORMATION116
             ,P_QIG_ATTRIBUTE7      => r_QIG.INFORMATION117
             ,P_QIG_ATTRIBUTE8      => r_QIG.INFORMATION118
             ,P_QIG_ATTRIBUTE9      => r_QIG.INFORMATION119
             ,P_QIG_ATTRIBUTE_CATEGORY      => r_QIG.INFORMATION110
             ,P_QUAR_IN_GRADE_CD      => r_QIG.INFORMATION11
             ,P_QUA_IN_GR_RT_ID      => l_qua_in_gr_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_qua_in_gr_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'QUA_IN_GR_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_QIG.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_QUA_IN_GR_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_QIG_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD STQIG
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_QIG.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_QIG.information3,
               p_effective_start_date  => r_QIG.information2,
               p_dml_operation         => r_QIG.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_QUA_IN_GR_RT_ID   := r_QIG.information1;
             l_object_version_number := r_QIG.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_QUA_IN_GR_RT_F UPDATE_QUA_IN_GR_RT ',30);
           BEN_QUA_IN_GR_RT_API.UPDATE_QUA_IN_GR_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_QIG.INFORMATION12
             ,P_ORDR_NUM      => r_QIG.INFORMATION257
             ,P_QIG_ATTRIBUTE1      => r_QIG.INFORMATION111
             ,P_QIG_ATTRIBUTE10      => r_QIG.INFORMATION120
             ,P_QIG_ATTRIBUTE11      => r_QIG.INFORMATION121
             ,P_QIG_ATTRIBUTE12      => r_QIG.INFORMATION122
             ,P_QIG_ATTRIBUTE13      => r_QIG.INFORMATION123
             ,P_QIG_ATTRIBUTE14      => r_QIG.INFORMATION124
             ,P_QIG_ATTRIBUTE15      => r_QIG.INFORMATION125
             ,P_QIG_ATTRIBUTE16      => r_QIG.INFORMATION126
             ,P_QIG_ATTRIBUTE17      => r_QIG.INFORMATION127
             ,P_QIG_ATTRIBUTE18      => r_QIG.INFORMATION128
             ,P_QIG_ATTRIBUTE19      => r_QIG.INFORMATION129
             ,P_QIG_ATTRIBUTE2      => r_QIG.INFORMATION112
             ,P_QIG_ATTRIBUTE20      => r_QIG.INFORMATION130
             ,P_QIG_ATTRIBUTE21      => r_QIG.INFORMATION131
             ,P_QIG_ATTRIBUTE22      => r_QIG.INFORMATION132
             ,P_QIG_ATTRIBUTE23      => r_QIG.INFORMATION133
             ,P_QIG_ATTRIBUTE24      => r_QIG.INFORMATION134
             ,P_QIG_ATTRIBUTE25      => r_QIG.INFORMATION135
             ,P_QIG_ATTRIBUTE26      => r_QIG.INFORMATION136
             ,P_QIG_ATTRIBUTE27      => r_QIG.INFORMATION137
             ,P_QIG_ATTRIBUTE28      => r_QIG.INFORMATION138
             ,P_QIG_ATTRIBUTE29      => r_QIG.INFORMATION139
             ,P_QIG_ATTRIBUTE3      => r_QIG.INFORMATION113
             ,P_QIG_ATTRIBUTE30      => r_QIG.INFORMATION140
             ,P_QIG_ATTRIBUTE4      => r_QIG.INFORMATION114
             ,P_QIG_ATTRIBUTE5      => r_QIG.INFORMATION115
             ,P_QIG_ATTRIBUTE6      => r_QIG.INFORMATION116
             ,P_QIG_ATTRIBUTE7      => r_QIG.INFORMATION117
             ,P_QIG_ATTRIBUTE8      => r_QIG.INFORMATION118
             ,P_QIG_ATTRIBUTE9      => r_QIG.INFORMATION119
             ,P_QIG_ATTRIBUTE_CATEGORY      => r_QIG.INFORMATION110
             ,P_QUAR_IN_GRADE_CD      => r_QIG.INFORMATION11
             ,P_QUA_IN_GR_RT_ID      => l_qua_in_gr_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_QIG.information3) then
             --
             BEN_QUA_IN_GR_RT_API.delete_QUA_IN_GR_RT(
                --
                p_validate                       => false
                ,p_qua_in_gr_rt_id                   => l_qua_in_gr_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'QIG',r_qig.information5 );
    --
 end create_QIG_rows;

   ---------------------------------------------------------------
   ----------------------< create_PRR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_PRR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_VRBL_RT_PRFL_ID  number;
   l_EVENT_TYPE     varchar2(100);
   l_EXCLD_FLAG     varchar2(100);
   l_ORDR_NUM       number;
   l_PERF_RTNG_CD   varchar2(100);
   --
   cursor c_unique_PRR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PERF_RTNG_RT_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PRR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PRR(c_table_route_id  number,
                c_information1    number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PRR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PRR.perf_rtng_rt_id new_value
   from BEN_PERF_RTNG_RT_F PRR
   where
   PRR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   PRR.ORDR_NUM          = l_ORDR_NUM       and
   PRR.EVENT_TYPE          = l_EVENT_TYPE       and
   PRR.PERF_RTNG_CD        = l_PERF_RTNG_CD       and
   PRR.business_group_id  = c_business_group_id
   and   PRR.perf_rtng_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PERF_RTNG_RT_F PRR1
                where
                PRR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PRR1.ORDR_NUM          = l_ORDR_NUM       and
                PRR1.EVENT_TYPE          = l_EVENT_TYPE       and
                PRR1.PERF_RTNG_CD        = l_PERF_RTNG_CD       and
                PRR1.business_group_id  = c_business_group_id
                and   PRR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PERF_RTNG_RT_F PRR2
                where
                PRR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PRR2.ORDR_NUM          = l_ORDR_NUM       and
                PRR2.EVENT_TYPE          = l_EVENT_TYPE       and
                PRR2.PERF_RTNG_CD        = l_PERF_RTNG_CD       and
                PRR2.business_group_id  = c_business_group_id
                and   PRR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PRR                     c_PRR%rowtype;
   l_perf_rtng_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PRR_unique in c_unique_PRR('PRR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
          r_PRR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PRR_unique.table_route_id '||r_PRR_unique.table_route_id,10);
       hr_utility.set_location(' r_PRR_unique.information1 '||r_PRR_unique.information1,10);
       hr_utility.set_location( 'r_PRR_unique.information2 '||r_PRR_unique.information2,10);
       hr_utility.set_location( 'r_PRR_unique.information3 '||r_PRR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PRR_min_max_dates(r_PRR_unique.table_route_id, r_PRR_unique.information1 ) ;
       fetch c_PRR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PRR_unique.information2);
       open c_PRR(r_PRR_unique.table_route_id,
                r_PRR_unique.information1,
                r_PRR_unique.information2,
                r_PRR_unique.information3 ) ;
       --
       fetch c_PRR into r_PRR ;
       --
       close c_PRR ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PRR.information262,r_PRR_unique.dml_operation);
       l_EXCLD_FLAG      := r_PRR.INFORMATION11;
       l_EVENT_TYPE      := r_PRR.INFORMATION13;
       l_ORDR_NUM        := r_PRR.INFORMATION257;
       l_PERF_RTNG_CD    := r_PRR.INFORMATION12;
       --UPD STPRR
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PRR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PRR_unique.information2 and r_PRR_unique.information3 then
               l_update := true;
               if r_PRR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PERF_RTNG_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PERF_RTNG_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PRR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PRR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PRR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PRR',l_new_value,l_prefix || r_PRR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_PRR_min_max_dates%found then
           -- cursor to find the object
           open c_find_PRR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_perf_rtng_rt_id, -999)  ) ;
           fetch c_find_PRR_in_target into l_new_value ;
           if c_find_PRR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PERF_RTNG_RT_F',
                  p_base_key_column => 'PERF_RTNG_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PRR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'PERF_RTNG_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'PERF_RTNG_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PRR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PRR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PRR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_PRR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_PRR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PRR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PERF_RTNG_RT_F CREATE_PERF_RTNG_RT ',20);
           BEN_PERF_RTNG_RT_API.CREATE_PERF_RTNG_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EVENT_TYPE      => r_PRR.INFORMATION13
             ,P_EXCLD_FLAG      => r_PRR.INFORMATION11
             ,P_ORDR_NUM      => r_PRR.INFORMATION257
             ,P_PERF_RTNG_CD      => r_PRR.INFORMATION12
             ,P_PERF_RTNG_RT_ID      => l_perf_rtng_rt_id
             ,P_PRR_ATTRIBUTE1      => r_PRR.INFORMATION111
             ,P_PRR_ATTRIBUTE10      => r_PRR.INFORMATION120
             ,P_PRR_ATTRIBUTE11      => r_PRR.INFORMATION121
             ,P_PRR_ATTRIBUTE12      => r_PRR.INFORMATION122
             ,P_PRR_ATTRIBUTE13      => r_PRR.INFORMATION123
             ,P_PRR_ATTRIBUTE14      => r_PRR.INFORMATION124
             ,P_PRR_ATTRIBUTE15      => r_PRR.INFORMATION125
             ,P_PRR_ATTRIBUTE16      => r_PRR.INFORMATION126
             ,P_PRR_ATTRIBUTE17      => r_PRR.INFORMATION127
             ,P_PRR_ATTRIBUTE18      => r_PRR.INFORMATION128
             ,P_PRR_ATTRIBUTE19      => r_PRR.INFORMATION129
             ,P_PRR_ATTRIBUTE2      => r_PRR.INFORMATION112
             ,P_PRR_ATTRIBUTE20      => r_PRR.INFORMATION130
             ,P_PRR_ATTRIBUTE21      => r_PRR.INFORMATION131
             ,P_PRR_ATTRIBUTE22      => r_PRR.INFORMATION132
             ,P_PRR_ATTRIBUTE23      => r_PRR.INFORMATION133
             ,P_PRR_ATTRIBUTE24      => r_PRR.INFORMATION134
             ,P_PRR_ATTRIBUTE25      => r_PRR.INFORMATION135
             ,P_PRR_ATTRIBUTE26      => r_PRR.INFORMATION136
             ,P_PRR_ATTRIBUTE27      => r_PRR.INFORMATION137
             ,P_PRR_ATTRIBUTE28      => r_PRR.INFORMATION138
             ,P_PRR_ATTRIBUTE29      => r_PRR.INFORMATION139
             ,P_PRR_ATTRIBUTE3      => r_PRR.INFORMATION113
             ,P_PRR_ATTRIBUTE30      => r_PRR.INFORMATION140
             ,P_PRR_ATTRIBUTE4      => r_PRR.INFORMATION114
             ,P_PRR_ATTRIBUTE5      => r_PRR.INFORMATION115
             ,P_PRR_ATTRIBUTE6      => r_PRR.INFORMATION116
             ,P_PRR_ATTRIBUTE7      => r_PRR.INFORMATION117
             ,P_PRR_ATTRIBUTE8      => r_PRR.INFORMATION118
             ,P_PRR_ATTRIBUTE9      => r_PRR.INFORMATION119
             ,P_PRR_ATTRIBUTE_CATEGORY      => r_PRR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_perf_rtng_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'PERF_RTNG_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PRR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_PERF_RTNG_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PRR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD STPRR
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PRR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PRR.information3,
               p_effective_start_date  => r_PRR.information2,
               p_dml_operation         => r_PRR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PERF_RTNG_RT_ID   := r_PRR.information1;
             l_object_version_number := r_PRR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_PERF_RTNG_RT_F UPDATE_PERF_RTNG_RT ',30);
           BEN_PERF_RTNG_RT_API.UPDATE_PERF_RTNG_RT(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EVENT_TYPE      => r_PRR.INFORMATION13
             ,P_EXCLD_FLAG      => r_PRR.INFORMATION11
             ,P_ORDR_NUM      => r_PRR.INFORMATION257
             ,P_PERF_RTNG_CD      => r_PRR.INFORMATION12
             ,P_PERF_RTNG_RT_ID      => l_perf_rtng_rt_id
             ,P_PRR_ATTRIBUTE1      => r_PRR.INFORMATION111
             ,P_PRR_ATTRIBUTE10      => r_PRR.INFORMATION120
             ,P_PRR_ATTRIBUTE11      => r_PRR.INFORMATION121
             ,P_PRR_ATTRIBUTE12      => r_PRR.INFORMATION122
             ,P_PRR_ATTRIBUTE13      => r_PRR.INFORMATION123
             ,P_PRR_ATTRIBUTE14      => r_PRR.INFORMATION124
             ,P_PRR_ATTRIBUTE15      => r_PRR.INFORMATION125
             ,P_PRR_ATTRIBUTE16      => r_PRR.INFORMATION126
             ,P_PRR_ATTRIBUTE17      => r_PRR.INFORMATION127
             ,P_PRR_ATTRIBUTE18      => r_PRR.INFORMATION128
             ,P_PRR_ATTRIBUTE19      => r_PRR.INFORMATION129
             ,P_PRR_ATTRIBUTE2      => r_PRR.INFORMATION112
             ,P_PRR_ATTRIBUTE20      => r_PRR.INFORMATION130
             ,P_PRR_ATTRIBUTE21      => r_PRR.INFORMATION131
             ,P_PRR_ATTRIBUTE22      => r_PRR.INFORMATION132
             ,P_PRR_ATTRIBUTE23      => r_PRR.INFORMATION133
             ,P_PRR_ATTRIBUTE24      => r_PRR.INFORMATION134
             ,P_PRR_ATTRIBUTE25      => r_PRR.INFORMATION135
             ,P_PRR_ATTRIBUTE26      => r_PRR.INFORMATION136
             ,P_PRR_ATTRIBUTE27      => r_PRR.INFORMATION137
             ,P_PRR_ATTRIBUTE28      => r_PRR.INFORMATION138
             ,P_PRR_ATTRIBUTE29      => r_PRR.INFORMATION139
             ,P_PRR_ATTRIBUTE3      => r_PRR.INFORMATION113
             ,P_PRR_ATTRIBUTE30      => r_PRR.INFORMATION140
             ,P_PRR_ATTRIBUTE4      => r_PRR.INFORMATION114
             ,P_PRR_ATTRIBUTE5      => r_PRR.INFORMATION115
             ,P_PRR_ATTRIBUTE6      => r_PRR.INFORMATION116
             ,P_PRR_ATTRIBUTE7      => r_PRR.INFORMATION117
             ,P_PRR_ATTRIBUTE8      => r_PRR.INFORMATION118
             ,P_PRR_ATTRIBUTE9      => r_PRR.INFORMATION119
             ,P_PRR_ATTRIBUTE_CATEGORY      => r_PRR.INFORMATION110
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PRR.information3) then
             --
             BEN_PERF_RTNG_RT_API.delete_PERF_RTNG_RT(
                --
                p_validate                       => false
                ,p_perf_rtng_rt_id                   => l_perf_rtng_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PRR',r_prr.information5 );
    --
 end create_PRR_rows;

 ---------------------------------------------------------------
 ----------------------< create_PGR_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_PGR_rows
 (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
   --
   l_PEOPLE_GROUP_ID  number;
   l_VRBL_RT_PRFL_ID  number;
   --
  cursor c_unique_PGR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_PPL_GRP_RT_F
   and   tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_PGR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_PGR(c_table_route_id  number,
                c_information1    number,
                c_information2   Date,
                c_information3   Date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_PGR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     PGR.ppl_grp_rt_id new_value
   from BEN_PPL_GRP_RT_F PGR
   where
   PGR.PEOPLE_GROUP_ID     = l_PEOPLE_GROUP_ID  and
   PGR.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
   PGR.business_group_id  = c_business_group_id
   and   PGR.ppl_grp_rt_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
   and exists ( select null
                from BEN_PPL_GRP_RT_F PGR1
                where
                PGR1.PEOPLE_GROUP_ID     = l_PEOPLE_GROUP_ID  and
                PGR1.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PGR1.business_group_id  = c_business_group_id
                and   PGR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_PPL_GRP_RT_F PGR2
                where
                PGR2.PEOPLE_GROUP_ID     = l_PEOPLE_GROUP_ID  and
                PGR2.VRBL_RT_PRFL_ID     = l_VRBL_RT_PRFL_ID  and
                PGR2.business_group_id  = c_business_group_id
                and   PGR2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
   --
   l_current_pk_id           number := null ;
   --UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_PGR                     c_PGR%rowtype;
   l_ppl_grp_rt_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_PGR_unique in c_unique_PGR('PGR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
          r_PGR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_PGR_unique.table_route_id '||r_PGR_unique.table_route_id,10);
       hr_utility.set_location(' r_PGR_unique.information1 '||r_PGR_unique.information1,10);
       hr_utility.set_location( 'r_PGR_unique.information2 '||r_PGR_unique.information2,10);
       hr_utility.set_location( 'r_PGR_unique.information3 '||r_PGR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       l_min_esd := null ;
       l_max_eed := null ;
       open c_PGR_min_max_dates(r_PGR_unique.table_route_id, r_PGR_unique.information1 ) ;
       fetch c_PGR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_PGR_unique.information2);
       open c_PGR(r_PGR_unique.table_route_id,
                r_PGR_unique.information1,
                r_PGR_unique.information2,
                r_PGR_unique.information3 ) ;
       --
       fetch c_PGR into r_PGR ;
       --
       close c_PGR ;
       --
       l_VRBL_RT_PRFL_ID := get_fk('VRBL_RT_PRFL_ID', r_PGR.information262,r_PGR_unique.dml_operation);
       l_PEOPLE_GROUP_ID := NVL(get_fk('PEOPLE_GROUP_ID',r_PGR.INFORMATION257,r_PGR_unique.dml_operation),r_PGR.INFORMATION257);
       --UPD STPGR
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_PGR_unique.dml_operation ;
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_PGR_unique.information2 and r_PGR_unique.information3 then
               l_update := true;
               if r_PGR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999)
                 or nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'PPL_GRP_RT_ID'
               then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'PPL_GRP_RT_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_PGR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_PGR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_PGR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('PGR',l_new_value,l_prefix || r_PGR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       if p_reuse_object_flag = 'Y' then
         if c_PGR_min_max_dates%found then
           -- cursor to find the object
           open c_find_PGR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_ppl_grp_rt_id, -999)  ) ;
           fetch c_find_PGR_in_target into l_new_value ;
           if c_find_PGR_in_target%found then
             --
             --TEMPIK
             l_dt_rec_found :=   dt_api.check_min_max_dates
                 (p_base_table_name => 'BEN_PPL_GRP_RT_F',
                  p_base_key_column => 'PPL_GRP_RT_ID',
                  p_base_key_value  => l_new_value,
                  p_from_date       => l_min_esd,
                  p_to_date         => l_max_eed );
             if l_dt_rec_found THEN
             --END TEMPIK
             if r_PGR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT-1).pk_id_column, '999') <>  'PPL_GRP_RT_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column    := 'PPL_GRP_RT_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value       := r_PGR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PGR_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
             --TEMPIK
             end if; -- l_dt_rec_found
             --END TEMPIK
           end if;
           close c_find_PGR_in_target ;
         --
         end if;
       end if ;
       --
       end if;
       close c_PGR_min_max_dates ;
       if not l_object_found_in_target OR l_update   then
         --
         l_current_pk_id := r_PGR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_PGR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_PPL_GRP_RT_F CREATE_PEOPLE_GROUP_RATE ',20);
           BEN_PEOPLE_GROUP_RATE_API.CREATE_PEOPLE_GROUP_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_PGR.INFORMATION11
             ,P_ORDR_NUM      => r_PGR.INFORMATION261
             ,P_PEOPLE_GROUP_ID      => l_PEOPLE_GROUP_ID
             ,P_PGR_ATTRIBUTE1      => r_PGR.INFORMATION111
             ,P_PGR_ATTRIBUTE10      => r_PGR.INFORMATION120
             ,P_PGR_ATTRIBUTE11      => r_PGR.INFORMATION121
             ,P_PGR_ATTRIBUTE12      => r_PGR.INFORMATION122
             ,P_PGR_ATTRIBUTE13      => r_PGR.INFORMATION123
             ,P_PGR_ATTRIBUTE14      => r_PGR.INFORMATION124
             ,P_PGR_ATTRIBUTE15      => r_PGR.INFORMATION125
             ,P_PGR_ATTRIBUTE16      => r_PGR.INFORMATION126
             ,P_PGR_ATTRIBUTE17      => r_PGR.INFORMATION127
             ,P_PGR_ATTRIBUTE18      => r_PGR.INFORMATION128
             ,P_PGR_ATTRIBUTE19      => r_PGR.INFORMATION129
             ,P_PGR_ATTRIBUTE2      => r_PGR.INFORMATION112
             ,P_PGR_ATTRIBUTE20      => r_PGR.INFORMATION130
             ,P_PGR_ATTRIBUTE21      => r_PGR.INFORMATION131
             ,P_PGR_ATTRIBUTE22      => r_PGR.INFORMATION132
             ,P_PGR_ATTRIBUTE23      => r_PGR.INFORMATION133
             ,P_PGR_ATTRIBUTE24      => r_PGR.INFORMATION134
             ,P_PGR_ATTRIBUTE25      => r_PGR.INFORMATION135
             ,P_PGR_ATTRIBUTE26      => r_PGR.INFORMATION136
             ,P_PGR_ATTRIBUTE27      => r_PGR.INFORMATION137
             ,P_PGR_ATTRIBUTE28      => r_PGR.INFORMATION138
             ,P_PGR_ATTRIBUTE29      => r_PGR.INFORMATION139
             ,P_PGR_ATTRIBUTE3      => r_PGR.INFORMATION113
             ,P_PGR_ATTRIBUTE30      => r_PGR.INFORMATION140
             ,P_PGR_ATTRIBUTE4      => r_PGR.INFORMATION114
             ,P_PGR_ATTRIBUTE5      => r_PGR.INFORMATION115
             ,P_PGR_ATTRIBUTE6      => r_PGR.INFORMATION116
             ,P_PGR_ATTRIBUTE7      => r_PGR.INFORMATION117
             ,P_PGR_ATTRIBUTE8      => r_PGR.INFORMATION118
             ,P_PGR_ATTRIBUTE9      => r_PGR.INFORMATION119
             ,P_PGR_ATTRIBUTE_CATEGORY      => r_PGR.INFORMATION110
             ,P_PPL_GRP_RT_ID      => l_ppl_grp_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>    l_object_version_number
           );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_ppl_grp_rt_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).pk_id_column := 'PPL_GRP_RT_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).old_value    := r_PGR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).new_value    := l_PPL_GRP_RT_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT).table_route_id  := r_PGR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.G_COUNT),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.G_COUNT := BEN_PD_COPY_TO_BEN_ONE.G_COUNT + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           --UPD STPGR
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_PGR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_PGR.information3,
               p_effective_start_date  => r_PGR.information2,
               p_dml_operation         => r_PGR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_PPL_GRP_RT_ID   := r_PGR.information1;
             l_object_version_number := r_PGR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END
           hr_utility.set_location(' BEN_PPL_GRP_RT_F UPDATE_PEOPLE_GROUP_RATE ',30);
           BEN_PEOPLE_GROUP_RATE_API.UPDATE_PEOPLE_GROUP_RATE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EXCLD_FLAG      => r_PGR.INFORMATION11
             ,P_ORDR_NUM      => r_PGR.INFORMATION261
             ,P_PEOPLE_GROUP_ID      => l_PEOPLE_GROUP_ID
             ,P_PGR_ATTRIBUTE1      => r_PGR.INFORMATION111
             ,P_PGR_ATTRIBUTE10      => r_PGR.INFORMATION120
             ,P_PGR_ATTRIBUTE11      => r_PGR.INFORMATION121
             ,P_PGR_ATTRIBUTE12      => r_PGR.INFORMATION122
             ,P_PGR_ATTRIBUTE13      => r_PGR.INFORMATION123
             ,P_PGR_ATTRIBUTE14      => r_PGR.INFORMATION124
             ,P_PGR_ATTRIBUTE15      => r_PGR.INFORMATION125
             ,P_PGR_ATTRIBUTE16      => r_PGR.INFORMATION126
             ,P_PGR_ATTRIBUTE17      => r_PGR.INFORMATION127
             ,P_PGR_ATTRIBUTE18      => r_PGR.INFORMATION128
             ,P_PGR_ATTRIBUTE19      => r_PGR.INFORMATION129
             ,P_PGR_ATTRIBUTE2      => r_PGR.INFORMATION112
             ,P_PGR_ATTRIBUTE20      => r_PGR.INFORMATION130
             ,P_PGR_ATTRIBUTE21      => r_PGR.INFORMATION131
             ,P_PGR_ATTRIBUTE22      => r_PGR.INFORMATION132
             ,P_PGR_ATTRIBUTE23      => r_PGR.INFORMATION133
             ,P_PGR_ATTRIBUTE24      => r_PGR.INFORMATION134
             ,P_PGR_ATTRIBUTE25      => r_PGR.INFORMATION135
             ,P_PGR_ATTRIBUTE26      => r_PGR.INFORMATION136
             ,P_PGR_ATTRIBUTE27      => r_PGR.INFORMATION137
             ,P_PGR_ATTRIBUTE28      => r_PGR.INFORMATION138
             ,P_PGR_ATTRIBUTE29      => r_PGR.INFORMATION139
             ,P_PGR_ATTRIBUTE3      => r_PGR.INFORMATION113
             ,P_PGR_ATTRIBUTE30      => r_PGR.INFORMATION140
             ,P_PGR_ATTRIBUTE4      => r_PGR.INFORMATION114
             ,P_PGR_ATTRIBUTE5      => r_PGR.INFORMATION115
             ,P_PGR_ATTRIBUTE6      => r_PGR.INFORMATION116
             ,P_PGR_ATTRIBUTE7      => r_PGR.INFORMATION117
             ,P_PGR_ATTRIBUTE8      => r_PGR.INFORMATION118
             ,P_PGR_ATTRIBUTE9      => r_PGR.INFORMATION119
             ,P_PGR_ATTRIBUTE_CATEGORY      => r_PGR.INFORMATION110
             ,P_PPL_GRP_RT_ID      => l_ppl_grp_rt_id
             ,P_VRBL_RT_PRFL_ID      => l_VRBL_RT_PRFL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
           );
           --
           end if;
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = r_PGR.information3) then
             --
             BEN_PEOPLE_GROUP_RATE_API.delete_PEOPLE_GROUP_RATE(
                --
                p_validate                       => false
                 ,p_ppl_grp_rt_id                 => l_ppl_grp_rt_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
exception when others then
    --
    BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'PGR',r_pgr.information5 );
    --
end create_PGR_rows;

procedure create_all_rt_prf_ben_rows
(
   p_validate                       in  number     default 0 -- false
  ,p_copy_entity_txn_id             in  number
  ,p_effective_date                 in  date
  ,p_prefix_suffix_text             in  varchar2  default null
  ,p_reuse_object_flag              in  varchar2  default null
  ,p_target_business_group_id       in  varchar2  default null
  ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
begin
  --
  -- Initialization
  --
    -- Create all oipl rows.
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CTY') then
    BEN_PD_COPY_TO_BEN_THREE.create_CTY_rows(
     p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd
    );
  end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('JRT') then
    BEN_PD_COPY_TO_BEN_THREE.create_JRT_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
    --
    --dbms_output.put_line( 'BEN_PD_COPY_TO_BEN_THREE.create_JRT_rows ');
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('HSR') then
    BEN_PD_COPY_TO_BEN_THREE.create_HSR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
    --
   end if;
     --dbms_output.put_line( 'BEN_PD_COPY_TO_BEN_THREE.create_HSR_rows ');
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('GRR') then
    BEN_PD_COPY_TO_BEN_THREE.create_GRR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
     --dbms_output.put_line( 'BEN_PD_COPY_TO_BEN_THREE.create_GRR_rows');
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('FTR') then
    BEN_PD_COPY_TO_BEN_THREE.create_FTR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
      --dbms_output.put_line( 'BEN_PD_COPY_TO_BEN_THREE.create_FTR_rows');
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('BUR') then
    BEN_PD_COPY_TO_BEN_THREE.create_BUR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
      --dbms_output.put_line( 'BEN_PD_COPY_TO_BEN_THREE.create_BUR_rows');
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ESR') then
    BEN_PD_COPY_TO_BEN_THREE.create_ESR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ASR') then
    BEN_PD_COPY_TO_BEN_THREE.create_ASR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
        --dbms_output.put_line( 'BEN_PD_COPY_TO_BEN_THREE.create_ASR_rows ');
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('TUR') then
    BEN_PD_COPY_TO_BEN_THREE.create_TUR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('SAR') then
    BEN_PD_COPY_TO_BEN_THREE.create_SAR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('QTR') then
    BEN_PD_COPY_TO_BEN_THREE.create_QTR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PZR') then
    BEN_PD_COPY_TO_BEN_THREE.create_PZR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PTR') then
    BEN_PD_COPY_TO_BEN_THREE.create_PTR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('GNR') then
    BEN_PD_COPY_TO_BEN_THREE.create_GNR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
        --dbms_output.put_line( 'BEN_PD_COPY_TO_BEN_THREE.create_GNR_rows ');
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('DBR') then
    BEN_PD_COPY_TO_BEN_THREE.create_DBR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --


    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LMM') then
    BEN_PD_COPY_TO_BEN_THREE.create_LMM_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LAR') then
    BEN_PD_COPY_TO_BEN_THREE.create_LAR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('OUR') then
    BEN_PD_COPY_TO_BEN_THREE.create_OUR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LER1') then
    BEN_PD_COPY_TO_BEN_THREE.create_LER1_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
        --dbms_output.put_line( 'BEN_PD_COPY_TO_BEN_THREE.create_LER1_rows ');
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PR_') then
    BEN_PD_COPY_TO_BEN_THREE.create_PR__rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
        --dbms_output.put_line( 'BEN_PD_COPY_TO_BEN_THREE.create_PR__rows');
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PBR') then
    BEN_PD_COPY_TO_BEN_THREE.create_PBR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('BRG') then
    BEN_PD_COPY_TO_BEN_THREE.create_BRG_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CMR') then
    BEN_PD_COPY_TO_BEN_THREE.create_CMR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('VMR') then
    BEN_PD_COPY_TO_BEN_THREE.create_VMR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('NOC') then
    BEN_PD_COPY_TO_BEN_THREE.create_NOC_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('OMR') then
    BEN_PD_COPY_TO_BEN_THREE.create_OMR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('TTP') then
    BEN_PD_COPY_TO_BEN_THREE.create_TTP_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('TCV') then
    BEN_PD_COPY_TO_BEN_THREE.create_TCV_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('VPR') then
    BEN_PD_COPY_TO_BEN_THREE.create_VPR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PRT') then
    BEN_PD_COPY_TO_BEN_THREE.create_PRT_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CPN') then
    BEN_PD_COPY_TO_BEN_THREE.create_CPN_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PST') then
    BEN_PD_COPY_TO_BEN_THREE.create_PST_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('WLR') then
    BEN_PD_COPY_TO_BEN_THREE.create_WLR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PFR') then
    BEN_PD_COPY_TO_BEN_THREE.create_PFR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('HWR') then
    BEN_PD_COPY_TO_BEN_THREE.create_HWR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CLR') then
    BEN_PD_COPY_TO_BEN_THREE.create_CLR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LSR') then
    BEN_PD_COPY_TO_BEN_THREE.create_LSR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('LRN') then
    BEN_PD_COPY_TO_BEN_THREE.create_LRN_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ART') then
    BEN_PD_COPY_TO_BEN_THREE.create_ART_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('SHR') then
    BEN_PD_COPY_TO_BEN_THREE.create_SHR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('QIG') then
    BEN_PD_COPY_TO_BEN_THREE.create_QIG_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PRR') then
    BEN_PD_COPY_TO_BEN_THREE.create_PRR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --

  --
  -- Foll. Criteria to be copied only in Create Plan Wizard flow
  --
  if BEN_PD_COPY_TO_BEN_ONE.g_transaction_category = 'BEN_PDCRWZ' then
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CQR') then
    BEN_PD_COPY_TO_BEN_THREE.create_CQR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
      --
      --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PAP') then
    BEN_PD_COPY_TO_BEN_THREE.create_PAP_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('OPR') then
    BEN_PD_COPY_TO_BEN_THREE.create_OPR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ENT') then
    BEN_PD_COPY_TO_BEN_THREE.create_ENT_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ENL') then
    BEN_PD_COPY_TO_BEN_THREE.create_ENL_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EAR') then
    BEN_PD_COPY_TO_BEN_THREE.create_EAR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EAO') then
    BEN_PD_COPY_TO_BEN_THREE.create_EAO_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('DOT') then
    BEN_PD_COPY_TO_BEN_THREE.create_DOT_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('DOP') then
    BEN_PD_COPY_TO_BEN_THREE.create_DOP_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('DCP') then
    BEN_PD_COPY_TO_BEN_THREE.create_DCP_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('DCO') then
    BEN_PD_COPY_TO_BEN_THREE.create_DCO_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('DCL') then
    BEN_PD_COPY_TO_BEN_THREE.create_DCL_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPM') then
    BEN_PD_COPY_TO_BEN_THREE.create_EPM_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
    --
    --
   if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('PGR') then
    BEN_PD_COPY_TO_BEN_THREE.create_PGR_rows(
    p_validate                  => p_validate
    ,p_copy_entity_txn_id        => p_copy_entity_txn_id
    ,p_effective_date            => p_effective_date
    ,p_prefix_suffix_text        => p_prefix_suffix_text
    ,p_reuse_object_flag         => p_reuse_object_flag
    ,p_target_business_group_id  => p_target_business_group_id
    ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
   end if;
  end if;
end create_all_rt_prf_ben_rows;
--
--
end BEN_PD_COPY_TO_BEN_three;

/
