--------------------------------------------------------
--  DDL for Package Body HZ_MATCH_RULE_51
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HZ_MATCH_RULE_51" AS
/*=======================================================================+
 |  Copyright (c) 1999 Oracle Corporation Redwood Shores, California, USA|
 |                          All rights reserved.                         |
 +=======================================================================+
 | NAME
 |      HZ_MATCH_RULE_51
 |
 | DESCRIPTION
 |
 | Compiled by the HZ Match Rule Compiler
 | -- Do Not Modify --
 |
 | PUBLIC PROCEDURES
 |    find_parties
 |    get_matching_party_sites
 |    get_matching_contacts
 |    get_matching_contact_points
 |    get_score_details
 |    
 | HISTORY
 |      04-JAN-2007 Generated by HZ Match Rule Compiler
 |
 *=======================================================================*/

-- ==========================================================================================
-- ============MATCH RULE COMPILER GENERATED CODE FOR BULK MATCH RULES ======================
-- ==========================================================================================

  TYPE vlisttype IS TABLE of VARCHAR2(255) INDEX BY BINARY_INTEGER ;
  call_order vlisttype;
  call_max_score HZ_PARTY_SEARCH.IDList;
  call_type vlisttype;
  g_party_stage_rec  HZ_PARTY_STAGE.party_stage_rec_type;
  g_party_site_stage_list  HZ_PARTY_STAGE.party_site_stage_list;
  g_contact_stage_list  HZ_PARTY_STAGE.contact_stage_list;
  g_contact_pt_stage_list  HZ_PARTY_STAGE.contact_pt_stage_list;
  g_mappings  HZ_PARTY_SEARCH.IDList;
  g_max_id NUMBER:=2000000000;

  g_debug_count                        NUMBER := 0;
  g_score_until_thresh BOOLEAN:=false;
 
  g_thres_score NUMBER:=1000;

/************************************************
  This procedure checks if the input search criteria 
  is valid. It checks if : 
   1. At least one primary condition is passed
************************************************/

FUNCTION check_parties_bulk(
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type)
RETURN VARCHAR2 IS
  BEGIN
    IF p_party_search_rec.JGZZ_FISCAL_CODE IS NOT NULL THEN 
      RETURN 'Y' ;
    END IF;
    IF p_party_search_rec.PARTY_NAME IS NOT NULL THEN 
      RETURN 'Y' ;
    END IF;
RETURN null;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_parties_bulk');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_parties_bulk ;

/************************************************
  This procedure checks if the input search condition 
  has party site criteria. 
************************************************/

FUNCTION check_party_sites_bulk(
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list
)
RETURN VARCHAR2 IS
    x_primary boolean := FALSE;
  BEGIN
    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).ADDRESS IS NOT NULL 
         OR p_party_site_list(I).POSTAL_CODE IS NOT NULL
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;

 IF x_primary = TRUE THEN RETURN 'Y'; ELSE RETURN null; END IF; 
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_party_sites_bulk');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_party_sites_bulk ;

/************************************************
  This procedure checks if the input search condition 
  has contact criteria. 
************************************************/

FUNCTION check_contacts_bulk (
      p_contact_list       IN      HZ_PARTY_SEARCH.contact_list
)
RETURN VARCHAR2 IS
    x_primary boolean := FALSE;
  BEGIN
    FOR I IN 1..p_contact_list.COUNT LOOP
      NULL;
    END LOOP;

 IF x_primary = TRUE THEN RETURN 'Y'; ELSE RETURN null; END IF; 
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_contacts_bulk');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_contacts_bulk ;

/************************************************
  This procedure checks if the input search condition 
  has contact criteria. 
************************************************/

FUNCTION check_cpts_bulk (
      p_contact_point_list       IN      HZ_PARTY_SEARCH.contact_point_list
)
RETURN VARCHAR2 IS
    x_primary boolean := FALSE;
  BEGIN
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
         OR p_contact_point_list(I).RAW_PHONE_NUMBER IS NOT NULL
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;

 IF x_primary = TRUE THEN RETURN 'Y'; ELSE RETURN null; END IF; 
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_cpts_bulk');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_cpts_bulk  ;

  FUNCTION map_id (in_id NUMBER) RETURN NUMBER IS
    l_newidx NUMBER;
  BEGIN 
    IF in_id<g_max_id THEN 
      RETURN in_id;
    ELSE
      FOR I in 1..g_mappings.COUNT LOOP
        IF in_id = g_mappings(I) THEN
          RETURN (g_max_id+I);
        END IF;
      END LOOP;
      l_newidx := g_mappings.COUNT+1;
      g_mappings(l_newidx) := in_id;
      RETURN (g_max_id+l_newidx);
    END IF;
  END;
  FUNCTION GET_PARTY_SCORE 
       (
       p_table_TX59 VARCHAR2
      ,p_table_TX2 VARCHAR2
      ,p_table_TX45 VARCHAR2
  ) RETURN NUMBER IS
    total NUMBER := 0;
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'GET_PARTY_SCORE   ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF g_score_until_thresh AND (total)>=g_thres_score THEN
      RETURN total;
    END IF;
    IF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX2, p_table_TX2,6) THEN
      total := total+80;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
        RETURN total;
      END IF;
    ELSIF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX59, p_table_TX59,138) THEN
      total := total+72;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
        RETURN total;
      END IF;
    END IF;
    IF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX45, p_table_TX45,50) THEN
      total := total+200;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
        RETURN total;
      END IF;
    END IF;
    RETURN total;
  END;
  FUNCTION GET_PARTY_SITES_SCORE (
       x_matchidx OUT NUMBER
      ,p_table_TX26 VARCHAR2
      ,p_table_TX9 VARCHAR2
      ,p_table_TX14 VARCHAR2
      ,p_table_TX22 VARCHAR2
  ) RETURN NUMBER IS
    maxscore NUMBER := 0;
    l_current_score NUMBER := 0;
  BEGIN
    x_matchidx := 0;
    IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
       RETURN l_current_score;
    END IF;
    FOR J IN 1..g_party_site_stage_list.COUNT LOOP
      l_current_score := 0;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX26, p_table_TX26,(50000*(J-1)+140)) THEN
        l_current_score:=l_current_score+ 100;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX9, p_table_TX9,(50000*(J-1)+72)) THEN
        l_current_score:=l_current_score+ 5;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX14, p_table_TX14,(50000*(J-1)+77)) THEN
        l_current_score:=l_current_score+ 5;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX22, p_table_TX22,(50000*(J-1)+85)) THEN
        l_current_score:=l_current_score+ 5;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF maxscore<l_current_score THEN
        maxscore:=l_current_score;
        x_matchidx:=J;
      END IF;
    END LOOP;
    RETURN maxscore;
  END;
  FUNCTION GET_CONTACTS_SCORE (
       x_matchidx OUT NUMBER
  ) RETURN NUMBER IS
    maxscore NUMBER := 0;
    l_current_score NUMBER := 0;
  BEGIN
    x_matchidx := 0;
    IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
       RETURN l_current_score;
    END IF;
    FOR J IN 1..g_contact_stage_list.COUNT LOOP
      l_current_score := 0;
      IF maxscore<l_current_score THEN
        maxscore:=l_current_score;
        x_matchidx:=J;
      END IF;
    END LOOP;
    RETURN maxscore;
  END;
  FUNCTION GET_CONTACT_POINTS_SCORE (
       x_matchidx OUT NUMBER
      ,p_table_TX5 VARCHAR2
      ,p_table_TX158 VARCHAR2
      ,p_table_TX10 VARCHAR2
  ) RETURN NUMBER IS
    maxscore NUMBER := 0;
    l_current_score NUMBER := 0;
  BEGIN
    x_matchidx := 0;
    IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
       RETURN l_current_score;
    END IF;
    FOR J IN 1..g_contact_pt_stage_list.COUNT LOOP
      l_current_score := 0;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_contact_pt_stage_list(J).TX5, p_table_TX5,(50000*(J-1)+114)) THEN
        l_current_score:=l_current_score+ 60;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_contact_pt_stage_list(J).TX158, p_table_TX158,(50000*(J-1)+128)) THEN
        l_current_score:=l_current_score+ 70;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      ELSIF -- l_current_score<70 AND 
          HZ_DQM_SEARCH_UTIL.is_match(g_contact_pt_stage_list(J).TX10, p_table_TX10,(50000*(J-1)+120)) THEN
        l_current_score:=l_current_score+ 70;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF maxscore<l_current_score THEN
        maxscore:=l_current_score;
        x_matchidx:=J;
      END IF;
    END LOOP;
    RETURN maxscore;
  END;
  FUNCTION get_attrib_val(
      p_record_id 	NUMBER
     ,p_entity 	VARCHAR2
     ,p_attribute 	VARCHAR2
  ) RETURN VARCHAR2 IS
  l_matched_value VARCHAR2(2000);
  l_party_type VARCHAR2(255);
  BEGIN
  IF p_entity = 'PARTY' THEN
  IF p_attribute = 'PARTY_NAME' THEN

      SELECT party_type INTO l_party_type 
      FROM HZ_PARTIES
      WHERE party_id = p_record_id;
      IF l_party_type = 'ORGANIZATION' THEN
        SELECT PARTY_NAME INTO l_matched_value 
        FROM HZ_PARTIES
        WHERE party_id = p_record_id 
        and rownum = 1;
      ELSIF l_party_type = 'PERSON' THEN
        SELECT PARTY_NAME INTO l_matched_value 
        FROM HZ_PARTIES
        WHERE party_id = p_record_id 
        and rownum = 1;
      END IF;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'JGZZ_FISCAL_CODE' THEN

      SELECT party_type INTO l_party_type 
      FROM HZ_PARTIES
      WHERE party_id = p_record_id;
      IF l_party_type = 'ORGANIZATION' THEN
        SELECT JGZZ_FISCAL_CODE INTO l_matched_value 
        FROM HZ_ORGANIZATION_PROFILES
        WHERE party_id = p_record_id 
        and effective_end_date is null
        and rownum = 1;
      ELSIF l_party_type = 'PERSON' THEN
        SELECT JGZZ_FISCAL_CODE INTO l_matched_value 
        FROM HZ_PERSON_PROFILES
        WHERE party_id = p_record_id 
        and effective_end_date is null 
        and rownum = 1;
      END IF;
      RETURN l_matched_value;
    END IF;
    NULL;
  END IF;
  IF p_entity = 'PARTY_SITES' THEN
  IF p_attribute = 'ADDRESS' THEN
     l_matched_value := HZ_PARTY_ACQUIRE.get_address (p_record_id, p_entity,'ADDRESS','Y');
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'CITY' THEN
     BEGIN
       SELECT HZ_LOCATIONS.CITY
       INTO l_matched_value 
       FROM HZ_PARTY_SITES, HZ_LOCATIONS
       WHERE HZ_PARTY_SITES.party_site_id = p_record_id
       AND HZ_PARTY_SITES.location_id = HZ_LOCATIONS.location_id and rownum=1;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_matched_value := 'Err';
     END;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'STATE' THEN
     BEGIN
       SELECT HZ_LOCATIONS.STATE
       INTO l_matched_value 
       FROM HZ_PARTY_SITES, HZ_LOCATIONS
       WHERE HZ_PARTY_SITES.party_site_id = p_record_id
       AND HZ_PARTY_SITES.location_id = HZ_LOCATIONS.location_id and rownum=1;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_matched_value := 'Err';
     END;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'COUNTRY' THEN
     BEGIN
       SELECT HZ_LOCATIONS.COUNTRY
       INTO l_matched_value 
       FROM HZ_PARTY_SITES, HZ_LOCATIONS
       WHERE HZ_PARTY_SITES.party_site_id = p_record_id
       AND HZ_PARTY_SITES.location_id = HZ_LOCATIONS.location_id and rownum=1;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_matched_value := 'Err';
     END;
      RETURN l_matched_value;
    END IF;
    NULL;
  END IF;
  IF p_entity = 'CONTACTS' THEN
    NULL;
  END IF;
  IF p_entity = 'CONTACT_POINTS' THEN
  IF p_attribute = 'EMAIL_ADDRESS' THEN
     BEGIN
       SELECT EMAIL_ADDRESS INTO l_matched_value 
       FROM HZ_CONTACT_POINTS 
       WHERE contact_point_id = p_record_id and rownum=1;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_matched_value := 'Err';
     END;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'RAW_PHONE_NUMBER' THEN
     l_matched_value := HZ_PARTY_ACQUIRE.get_phone_number (p_record_id, p_entity,'RAW_PHONE_NUMBER','Y');
      RETURN l_matched_value;
    END IF;
    NULL;
  END IF;
END;
  PROCEDURE INSERT_PARTY_SCORE (
       p_party_id IN  NUMBER
       ,p_record_id IN  NUMBER
       ,p_search_ctx_id IN  NUMBER
       ,p_search_rec IN HZ_PARTY_SEARCH.party_search_rec_type
       ,p_stage_rec IN HZ_PARTY_STAGE.party_stage_rec_type
      ,p_table_TX59 VARCHAR2
      ,p_table_TX2 VARCHAR2
      ,p_table_TX45 VARCHAR2
        ,p_idx IN NUMBER) IS
    l_current_score NUMBER:=0;
    l_score NUMBER;
    l_attrib_value VARCHAR2(2000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - INSERT_PARTY_SCORE',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX2, p_table_TX2,(50000*(p_idx-1)+6)) THEN
      l_score :=80;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<72 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX59, p_table_TX59,(50000*(p_idx-1)+138)) THEN
      l_score :=72;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY','PARTY_NAME');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'PARTY_NAME',
           'PARTY', p_search_rec.PARTY_NAME,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX45, p_table_TX45,(50000*(p_idx-1)+50)) THEN
      l_score :=200;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY','JGZZ_FISCAL_CODE');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'JGZZ_FISCAL_CODE',
           'PARTY', p_search_rec.JGZZ_FISCAL_CODE,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    NULL;
  END;
  PROCEDURE INSERT_PARTY_SITES_SCORE (
       p_party_id IN  NUMBER
       ,p_record_id IN  NUMBER
       ,p_search_ctx_id IN  NUMBER
       ,p_search_rec IN HZ_PARTY_SEARCH.party_site_search_rec_type
       ,p_stage_rec IN HZ_PARTY_STAGE.party_site_stage_rec_type
      ,p_table_TX26 VARCHAR2
      ,p_table_TX9 VARCHAR2
      ,p_table_TX14 VARCHAR2
      ,p_table_TX22 VARCHAR2
        ,p_idx IN NUMBER) IS
    l_current_score NUMBER:=0;
    l_score NUMBER;
    l_attrib_value VARCHAR2(2000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - INSERT_PARTY_SITES_SCORE',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX26, p_table_TX26,(50000*(p_idx-1)+140)) THEN
      l_score :=100;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY_SITES','ADDRESS');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'ADDRESS',
           'PARTY_SITES', p_search_rec.ADDRESS,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX9, p_table_TX9,(50000*(p_idx-1)+72)) THEN
      l_score :=5;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY_SITES','CITY');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'CITY',
           'PARTY_SITES', p_search_rec.CITY,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX14, p_table_TX14,(50000*(p_idx-1)+77)) THEN
      l_score :=5;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY_SITES','STATE');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'STATE',
           'PARTY_SITES', p_search_rec.STATE,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX22, p_table_TX22,(50000*(p_idx-1)+85)) THEN
      l_score :=5;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY_SITES','COUNTRY');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'COUNTRY',
           'PARTY_SITES', p_search_rec.COUNTRY,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    NULL;
  END;
  PROCEDURE INSERT_CONTACTS_SCORE (
       p_party_id IN  NUMBER
       ,p_record_id IN  NUMBER
       ,p_search_ctx_id IN  NUMBER
       ,p_search_rec IN HZ_PARTY_SEARCH.contact_search_rec_type
       ,p_stage_rec IN HZ_PARTY_STAGE.contact_stage_rec_type
        ,p_idx IN NUMBER) IS
    l_current_score NUMBER:=0;
    l_score NUMBER;
    l_attrib_value VARCHAR2(2000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - INSERT_CONTACTS_SCORE',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    NULL;
  END;
  PROCEDURE INSERT_CONTACT_POINTS_SCORE (
       p_party_id IN  NUMBER
       ,p_record_id IN  NUMBER
       ,p_search_ctx_id IN  NUMBER
       ,p_search_rec IN HZ_PARTY_SEARCH.contact_point_search_rec_type
       ,p_stage_rec IN HZ_PARTY_STAGE.contact_pt_stage_rec_type
      ,p_table_TX5 VARCHAR2
      ,p_table_TX158 VARCHAR2
      ,p_table_TX10 VARCHAR2
        ,p_idx IN NUMBER) IS
    l_current_score NUMBER:=0;
    l_score NUMBER;
    l_attrib_value VARCHAR2(2000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - INSERT_CONTACT_POINTS_SCORE',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX5, p_table_TX5,(50000*(p_idx-1)+114)) THEN
      l_score :=60;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'CONTACT_POINTS','EMAIL_ADDRESS');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'EMAIL_ADDRESS',
           'CONTACT_POINTS', p_search_rec.EMAIL_ADDRESS,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX158, p_table_TX158,(50000*(p_idx-1)+128)) THEN
      l_score :=70;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<70 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX10, p_table_TX10,(50000*(p_idx-1)+120)) THEN
      l_score :=70;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'CONTACT_POINTS','RAW_PHONE_NUMBER');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'RAW_PHONE_NUMBER',
           'CONTACT_POINTS', p_search_rec.RAW_PHONE_NUMBER,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    NULL;
  END;

/************************************************
  This procedure populates global cond record
  for the PARTY Entity 
************************************************/

PROCEDURE POP_PARTY_COND_REC(
    p_search_rec IN HZ_PARTY_SEARCH.party_search_rec_type 
  ) IS 
BEGIN
NULL ;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'POP_PARTY_COND_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure populates global cond record
  for the PARTY_SITES Entity 
************************************************/

PROCEDURE POP_PARTY_SITES_COND_REC(
    p_search_list IN HZ_PARTY_SEARCH.party_site_list 
  ) IS 
BEGIN
---------POPULATE THE GLOBAL WORD CONDITION REC FOR PARTY_SITES-------------
------ Populate global condition record only if search list is not empty -----------
 IF p_search_list.COUNT > 0
 THEN
     HZ_WORD_CONDITIONS_PKG.set_gbl_condition_rec (36,p_search_list(1).COUNTRY);
END IF ;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'POP_PARTY_SITES_COND_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure populates global cond record
  for the CONTACTS Entity 
************************************************/

PROCEDURE POP_CONTACTS_COND_REC(
    p_search_list IN HZ_PARTY_SEARCH.contact_list 
  ) IS 
BEGIN
NULL ;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'POP_CONTACTS_COND_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure populates global cond record
  for the CONTACT_POINTS Entity 
************************************************/

PROCEDURE POP_CONTACT_POINTS_COND_REC(
    p_search_list IN HZ_PARTY_SEARCH.contact_point_list 
  ) IS 
BEGIN
NULL ;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'POP_CONTACT_POINTS_COND_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;

  PROCEDURE init_score_context (
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type:=
                                  HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list:=
                                  HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list:= 
                                  HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list:=
                                  HZ_PARTY_SEARCH.G_MISS_CONTACT_POINT_LIST
  ) IS
   l_dummy NUMBER;
  BEGIN
    -- Transform search criteria
    HZ_TRANS_PKG.clear_globals;
    MAP_PARTY_REC(FALSE,p_party_search_rec, l_dummy, g_party_stage_rec);
    MAP_PARTY_SITE_REC(FALSE,p_party_site_list, l_dummy, g_party_site_stage_list);
    MAP_CONTACT_REC(FALSE,p_contact_list, l_dummy, g_contact_stage_list);
    MAP_CONTACT_POINT_REC(FALSE,p_contact_point_list, l_dummy, g_contact_pt_stage_list);

  END;
  FUNCTION init_search(
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type:=
                                  HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list:=
                                  HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list:= 
                                  HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list:=
                                  HZ_PARTY_SEARCH.G_MISS_CONTACT_POINT_LIST,
      p_match_type            IN  VARCHAR2,
      x_party_max_score       OUT NUMBER,
      x_ps_max_score       OUT NUMBER,
      x_contact_max_score       OUT NUMBER,
      x_cpt_max_score       OUT NUMBER
  ) RETURN NUMBER IS 
  l_entered_max_score NUMBER:=0;
  l_ps_entered_max_score NUMBER:=0;
  l_ct_entered_max_score NUMBER:=0;
  l_cpt_entered_max_score NUMBER:=0;
  vlist vlisttype;
  maxscore HZ_PARTY_SEARCH.IDList;
  l_name VARCHAR2(200);
  l_idx NUMBER; 
  l_num NUMBER; 
  total NUMBER; 
  threshold NUMBER; 
  BEGIN
    IF NOT check_prim_cond (p_party_search_rec,
                            p_party_site_list,
                            p_contact_list,
                            p_contact_point_list) THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_PRIMARY_COND');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    HZ_DQM_SEARCH_UTIL.set_score;
    g_mappings.DELETE;
    g_party_site_stage_list.DELETE;
    g_contact_stage_list.DELETE;
    g_contact_pt_stage_list.DELETE;
    call_order.DELETE;
    call_max_score.DELETE;
    HZ_DQM_SEARCH_UTIL.new_search;
    HZ_TRANS_PKG.set_party_type(p_party_search_rec.PARTY_TYPE);
    HZ_DQM_SEARCH_UTIL.set_num_eval(0);

    -- Transform search criteria
    MAP_PARTY_REC(TRUE,p_party_search_rec, l_entered_max_score, g_party_stage_rec);
    MAP_PARTY_SITE_REC(TRUE,p_party_site_list, l_ps_entered_max_score, g_party_site_stage_list);
    MAP_CONTACT_REC(TRUE,p_contact_list, l_ct_entered_max_score, g_contact_stage_list);
    MAP_CONTACT_POINT_REC(TRUE,p_contact_point_list, l_cpt_entered_max_score, g_contact_pt_stage_list);

      
    l_idx := l_entered_max_score+1;
    vlist (l_idx) := 'PARTY';
    maxscore (l_idx) := l_entered_max_score;
    l_idx := l_ps_entered_max_score+1;
    WHILE vlist.EXISTS(l_idx) LOOP
      l_idx := l_idx+1;
    END LOOP;
    vlist (l_idx) := 'PARTY_SITE';
    maxscore (l_idx) := l_ps_entered_max_score;

    l_idx := l_ct_entered_max_score+1;
    WHILE vlist.EXISTS(l_idx) LOOP
      l_idx := l_idx+1;
    END LOOP;
    vlist (l_idx) := 'CONTACT';
    maxscore (l_idx) := l_ct_entered_max_score;

    l_idx := l_cpt_entered_max_score+1;
    WHILE vlist.EXISTS(l_idx) LOOP
      l_idx := l_idx+1;
    END LOOP;
    vlist (l_idx) := 'CONTACT_POINT';
    maxscore (l_idx) := l_cpt_entered_max_score;

    l_num := 1;
    l_idx := vlist.LAST;
    WHILE l_idx IS NOT NULL LOOP
      call_order(l_num) := vlist(l_idx);
      call_max_score(l_num) := maxscore(l_idx);
      l_idx := vlist.PRIOR(l_idx);
      l_num := l_num+1;
    END LOOP;  
    call_order(5):='NONE';
    IF p_match_type = ' OR ' THEN
      threshold := 175;
      l_idx := vlist.FIRST;
      total := 0;
      l_num := 4;
      WHILE l_idx IS NOT NULL LOOP
        total := total+maxscore(l_idx);
        IF total<threshold THEN
          call_type(l_num) := 'AND';
        ELSE
          call_type(l_num) := 'OR';
        END IF;
        l_idx := vlist.NEXT(l_idx);
        l_num := l_num-1;
      END LOOP;
    ELSE
      call_type(1) := 'OR';
      call_type(2) := 'AND';
      call_type(3) := 'AND';
      call_type(4) := 'AND';
    END IF;
    x_party_max_score := l_entered_max_score;
    x_ps_max_score := l_ps_entered_max_score;
    x_contact_max_score := l_ct_entered_max_score;
    x_cpt_max_score := l_cpt_entered_max_score;
    RETURN (l_entered_max_score+l_ps_entered_max_score+l_ct_entered_max_score+l_cpt_entered_max_score);
  END;


  PROCEDURE open_party_cursor(
            p_dup_party_id NUMBER, 
            p_restrict_sql VARCHAR2, 
            p_contains_str  VARCHAR2, 
            p_search_ctx_id NUMBER,
            p_match_str VARCHAR2,
            p_search_merged VARCHAR2,
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
  l_sqlstr VARCHAR2(4000);
  BEGIN
    IF p_contains_str IS NULL THEN
      OPEN x_cursor FOR 
        SELECT PARTY_ID , TX59, TX2, TX45
        FROM HZ_STAGED_PARTIES stage
        WHERE PARTY_ID = p_dup_party_id;
    ELSIF p_restrict_sql IS NULL OR p_search_ctx_id IS NOT NULL THEN
      IF p_search_ctx_id IS NULL THEN
        OPEN x_cursor FOR 
          SELECT /*+ ORDERED */ stage.PARTY_ID , stage.TX59, stage.TX2, stage.TX45
          FROM HZ_SRCH_PARTIES srch, HZ_STAGED_PARTIES stage
          WHERE
            srch.batch_id = -1
            AND
            (
-------PARTY LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
(
(srch.TX45 is not null and stage.TX45 like srch.TX45 || '%')
)
 OR 
-- do an or between all the transformations of an attribute -- 
(
(srch.TX59 is not null and stage.TX59 like srch.TX59 || '%')
)
)
          AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  stage.TX36))
          AND (nvl(p_search_merged,'N')='Y' OR nvl(stage.status,'A') in ('A'))
          AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      ELSE
        OPEN x_cursor FOR 
            SELECT /*+ ORDERED INDEX(stage HZ_STAGED_PARTIES_U1) */ stage.PARTY_ID , stage.TX59, stage.TX2, stage.TX45
            FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_PARTIES stage, HZ_SRCH_PARTIES srch
            WHERE
            srch.batch_id = -1
            AND
            (
-------PARTY LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
(
(srch.TX45 is not null and stage.TX45 like srch.TX45 || '%')
)
 OR 
-- do an or between all the transformations of an attribute -- 
(
(srch.TX59 is not null and stage.TX59 like srch.TX59 || '%')
)
)
            AND d.SEARCH_CONTEXT_ID=p_search_ctx_id
            AND d.party_id = stage.party_id
            AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  stage.TX36))
            AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id)
            AND (nvl(p_search_merged,'N')='Y' OR nvl(stage.status,'A') in ('A'));
      END IF;
    ELSE
     IF p_search_ctx_id IS NULL THEN
       l_sqlstr := 'SELECT /*+ ORDERED */ stage.PARTY_ID , stage.TX59, stage.TX2, stage.TX45'||
                   ' FROM HZ_SRCH_PARTIES srch, HZ_STAGED_PARTIES stage'||
                   ' WHERE'||
            'srch.batch_id = -1'||
            'AND'||
            '('||
-------PARTY LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
'('||
'(srch.TX45 is not null and stage.TX45 like srch.TX45 || ''%'')'||
')'||
' OR '||
-- do an or between all the transformations of an attribute -- 
'('||
'(srch.TX59 is not null and stage.TX59 like srch.TX59 || ''%'')'||
')'||
')'||
                   ' AND ((:TX36 IS NULL OR :TX36||'' '' =  stage.TX36))'||
                   ' AND ('||p_restrict_sql||')' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       IF p_search_merged IS NULL OR p_search_merged <> 'Y' THEN
         l_sqlstr := l_sqlstr ||' AND nvl(stage.status,''A'') in (''A'')';
       END IF;
       OPEN x_cursor FOR l_sqlstr USING p_contains_str
                              ,g_party_stage_rec.TX36,g_party_stage_rec.TX36
                    ,p_dup_party_id, p_dup_party_id;
     END IF;
   END IF;
  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
  END;

  PROCEDURE open_party_site_cursor(
            p_dup_party_id NUMBER, 
            p_party_id NUMBER, 
            p_restrict_sql VARCHAR2, 
            p_contains_str  VARCHAR2, 
            p_search_ctx_id  NUMBER, 
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
  l_sqlstr VARCHAR2(4000);
  BEGIN
     IF p_party_id IS NOT NULL THEN
       OPEN x_cursor FOR 
          SELECT /*+ INDEX(stage HZ_STAGED_PARTY_SITES_N1) */ stage.PARTY_SITE_ID, stage.PARTY_ID, stage.ORG_CONTACT_ID, stage.TX26, stage.TX9, stage.TX14, stage.TX22
          FROM HZ_STAGED_PARTY_SITES stage,HZ_SRCH_PSITES srch
WHERE
            srch.batch_id = -1
            AND
            (
-------PARTY LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
(
(srch.TX26 is not null and stage.TX26 like srch.TX26 || '%')
)
)
        AND EXISTS (
          SELECT  /*+ INDEX(p HZ_STAGED_PARTIES_U1) */  1 FROM HZ_STAGED_PARTIES p
          WHERE p.PARTY_ID = stage.PARTY_ID
          AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  p.TX36)))
          AND stage.party_id = p_party_id;
    ELSIF p_restrict_sql IS NULL OR p_search_ctx_id IS NOT NULL THEN
      IF p_search_ctx_id IS NULL THEN
        OPEN x_cursor FOR 
          SELECT /*+ ORDERED USE_NL(srch stage p) */  stage.PARTY_SITE_ID, stage.PARTY_ID, stage.ORG_CONTACT_ID, stage.TX26, stage.TX9, stage.TX14, stage.TX22
          FROM  HZ_SRCH_PSITES srch, HZ_STAGED_PARTY_SITES stage, HZ_STAGED_PARTIES p
WHERE
            srch.batch_id = -1
            AND
            (
-------PARTY LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
(
(srch.TX26 is not null and stage.TX26 like srch.TX26 || '%')
)
)
    AND  p.PARTY_ID = stage.PARTY_ID
    AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  p.TX36))
          AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      ELSE
          OPEN x_cursor FOR 
            SELECT /*+ ORDERED INDEX(stage HZ_STAGED_PARTY_SITES_N1) */ stage.PARTY_SITE_ID, stage.PARTY_ID, stage.ORG_CONTACT_ID, stage.TX26, stage.TX9, stage.TX14, stage.TX22
            FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_PARTY_SITES stage, HZ_SRCH_PSITES srch
WHERE
            srch.batch_id = -1
            AND
            (
-------PARTY LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
(
(srch.TX26 is not null and stage.TX26 like srch.TX26 || '%')
)
)
            AND d.search_context_id = p_search_ctx_id
            AND d.party_id = stage.party_id
            AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      END IF;
    ELSE
       l_sqlstr := 'SELECT /*+ ORDERED USE_NL(srch stage p) */ stage.PARTY_SITE_ID, stage.PARTY_ID, stage.ORG_CONTACT_ID , stage.TX26, stage.TX9, stage.TX14, stage.TX22'||
                   ' FROM HZ_SRCH_PSITES srch, HZ_STAGED_PARTY_SITES stage, HZ_STAGED_PARTIES p'||
                   ' WHERE' ||
            'srch.batch_id = -1'||
            'AND'||
            '('||
-------PARTY_SITES LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
'('||
'(srch.TX26 is not null and stage.TX26 like srch.TX26 || ''%'')'||
')'||
')'||
                 ' AND p.party_id = stage.party_id ' || 
                 ' AND ((:TX36 IS NULL OR :TX36||'' '' =  p.TX36))) ' || 
                   ' AND ('||p_restrict_sql||')' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       OPEN x_cursor FOR l_sqlstr USING p_contains_str
                              ,g_party_stage_rec.TX36,g_party_stage_rec.TX36
                    ,p_dup_party_id, p_dup_party_id;
    END IF;
  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
  END;

  PROCEDURE open_contact_cursor(
            p_dup_party_id NUMBER, 
            p_party_id NUMBER, 
            p_restrict_sql VARCHAR2, 
            p_contains_str  VARCHAR2, 
            p_search_ctx_id  NUMBER, 
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
  l_sqlstr VARCHAR2(4000);
  BEGIN
NULL ;
  END;

  PROCEDURE open_contact_pt_cursor(
            p_dup_party_id NUMBER, 
            p_party_id NUMBER, 
            p_restrict_sql VARCHAR2, 
            p_contains_str  VARCHAR2, 
            p_search_ctx_id  NUMBER, 
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
  l_sqlstr VARCHAR2(4000);
  BEGIN
     IF p_party_id IS NOT NULL THEN
       OPEN x_cursor FOR 
          SELECT /*+ INDEX(stage HZ_STAGED_CONTACT_POINTS_N1) */ stage.CONTACT_POINT_ID, stage.PARTY_ID,stage.PARTY_SITE_ID, stage.ORG_CONTACT_ID , stage.TX5, stage.TX158, stage.TX10
          FROM HZ_STAGED_CONTACT_POINTS stage, HZ_SRCH_CPTS srch
            WHERE
            srch.batch_id = -1
            AND
            (
-------PARTY LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
(
(srch.TX158 is not null and stage.TX158 like srch.TX158 || '%')
)
 OR 
-- do an or between all the transformations of an attribute -- 
(
(srch.TX5 is not null and stage.TX5 like srch.TX5 || '%')
)
)
        AND EXISTS (
          SELECT /*+ INDEX(p HZ_STAGED_PARTIES_U1) */ 1 FROM HZ_STAGED_PARTIES p
          WHERE p.PARTY_ID = stage.PARTY_ID
          AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  p.TX36)))
          AND stage.party_id = p_party_id;
    ELSIF p_restrict_sql IS NULL OR p_search_ctx_id IS NOT NULL THEN
      IF p_search_ctx_id IS NULL THEN
        OPEN x_cursor FOR 
          SELECT /*+ USE_NL(srch stage)  */  stage.CONTACT_POINT_ID, stage.PARTY_ID, stage.PARTY_SITE_ID, stage.ORG_CONTACT_ID , stage.TX5, stage.TX158, stage.TX10
          FROM  HZ_SRCH_CPTS srch, HZ_STAGED_CONTACT_POINTS stage
            WHERE
            srch.batch_id = -1
            AND
            (
-------PARTY LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
(
(srch.TX158 is not null and stage.TX158 like srch.TX158 || '%')
)
 OR 
-- do an or between all the transformations of an attribute -- 
(
(srch.TX5 is not null and stage.TX5 like srch.TX5 || '%')
)
)
        AND EXISTS (
          SELECT  /*+ INDEX(p HZ_STAGED_PARTIES_U1) */ 1 FROM HZ_STAGED_PARTIES p
          WHERE p.PARTY_ID = stage.PARTY_ID
          AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  p.TX36)))
          AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      ELSE
          OPEN x_cursor FOR 
            SELECT /*+ ORDERED INDEX(stage HZ_STAGED_CONTACT_POINTS_N1) */ stage.CONTACT_POINT_ID, stage.PARTY_ID, stage.PARTY_SITE_ID, stage.ORG_CONTACT_ID , stage.TX5, stage.TX158, stage.TX10
            FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_CONTACT_POINTS stage, HZ_SRCH_CPTS srch
            WHERE
            srch.batch_id = -1
            AND
            (
-------PARTY LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
(
(srch.TX158 is not null and stage.TX158 like srch.TX158 || '%')
)
 OR 
-- do an or between all the transformations of an attribute -- 
(
(srch.TX5 is not null and stage.TX5 like srch.TX5 || '%')
)
)
            AND d.search_context_id = p_search_ctx_id
            AND d.party_id = stage.party_id
            AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      END IF;
    ELSE
       l_sqlstr := 'SELECT /*+ USE_NL(srch stage)  */ stage.CONTACT_POINT_ID, stage.PARTY_ID, stage.PARTY_SITE_ID, stage.ORG_CONTACT_ID  , stage.TX5, stage.TX158, stage.TX10'||
                   ' FROM HZ_SRCH_CPTS srch, HZ_STAGED_CONTACT_POINTS stage'||
                   ' WHERE'||
            'srch.batch_id = -1'||
            'AND'||
            '('||
-------CONTACT_POINTS LEVEL ACQUISITION ON NON-FILTER ATTRIBUTES USING B-TREE INDEXES ---------
-- do an or between all the transformations of an attribute -- 
'('||
'(srch.TX158 is not null and stage.TX158 like srch.TX158 || ''%'')'||
')'||
' OR '||
-- do an or between all the transformations of an attribute -- 
'('||
'(srch.TX5 is not null and stage.TX5 like srch.TX5 || ''%'')'||
')'||
')'||
                 ' AND EXISTS ('||
                 ' SELECT  /*+ INDEX(p HZ_STAGED_PARTIES_U1) */ 1 FROM HZ_STAGED_PARTIES p ' || 
                 ' WHERE p.party_id = stage.party_id ' || 
                 ' AND ((:TX36 IS NULL OR :TX36||'' '' =  p.TX36))) ' || 
                   ' AND ('||p_restrict_sql||')' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       OPEN x_cursor FOR l_sqlstr USING p_contains_str
                              ,g_party_stage_rec.TX36,g_party_stage_rec.TX36
                    ,p_dup_party_id, p_dup_party_id;
    END IF;
  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
  END;

  FUNCTION get_new_score_rec (
    	 p_init_total_score NUMBER,
    	 p_init_party_score NUMBER,
    	 p_init_party_site_score NUMBER,
    	 p_init_contact_score NUMBER,
    	 p_init_contact_point_score NUMBER, 
    	 p_party_id NUMBER, 
    	 p_party_site_id NUMBER, 
    	 p_org_contact_id NUMBER, 
    	 p_contact_point_id NUMBER) 
     RETURN HZ_PARTY_SEARCH.score_rec IS
    l_score_rec HZ_PARTY_SEARCH.score_rec;
  BEGIN
    l_score_rec.TOTAL_SCORE := p_init_total_score;
    l_score_rec.PARTY_SCORE := p_init_party_score;
    l_score_rec.PARTY_SITE_SCORE := p_init_party_site_score;
    l_score_rec.CONTACT_SCORE := p_init_contact_score;
    l_score_rec.CONTACT_POINT_SCORE := p_init_contact_point_score;
    l_score_rec.PARTY_ID := p_party_id;
    l_score_rec.PARTY_SITE_ID := p_party_site_id;
    l_score_rec.ORG_CONTACT_ID := p_org_contact_id;
    l_score_rec.CONTACT_POINT_ID := p_contact_point_id;
    RETURN l_score_rec;
  END;

   /**********************************************************
   This procedure finds the set of parties that match the search
   criteria and returns a scored set of parties

   The steps in executing the search are as follows
    1. Initialization and error checks
    2. Setup of intermedia query strings for Acquisition query
    3. Execution of Acquisition query
    4. Execution of Secondary queries to score results
    5. Setup of data temporary table to return search results
   **********************************************************/

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: find_parties ------------------------------
-------------------------------------------------------------------------------------
PROCEDURE find_parties (
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      p_dup_party_id          IN      NUMBER,
      p_dup_set_id            IN      NUMBER,
      p_dup_batch_id          IN      NUMBER,
      p_ins_details           IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_denorm_str VARCHAR2(32000);
  l_ps_denorm_str VARCHAR2(32000);
  l_ct_denorm_str VARCHAR2(32000);
  l_cpt_denorm_str VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_sqlstr VARCHAR2(32000); -- Dynamic SQL String
  -- For Score calculation
  l_max_score NUMBER;
  l_match_idx NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX59 VARCHAR2(2000);
  l_TX5 VARCHAR2(2000);
  l_TX158 VARCHAR2(2000);
  l_TX9 VARCHAR2(2000);
  l_TX22 VARCHAR2(2000);
  l_TX45 VARCHAR2(2000);
  l_TX2 VARCHAR2(2000);
  l_TX14 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);
  l_TX26 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;
  H_PARTY_ID HZ_PARTY_SEARCH.IDList;
  H_PARTY_ID_LIST HZ_PARTY_SEARCH.IDList;

  l_score NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  l_ps_contact_id NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;
  l_denorm_max_score NUMBER;
  l_non_denorm_max_score NUMBER;

  defpt NUMBER :=0;
  defps NUMBER :=0;
  defct NUMBER :=0;
  defcpt NUMBER :=0;
  l_index NUMBER;
  l_max_thresh NUMBER;
  l_tmp NUMBER;
  l_merge_flag VARCHAR2(1);
  l_num_eval NUMBER:=0;

  --Fix for bug 4417124 
  l_use_contact_addr_info BOOLEAN := TRUE;
  l_use_contact_cpt_info BOOLEAN  := TRUE;
  l_use_contact_addr_flag VARCHAR2(1) := 'Y';
  l_use_contact_cpt_flag  VARCHAR2(1) := 'Y';

    h_ps_id HZ_PARTY_SEARCH.IDList;
    h_ps_party_id HZ_PARTY_SEARCH.IDList;
    h_ps_score HZ_PARTY_SEARCH.IDList;
    h_ct_id HZ_PARTY_SEARCH.IDList;
    h_ct_party_id HZ_PARTY_SEARCH.IDList;
    h_ct_score HZ_PARTY_SEARCH.IDList;
    h_cpt_id HZ_PARTY_SEARCH.IDList;
    h_cpt_party_id HZ_PARTY_SEARCH.IDList;
    h_cpt_score HZ_PARTY_SEARCH.IDList;
    detcnt NUMBER := 1;

  
  /********************* Find Parties private procedures *******/
  PROCEDURE push_eval IS
  BEGIN
    H_PARTY_ID.DELETE;
    H_PARTY_ID_LIST.DELETE;
    H_SCORES.DELETE;        
    g_mappings.DELETE;
    HZ_DQM_SEARCH_UTIL.set_num_eval(0);
    call_order(5) := call_order(1);
    call_type(5) := 'AND';
    call_max_score(5) := call_max_score(1);
    call_type(2) := 'OR';
  END;

  /**  Private procedure to acquire and score at party level  ***/
  PROCEDURE eval_party_level(p_party_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
    open_party_cursor(p_dup_party_id, p_restrict_sql, p_party_contains_str,l_ctx_id, l_match_str,p_search_merged,l_party_cur);
    LOOP 
      FETCH l_party_cur INTO
         l_party_id , l_TX59, l_TX2, l_TX45;
      EXIT WHEN l_party_cur%NOTFOUND;
      l_index := map_id(l_party_id);
      l_score := GET_PARTY_SCORE(l_TX59,l_TX2,l_TX45);
      IF NOT H_SCORES.EXISTS(l_index) THEN
        H_SCORES(l_index) := get_new_score_rec(l_score,l_score,defps,defct,defcpt, l_party_id, null, null,null);
      ELSE
        H_SCORES(l_index).TOTAL_SCORE := 
                H_SCORES(l_index).TOTAL_SCORE+l_score;
        H_SCORES(l_index).PARTY_SCORE := l_score;
      END IF;
      IF NOT H_PARTY_ID_LIST.EXISTS(l_index) THEN
        H_PARTY_ID_LIST(l_index) := 1;
        H_PARTY_ID(l_party_id_idx) := l_party_id;
        l_party_id_idx:= l_party_id_idx+1;
      END IF;
      IF l_party_id_idx>l_max_thresh THEN
        CLOSE l_party_cur;
        IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        ELSE
          push_eval;
          RETURN;
        END IF;
      END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Party Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_id '||l_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END LOOP;
    CLOSE l_party_cur;
    ROLLBACK to eval_start;
  END;

  /**  Private procedure to acquire and score at party site level  ***/
  PROCEDURE eval_party_site_level(p_party_site_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER,p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      l_party_id_idx := H_PARTY_ID.COUNT+1;
      l_ctx_id := NULL;
    END IF;
    open_party_site_cursor(p_dup_party_id,NULL, p_restrict_sql, p_party_site_contains_str,l_ctx_id, l_party_site_cur);
    LOOP 
      FETCH l_party_site_cur INTO
         l_party_site_id, l_ps_party_id, l_ps_contact_id , l_TX26, l_TX9, l_TX14, l_TX22;
      EXIT WHEN l_party_site_cur%NOTFOUND;
      IF l_use_contact_addr_info OR l_ps_contact_id IS NOT NULL THEN
        l_index := map_id(l_ps_party_id);
        l_score := GET_PARTY_SITES_SCORE(l_match_idx,l_TX26,l_TX9,l_TX14,l_TX22);
        IF NOT H_SCORES.EXISTS(l_index) THEN
          H_SCORES(l_index) := get_new_score_rec(l_score,defpt,l_score,defct,defcpt, l_ps_party_id, l_party_site_id, null,null);
        ELSE
          IF l_score > H_SCORES(l_index).PARTY_SITE_SCORE THEN
            H_SCORES(l_index).TOTAL_SCORE := 
                  H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).PARTY_SITE_SCORE+l_score;
            H_SCORES(l_index).PARTY_SITE_SCORE := l_score;
          END IF;
        END IF;
        IF NOT H_PARTY_ID_LIST.EXISTS(l_index) THEN
          H_PARTY_ID_LIST(l_index) := 1;
          H_PARTY_ID(l_party_id_idx) := l_ps_party_id;
          l_party_id_idx:= l_party_id_idx+1;
        END IF;
        IF l_party_id_idx>l_max_thresh THEN
        CLOSE l_party_site_cur;
          IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party site level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
          ELSE
            push_eval;
            RETURN;
          END IF;
        END IF;
        IF p_ins_details = 'Y' THEN
          h_ps_id(detcnt) := l_party_site_id;
          h_ps_party_id(detcnt) := l_ps_party_id;
          h_ps_score(detcnt) := round((l_score/p_emax_score)*100);
          detcnt := detcnt +1;
        END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Party Site Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_id '||l_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_ps_party_id '||l_ps_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    CLOSE l_party_site_cur;
    ROLLBACK to eval_start;
  END;

  /**  Private procedure to acquire and score at party site level  ***/
  PROCEDURE eval_contact_level(p_contact_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER,p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' AND p_call_type='AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
    open_contact_cursor(p_dup_party_id,NULL, p_restrict_sql, p_contact_contains_str,l_ctx_id, l_contact_cur);
    LOOP 
      FETCH l_contact_cur INTO
         l_org_contact_id, l_ct_party_id ;
      EXIT WHEN l_contact_cur%NOTFOUND;
      l_index := map_id(l_ct_party_id);
      l_score := GET_CONTACTS_SCORE(l_match_idx);
      IF NOT H_SCORES.EXISTS(l_index) THEN
        H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,l_score,defcpt, l_ct_party_id, null, l_org_contact_id,null);
      ELSE
        IF l_score > H_SCORES(l_index).CONTACT_SCORE THEN
          H_SCORES(l_index).TOTAL_SCORE := 
                H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_SCORE+l_score;
          H_SCORES(l_index).CONTACT_SCORE := l_score;
        END IF;
      END IF;
      IF NOT H_PARTY_ID_LIST.EXISTS(l_index) THEN
        H_PARTY_ID_LIST(l_index) := 1;
        H_PARTY_ID(l_party_id_idx) := l_ct_party_id;
        l_party_id_idx:= l_party_id_idx+1;
      END IF;
      IF l_party_id_idx>l_max_thresh THEN
        CLOSE l_contact_cur;
        IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval contact level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        ELSE
          push_eval;
          RETURN;
        END IF;
      END IF;
      IF p_ins_details = 'Y' THEN
        h_ct_id(detcnt) := l_org_contact_id;
        h_ct_party_id(detcnt) := l_ct_party_id;
        h_ct_score(detcnt) := round((l_score/p_emax_score)*100);
        detcnt := detcnt +1;
      END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_org_contact_id '||l_org_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_ct_party_id '||l_ct_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END LOOP;
    CLOSE l_contact_cur;
    ROLLBACK to eval_start;
  END;

  /**  Private procedure to acquire and score at contact point level  ***/
  PROCEDURE eval_cpt_level(p_contact_pt_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER, p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
    open_contact_pt_cursor(p_dup_party_id,NULL, p_restrict_sql, p_contact_pt_contains_str,l_ctx_id, l_contact_pt_cur);
    LOOP 
      FETCH l_contact_pt_cur INTO
         l_contact_pt_id, l_cpt_party_id,  l_cpt_ps_id, l_cpt_contact_id , l_TX5, l_TX158, l_TX10;
      EXIT WHEN l_contact_pt_cur%NOTFOUND;
      IF l_use_contact_cpt_info OR l_ps_contact_id IS NOT NULL THEN
        l_index := map_id(l_cpt_party_id);
        l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
        IF NOT H_SCORES.EXISTS(l_index) THEN
          H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id,l_contact_pt_id);
        ELSE
          IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
            H_SCORES(l_index).TOTAL_SCORE := 
                  H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
            H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
          END IF;
        END IF;
        IF NOT H_PARTY_ID_LIST.EXISTS(l_index) THEN
          H_PARTY_ID_LIST(l_index) := 1;
          H_PARTY_ID(l_party_id_idx) := l_cpt_party_id;
          l_party_id_idx:= l_party_id_idx+1;
        END IF;
        IF l_party_id_idx>l_max_thresh THEN
        CLOSE l_contact_pt_cur;
          IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval contact point level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
          ELSE
            push_eval;
            RETURN;
          END IF;
        END IF;
        IF p_ins_details = 'Y' THEN
          h_cpt_id(detcnt) := l_contact_pt_id;
          h_cpt_party_id(detcnt) := l_cpt_party_id;
          h_cpt_score(detcnt) := round((l_score/p_emax_score)*100);
          detcnt := detcnt +1;
        END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact pt Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_id '||l_contact_pt_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_party_id '||l_cpt_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    CLOSE l_contact_pt_cur;
    ROLLBACK to eval_start;
  END;

  /**  Private procedure to call the eval procedure at each entity in the correct order ***/
  PROCEDURE do_eval (p_index NUMBER) IS
    l_ctx_id NUMBER;
    l_threshold NUMBER;
    other_criteria_exists BOOLEAN; 
  BEGIN
    IF (p_index=5 AND call_order(5) <> 'NONE' AND H_PARTY_ID.COUNT=0) THEN
     l_threshold := 175;  
     other_criteria_exists := TRUE ;
     IF (call_max_score(2) = 0 and call_max_score(3) = 0 and call_max_score(4) = 0 ) THEN 
      other_criteria_exists := FALSE; 
     END IF ; 
    IF( (l_match_str = ' AND ' AND other_criteria_exists) OR ( call_max_score(p_index) < l_threshold) )THEN
	     RETURN;	
	  ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In do eval number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
     END IF; 
    END IF;
    IF call_order(p_index) = 'PARTY' AND l_party_contains_str IS NOT NULL THEN
      eval_party_level(l_party_contains_str,call_type(p_index), p_index);
    ELSIF call_order(p_index) = 'PARTY_SITE' AND l_party_site_contains_str IS NOT NULL THEN
      eval_party_site_level(l_party_site_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    ELSIF call_order(p_index) = 'CONTACT' AND l_contact_contains_str IS NOT NULL THEN
      eval_contact_level(l_contact_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    ELSIF call_order(p_index) = 'CONTACT_POINT' AND l_contact_pt_contains_str IS NOT NULL THEN
      eval_cpt_level(l_contact_pt_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    END IF;
  END;
  /************ End of find_parties private procedures **********/ 

  BEGIN

    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_parties(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_set_id '||p_dup_set_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_search_merged '||p_search_merged,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_party_id '||p_dup_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' OR ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
    SAVEPOINT find_parties;
    l_entered_max_score:= init_search(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list, l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;


    --Fix for bug 4417124 

    SELECT use_contact_addr_flag, use_contact_cpt_flag 
    INTO l_use_contact_addr_flag, l_use_contact_cpt_flag 
    FROM hz_match_rules_b 
    WHERE match_rule_id = 51; 

    IF p_dup_batch_id IS NOT NULL AND NVL(l_use_contact_addr_flag, 'Y') = 'N' THEN
      l_use_contact_addr_info := FALSE; 
    END IF; 

    IF p_dup_batch_id IS NOT NULL AND NVL(l_use_contact_cpt_flag, 'Y') = 'N' THEN
      l_use_contact_cpt_info := FALSE; 
    END IF; 

   --End fix for bug 4417124

    l_max_thresh:=nvl(FND_PROFILE.VALUE('HZ_DQM_MAX_EVAL_THRESH'),200);
    IF nvl(FND_PROFILE.VALUE('HZ_DQM_SCORE_UNTIL_THRESH'),'N')='Y' THEN
      g_score_until_thresh := true;
    ELSE
      g_score_until_thresh := false;
    END IF;
    l_party_site_contains_str := check_party_sites_bulk (p_party_site_list);
    l_contact_contains_str := check_contacts_bulk (p_contact_list);
    l_contact_pt_contains_str := check_cpts_bulk (p_contact_point_list);
    l_party_contains_str := check_parties_bulk (p_party_search_rec) ;
    init_score_context(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;

    IF l_party_contains_str IS NULL THEN
      defpt := 1;
    END IF;
    IF l_party_site_contains_str IS NULL THEN
      defps := 1;
    END IF;
    IF l_contact_contains_str IS NULL THEN
      defct := 1;
    END IF;
    IF l_contact_pt_contains_str IS NULL THEN
      defcpt := 1;
    END IF;

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_match_str '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_contains_str '||l_party_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_contains_str '||l_party_site_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_contains_str '||l_contact_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_contains_str '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_search_ctx_id '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I in 1..5 LOOP
      do_eval(I);
    END LOOP;
ROLLBACK to find_parties;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Evaluating Matches. Threshold : 175 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    x_num_matches := 0;
    l_num_eval := 0;
    IF l_match_str = ' OR ' THEN
      l_party_id := H_SCORES.FIRST;
    ELSE
      l_party_id := H_PARTY_ID_LIST.FIRST;
    END IF;
    WHILE l_party_id IS NOT NULL LOOP
      l_num_eval:= l_num_eval+1;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match Party ID '||H_SCORES(l_party_id).PARTY_ID,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'Score '||H_SCORES(l_party_id).TOTAL_SCORE,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF H_SCORES(l_party_id).TOTAL_SCORE>=175 THEN
          IF p_dup_set_id IS NULL THEN
            INSERT INTO HZ_MATCHED_PARTIES_GT (SEARCH_CONTEXT_ID, PARTY_ID, SCORE) 
            VALUES (l_search_ctx_id,H_SCORES(l_party_id).PARTY_ID,H_SCORES(l_party_id).TOTAL_SCORE);
             x_num_matches := x_num_matches+1;
          ELSE
            BEGIN
              SELECT 1 INTO l_tmp FROM HZ_DUP_SET_PARTIES
              WHERE DUP_PARTY_ID = H_SCORES(l_party_id).PARTY_ID
              AND DUP_SET_BATCH_ID = p_dup_batch_id 
              AND ROWNUM=1;
            EXCEPTION 
              WHEN NO_DATA_FOUND THEN
                IF H_SCORES(l_party_id).TOTAL_SCORE>=250 THEN
                  l_merge_flag := 'Y';
                ELSE
                  l_merge_flag := 'N';
                END IF;
                INSERT INTO HZ_DUP_SET_PARTIES (DUP_PARTY_ID,DUP_SET_ID,MERGE_SEQ_ID,
                    MERGE_BATCH_ID,SCORE,MERGE_FLAG, CREATED_BY,CREATION_DATE,LAST_UPDATE_LOGIN,
                    LAST_UPDATE_DATE,LAST_UPDATED_BY,DUP_SET_BATCH_ID) 
                VALUES (H_SCORES(l_party_id).PARTY_ID,p_dup_set_id,0,0,
                    H_SCORES(l_party_id).TOTAL_SCORE, l_merge_flag,
                    hz_utility_pub.created_by,hz_utility_pub.creation_date,
                    hz_utility_pub.last_update_login,
                    hz_utility_pub.last_update_date,
                    hz_utility_pub.user_id,p_dup_batch_id);
                x_num_matches := x_num_matches+1;
            END;
          END IF;
      END IF;
      IF l_match_str = ' OR ' THEN
        l_party_id:=H_SCORES.NEXT(l_party_id);
      ELSE
        l_party_id:=H_PARTY_ID_LIST.NEXT(l_party_id);
      END IF;
    END LOOP;

----------INSERT INTO HZ_MATCHED_PARTY_SITES -----
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_ps_id.COUNT 
        INSERT INTO HZ_MATCHED_PARTY_SITES_GT (SEARCH_CONTEXT_ID,PARTY_SITE_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_ps_id(I), h_ps_party_id(I), h_ps_score(I));
    END IF;
----------INSERT INTO HZ_MATCHED_CONTACTS-----
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_ct_id.COUNT 
        INSERT INTO HZ_MATCHED_CONTACTS_GT (SEARCH_CONTEXT_ID,ORG_CONTACT_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_ct_id(I), h_ct_party_id(I), h_ct_score(I));
    END IF;
----------INSERT INTO HZ_MATCHED_CPTS-----
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_cpt_id.COUNT 
        INSERT INTO HZ_MATCHED_CPTS_GT (SEARCH_CONTEXT_ID,CONTACT_POINT_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_cpt_id(I), h_cpt_party_id(I), h_cpt_score(I));
    END IF;

    HZ_DQM_SEARCH_UTIL.set_num_eval(l_num_eval);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_parties(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    ROLLBACK to find_parties;
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    ROLLBACK to find_parties;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    ROLLBACK to find_parties;
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.find_parties');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_parties;

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: find_persons ------------------------------
-------------------------------------------------------------------------------------
PROCEDURE find_persons (
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      p_ins_details           IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_denorm_str VARCHAR2(32000);
  l_ps_denorm_str VARCHAR2(32000);
  l_ct_denorm_str VARCHAR2(32000);
  l_cpt_denorm_str VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_sqlstr VARCHAR2(32000); -- Dynamic SQL String
  -- For Score calculation
  l_max_score NUMBER;
  l_match_idx NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX59 VARCHAR2(2000);
  l_TX5 VARCHAR2(2000);
  l_TX158 VARCHAR2(2000);
  l_TX9 VARCHAR2(2000);
  l_TX22 VARCHAR2(2000);
  l_TX45 VARCHAR2(2000);
  l_TX2 VARCHAR2(2000);
  l_TX14 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);
  l_TX26 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;
  H_PARTY_ID HZ_PARTY_SEARCH.IDList;
  H_PARTY_ID_LIST HZ_PARTY_SEARCH.IDList;

  l_score NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  l_ps_contact_id NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;
  l_denorm_max_score NUMBER;
  l_non_denorm_max_score NUMBER;

  defpt NUMBER :=0;
  defps NUMBER :=0;
  defct NUMBER :=0;
  defcpt NUMBER :=0;
  l_index NUMBER;
  l_max_thresh NUMBER;
  l_tmp NUMBER;
  l_merge_flag VARCHAR2(1);
  l_num_eval NUMBER:=0;

    h_ps_id HZ_PARTY_SEARCH.IDList;
    h_ps_party_id HZ_PARTY_SEARCH.IDList;
    h_ps_score HZ_PARTY_SEARCH.IDList;
    h_ct_id HZ_PARTY_SEARCH.IDList;
    h_ct_party_id HZ_PARTY_SEARCH.IDList;
    h_ct_score HZ_PARTY_SEARCH.IDList;
    h_cpt_id HZ_PARTY_SEARCH.IDList;
    h_cpt_party_id HZ_PARTY_SEARCH.IDList;
    h_cpt_score HZ_PARTY_SEARCH.IDList;
    detcnt NUMBER := 1;
    l_person_id NUMBER;
  
  /********************* Find Parties private procedures *******/
  PROCEDURE set_person_party_type IS
  BEGIN
    g_party_stage_rec.TX36:= 
        HZ_TRANS_PKG.EXACT(
             'PERSON'
             ,null,'PARTY_TYPE'
             ,'PARTY');
  END;
    
  PROCEDURE unset_person_party_type IS
  BEGIN
    g_party_stage_rec.TX36 := '';
  END;
  
  FUNCTION get_person_id(p_party_id NUMBER, p_contact_id NUMBER) 
  RETURN NUMBER IS
    l_party_type VARCHAR2(255);
    l_person_id NUMBER(15);
  BEGIN
    SELECT party_type INTO l_party_type from hz_parties where party_id = p_party_id;
    IF l_party_type = 'PERSON' THEN
      RETURN p_party_id;
    ELSIF p_contact_id IS NULL THEN
      RETURN NULL;
    ELSE
      BEGIN 
        SELECT subject_id INTO l_person_id FROM HZ_RELATIONSHIPS r, HZ_ORG_CONTACTS oc, hz_parties p
        WHERE oc.org_contact_id = p_contact_id
        AND r.relationship_id = oc.party_relationship_id 
        AND r.object_id = p_party_id
        AND p.party_id = r.subject_id 
        AND p.party_type = 'PERSON'
        AND ROWNUM=1;
        
        RETURN l_person_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN NULL;
      END;      
    END IF;
  END;  

  PROCEDURE push_eval IS
  BEGIN
    H_PARTY_ID.DELETE;
    H_PARTY_ID_LIST.DELETE;
    H_SCORES.DELETE;        
    g_mappings.DELETE;
    HZ_DQM_SEARCH_UTIL.set_num_eval(0);
    call_order(5) := call_order(1);
    call_type(5) := 'AND';
    call_max_score(5) := call_max_score(1);
    call_type(2) := 'OR';
  END;

  /**  Private procedure to acquire and score at party level  ***/
  PROCEDURE eval_party_level(p_party_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    set_person_party_type;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
    open_party_cursor(null, p_restrict_sql, p_party_contains_str,l_ctx_id, l_match_str,null,l_party_cur);
    LOOP 
      FETCH l_party_cur INTO
         l_party_id , l_TX59, l_TX2, l_TX45;
      EXIT WHEN l_party_cur%NOTFOUND;
      l_index := map_id(l_party_id);
      l_score := GET_PARTY_SCORE(l_TX59,l_TX2,l_TX45);
      IF NOT H_SCORES.EXISTS(l_index) THEN
        H_SCORES(l_index) := get_new_score_rec(l_score,l_score,defps,defct,defcpt, l_party_id, null, null,null);
      ELSE
        H_SCORES(l_index).TOTAL_SCORE := 
                H_SCORES(l_index).TOTAL_SCORE+l_score;
        H_SCORES(l_index).PARTY_SCORE := l_score;
      END IF;
      IF NOT H_PARTY_ID_LIST.EXISTS(l_index) AND H_SCORES.EXISTS(l_index) THEN
        H_PARTY_ID_LIST(l_index) := 1;
        H_PARTY_ID(l_party_id_idx) := l_party_id;
        l_party_id_idx:= l_party_id_idx+1;
      END IF;
      IF l_party_id_idx>l_max_thresh THEN
        CLOSE l_party_cur;
        IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        ELSE
          push_eval;
          RETURN;
        END IF;
      END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Party Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_id '||l_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END LOOP;
    CLOSE l_party_cur;
    ROLLBACK to eval_start;
  END;
  PROCEDURE open_person_contact_cursor(
            p_contains_str  VARCHAR2, 
            p_search_ctx_id  NUMBER, 
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
  BEGIN
    OPEN x_cursor FOR 
      SELECT /*+ INDEX(stage HZ_STAGED_CONTACTS_U1) */ ORG_CONTACT_ID, PARTY_ID
      FROM HZ_STAGED_CONTACTS stage
      WHERE contains( concat_col, p_contains_str)>0
      AND ORG_CONTACT_ID in (
            SELECT  /*+ ORDERED INDEX(d hz_dqm_parties_gt_n1) USE_NL(d r)*/ 
            org_contact_id
            from hz_dqm_parties_gt d, hz_relationships r, hz_org_contacts oc
            where d.party_id = r.subject_id
            and oc.party_relationship_id = r.relationship_id
            and d.search_context_id = p_search_ctx_id);   
  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'DRG-50943')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
  END;

  /**  Private procedure to acquire and score at party site level  ***/
  PROCEDURE eval_party_site_level(p_party_site_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER,p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
    l_person_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    unset_person_party_type;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID)
      SELECT distinct l_search_ctx_id,r.subject_id from HZ_DQM_PARTIES_GT d, HZ_ORG_CONTACTS oc, 
                               HZ_RELATIONSHIPS r
      WHERE oc.party_relationship_id = r.relationship_id
      AND r.object_id = d.party_id
      AND d.SEARCH_CONTEXT_ID=l_search_ctx_id;
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID)
      SELECT distinct l_search_ctx_id,r.subject_id from HZ_DQM_PARTIES_GT d, HZ_ORG_CONTACTS oc, 
                               HZ_RELATIONSHIPS r
      WHERE oc.party_relationship_id = r.relationship_id
      AND r.object_id = d.party_id
      AND d.SEARCH_CONTEXT_ID=l_search_ctx_id;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      l_party_id_idx := H_PARTY_ID.COUNT+1;
      l_ctx_id := NULL;
    END IF;
    open_party_site_cursor(null,NULL, p_restrict_sql, p_party_site_contains_str,l_ctx_id, l_party_site_cur);
    LOOP 
      FETCH l_party_site_cur INTO
         l_party_site_id, l_ps_party_id, l_ps_contact_id , l_TX26, l_TX9, l_TX14, l_TX22;
      EXIT WHEN l_party_site_cur%NOTFOUND;
      l_person_id := get_person_id(l_ps_party_id, l_ps_contact_id);
      IF l_person_id IS NOT NULL THEN
        l_index := map_id(l_person_id);
        l_score := GET_PARTY_SITES_SCORE(l_match_idx,l_TX26,l_TX9,l_TX14,l_TX22);
        IF NOT H_SCORES.EXISTS(l_index) THEN
          IF l_ctx_id IS NULL THEN
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,l_score,defct,defcpt, l_person_id, l_party_site_id, null,null);
          END IF;
        ELSE
          IF l_score > H_SCORES(l_index).PARTY_SITE_SCORE THEN
            H_SCORES(l_index).TOTAL_SCORE := 
                  H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).PARTY_SITE_SCORE+l_score;
            H_SCORES(l_index).PARTY_SITE_SCORE := l_score;
          END IF;
        END IF;
        IF NOT H_PARTY_ID_LIST.EXISTS(l_index) AND H_SCORES.EXISTS(l_index) THEN
          H_PARTY_ID_LIST(l_index) := 1;
          H_PARTY_ID(l_party_id_idx) := l_ps_party_id;
          l_party_id_idx:= l_party_id_idx+1;
        END IF;
        IF l_party_id_idx>l_max_thresh THEN
        CLOSE l_party_site_cur;
          IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party site level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
          ELSE
            push_eval;
            RETURN;
          END IF;
        END IF;
        IF p_ins_details = 'Y' THEN
          h_ps_id(detcnt) := l_party_site_id;
          h_ps_party_id(detcnt) := l_person_id;
          h_ps_score(detcnt) := round((l_score/p_emax_score)*100);
          detcnt := detcnt +1;
        END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Party Site Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_id '||l_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_ps_party_id '||l_person_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    CLOSE l_party_site_cur;
    ROLLBACK to eval_start;
  END;

  /**  Private procedure to acquire and score at party site level  ***/
  PROCEDURE eval_contact_level(p_contact_contains_str VARCHAR2,p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    l_ctx_id := l_search_ctx_id;
    unset_person_party_type;
    FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    open_person_contact_cursor(p_contact_contains_str,l_ctx_id, l_contact_cur);
    LOOP 
      FETCH l_contact_cur INTO
         l_org_contact_id, l_ct_party_id ;
      EXIT WHEN l_contact_cur%NOTFOUND;
      l_person_id := get_person_id(l_ct_party_id, l_org_contact_id);
      l_index := map_id(l_person_id);
      IF l_person_id IS NOT NULL AND H_SCORES.EXISTS(l_index) THEN
        l_score := GET_CONTACTS_SCORE(l_match_idx);
        IF l_score > H_SCORES(l_index).CONTACT_SCORE THEN
          H_SCORES(l_index).TOTAL_SCORE := 
                H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_SCORE+l_score;
          H_SCORES(l_index).CONTACT_SCORE := l_score;
        END IF;
      END IF;
      IF p_ins_details = 'Y' THEN
        h_ct_id(detcnt) := l_org_contact_id;
        h_ct_party_id(detcnt) := l_person_id;
        h_ct_score(detcnt) := round((l_score/p_emax_score)*100);
        detcnt := detcnt +1;
      END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_org_contact_id '||l_org_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_ct_party_id '||l_person_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END LOOP;
    CLOSE l_contact_cur;
    ROLLBACK to eval_start;
  END;

  /**  Private procedure to acquire and score at contact point level  ***/
  PROCEDURE eval_cpt_level(p_contact_pt_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER, p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    unset_person_party_type;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID)
      SELECT distinct l_search_ctx_id,r.subject_id from HZ_DQM_PARTIES_GT d, HZ_ORG_CONTACTS oc, 
                               HZ_RELATIONSHIPS r
      WHERE oc.party_relationship_id = r.relationship_id
      AND r.object_id = d.party_id
      AND d.SEARCH_CONTEXT_ID=l_search_ctx_id;
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID)
      SELECT distinct l_search_ctx_id,r.subject_id from HZ_DQM_PARTIES_GT d, HZ_ORG_CONTACTS oc, 
                               HZ_RELATIONSHIPS r
      WHERE oc.party_relationship_id = r.relationship_id
      AND r.object_id = d.party_id
      AND d.SEARCH_CONTEXT_ID=l_search_ctx_id;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
    open_contact_pt_cursor(null,NULL, p_restrict_sql, p_contact_pt_contains_str,l_ctx_id, l_contact_pt_cur);
    LOOP 
      FETCH l_contact_pt_cur INTO
         l_contact_pt_id, l_cpt_party_id,  l_cpt_ps_id, l_cpt_contact_id , l_TX5, l_TX158, l_TX10;
      EXIT WHEN l_contact_pt_cur%NOTFOUND;
      l_person_id := get_person_id(l_cpt_party_id, l_cpt_contact_id);
      IF l_person_id IS NOT NULL THEN
        l_index := map_id(l_person_id);
        l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
        IF NOT H_SCORES.EXISTS(l_index) THEN
          IF l_ctx_id IS NULL THEN
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score, l_person_id, l_cpt_ps_id, l_cpt_contact_id,l_contact_pt_id);
          END IF;
        ELSE
          IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
            H_SCORES(l_index).TOTAL_SCORE := 
                  H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
            H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
          END IF;
        END IF;
        IF NOT H_PARTY_ID_LIST.EXISTS(l_index) AND H_SCORES.EXISTS(l_index) THEN
          H_PARTY_ID_LIST(l_index) := 1;
          H_PARTY_ID(l_party_id_idx) := l_person_id;
          l_party_id_idx:= l_party_id_idx+1;
        END IF;
        IF l_party_id_idx>l_max_thresh THEN
        CLOSE l_contact_pt_cur;
          IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval contact point level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
          ELSE
            push_eval;
            RETURN;
          END IF;
        END IF;
        IF p_ins_details = 'Y' THEN
          h_cpt_id(detcnt) := l_contact_pt_id;
          h_cpt_party_id(detcnt) := l_person_id;
          h_cpt_score(detcnt) := round((l_score/p_emax_score)*100);
          detcnt := detcnt +1;
        END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact pt Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_id '||l_contact_pt_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_party_id '||l_person_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    CLOSE l_contact_pt_cur;
    ROLLBACK to eval_start;
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_cpt_id.COUNT 
        INSERT INTO HZ_MATCHED_CPTS_GT (SEARCH_CONTEXT_ID,CONTACT_POINT_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_cpt_id(I), h_cpt_party_id(I), h_cpt_score(I));
    END IF;
  END;

  /**  Private procedure to call the eval procedure at each entity in the correct order ***/
  PROCEDURE do_eval (p_index NUMBER) IS
    l_ctx_id NUMBER;
    l_threshold NUMBER;
    other_criteria_exists BOOLEAN; 
  BEGIN
    IF (p_index=5 AND call_order(5) <> 'NONE' AND H_PARTY_ID.COUNT=0) THEN
     l_threshold := 175;  
     other_criteria_exists := TRUE ;
     IF (call_max_score(2) = 0 and call_max_score(3) = 0 and call_max_score(4) = 0 ) THEN 
      other_criteria_exists := FALSE; 
     END IF ; 
    IF( (l_match_str = ' AND ' AND other_criteria_exists) OR ( call_max_score(p_index) < l_threshold) )THEN
	     RETURN;	
	  ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In do eval number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
     END IF; 
    END IF;
    IF call_order(p_index) = 'PARTY' AND l_party_contains_str IS NOT NULL THEN
      eval_party_level(l_party_contains_str,call_type(p_index), p_index);
    ELSIF call_order(p_index) = 'PARTY_SITE' AND l_party_site_contains_str IS NOT NULL THEN
      eval_party_site_level(l_party_site_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    ELSIF call_order(p_index) = 'CONTACT_POINT' AND l_contact_pt_contains_str IS NOT NULL THEN
      eval_cpt_level(l_contact_pt_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    END IF;
  END;
  /************ End of find_persons private procedures **********/ 

  BEGIN

    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_persons(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' OR ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
    SAVEPOINT find_persons;
    l_entered_max_score:= init_search(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list, l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;

    l_max_thresh:=nvl(FND_PROFILE.VALUE('HZ_DQM_MAX_EVAL_THRESH'),200);
    IF nvl(FND_PROFILE.VALUE('HZ_DQM_SCORE_UNTIL_THRESH'),'N')='Y' THEN
      g_score_until_thresh := true;
    ELSE
      g_score_until_thresh := false;
    END IF;
    l_party_site_contains_str := check_party_sites_bulk (p_party_site_list);
    l_contact_contains_str := check_contacts_bulk (p_contact_list);
    l_contact_pt_contains_str := check_cpts_bulk (p_contact_point_list);
    l_party_contains_str := check_parties_bulk (p_party_search_rec) ;
    init_score_context(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;

    IF l_party_contains_str IS NULL THEN
      defpt := 1;
    END IF;
    IF l_party_site_contains_str IS NULL THEN
      defps := 1;
    END IF;
    IF l_contact_contains_str IS NULL THEN
      defct := 1;
    END IF;
    IF l_contact_pt_contains_str IS NULL THEN
      defcpt := 1;
    END IF;

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_match_str '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_contains_str '||l_party_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_contains_str '||l_party_site_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_contains_str '||l_contact_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_contains_str '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_search_ctx_id '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I in 1..5 LOOP
      do_eval(I);
    END LOOP;
    ROLLBACK to find_persons;
    IF l_contact_contains_str IS NOT NULL THEN
      eval_contact_level(l_contact_contains_str,p_ins_details,l_contact_max_score);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Evaluating Matches. Threshold : 33 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    x_num_matches := 0;
    l_num_eval := 0;
    IF l_match_str = ' OR ' THEN
      l_party_id := H_SCORES.FIRST;
    ELSE
      l_party_id := H_PARTY_ID_LIST.FIRST;
    END IF;
    WHILE l_party_id IS NOT NULL LOOP
      l_num_eval:= l_num_eval+1;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match Party ID '||H_SCORES(l_party_id).PARTY_ID,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'Score '||round((H_SCORES(l_party_id).TOTAL_SCORE/l_entered_max_score)*100),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF (H_SCORES(l_party_id).TOTAL_SCORE/l_entered_max_score)>=(175/525) THEN
            INSERT INTO HZ_MATCHED_PARTIES_GT (SEARCH_CONTEXT_ID, PARTY_ID, SCORE) 
            VALUES (l_search_ctx_id,H_SCORES(l_party_id).PARTY_ID,round((H_SCORES(l_party_id).TOTAL_SCORE/l_entered_max_score)*100));
            x_num_matches := x_num_matches+1;
      END IF;
      IF l_match_str = ' OR ' THEN
        l_party_id:=H_SCORES.NEXT(l_party_id);
      ELSE
        l_party_id:=H_PARTY_ID_LIST.NEXT(l_party_id);
      END IF;
    END LOOP;

----------INSERT INTO HZ_MATCHED_PARTY_SITES -----
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_ps_id.COUNT 
        INSERT INTO HZ_MATCHED_PARTY_SITES_GT (SEARCH_CONTEXT_ID,PARTY_SITE_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_ps_id(I), h_ps_party_id(I), h_ps_score(I));
    END IF;
----------INSERT INTO HZ_MATCHED_CONTACTS-----
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_ct_id.COUNT 
        INSERT INTO HZ_MATCHED_CONTACTS_GT (SEARCH_CONTEXT_ID,ORG_CONTACT_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_ct_id(I), h_ct_party_id(I), h_ct_score(I));
    END IF;
----------INSERT INTO HZ_MATCHED_CPTS-----
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_cpt_id.COUNT 
        INSERT INTO HZ_MATCHED_CPTS_GT (SEARCH_CONTEXT_ID,CONTACT_POINT_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_cpt_id(I), h_cpt_party_id(I), h_cpt_score(I));
    END IF;

    HZ_DQM_SEARCH_UTIL.set_num_eval(l_num_eval);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_persons(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    ROLLBACK to find_persons;
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    ROLLBACK to find_persons;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    ROLLBACK to find_persons;
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.find_persons');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_persons;
PROCEDURE find_persons (
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_ins_details           IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
)  IS
  BEGIN
      find_persons(p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list,
      	p_restrict_sql,p_match_type,NULL,p_ins_details,x_search_ctx_id,x_num_matches);
	END find_persons;

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: find_party_details ------------------------
-------------------------------------------------------------------------------------
PROCEDURE find_party_details (
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_party_details(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_search_merged '||p_search_merged,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  find_parties(p_rule_id,p_party_search_rec,p_party_site_list, p_contact_list, p_contact_point_list,
               p_restrict_sql,p_match_type,p_search_merged,null,null, null,'Y',
               x_search_ctx_id,x_num_matches);
  DELETE FROM HZ_MATCHED_PARTY_SITES_GT ps WHERE SEARCH_CONTEXT_ID = x_search_ctx_id 
  AND NOT EXISTS 
       (SELECT 1 FROM HZ_MATCHED_PARTIES_GT p WHERE SEARCH_CONTEXT_ID = x_search_ctx_id AND p.PARTY_ID = ps.PARTY_ID);
  DELETE FROM HZ_MATCHED_CONTACTS_GT ct WHERE SEARCH_CONTEXT_ID = x_search_ctx_id 
  AND NOT EXISTS 
       (SELECT 1 FROM HZ_MATCHED_PARTIES_GT p WHERE SEARCH_CONTEXT_ID = x_search_ctx_id AND p.PARTY_ID = ct.PARTY_ID);
  DELETE FROM HZ_MATCHED_CPTS_GT cpt WHERE SEARCH_CONTEXT_ID = x_search_ctx_id 
  AND NOT EXISTS 
       (SELECT 1 FROM HZ_MATCHED_PARTIES_GT p WHERE SEARCH_CONTEXT_ID = x_search_ctx_id AND p.PARTY_ID = cpt.PARTY_ID);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_party_details(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.find_party_details');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_party_details;

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: find_duplicate_parties -------------------
-------------------------------------------------------------------------------------
PROCEDURE find_duplicate_parties (
      p_rule_id               IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_dup_batch_id          IN      NUMBER,
      p_search_merged         IN      VARCHAR2,
      x_dup_set_id            OUT     NUMBER,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS
  l_party_rec HZ_PARTY_SEARCH.party_search_rec_type;
  l_party_site_list HZ_PARTY_SEARCH.party_site_list;
  l_contact_list HZ_PARTY_SEARCH.contact_list;
  l_cpt_list HZ_PARTY_SEARCH.contact_point_list;
  l_match_idx NUMBER;

BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_parties(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_id '||p_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_batch_id '||p_dup_batch_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_search_merged '||p_search_merged,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

  get_party_for_search(
              p_party_id, l_party_rec,l_party_site_list, l_contact_list, l_cpt_list);

    IF NOT check_prim_cond (l_party_rec,
                            l_party_site_list,
                            l_contact_list,
                            l_cpt_list) THEN
      x_dup_set_id:=NULL;
      x_search_ctx_id:=NULL;
      x_num_matches:=0;
      RETURN;
    END IF;
  x_dup_set_id := NULL;
  IF p_dup_batch_id IS NOT NULL THEN
    SELECT HZ_MERGE_BATCH_S.nextval INTO x_dup_set_id FROM DUAL;
  END IF;

  find_parties(p_rule_id,l_party_rec,l_party_site_list, l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,p_search_merged,p_party_id,x_dup_set_id,p_dup_batch_id,'N',
               x_search_ctx_id,x_num_matches);
  IF x_num_matches > 0 AND p_dup_batch_id IS NOT NULL THEN
    INSERT INTO HZ_DUP_SETS ( DUP_SET_ID, DUP_BATCH_ID, WINNER_PARTY_ID,
      STATUS, MERGE_TYPE, CREATED_BY, CREATION_DATE, LAST_UPDATE_LOGIN,
      LAST_UPDATE_DATE, LAST_UPDATED_BY) 
    VALUES (x_dup_set_id, p_dup_batch_id, p_party_id, 'SYSBATCH',
      'PARTY_MERGE', hz_utility_pub.created_by, hz_utility_pub.creation_date,
      hz_utility_pub.last_update_login, hz_utility_pub.last_update_date,
      hz_utility_pub.user_id);

    INSERT INTO HZ_DUP_SET_PARTIES (DUP_PARTY_ID,DUP_SET_ID,MERGE_SEQ_ID,
      MERGE_BATCH_ID,merge_flag,SCORE,CREATED_BY,CREATION_DATE,LAST_UPDATE_LOGIN,
      LAST_UPDATE_DATE,LAST_UPDATED_BY,DUP_SET_BATCH_ID) 
    VALUES (p_party_id,x_dup_set_id,0,0,
      'Y',100,hz_utility_pub.created_by,hz_utility_pub.creation_date,
      hz_utility_pub.last_update_login,hz_utility_pub.last_update_date,
      hz_utility_pub.user_id,p_dup_batch_id);
  ELSE
    x_dup_set_id := NULL;
  END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_parties(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.find_duplicate_parties');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_duplicate_parties;

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: find_duplicate_party_sites-----------------
-------------------------------------------------------------------------------------
PROCEDURE find_duplicate_party_sites (
      p_rule_id               IN      NUMBER,
      p_party_site_id         IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

   l_party_search_rec HZ_PARTY_SEARCH.party_search_rec_type; 
   l_party_site_list HZ_PARTY_SEARCH.party_site_list; 
   l_contact_list HZ_PARTY_SEARCH.contact_list; 
   l_contact_point_list HZ_PARTY_SEARCH.contact_point_list; 
   contact_point_ids HZ_PARTY_SEARCH.IDList; 
   p_party_site_list HZ_PARTY_SEARCH.IDList;  
   p_contact_ids HZ_PARTY_SEARCH.IDList; 
  l_match_idx NUMBER;
   cursor get_cpts_for_party_sites is select contact_point_id  
                         from hz_contact_points 
                         where owner_table_name = 'HZ_PARTY_SITES' 
                         and primary_flag='Y'
                         and owner_table_id = p_party_site_id; 
   BEGIN 
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_party_sites(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_site_id '||p_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_id '||p_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     p_party_site_list(1) := p_party_site_id; 
     OPEN get_cpts_for_party_sites;
     LOOP       
     FETCH get_cpts_for_party_sites BULK COLLECT INTO contact_point_ids; 
         EXIT WHEN get_cpts_for_party_sites%NOTFOUND; 
     END LOOP;  
     CLOSE get_cpts_for_party_sites; 
  
     get_search_criteria (
         null,
         p_party_site_list,
         HZ_PARTY_SEARCH.G_MISS_ID_LIST,
         contact_point_ids, 
         l_party_search_rec,
         l_party_site_list,
         l_contact_list,
         l_contact_point_list) ;
    IF NOT check_prim_cond (l_party_search_rec,
                            l_party_site_list,
                            l_contact_list,
                            l_contact_point_list) THEN
      x_search_ctx_id:=NULL;
      x_num_matches:=0;
      RETURN;
    END IF;
 
     get_matching_party_sites (p_rule_id, 
         p_party_id, 
         l_party_site_list, 
         l_contact_point_list,
         p_restrict_sql, 
         p_match_type, 
         p_party_site_id, 
         x_search_ctx_id,
         x_num_matches);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_party_sites(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.find_duplicate_party_sites');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_duplicate_party_sites; 
 
-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: find_duplicate_contacts--------------------
-------------------------------------------------------------------------------------
PROCEDURE find_duplicate_contacts (
      p_rule_id               IN      NUMBER,
      p_org_contact_id        IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

 l_party_search_rec HZ_PARTY_SEARCH.party_search_rec_type;
 l_party_site_list HZ_PARTY_SEARCH.party_site_list; 
 l_contact_list HZ_PARTY_SEARCH.contact_list; 
 l_contact_point_list HZ_PARTY_SEARCH.contact_point_list; 
 contact_point_ids HZ_PARTY_SEARCH.IDList; 
 p_party_site_list HZ_PARTY_SEARCH.IDList;   
 p_contact_ids HZ_PARTY_SEARCH.IDList; 
  l_match_idx NUMBER;
 cursor get_cpt_for_contact_id is select  contact_point_id 
   from hz_org_contacts a, hz_relationships b, hz_contact_points c 
   where a.party_relationship_id = b.relationship_id 
     and c.owner_table_name = 'HZ_PARTIES' 
     and c.primary_flag='Y'
     and c.owner_table_id = b.party_id 
     and b.directional_flag = 'F'  
     and a.org_contact_id = p_org_contact_id; 
BEGIN 
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contacts(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_org_contact_id '||p_org_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_id '||p_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    p_contact_ids(1) := p_org_contact_id; 
    OPEN get_cpt_for_contact_id; 
    LOOP 
    FETCH get_cpt_for_contact_id BULK COLLECT INTO contact_point_ids; 
        EXIT WHEN get_cpt_for_contact_id%NOTFOUND; 
    END LOOP;  
    CLOSE get_cpt_for_contact_id; 
 
    get_search_criteria (
        null,
        HZ_PARTY_SEARCH.G_MISS_ID_LIST,
        p_contact_ids,
        contact_point_ids, 
        l_party_search_rec,
        l_party_site_list, 
        l_contact_list,
        l_contact_point_list) ;
    IF NOT check_prim_cond (l_party_search_rec,
                            l_party_site_list,
                            l_contact_list,
                            l_contact_point_list) THEN
      x_search_ctx_id:=NULL;
      x_num_matches:=0;
      RETURN;
    END IF;
 
    get_matching_contacts (p_rule_id, 
        p_party_id, 
        l_contact_list, 
        l_contact_point_list, 
        p_restrict_sql, 
        p_match_type, 
        p_org_contact_id, 
        x_search_ctx_id, 
        x_num_matches);
 
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contacts(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.find_duplicate_contacts');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_duplicate_contacts; 

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: find_duplicate_contact_points -------------
-------------------------------------------------------------------------------------
PROCEDURE find_duplicate_contact_points (
      p_rule_id               IN      NUMBER,
      p_contact_point_id      IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS
 l_party_search_rec HZ_PARTY_SEARCH.party_search_rec_type; 
  l_party_site_list HZ_PARTY_SEARCH.party_site_list; 
   l_contact_list HZ_PARTY_SEARCH.contact_list;  
   l_contact_point_list HZ_PARTY_SEARCH.contact_point_list;  
   contact_point_ids HZ_PARTY_SEARCH.IDList;  
  p_party_site_list HZ_PARTY_SEARCH.IDList;   
  p_contact_ids HZ_PARTY_SEARCH.IDList;  
  l_match_idx NUMBER;

BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contact_points(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_contact_point_id '||p_contact_point_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_id '||p_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  contact_point_ids(1) := p_contact_point_id;   
  get_search_criteria (   
      null, 
      HZ_PARTY_SEARCH.G_MISS_ID_LIST, 
      HZ_PARTY_SEARCH.G_MISS_ID_LIST, 
      contact_point_ids,   
      l_party_search_rec, 
      l_party_site_list, 
      l_contact_list, 
      l_contact_point_list ); 
    
    IF NOT check_prim_cond (l_party_search_rec,
                            l_party_site_list,
                            l_contact_list,
                            l_contact_point_list) THEN
      x_search_ctx_id:=NULL;
      x_num_matches:=0;
      RETURN;
    END IF;
   get_matching_contact_points ( 
      p_rule_id, 
      p_party_id, 
     l_contact_point_list, 
      p_restrict_sql, 
      p_match_type, 
      p_contact_point_id, 
      x_search_ctx_id, 
      x_num_matches );  
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contact_points(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.find_duplicate_contact_points');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_duplicate_contact_points;

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: find_parties_dynamic-----------------------
-------------------------------------------------------------------------------------
PROCEDURE find_parties_dynamic (
        p_rule_id               IN      NUMBER,
        p_attrib_id1            IN      NUMBER,
        p_attrib_id2            IN      NUMBER,
        p_attrib_id3            IN      NUMBER,
        p_attrib_id4            IN      NUMBER,
        p_attrib_id5            IN      NUMBER,
        p_attrib_id6            IN      NUMBER,
        p_attrib_id7            IN      NUMBER,
        p_attrib_id8            IN      NUMBER,
        p_attrib_id9            IN      NUMBER,
        p_attrib_id10           IN      NUMBER,
        p_attrib_id11           IN      NUMBER,
        p_attrib_id12           IN      NUMBER,
        p_attrib_id13           IN      NUMBER,
        p_attrib_id14           IN      NUMBER,
        p_attrib_id15           IN      NUMBER,
        p_attrib_id16           IN      NUMBER,
        p_attrib_id17           IN      NUMBER,
        p_attrib_id18           IN      NUMBER,
        p_attrib_id19           IN      NUMBER,
        p_attrib_id20           IN      NUMBER,
        p_attrib_val1           IN      VARCHAR2,
        p_attrib_val2           IN      VARCHAR2,
        p_attrib_val3           IN      VARCHAR2,
        p_attrib_val4           IN      VARCHAR2,
        p_attrib_val5           IN      VARCHAR2,
        p_attrib_val6           IN      VARCHAR2,
        p_attrib_val7           IN      VARCHAR2,
        p_attrib_val8           IN      VARCHAR2,
        p_attrib_val9           IN      VARCHAR2,
        p_attrib_val10          IN      VARCHAR2,
        p_attrib_val11          IN      VARCHAR2,
        p_attrib_val12          IN      VARCHAR2,
        p_attrib_val13          IN      VARCHAR2,
        p_attrib_val14          IN      VARCHAR2,
        p_attrib_val15          IN      VARCHAR2,
        p_attrib_val16          IN      VARCHAR2,
        p_attrib_val17          IN      VARCHAR2,
        p_attrib_val18          IN      VARCHAR2,
        p_attrib_val19          IN      VARCHAR2,
        p_attrib_val20          IN      VARCHAR2,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_search_merged         IN      VARCHAR2,
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS
  BEGIN
    call_api_dynamic(p_rule_id,p_attrib_id1, p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
                     p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
                     p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
                     p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
                     p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
                     p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
                     p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
                     p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
                     p_restrict_sql,'FIND_PARTIES',p_match_type,null,p_search_merged,x_search_ctx_id,x_num_matches);
 END;

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: call_api_dynamic---------------------------
-------------------------------------------------------------------------------------
PROCEDURE call_api_dynamic (
        p_rule_id               IN      NUMBER,
        p_attrib_id1            IN      NUMBER,
        p_attrib_id2            IN      NUMBER,
        p_attrib_id3            IN      NUMBER,
        p_attrib_id4            IN      NUMBER,
        p_attrib_id5            IN      NUMBER,
        p_attrib_id6            IN      NUMBER,
        p_attrib_id7            IN      NUMBER,
        p_attrib_id8            IN      NUMBER,
        p_attrib_id9            IN      NUMBER,
        p_attrib_id10           IN      NUMBER,
        p_attrib_id11           IN      NUMBER,
        p_attrib_id12           IN      NUMBER,
        p_attrib_id13           IN      NUMBER,
        p_attrib_id14           IN      NUMBER,
        p_attrib_id15           IN      NUMBER,
        p_attrib_id16           IN      NUMBER,
        p_attrib_id17           IN      NUMBER,
        p_attrib_id18           IN      NUMBER,
        p_attrib_id19           IN      NUMBER,
        p_attrib_id20           IN      NUMBER,
        p_attrib_val1           IN      VARCHAR2,
        p_attrib_val2           IN      VARCHAR2,
        p_attrib_val3           IN      VARCHAR2,
        p_attrib_val4           IN      VARCHAR2,
        p_attrib_val5           IN      VARCHAR2,
        p_attrib_val6           IN      VARCHAR2,
        p_attrib_val7           IN      VARCHAR2,
        p_attrib_val8           IN      VARCHAR2,
        p_attrib_val9           IN      VARCHAR2,
        p_attrib_val10          IN      VARCHAR2,
        p_attrib_val11          IN      VARCHAR2,
        p_attrib_val12          IN      VARCHAR2,
        p_attrib_val13          IN      VARCHAR2,
        p_attrib_val14          IN      VARCHAR2,
        p_attrib_val15          IN      VARCHAR2,
        p_attrib_val16          IN      VARCHAR2,
        p_attrib_val17          IN      VARCHAR2,
        p_attrib_val18          IN      VARCHAR2,
        p_attrib_val19          IN      VARCHAR2,
        p_attrib_val20          IN      VARCHAR2,
        p_restrict_sql          IN      VARCHAR2,
        p_api_name              IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_party_id              IN      NUMBER,
        p_search_merged         IN      VARCHAR2,
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS
  TYPE AttrList IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
  l_match_idx NUMBER;
  AttrVals AttrList;
  l_party_rec HZ_PARTY_SEARCH.party_search_rec_type;
  l_party_site_list HZ_PARTY_SEARCH.party_site_list;
  l_contact_list HZ_PARTY_SEARCH.contact_list;
  l_cpt_list HZ_PARTY_SEARCH.contact_point_list;
  l_dup_set_id NUMBER;
  l_idx NUMBER;
  l_cpt_type VARCHAR2(255);
  FIRST BOOLEAN := TRUE; 

BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call_api_dynamic(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;

  IF p_attrib_id1 IS NOT NULL THEN
    AttrVals(p_attrib_id1):=p_attrib_val1;
  END IF;
  IF p_attrib_id2 IS NOT NULL THEN
    AttrVals(p_attrib_id2):=p_attrib_val2;
  END IF;
  IF p_attrib_id3 IS NOT NULL THEN
    AttrVals(p_attrib_id3):=p_attrib_val3;
  END IF;
  IF p_attrib_id4 IS NOT NULL THEN
    AttrVals(p_attrib_id4):=p_attrib_val4;
  END IF;
  IF p_attrib_id5 IS NOT NULL THEN
    AttrVals(p_attrib_id5):=p_attrib_val5;
  END IF;
  IF p_attrib_id6 IS NOT NULL THEN
    AttrVals(p_attrib_id6):=p_attrib_val6;
  END IF;
  IF p_attrib_id7 IS NOT NULL THEN
    AttrVals(p_attrib_id7):=p_attrib_val7;
  END IF;
  IF p_attrib_id8 IS NOT NULL THEN
    AttrVals(p_attrib_id8):=p_attrib_val8;
  END IF;
  IF p_attrib_id9 IS NOT NULL THEN
    AttrVals(p_attrib_id9):=p_attrib_val9;
  END IF;
  IF p_attrib_id10 IS NOT NULL THEN
    AttrVals(p_attrib_id10):=p_attrib_val10;
  END IF;
  IF p_attrib_id11 IS NOT NULL THEN
    AttrVals(p_attrib_id11):=p_attrib_val11;
  END IF;
  IF p_attrib_id12 IS NOT NULL THEN
    AttrVals(p_attrib_id12):=p_attrib_val12;
  END IF;
  IF p_attrib_id13 IS NOT NULL THEN
    AttrVals(p_attrib_id13):=p_attrib_val13;
  END IF;
  IF p_attrib_id14 IS NOT NULL THEN
    AttrVals(p_attrib_id14):=p_attrib_val14;
  END IF;
  IF p_attrib_id15 IS NOT NULL THEN
    AttrVals(p_attrib_id15):=p_attrib_val15;
  END IF;
  IF p_attrib_id16 IS NOT NULL THEN
    AttrVals(p_attrib_id16):=p_attrib_val16;
  END IF;
  IF p_attrib_id17 IS NOT NULL THEN
    AttrVals(p_attrib_id17):=p_attrib_val17;
  END IF;
  IF p_attrib_id18 IS NOT NULL THEN
    AttrVals(p_attrib_id18):=p_attrib_val18;
  END IF;
  IF p_attrib_id19 IS NOT NULL THEN
    AttrVals(p_attrib_id19):=p_attrib_val19;
  END IF;
  IF p_attrib_id20 IS NOT NULL THEN
    AttrVals(p_attrib_id20):=p_attrib_val20;
  END IF;
  IF AttrVals.EXISTS(8) THEN
    l_party_rec.PARTY_NAME:= AttrVals(8);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.PARTY_NAME '||AttrVals(8),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(14) THEN
    l_party_rec.PARTY_TYPE:= AttrVals(14);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.PARTY_TYPE '||AttrVals(14),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(19) THEN
    l_party_rec.JGZZ_FISCAL_CODE:= AttrVals(19);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.JGZZ_FISCAL_CODE '||AttrVals(19),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(27) THEN
    l_party_site_list(1).ADDRESS:= AttrVals(27);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).ADDRESS '||AttrVals(27),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(29) THEN
    l_party_site_list(1).CITY:= AttrVals(29);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).CITY '||AttrVals(29),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(30) THEN
    l_party_site_list(1).POSTAL_CODE:= AttrVals(30);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).POSTAL_CODE '||AttrVals(30),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(32) THEN
    l_party_site_list(1).STATE:= AttrVals(32);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).STATE '||AttrVals(32),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(36) THEN
    l_party_site_list(1).COUNTRY:= AttrVals(36);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).COUNTRY '||AttrVals(36),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(48) THEN
    l_cpt_type := 'EMAIL';
    FIRST := FALSE;
    FOR I in 1..l_cpt_list.COUNT LOOP
      IF l_cpt_list(I).CONTACT_POINT_TYPE=l_cpt_type THEN
        l_cpt_list(I).EMAIL_ADDRESS:= AttrVals(48);
        FIRST := TRUE;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||I||').CONTACT_POINT_TYPE '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||I||').EMAIL_ADDRESS '||AttrVals(48),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    IF not FIRST THEN
      l_idx := l_cpt_list.COUNT+1;
      l_cpt_list(l_idx).CONTACT_POINT_TYPE:=l_cpt_type;
      l_cpt_list(l_idx).EMAIL_ADDRESS:= AttrVals(48);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||l_idx||').CONTACT_POINT_TYPE '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||l_idx||').EMAIL_ADDRESS '||AttrVals(48),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END IF;
  END IF;

  IF AttrVals.EXISTS(52) THEN
    l_cpt_type := 'PHONE';
    FIRST := FALSE;
    FOR I in 1..l_cpt_list.COUNT LOOP
      IF l_cpt_list(I).CONTACT_POINT_TYPE=l_cpt_type THEN
        l_cpt_list(I).RAW_PHONE_NUMBER:= AttrVals(52);
        FIRST := TRUE;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||I||').CONTACT_POINT_TYPE '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||I||').RAW_PHONE_NUMBER '||AttrVals(52),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    IF not FIRST THEN
      l_idx := l_cpt_list.COUNT+1;
      l_cpt_list(l_idx).CONTACT_POINT_TYPE:=l_cpt_type;
      l_cpt_list(l_idx).RAW_PHONE_NUMBER:= AttrVals(52);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||l_idx||').CONTACT_POINT_TYPE '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||l_idx||').RAW_PHONE_NUMBER '||AttrVals(52),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END IF;
  END IF;


  IF upper(p_api_name) = 'FIND_PARTIES' THEN
    find_parties(p_rule_id,l_party_rec,l_party_site_list, l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'FIND_PARTY_DETAILS' THEN
    find_party_details(p_rule_id,l_party_rec,l_party_site_list, l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,p_search_merged,
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'FIND_PERSONS' THEN
    find_persons(p_rule_id,l_party_rec,l_party_site_list, l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,'N',
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'GET_MATCHING_PARTY_SITES' THEN
    get_matching_party_sites(p_rule_id,p_party_id,l_party_site_list, l_cpt_list,
               p_restrict_sql,p_match_type,NULL,
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'GET_MATCHING_CONTACTS' THEN
    get_matching_contacts(p_rule_id,p_party_id,l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,NULL,
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'GET_MATCHING_CONTACT_POINTS' THEN
    get_matching_contact_points(p_rule_id,p_party_id, l_cpt_list,
               p_restrict_sql,p_match_type,NULL,
               x_search_ctx_id,x_num_matches);
  END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call_api_dynamic(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.call_api_dynamic');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END call_api_dynamic;

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: get_matching_party_sites ------------------
-------------------------------------------------------------------------------------

PROCEDURE get_matching_party_sites (
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_party_site_list       IN      HZ_PARTY_SEARCH.PARTY_SITE_LIST,
        p_contact_point_list    IN      HZ_PARTY_SEARCH.CONTACT_POINT_LIST,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_dup_party_site_id     IN      NUMBER, 
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS
  
  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_match_idx NUMBER;
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_tmp VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_sqlstr VARCHAR2(32000); -- Dynamic SQL String
  -- For Score calculation
  l_max_score NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX5 VARCHAR2(2000);
  l_TX158 VARCHAR2(2000);
  l_TX9 VARCHAR2(2000);
  l_TX22 VARCHAR2(2000);
  l_TX14 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);
  l_TX26 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;

  l_score NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  l_ps_contact_id NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;

  defpt NUMBER :=0;
  defps NUMBER :=0;
  defct NUMBER :=0;
  defcpt NUMBER :=0;
  l_index NUMBER;

  
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_party_sites(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_party_site_id '||p_dup_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' OR ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
    SAVEPOINT get_matching_party_sites ;
    l_entered_max_score:= init_search( HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC, p_party_site_list, HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST, p_contact_point_list,l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    g_score_until_thresh := false;
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;

    l_party_site_contains_str := check_party_sites_bulk (p_party_site_list);
    l_contact_pt_contains_str := check_cpts_bulk (p_contact_point_list);
    init_score_context(HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,p_party_site_list,HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_match_str '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_contains_str '||l_party_site_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_contains_str '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_search_ctx_id '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF l_party_site_contains_str IS NULL THEN
      defps := 1;
    END IF;
    IF l_contact_pt_contains_str IS NULL THEN
      defcpt := 1;
    END IF;

    IF l_party_site_contains_str IS NOT NULL THEN
      open_party_site_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_party_site_contains_str,NULL,l_party_site_cur);
      LOOP
        FETCH l_party_site_cur INTO 
            l_party_site_id, l_ps_party_id, l_ps_contact_id , l_TX26, l_TX9, l_TX14, l_TX22;
        EXIT WHEN l_party_site_cur%NOTFOUND;
      IF (p_dup_party_site_id IS NULL OR (
                p_dup_party_site_id IS NOT NULL AND l_ps_contact_id IS NULL AND 
                l_party_site_id <> p_dup_party_site_id)) THEN  
            l_index := map_id(l_party_site_id);
            l_score := GET_PARTY_SITES_SCORE(l_match_idx,l_TX26,l_TX9,l_TX14,l_TX22);
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,l_score,defct,defcpt, l_ps_party_id, l_party_site_id, null,null);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Party Site Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_id '||l_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF; 
      END LOOP;
      CLOSE l_party_site_cur;
    END IF;

    IF l_contact_pt_contains_str IS NOT NULL THEN
      open_contact_pt_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_pt_contains_str,NULL,l_contact_pt_cur);
      LOOP
        FETCH l_contact_pt_cur INTO 
            l_contact_pt_id, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id , l_TX5, l_TX158, l_TX10;
        EXIT WHEN l_contact_pt_cur%NOTFOUND;
      IF (l_cpt_ps_id IS NOT NULL AND (p_dup_party_site_id IS NULL OR (
         p_dup_party_site_id IS NOT NULL AND l_cpt_contact_id IS NULL AND p_dup_party_site_id <> l_cpt_ps_id))) THEN   
        l_index := map_id(l_cpt_ps_id);
        IF l_match_str = ' OR ' THEN
          l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
          IF NOT H_SCORES.EXISTS(l_index) THEN
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score,l_cpt_party_id,l_cpt_ps_id,l_cpt_contact_id,l_contact_pt_id);
          ELSE
            IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
               H_SCORES(l_index).TOTAL_SCORE := 
                      H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
               H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
            END IF;
          END IF;
        ELSE
          IF H_SCORES.EXISTS(l_index) THEN
            l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
            IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
               H_SCORES(l_index).TOTAL_SCORE := 
                      H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
               H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
            END IF;
          ELSIF defps=1 THEN
            l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score,l_cpt_party_id,l_cpt_ps_id,l_cpt_contact_id,l_contact_pt_id);
          END IF;
        END IF;
      END IF; 
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact_point Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_id '||l_cpt_ps_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END LOOP;
      CLOSE l_contact_pt_cur;
    END IF;
    ROLLBACK to get_matching_party_sites ;
    x_num_matches := 0;
    l_party_site_id := H_SCORES.FIRST;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Evaluating Matches. Threshold : 33 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    WHILE l_party_site_id IS NOT NULL LOOP
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match Party Site ID '||H_SCORES(l_party_site_id).PARTY_SITE_ID,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'Score '||round((H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)*100),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF l_match_str = ' OR ' THEN
        IF (H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)>=(175/525) THEN
            INSERT INTO HZ_MATCHED_PARTY_SITES_GT (SEARCH_CONTEXT_ID, PARTY_ID, PARTY_SITE_ID, SCORE) 
            VALUES (l_search_ctx_id,H_SCORES(l_party_site_id).PARTY_ID, H_SCORES(l_party_site_id).PARTY_SITE_ID, (H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)*100);
          x_num_matches := x_num_matches+1;
        END IF;
      ELSE
           IF H_SCORES(l_party_site_id).PARTY_SITE_SCORE>0 AND
           H_SCORES(l_party_site_id).CONTACT_POINT_SCORE>0 AND
           (H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)>=(175/525) THEN
          INSERT INTO HZ_MATCHED_PARTY_SITES_GT (SEARCH_CONTEXT_ID, PARTY_ID, PARTY_SITE_ID, SCORE) 
          VALUES (l_search_ctx_id,H_SCORES(l_party_site_id).PARTY_ID, H_SCORES(l_party_site_id).PARTY_SITE_ID, round((H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)*100));
          x_num_matches := x_num_matches+1;
        END IF;
      END IF;
      l_party_site_id:=H_SCORES.NEXT(l_party_site_id);
    END LOOP;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_party_sites(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    ROLLBACK to get_matching_party_sites ;
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    ROLLBACK to get_matching_party_sites ;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    ROLLBACK to get_matching_party_sites ;
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.get_matching_party_sites');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_matching_party_sites;

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: get_matching_contacts --------------------
-------------------------------------------------------------------------------------

PROCEDURE get_matching_contacts (
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_contact_list          IN      HZ_PARTY_SEARCH.CONTACT_LIST,
        p_contact_point_list    IN      HZ_PARTY_SEARCH.CONTACT_POINT_LIST,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_dup_contact_id        IN      NUMBER, 
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS
  
  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_tmp VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_match_idx NUMBER;
  l_sqlstr VARCHAR2(32000); -- Dynamic SQL String
  -- For Score calculation
  l_max_score NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX5 VARCHAR2(2000);
  l_TX158 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;

  l_score NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;

  defpt NUMBER :=0;
  defps NUMBER :=0;
  defct NUMBER :=0;
  defcpt NUMBER :=0;
  l_index NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;

  
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contacts(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_contact_id '||p_dup_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' OR ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
    SAVEPOINT get_matching_contacts ;
    l_entered_max_score:= init_search( HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC, HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST, p_contact_list, p_contact_point_list,l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    g_score_until_thresh := false;
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;

    l_contact_contains_str := check_contacts_bulk (p_contact_list);
    l_contact_pt_contains_str := check_cpts_bulk (p_contact_point_list);
    init_score_context(HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST,p_contact_list,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_match_str '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_contains_str '||l_contact_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_contains_str '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_search_ctx_id '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF l_contact_contains_str IS NULL THEN
      defct := 1;
    END IF;
    IF l_contact_pt_contains_str IS NULL THEN
      defcpt := 1;
    END IF;

    IF l_contact_contains_str IS NOT NULL THEN
      open_contact_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_contains_str,NULL,l_contact_cur);
      LOOP
        FETCH l_contact_cur INTO 
            l_org_contact_id, l_ct_party_id ;
        EXIT WHEN l_contact_cur%NOTFOUND;
      IF (p_dup_contact_id IS NULL OR l_org_contact_id <> p_dup_contact_id) THEN 
        l_index := map_id(l_org_contact_id);
          l_score := GET_CONTACTS_SCORE(l_match_idx);
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,l_score,defcpt, l_ct_party_id, null, l_org_contact_id, null);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_org_contact_id '||l_org_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF; 
      END LOOP;
      CLOSE l_contact_cur;
    END IF;

    IF l_contact_pt_contains_str IS NOT NULL THEN
      open_contact_pt_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_pt_contains_str,NULL,l_contact_pt_cur);
      LOOP
        FETCH l_contact_pt_cur INTO 
            l_contact_pt_id, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id , l_TX5, l_TX158, l_TX10;
        EXIT WHEN l_contact_pt_cur%NOTFOUND;
      IF (l_cpt_contact_id IS NOT NULL AND (p_dup_contact_id IS NULL OR l_cpt_contact_id <>  p_dup_contact_id)) THEN 
        l_index := map_id(l_cpt_contact_id);
        IF l_match_str = ' OR ' THEN
          l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
          IF NOT H_SCORES.EXISTS(l_index) THEN
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score,l_cpt_party_id,l_cpt_ps_id,l_cpt_contact_id,l_contact_pt_id);
          ELSE
            IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
               H_SCORES(l_index).TOTAL_SCORE := 
                      H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
               H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
            END IF;
          END IF;
        ELSE
          IF H_SCORES.EXISTS(l_index) THEN
            l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
            IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
               H_SCORES(l_index).TOTAL_SCORE := 
                      H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
               H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
            END IF;
          ELSIF defps=1 THEN
            l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score,l_cpt_party_id,l_cpt_ps_id,l_cpt_contact_id,l_contact_pt_id);
          END IF;
        END IF;
        END IF; 
      END LOOP;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact_point Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_org_contact_id '||l_cpt_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      CLOSE l_contact_pt_cur;
    END IF;
    ROLLBACK to get_matching_contacts ;
    x_num_matches := 0;
    l_org_contact_id := H_SCORES.FIRST;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Evaluating Matches. Threshold : 33 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    WHILE l_org_contact_id IS NOT NULL LOOP
      IF l_match_str = ' OR ' THEN
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match Contact ID '||H_SCORES(l_org_contact_id).ORG_CONTACT_ID,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'Score '||round((H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)*100),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF (H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)>=(175/525) THEN
            INSERT INTO HZ_MATCHED_CONTACTS_GT (SEARCH_CONTEXT_ID, PARTY_ID, ORG_CONTACT_ID, SCORE) 
            VALUES (l_search_ctx_id,H_SCORES(l_org_contact_id).PARTY_ID, H_SCORES(l_org_contact_id).ORG_CONTACT_ID, (H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)*100);
          x_num_matches := x_num_matches+1;
        END IF;
      ELSE
           IF H_SCORES(l_org_contact_id).CONTACT_SCORE>0 AND
           H_SCORES(l_org_contact_id).CONTACT_POINT_SCORE>0 AND
           (H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)>=(175/525) THEN
          INSERT INTO HZ_MATCHED_CONTACTS_GT (SEARCH_CONTEXT_ID, PARTY_ID, ORG_CONTACT_ID, SCORE) 
          VALUES (l_search_ctx_id,H_SCORES(l_org_contact_id).PARTY_ID, H_SCORES(l_org_contact_id).ORG_CONTACT_ID, round((H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)*100));
          x_num_matches := x_num_matches+1;
        END IF;
      END IF;
      l_org_contact_id:=H_SCORES.NEXT(l_org_contact_id);
    END LOOP;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contacts(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    ROLLBACK to get_matching_contacts ;
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    ROLLBACK to get_matching_contacts ;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    ROLLBACK to get_matching_contacts ;
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.get_matching_contacts');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_matching_contacts;

-------------------------------------------------------------------------------------
--------------------  BULK MATCH RULE ::: get_matching_contact_points ---------------
-------------------------------------------------------------------------------------

PROCEDURE get_matching_contact_points (
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_contact_point_list    IN      HZ_PARTY_SEARCH.CONTACT_POINT_LIST,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_dup_contact_point_id  IN      NUMBER, 
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS


  -- Strings to hold the generated Intermedia query strings
  l_contact_pt_contains_str VARCHAR2(32000);
  l_tmp VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_match_idx NUMBER;
  -- For Score calculation
  l_entered_max_score NUMBER;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX5 VARCHAR2(2000);
  l_TX158 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);

  l_score NUMBER;
  l_idx NUMBER;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  H_PARTY_ID HZ_PARTY_SEARCH.IDList;
  H_CONTACT_POINT_ID HZ_PARTY_SEARCH.IDList;
  H_SCORE  HZ_PARTY_SEARCH.IDList;

  cnt NUMBER :=0;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;

  
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contact_points(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_contact_point_id '||p_dup_contact_point_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' OR ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
SAVEPOINT get_matching_contact_points ;
    l_entered_max_score:= init_search(HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC, 
       HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST, HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,
       p_contact_point_list,l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    g_score_until_thresh := false;
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;

    l_contact_pt_contains_str := check_cpts_bulk (p_contact_point_list);
    init_score_context(HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST,HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_match_str '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_contains_str '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_search_ctx_id '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    IF l_contact_pt_contains_str IS NOT NULL THEN
      open_contact_pt_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_pt_contains_str,NULL,l_contact_pt_cur);
      cnt := 1;
      LOOP
        FETCH l_contact_pt_cur INTO 
            l_contact_pt_id, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id , l_TX5, l_TX158, l_TX10;
        EXIT WHEN l_contact_pt_cur%NOTFOUND;
        IF (p_dup_contact_point_id IS NULL OR (
               p_dup_contact_point_id IS NOT NULL AND 
               l_cpt_ps_id IS NULL AND l_cpt_contact_id IS NULL AND 
               p_dup_contact_point_id <>  l_contact_pt_id)) THEN   
            H_CONTACT_POINT_ID(cnt) := l_contact_pt_id;
            H_PARTY_ID(cnt) := l_cpt_party_id;
            H_SCORE(cnt) := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
            cnt := cnt+1;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact Point Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_id '||l_contact_pt_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        END IF; 
      END LOOP;
      CLOSE l_contact_pt_cur;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Evaluating Matches. Threshold : 33 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
ROLLBACK to get_matching_contact_points ;
      x_num_matches := 0; 
      FOR I in 1..H_CONTACT_POINT_ID.COUNT LOOP
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match Contact Point ID '||H_CONTACT_POINT_ID(I),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'Score '||round((H_SCORE(I)/l_entered_max_score)*100),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF (H_SCORE(I)/l_entered_max_score)>=(175/525) THEN
        INSERT INTO HZ_MATCHED_CPTS_GT(SEARCH_CONTEXT_ID,CONTACT_POINT_ID,PARTY_ID,SCORE) VALUES (
            l_search_ctx_id,H_CONTACT_POINT_ID(I),H_PARTY_ID(I),round(H_SCORE(I)/l_entered_max_score)*100);
            x_num_matches := x_num_matches + 1; 
        END IF;
      END LOOP; 
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contact_points(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    ROLLBACK to get_matching_contact_points ;
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    ROLLBACK to get_matching_contact_points ;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    ROLLBACK to get_matching_contact_points ;
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.get_matching_contact_points');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_matching_contact_points;

   /**********************************************************
   This procedure finds the score details for a specific party that 
   matched 

   **********************************************************/

PROCEDURE get_score_details (
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
        p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
        p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
        p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
        x_search_ctx_id         IN OUT  NUMBER
) IS

  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_tmp VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  -- For Score calculation
  l_max_score NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX59 VARCHAR2(2000);
  l_max_TX59 VARCHAR2(2000);
  l_TX5 VARCHAR2(2000);
  l_max_TX5 VARCHAR2(2000);
  l_TX158 VARCHAR2(2000);
  l_max_TX158 VARCHAR2(2000);
  l_TX9 VARCHAR2(2000);
  l_max_TX9 VARCHAR2(2000);
  l_TX22 VARCHAR2(2000);
  l_max_TX22 VARCHAR2(2000);
  l_TX45 VARCHAR2(2000);
  l_max_TX45 VARCHAR2(2000);
  l_TX2 VARCHAR2(2000);
  l_max_TX2 VARCHAR2(2000);
  l_TX14 VARCHAR2(2000);
  l_max_TX14 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);
  l_max_TX10 VARCHAR2(2000);
  l_TX26 VARCHAR2(2000);
  l_max_TX26 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;

  l_score NUMBER;
  l_match_idx NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  l_ps_contact_id NUMBER;
  l_max_id NUMBER;
  l_max_idx NUMBER;

  l_index NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;

  
  BEGIN

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_score_details(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- ************************************
    -- STEP 1. Initialization and error checks

    l_entered_max_score:= init_search(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list,' OR ', l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    g_score_until_thresh := false;
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;
    l_party_site_contains_str := check_party_sites_bulk (p_party_site_list);
    l_contact_contains_str := check_contacts_bulk (p_contact_list);
    l_contact_pt_contains_str := check_cpts_bulk (p_contact_point_list);
    init_score_context(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list);

    -- Setup Search Context ID
    IF x_search_ctx_id IS NULL THEN
      SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
      x_search_ctx_id := l_search_ctx_id;
    ELSE
      l_search_ctx_id := x_search_ctx_id;
    END IF;

    open_party_cursor(p_party_id, null, null,null,null,null,l_party_cur);
    LOOP 
        FETCH l_party_cur INTO
           l_party_id , l_TX59, l_TX2, l_TX45;
        EXIT WHEN l_party_cur%NOTFOUND;
          INSERT_PARTY_SCORE(p_party_id, p_party_id, l_search_ctx_id, p_party_search_rec, g_party_stage_rec, l_TX59,l_TX2,l_TX45,1);
    END LOOP;
    CLOSE l_party_cur;

    IF l_party_site_contains_str IS NOT NULL THEN
      l_max_score := 0;
      l_max_id := 0;
      l_max_idx := 0;
      open_party_site_cursor(null, p_party_id, null, l_party_site_contains_str,NULL,l_party_site_cur);
      LOOP
        FETCH l_party_site_cur INTO 
            l_party_site_id, l_ps_party_id,l_ps_contact_id , l_TX26, l_TX9, l_TX14, l_TX22;
        EXIT WHEN l_party_site_cur%NOTFOUND;
        l_score := GET_PARTY_SITES_SCORE(l_match_idx,l_TX26,l_TX9,l_TX14,l_TX22);
        IF l_score > l_max_score THEN
          l_max_score := l_score;
          l_max_id := l_party_site_id;
          l_max_idx := l_match_idx;
          l_max_TX9 := l_TX9;
          l_max_TX22 := l_TX22;
          l_max_TX14 := l_TX14;
          l_max_TX26 := l_TX26;
        END IF;
      END LOOP;
      CLOSE l_party_site_cur;
      IF l_max_score>0 THEN
        INSERT_PARTY_SITES_SCORE(p_party_id,l_max_id,l_search_ctx_id, p_party_site_list(l_max_idx), g_party_site_stage_list(l_max_idx) ,l_max_TX26,l_max_TX9,l_max_TX14,l_max_TX22,l_max_idx);
      END IF;
    END IF;

    IF l_contact_contains_str IS NOT NULL THEN
      l_max_score := 0;
      l_max_id := 0;
      l_max_idx := 0;
      open_contact_cursor(null, p_party_id, null, l_contact_contains_str,NULL,l_contact_cur);
      LOOP
        FETCH l_contact_cur INTO 
            l_org_contact_id, l_ct_party_id ;
        EXIT WHEN l_contact_cur%NOTFOUND;
        l_score := GET_CONTACTS_SCORE(l_match_idx);
        IF l_score > l_max_score THEN
          l_max_score := l_score;
          l_max_id := l_org_contact_id;
          l_max_idx := l_match_idx;
        END IF;
      END LOOP;
      CLOSE l_contact_cur;
      IF l_max_score>0 THEN
        INSERT_CONTACTS_SCORE(p_party_id,l_max_id,l_search_ctx_id, p_contact_list(l_max_idx), g_contact_stage_list(l_max_idx) ,l_max_idx);
      END IF;
    END IF;

    IF l_contact_pt_contains_str IS NOT NULL THEN
      l_max_score := 0;
      l_max_id := 0;
      l_max_idx := 0;
      open_contact_pt_cursor(null, p_party_id, null, l_contact_pt_contains_str,NULL,l_contact_pt_cur);
      LOOP
        FETCH l_contact_pt_cur INTO 
            l_contact_pt_id, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id , l_TX5, l_TX158, l_TX10;
        EXIT WHEN l_contact_pt_cur%NOTFOUND;
        l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX5,l_TX158,l_TX10);
        IF l_score > l_max_score THEN
          l_max_score := l_score;
          l_max_id := l_contact_pt_id;
          l_max_idx := l_match_idx;
          l_max_TX5 := l_TX5;
          l_max_TX158 := l_TX158;
          l_max_TX10 := l_TX10;
        END IF;
      END LOOP;
      IF l_max_score>0 THEN
        INSERT_CONTACT_POINTS_SCORE(p_party_id,l_max_id,l_search_ctx_id, p_contact_point_list(l_max_idx), g_contact_pt_stage_list(l_max_idx) ,l_max_TX5,l_max_TX158,l_max_TX10,l_max_idx);
      END IF;
      CLOSE l_contact_pt_cur;
    END IF;
 --------------- DELETE FROM ALL SRCH TABLES ---------------------
    DELETE FROM HZ_SRCH_PARTIES WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_PSITES WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_CONTACTS WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_CPTS WHERE batch_id = -1 ;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_score_details(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
 --------------- DELETE FROM ALL SRCH TABLES ---------------------
    DELETE FROM HZ_SRCH_PARTIES WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_PSITES WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_CONTACTS WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_CPTS WHERE batch_id = -1 ;
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
 --------------- DELETE FROM ALL SRCH TABLES ---------------------
    DELETE FROM HZ_SRCH_PARTIES WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_PSITES WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_CONTACTS WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_CPTS WHERE batch_id = -1 ;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
 --------------- DELETE FROM ALL SRCH TABLES ---------------------
    DELETE FROM HZ_SRCH_PARTIES WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_PSITES WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_CONTACTS WHERE batch_id = -1 ;
    DELETE FROM HZ_SRCH_CPTS WHERE batch_id = -1 ;
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_51.get_score_details');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_score_details;


/************************************************
  This procedure retrieves the match rule attributes into 
  the search record structures
************************************************/

PROCEDURE get_party_for_search (
        p_party_id              IN      NUMBER,
        x_party_search_rec      OUT NOCOPY HZ_PARTY_SEARCH.party_search_rec_type,
        x_party_site_list       OUT NOCOPY HZ_PARTY_SEARCH.party_site_list,
        x_contact_list          OUT NOCOPY HZ_PARTY_SEARCH.contact_list,
        x_contact_point_list    OUT NOCOPY HZ_PARTY_SEARCH.contact_point_list
) IS
  l_party_id NUMBER;
  l_party_site_ids HZ_PARTY_SEARCH.IDList;
  l_contact_ids HZ_PARTY_SEARCH.IDList;
  l_contact_pt_ids HZ_PARTY_SEARCH.IDList;
  ps NUMBER :=1;
  cpt NUMBER :=1;
  ct NUMBER :=1;
  l_use_contact_info varchar2(1);
BEGIN

    l_use_contact_info := 'Y';
  IF nvl(FND_PROFILE.VALUE('HZ_DQM_REL_PARTY_MATCH'),'N')='Y' THEN
    l_use_contact_info := 'N';
  END IF;
  l_party_id := p_party_id;
  FOR PARTY_SITES IN (
 SELECT party_site_id FROM (
     SELECT party_site_id,identifying_address_flag
      FROM HZ_PARTY_SITES
      WHERE party_id = p_party_id
      AND (status is null OR status = 'A') 
      AND identifying_address_flag='Y'
      UNION

     SELECT party_site_id,NVL(identifying_address_flag,'N') identifying_address_flag
      FROM HZ_PARTY_SITES
      WHERE party_id = p_party_id
      AND (status is null OR status = 'A') 
      AND (identifying_address_flag IS NULL OR identifying_address_flag = 'N')
      UNION

     SELECT party_site_id,NVL(identifying_address_flag,'N') identifying_address_flag
      FROM HZ_PARTY_SITES
      WHERE (status is null OR status = 'A') 
      AND party_id in (
        SELECT party_id
        FROM HZ_ORG_CONTACTS, HZ_RELATIONSHIPS
        WHERE HZ_RELATIONSHIPS.object_id = p_party_id
        AND HZ_RELATIONSHIPS.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
        AND HZ_RELATIONSHIPS.OBJECT_TABLE_NAME = 'HZ_PARTIES'
        AND HZ_ORG_CONTACTS.party_relationship_id = HZ_RELATIONSHIPS.relationship_id
        and l_use_contact_info = 'Y'
     ) 
) order by identifying_address_flag desc
    ) LOOP
      l_party_site_ids(ps) := PARTY_SITES.party_site_id;
      ps:=ps+1;
  END LOOP;
    FOR CONTACT_POINTS IN (
      SELECT CONTACT_POINT_ID
      FROM HZ_CONTACT_POINTS 
      WHERE PRIMARY_FLAG = 'Y'
      AND owner_table_name = 'HZ_PARTIES'
      AND owner_table_id = p_party_id

      UNION

      SELECT CONTACT_POINT_ID
      FROM HZ_CONTACT_POINTS,HZ_ORG_CONTACTS, HZ_RELATIONSHIPS 
      WHERE PRIMARY_FLAG = 'Y'
      AND owner_table_name = 'HZ_PARTIES'
      AND OWNER_TABLE_ID = HZ_RELATIONSHIPS.party_id
      AND HZ_RELATIONSHIPS.object_id = p_party_id
      AND HZ_RELATIONSHIPS.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND HZ_RELATIONSHIPS.OBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND HZ_ORG_CONTACTS.party_relationship_id = HZ_RELATIONSHIPS.relationship_id
        and l_use_contact_info = 'Y'
      UNION

      SELECT CONTACT_POINT_ID
      FROM HZ_CONTACT_POINTS,HZ_PARTY_SITES  
      WHERE PRIMARY_FLAG = 'Y'
      AND owner_table_name = 'HZ_PARTY_SITES'
      AND owner_table_id = party_site_id 
      AND PARTY_ID = p_party_id 
      AND IDENTIFYING_ADDRESS_FLAG = 'Y') LOOP
      l_contact_pt_ids(cpt) := CONTACT_POINTS.CONTACT_POINT_ID;
      cpt := cpt+1;
    END LOOP;
    get_search_criteria(l_party_id,l_party_site_ids,l_contact_ids,l_contact_pt_ids,
          x_party_search_rec,x_party_site_list,x_contact_list,x_contact_point_list);
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_party_for_search');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_party_for_search;

PROCEDURE get_search_criteria (
        p_party_id              IN      NUMBER,
        p_party_site_ids        IN      HZ_PARTY_SEARCH.IDList,
        p_contact_ids           IN      HZ_PARTY_SEARCH.IDList,
        p_contact_pt_ids        IN      HZ_PARTY_SEARCH.IDList,
        x_party_search_rec      OUT NOCOPY HZ_PARTY_SEARCH.party_search_rec_type,
        x_party_site_list       OUT NOCOPY HZ_PARTY_SEARCH.party_site_list,
        x_contact_list          OUT NOCOPY HZ_PARTY_SEARCH.contact_list,
        x_contact_point_list    OUT NOCOPY HZ_PARTY_SEARCH.contact_point_list
) IS
BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - get_search_criteria',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF p_party_id IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Before Calling Procedure - get_party_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      get_party_rec(p_party_id, x_party_search_rec);
    END IF;
    IF p_party_site_ids IS NOT NULL AND p_party_site_ids.COUNT>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Before Calling Procedure - get_party_site_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      get_party_site_rec(p_party_site_ids, x_party_site_list);
    END IF;
    IF p_contact_pt_ids IS NOT NULL AND p_contact_pt_ids.COUNT>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Before Calling Procedure - get_contact_point_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      get_contact_point_rec(p_contact_pt_ids, x_contact_point_list);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_search_criteria');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_search_criteria;


/************************************************
  This procedure retrieves the match rule party attributes into 
  the party search record structure 
************************************************/

PROCEDURE get_party_rec (
        p_party_id              IN      NUMBER,
        x_party_search_rec      OUT NOCOPY HZ_PARTY_SEARCH.party_search_rec_type
) IS
    l_party_type VARCHAR2(255);
BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - get_party_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    SELECT PARTY_TYPE INTO l_party_type
    FROM HZ_PARTIES
    WHERE PARTY_ID = p_party_id;

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_type is -  '||l_party_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF l_party_type = 'ORGANIZATION' THEN
      SELECT 
        HZ_ORGANIZATION_PROFILES.JGZZ_FISCAL_CODE
       ,HZ_PARTIES.PARTY_NAME
       ,HZ_PARTIES.PARTY_TYPE
      INTO 
        x_party_search_rec.JGZZ_FISCAL_CODE
       ,x_party_search_rec.PARTY_NAME
       ,x_party_search_rec.PARTY_TYPE
      FROM HZ_PARTIES, HZ_ORGANIZATION_PROFILES
      WHERE HZ_PARTIES.party_id = HZ_ORGANIZATION_PROFILES.party_id
      AND HZ_ORGANIZATION_PROFILES.effective_end_date is NULL
      AND HZ_PARTIES.party_id = p_party_id;
    ELSIF l_party_type = 'PERSON' THEN
      SELECT 
        HZ_PERSON_PROFILES.JGZZ_FISCAL_CODE
       ,HZ_PARTIES.PARTY_NAME
       ,HZ_PARTIES.PARTY_TYPE
      INTO 
        x_party_search_rec.JGZZ_FISCAL_CODE
       ,x_party_search_rec.PARTY_NAME
       ,x_party_search_rec.PARTY_TYPE
      FROM HZ_PARTIES, HZ_PERSON_PROFILES
      WHERE HZ_PARTIES.party_id = HZ_PERSON_PROFILES.party_id
      AND HZ_PERSON_PROFILES.effective_end_date is NULL
      AND HZ_PARTIES.party_id = p_party_id;
    END IF;
    x_party_search_rec.PARTY_TYPE := l_party_type;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - generate_custom_code',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_PARTY_QUERY_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_party_rec');
    FND_MESSAGE.SET_TOKEN('PARTY_ID',p_party_id);
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
END get_party_rec;

/************************************************
  This procedure retrieves the match rule party site attributes into 
  the party site search record structure 
************************************************/

PROCEDURE get_party_site_rec (
        p_party_site_ids       IN      HZ_PARTY_SEARCH.IDList,
        x_party_site_list      OUT NOCOPY HZ_PARTY_SEARCH.party_site_list
) IS
  CURSOR c_party_sites(cp_party_site_id NUMBER) IS
    SELECT party_site_id
      ,HZ_LOCATIONS.CITY
      ,HZ_LOCATIONS.COUNTRY
      ,HZ_LOCATIONS.POSTAL_CODE
      ,HZ_LOCATIONS.STATE
    FROM HZ_PARTY_SITES, HZ_LOCATIONS
    WHERE HZ_PARTY_SITES.party_site_id = cp_party_site_id
    AND   HZ_PARTY_SITES.location_id = HZ_LOCATIONS.location_id;

  I NUMBER;
  J NUMBER:=1;
  l_party_site_id NUMBER;

BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - get_party_site_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I IN 1..p_party_site_ids.COUNT LOOP
      l_party_site_id := p_party_site_ids(I);
      OPEN c_party_sites(p_party_site_ids(I));
      LOOP
        FETCH c_party_sites INTO
             l_party_site_id
           ,x_party_site_list(J).CITY
           ,x_party_site_list(J).COUNTRY
           ,x_party_site_list(J).POSTAL_CODE
           ,x_party_site_list(J).STATE
        ;
        EXIT WHEN c_party_sites%NOTFOUND;

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - generate_custom_code',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        x_party_site_list(J).ADDRESS:=
       HZ_PARTY_ACQUIRE.get_address(l_party_site_id , 'PARTY_SITES','ADDRESS');
        J:=J+1;

      END LOOP;
      CLOSE c_party_sites;
    END LOOP;

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_PARTY_QUERY_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_party_site_rec');
    FND_MESSAGE.SET_TOKEN('PARTY_ID',l_party_site_id);
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
END get_party_site_rec;

/************************************************
  This procedure retrieves the match rule contact attributes into 
  the contact search record structure 
************************************************/

PROCEDURE get_contact_rec (
        p_contact_ids       IN      HZ_PARTY_SEARCH.IDList,
        x_contact_list      OUT NOCOPY HZ_PARTY_SEARCH.contact_list
) IS
  CURSOR c_contacts(cp_org_contact_id NUMBER) IS
    SELECT org_contact_id
    FROM HZ_ORG_CONTACTS, HZ_RELATIONSHIPS, HZ_PERSON_PROFILES
    WHERE HZ_ORG_CONTACTS.org_contact_id = cp_org_contact_id
    AND HZ_RELATIONSHIPS.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
    AND HZ_RELATIONSHIPS.OBJECT_TABLE_NAME = 'HZ_PARTIES'
    AND HZ_RELATIONSHIPS.DIRECTIONAL_FLAG = 'F'
    AND HZ_ORG_CONTACTS.party_relationship_id = HZ_RELATIONSHIPS.relationship_id
    AND HZ_RELATIONSHIPS.subject_id = HZ_PERSON_PROFILES.party_id
    AND HZ_PERSON_PROFILES.effective_end_date IS NULL;

  I NUMBER;
  l_org_contact_id NUMBER;
  J NUMBER:=1;
  BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - get_contact_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I IN 1..p_contact_ids.COUNT LOOP
      l_org_contact_id := p_contact_ids(I);
      OPEN c_contacts(p_contact_ids(I));
      LOOP
        FETCH c_contacts INTO
             l_org_contact_id
        ;
        EXIT WHEN c_contacts%NOTFOUND;

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - generate_custom_code',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

        J:=J+1;
      END LOOP;
      CLOSE c_contacts;
    END LOOP;

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_PARTY_QUERY_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_contact_rec');
    FND_MESSAGE.SET_TOKEN('PARTY_ID',l_org_contact_id);
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
END get_contact_rec;

/************************************************
  This procedure retrieves the match rule contact point attributes into 
  the contact point search record structure 
************************************************/

PROCEDURE get_contact_point_rec (
        p_contact_point_ids     IN  HZ_PARTY_SEARCH.IDList,
        x_contact_point_list    OUT NOCOPY HZ_PARTY_SEARCH.contact_point_list
) IS

  -- Cursor to fetch primary contact points for party
  CURSOR c_cpts(cp_contact_point_id NUMBER) IS
    SELECT contact_point_id, contact_point_type
      ,HZ_CONTACT_POINTS.EMAIL_ADDRESS
    FROM HZ_CONTACT_POINTS
    WHERE contact_point_id = cp_contact_point_id;

  I NUMBER;
  l_contact_point_id NUMBER;
  J NUMBER:=1;
  BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - get_contact_point_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I in 1..p_contact_point_ids.COUNT LOOP
      l_contact_point_id := p_contact_point_ids(I);
      OPEN c_cpts(p_contact_point_ids(I));
      LOOP
        FETCH c_cpts INTO
             l_contact_point_id, x_contact_point_list(J).contact_point_type
             ,x_contact_point_list(J).EMAIL_ADDRESS
        ;
        EXIT WHEN c_cpts%NOTFOUND;

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - generate_custom_code',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        x_contact_point_list(J).RAW_PHONE_NUMBER:=
       HZ_PARTY_ACQUIRE.get_phone_number(l_contact_point_id , 'CONTACT_POINTS','RAW_PHONE_NUMBER');
        J:=J+1;

      END LOOP;
      CLOSE c_cpts;
    END LOOP;

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_PARTY_QUERY_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_contact_point_rec');
    FND_MESSAGE.SET_TOKEN('PARTY_ID',l_contact_point_id);
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
END get_contact_point_rec;

/************************************************
  This procedure maps a search record from the logical
  record structure to the stage schema structure 
  for the PARTY Entity after applying 
  the defined transformations
************************************************/

PROCEDURE MAP_PARTY_REC( 
    p_search_ctx IN BOOLEAN,
    p_search_rec IN HZ_PARTY_SEARCH.party_search_rec_type, 
    x_entered_max_score OUT NUMBER,
    x_stage_rec IN OUT NOCOPY HZ_PARTY_STAGE.party_stage_rec_type
  ) IS 
  tmp VARCHAR2(4000);
BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - MAP_PARTY_REC',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF p_search_ctx THEN
     x_entered_max_score:=0;
    IF p_search_rec.PARTY_NAME IS NOT NULL THEN 
      x_entered_max_score := x_entered_max_score+80;
    END IF;
    IF p_search_rec.JGZZ_FISCAL_CODE IS NOT NULL THEN 
      x_entered_max_score := x_entered_max_score+200;
    END IF;
    END IF;
  IF p_search_ctx THEN
    IF p_search_rec.JGZZ_FISCAL_CODE IS NOT NULL THEN 
      x_stage_rec.TX45 := 
        HZ_TRANS_PKG.RM_SPLCHAR(
             p_search_rec.JGZZ_FISCAL_CODE
             ,null,'JGZZ_FISCAL_CODE'
             ,'PARTY','SEARCH');
    ELSE
      x_stage_rec.TX45 := '';
    END IF;
  ELSE
    IF p_search_rec.JGZZ_FISCAL_CODE IS NOT NULL THEN 
      tmp :=HZ_TRANS_PKG.RM_SPLCHAR(
             x_stage_rec.TX45
             ,null,'JGZZ_FISCAL_CODE'
             ,'PARTY','SCORE');
      IF tmp IS NOT NULL THEN
        x_stage_rec.TX45 := tmp;
      END IF;
    END IF;
  END IF;
  IF p_search_ctx THEN
    IF p_search_rec.PARTY_NAME IS NOT NULL THEN 
      x_stage_rec.TX59 := 
        HZ_TRANS_PKG.BASIC_WRNAMES(
             p_search_rec.PARTY_NAME
             ,null,'PARTY_NAME'
             ,'PARTY','SEARCH');
    ELSE
      x_stage_rec.TX59 := '';
    END IF;
  ELSE
    IF p_search_rec.PARTY_NAME IS NOT NULL THEN 
      tmp :=HZ_TRANS_PKG.BASIC_WRNAMES(
             x_stage_rec.TX59
             ,null,'PARTY_NAME'
             ,'PARTY','SCORE');
      IF tmp IS NOT NULL THEN
        x_stage_rec.TX59 := tmp;
      END IF;
    END IF;
  END IF;
  IF p_search_ctx THEN
    IF p_search_rec.PARTY_NAME IS NOT NULL THEN 
      x_stage_rec.TX2 := 
        HZ_TRANS_PKG.EXACT_PADDED(
             p_search_rec.PARTY_NAME
             ,null,'PARTY_NAME'
             ,'PARTY');
    ELSE
      x_stage_rec.TX2 := '';
    END IF;
  END IF;
  IF p_search_ctx THEN
    IF p_search_rec.PARTY_TYPE IS NOT NULL THEN 
      x_stage_rec.TX36 := 
        HZ_TRANS_PKG.EXACT(
             p_search_rec.PARTY_TYPE
             ,null,'PARTY_TYPE'
             ,'PARTY');
    ELSE
      x_stage_rec.TX36 := '';
    END IF;
  END IF;
IF p_search_ctx THEN
     insert into HZ_SRCH_PARTIES(batch_id,party_id, party_osr,party_os,TX45,TX59,TX2,TX36) values(-1,-1,-1,-1,x_stage_rec.TX45,x_stage_rec.TX59,x_stage_rec.TX2,x_stage_rec.TX36);
END IF;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'MAP_PARTY_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure maps a search record from the logical
  record structure to the stage schema structure 
  for the PARTY_SITES Entity after applying 
  the defined transformations
************************************************/

PROCEDURE MAP_PARTY_SITE_REC( 
    p_search_ctx IN BOOLEAN,
    p_search_list IN HZ_PARTY_SEARCH.party_site_list, 
    x_entered_max_score OUT NUMBER,
    x_stage_list IN OUT NOCOPY HZ_PARTY_STAGE.party_site_stage_list
  ) IS 
  l_current_max_score NUMBER;
  tmp VARCHAR2(4000);
BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - MAP_PARTY_SITE_REC',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'p_entity - PARTY_SITES',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  IF p_search_ctx THEN
    x_entered_max_score:=0;
    FOR I IN 1..p_search_list.COUNT LOOP
      l_current_max_score:=0;
      IF p_search_list(I).ADDRESS IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+100;
      END IF;
      IF p_search_list(I).CITY IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+5;
      END IF;
      IF p_search_list(I).STATE IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+5;
      END IF;
      IF p_search_list(I).COUNTRY IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+5;
      END IF;
      IF l_current_max_score>x_entered_max_score THEN
        x_entered_max_score:=l_current_max_score;
      END IF;
    END LOOP;
  END IF;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).ADDRESS IS NOT NULL THEN 
        x_stage_list(I).TX26 := 
          HZ_TRANS_PKG.BASIC_WRADDR(
             p_search_list(I).ADDRESS
             ,null,'ADDRESS'
             ,'PARTY_SITES','SEARCH');
      ELSE
        x_stage_list(I).TX26 := '';
      END IF;
    ELSE
      IF p_search_list(I).ADDRESS IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.BASIC_WRADDR(
             x_stage_list(I).TX26
             ,null,'ADDRESS'
             ,'PARTY_SITES','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX26 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).CITY IS NOT NULL THEN 
        x_stage_list(I).TX9 := 
          HZ_TRANS_PKG.EXACT(
             p_search_list(I).CITY
             ,null,'CITY'
             ,'PARTY_SITES');
      ELSE
        x_stage_list(I).TX9 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).COUNTRY IS NOT NULL THEN 
        x_stage_list(I).TX22 := 
          HZ_TRANS_PKG.EXACT(
             p_search_list(I).COUNTRY
             ,null,'COUNTRY'
             ,'PARTY_SITES');
      ELSE
        x_stage_list(I).TX22 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).POSTAL_CODE IS NOT NULL THEN 
        x_stage_list(I).TX11 := 
          HZ_TRANS_PKG.RM_SPLCHAR(
             p_search_list(I).POSTAL_CODE
             ,null,'POSTAL_CODE'
             ,'PARTY_SITES','SEARCH');
      ELSE
        x_stage_list(I).TX11 := '';
      END IF;
    ELSE
      IF p_search_list(I).POSTAL_CODE IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.RM_SPLCHAR(
             x_stage_list(I).TX11
             ,null,'POSTAL_CODE'
             ,'PARTY_SITES','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX11 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).STATE IS NOT NULL THEN 
        x_stage_list(I).TX14 := 
          HZ_TRANS_PKG.WRSTATE_EXACT(
             p_search_list(I).STATE
             ,null,'STATE'
             ,'PARTY_SITES','SEARCH');
      ELSE
        x_stage_list(I).TX14 := '';
      END IF;
    ELSE
      IF p_search_list(I).STATE IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.WRSTATE_EXACT(
             x_stage_list(I).TX14
             ,null,'STATE'
             ,'PARTY_SITES','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX14 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
IF p_search_ctx THEN
  FOR I IN 1..p_search_list.COUNT LOOP
               insert into HZ_SRCH_PSITES(batch_id,party_id, party_osr,party_os, party_site_id,party_site_osr, party_site_os,new_party_flag ,TX26,TX9,TX22,TX11,TX14) values(-1,-1,-1,-1,-1,-1,-1,'Y',x_stage_list(I).TX26,x_stage_list(I).TX9,x_stage_list(I).TX22,x_stage_list(I).TX11,x_stage_list(I).TX14);
  END LOOP;
END IF;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'MAP_PARTY_SITE_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure maps a search record from the logical
  record structure to the stage schema structure 
  for the CONTACTS Entity after applying 
  the defined transformations
************************************************/

PROCEDURE MAP_CONTACT_REC( 
    p_search_ctx IN BOOLEAN,
    p_search_list IN HZ_PARTY_SEARCH.contact_list, 
    x_entered_max_score OUT NUMBER,
    x_stage_list IN OUT NOCOPY HZ_PARTY_STAGE.contact_stage_list
  ) IS 
  l_current_max_score NUMBER;
  tmp VARCHAR2(4000);
BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - MAP_CONTACT_REC',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'p_entity - CONTACTS',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  IF p_search_ctx THEN
    x_entered_max_score:=0;
    FOR I IN 1..p_search_list.COUNT LOOP
      l_current_max_score:=0;
      IF l_current_max_score>x_entered_max_score THEN
        x_entered_max_score:=l_current_max_score;
      END IF;
    END LOOP;
  END IF;
  NULL;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'MAP_CONTACT_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure maps a search record from the logical
  record structure to the stage schema structure 
  for the CONTACT_POINTS Entity after applying 
  the defined transformations
************************************************/

PROCEDURE MAP_CONTACT_POINT_REC( 
    p_search_ctx IN BOOLEAN,
    p_search_list IN HZ_PARTY_SEARCH.contact_point_list, 
    x_entered_max_score OUT NUMBER,
    x_stage_list IN OUT NOCOPY HZ_PARTY_STAGE.contact_pt_stage_list
  ) IS 
  l_current_max_score NUMBER;
  tmp VARCHAR2(4000);
BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - MAP_CONTACT_POINT_REC',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'p_entity - CONTACT_POINTS',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  IF p_search_ctx THEN
    x_entered_max_score:=0;
    FOR I IN 1..p_search_list.COUNT LOOP
      l_current_max_score:=0;
      x_stage_list(I).CONTACT_POINT_TYPE := p_search_list(I).CONTACT_POINT_TYPE;
      IF p_search_list(I).EMAIL_ADDRESS IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+60;
      END IF;
      IF p_search_list(I).RAW_PHONE_NUMBER IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+70;
      END IF;
      IF l_current_max_score>x_entered_max_score THEN
        x_entered_max_score:=l_current_max_score;
      END IF;
    END LOOP;
  END IF;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).EMAIL_ADDRESS IS NOT NULL THEN 
        x_stage_list(I).TX5 := 
          HZ_TRANS_PKG.EXACT_EMAIL(
             p_search_list(I).EMAIL_ADDRESS
             ,null,'EMAIL_ADDRESS'
             ,'CONTACT_POINTS');
      ELSE
        x_stage_list(I).TX5 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).RAW_PHONE_NUMBER IS NOT NULL THEN 
        x_stage_list(I).TX158 := 
          HZ_TRANS_PKG.REVERSE_PHONE_NUMBER(
             p_search_list(I).RAW_PHONE_NUMBER
             ,null,'RAW_PHONE_NUMBER'
             ,'CONTACT_POINTS');
      ELSE
        x_stage_list(I).TX158 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).RAW_PHONE_NUMBER IS NOT NULL THEN 
        x_stage_list(I).TX10 := 
          HZ_TRANS_PKG.RM_SPLCHAR(
             p_search_list(I).RAW_PHONE_NUMBER
             ,null,'RAW_PHONE_NUMBER'
             ,'CONTACT_POINTS','SEARCH');
      ELSE
        x_stage_list(I).TX10 := '';
      END IF;
    ELSE
      IF p_search_list(I).RAW_PHONE_NUMBER IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.RM_SPLCHAR(
             x_stage_list(I).TX10
             ,null,'RAW_PHONE_NUMBER'
             ,'CONTACT_POINTS','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX10 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
IF p_search_ctx THEN
  FOR I IN 1..p_search_list.COUNT LOOP
              insert into HZ_SRCH_CPTS(batch_id,party_id, party_osr,party_os, contact_point_id,contact_pt_osr, contact_pt_os,contact_point_type,new_party_flag ,TX5,TX158,TX10) values(-1,-1,-1,-1,-1,-1,-1,-1,'Y',x_stage_list(I).TX5,x_stage_list(I).TX158,x_stage_list(I).TX10);
  END LOOP;
END IF; 
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'MAP_CONTACT_POINT_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure checks if the input search criteria 
  is valid. It checks if : 
   1. At least one primary condition is passed
   2. Contact Point Type is not null for each condition
************************************************/

FUNCTION check_prim_cond(
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list)
      RETURN BOOLEAN IS
  BEGIN
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).CONTACT_POINT_TYPE IS NULL AND (
p_contact_point_list(I).RAW_PHONE_NUMBER IS NOT NULL 
OR p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
 ) THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_NO_CONTACT_POINT_TYPE');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
    END LOOP;

    IF p_party_search_rec.JGZZ_FISCAL_CODE IS NOT NULL THEN 
      RETURN TRUE;
    END IF;
    IF p_party_search_rec.PARTY_NAME IS NOT NULL THEN 
      RETURN TRUE;
    END IF;
    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).ADDRESS IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).RAW_PHONE_NUMBER IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    RETURN FALSE;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_prim_cond');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_prim_cond;

/************************************************
  This procedure checks if the input search condition 
  has party site criteria. 
************************************************/

PROCEDURE check_party_site_cond(
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
	   x_secondary		   OUT     BOOLEAN,
	   x_primary		   OUT     BOOLEAN
) IS
  BEGIN
    x_primary:= FALSE;
    x_secondary:= FALSE;
    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).ADDRESS IS NOT NULL 
         OR p_party_site_list(I).POSTAL_CODE IS NOT NULL
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
         OR p_contact_point_list(I).RAW_PHONE_NUMBER IS NOT NULL
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;

    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).ADDRESS IS NOT NULL 
         OR p_party_site_list(I).CITY IS NOT NULL
         OR p_party_site_list(I).STATE IS NOT NULL
         OR p_party_site_list(I).COUNTRY IS NOT NULL
      THEN
        x_secondary := TRUE;
      END IF;
      EXIT WHEN x_secondary;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
         OR p_contact_point_list(I).RAW_PHONE_NUMBER IS NOT NULL
      THEN
        x_secondary := TRUE;
      END IF;
      EXIT WHEN x_secondary;
    END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_party_site_cond');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_party_site_cond;

/************************************************
  This procedure checks if the input search condition 
  has contact criteria. 
************************************************/

PROCEDURE check_contact_cond(
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      x_secondary             OUT     BOOLEAN,
      x_primary               OUT     BOOLEAN
) IS
  BEGIN
    x_primary:= FALSE;
    x_secondary:= FALSE;
    FOR I IN 1..p_contact_list.COUNT LOOP
      NULL;
    END LOOP;

    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
         OR p_contact_point_list(I).RAW_PHONE_NUMBER IS NOT NULL
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;

    FOR I IN 1..p_contact_list.COUNT LOOP
      NULL;
    END LOOP;

    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
         OR p_contact_point_list(I).RAW_PHONE_NUMBER IS NOT NULL
      THEN
        x_secondary := TRUE;
      END IF;
      EXIT WHEN x_secondary;
    END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_contact_cond');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_contact_cond;

/************************************************
  This procedure checks if the input search condition 
  has valid contact point criteria. 
************************************************/

PROCEDURE check_contact_point_cond(
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      x_secondary             OUT     BOOLEAN,
      x_primary               OUT     BOOLEAN
) IS
  BEGIN
    x_primary:= FALSE;
    x_secondary:= FALSE;

    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).CONTACT_POINT_TYPE IS NULL THEN 
        FND_MESSAGE.SET_NAME('AR', 'HZ_NO_CONTACT_POINT_TYPE');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
    END LOOP;

    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
         OR p_contact_point_list(I).RAW_PHONE_NUMBER IS NOT NULL 
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL  
         OR p_contact_point_list(I).RAW_PHONE_NUMBER IS NOT NULL 
      THEN
        x_secondary := TRUE;
      END IF;
      EXIT WHEN x_secondary;
    END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_contact_point_cond');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_contact_point_cond;

FUNCTION check_staged RETURN BOOLEAN IS

  CURSOR c_check_staged IS 
    SELECT 1 FROM HZ_TRANS_FUNCTIONS_VL 
    WHERE nvl(STAGED_FLAG,'N') = 'N' 
    AND FUNCTION_ID in (
                6
                ,40
                ,50
                ,72
                ,74
                ,77
                ,85
                ,114
                ,120
                ,128
                ,138
                ,140
    );
  l_tmp NUMBER;
BEGIN
  IF g_staged =  1 THEN
    RETURN TRUE;
  ELSIF g_staged = 0 THEN
    RETURN FALSE;
  END IF;

  OPEN c_check_staged;
  FETCH c_check_staged INTO l_tmp;
  IF c_check_staged%FOUND THEN
    CLOSE c_check_staged;
    g_staged := 0;
    RETURN FALSE;
  ELSE
    CLOSE c_check_staged;
    g_staged := 1;
    RETURN TRUE;
  END IF;
END check_staged;

-- Fix for Bug 4736139
FUNCTION check_staged_var RETURN VARCHAR2 IS
  l_staged       VARCHAR2(1);
  l_staged_bool  BOOLEAN;
BEGIN
  l_staged_bool := check_staged;
  IF l_staged_bool THEN
    l_staged := 'Y';
  ELSE
    l_staged := 'N';
  END IF;
  RETURN l_staged;
END check_staged_var;
-- End fix for Bug 4736139

END;


/
