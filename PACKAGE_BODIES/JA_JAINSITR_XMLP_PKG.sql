--------------------------------------------------------
--  DDL for Package Body JA_JAINSITR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINSITR_XMLP_PKG" AS
/* $Header: JAINSITRB.pls 120.1 2007/12/25 16:28:37 dwkrishn noship $ */
  FUNCTION SERIAL_FFORMULA RETURN NUMBER IS
  BEGIN
    SERIAL_NUMBER := NVL(SERIAL_NUMBER
                        ,0) + 1;
    RETURN 1;
  END SERIAL_FFORMULA;

  FUNCTION EXCISE_TAXFORMULA(L_CUSTOMER_TRX_ID IN NUMBER
                            ,L_SUPP_INV_TYPE IN VARCHAR2) RETURN NUMBER IS
    CURSOR EXCISE(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        SUM(DIFF_AMT) EXCISE
      FROM
        JAI_AR_SUP_TAXES A,
        JAI_AR_SUP_LINES B,
        JAI_AR_SUP_HDRS_ALL C
      WHERE C.CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
        AND C.SUPP_INV_TYPE = B.SUP_INV_TYPE
        AND B.CUSTOMER_TRX_LINE_ID = A.LINK_TO_CUST_TRX_LINE_ID
        AND B.SUP_INV_TYPE = A.SUP_INV_TYPE
        AND C.CUSTOMER_TRX_ID = L_CUSTOMER_TRX_ID
        AND C.SUPP_INV_TYPE = L_SUPP_INV_TYPE
        AND EXISTS (
        SELECT
          1
        FROM
          JAI_CMN_TAXES_ALL D
        WHERE TAX_TYPE LIKE CP_TAX_TYPE
          AND D.TAX_ID = A.NEW_TAX_ID )
      GROUP BY
        C.CUSTOMER_TRX_ID,
        C.SUPP_INV_TYPE;
    V_EXCISE NUMBER;
  BEGIN
    OPEN EXCISE('%Excise%');
    FETCH EXCISE
     INTO V_EXCISE;
    CLOSE EXCISE;
    RETURN NVL(V_EXCISE
              ,0);
  END EXCISE_TAXFORMULA;

  FUNCTION CF_5FORMULA(L_CUSTOMER_TRX_ID IN NUMBER
                      ,L_SUPP_INV_TYPE IN VARCHAR2) RETURN NUMBER IS
    CURSOR SALES(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        SUM(DIFF_AMT) SALES
      FROM
        JAI_AR_SUP_TAXES A,
        JAI_AR_SUP_LINES B,
        JAI_AR_SUP_HDRS_ALL C
      WHERE C.CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
        AND C.SUPP_INV_TYPE = B.SUP_INV_TYPE
        AND B.CUSTOMER_TRX_LINE_ID = A.LINK_TO_CUST_TRX_LINE_ID
        AND B.SUP_INV_TYPE = A.SUP_INV_TYPE
        AND C.CUSTOMER_TRX_ID = L_CUSTOMER_TRX_ID
        AND C.SUPP_INV_TYPE = L_SUPP_INV_TYPE
        AND EXISTS (
        SELECT
          1
        FROM
          JAI_CMN_TAXES_ALL D
        WHERE TAX_TYPE LIKE CP_TAX_TYPE
          AND D.TAX_ID = A.NEW_TAX_ID )
      GROUP BY
        C.CUSTOMER_TRX_ID,
        C.SUPP_INV_TYPE;
    V_SALES NUMBER;
  BEGIN
    OPEN SALES('%Sales Tax%');
    FETCH SALES
     INTO V_SALES;
    CLOSE SALES;
    RETURN NVL(V_SALES
              ,0);
  END CF_5FORMULA;

  FUNCTION CSTFORMULA(L_CUSTOMER_TRX_ID IN NUMBER
                     ,L_SUPP_INV_TYPE IN VARCHAR2) RETURN NUMBER IS
    CURSOR CST(CP_TAX_TYPE IN JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE) IS
      SELECT
        SUM(DIFF_AMT) EXCISE
      FROM
        JAI_AR_SUP_TAXES A,
        JAI_AR_SUP_LINES B,
        JAI_AR_SUP_HDRS_ALL C
      WHERE C.CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
        AND C.SUPP_INV_TYPE = B.SUP_INV_TYPE
        AND B.CUSTOMER_TRX_LINE_ID = A.LINK_TO_CUST_TRX_LINE_ID
        AND B.SUP_INV_TYPE = A.SUP_INV_TYPE
        AND C.CUSTOMER_TRX_ID = L_CUSTOMER_TRX_ID
        AND C.SUPP_INV_TYPE = L_SUPP_INV_TYPE
        AND EXISTS (
        SELECT
          1
        FROM
          JAI_CMN_TAXES_ALL D
        WHERE TAX_TYPE LIKE CP_TAX_TYPE
          AND D.TAX_ID = A.NEW_TAX_ID )
      GROUP BY
        C.CUSTOMER_TRX_ID,
        C.SUPP_INV_TYPE;
    V_CST NUMBER;
  BEGIN
    OPEN CST('%CST%');
    FETCH CST
     INTO V_CST;
    CLOSE CST;
    RETURN NVL(V_CST
              ,0);
  END CSTFORMULA;

  FUNCTION OTHERS_FORMULA(L_CUSTOMER_TRX_ID IN NUMBER
                         ,L_SUPP_INV_TYPE IN VARCHAR2) RETURN NUMBER IS
    LV_EXCISE JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE;
    LV_CST JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE;
    LV_SALES_TAX JAI_CMN_TAXES_ALL.TAX_TYPE%TYPE;
    CURSOR OTHERS IS
      SELECT
        SUM(DIFF_AMT) OTHER
      FROM
        JAI_AR_SUP_TAXES A,
        JAI_AR_SUP_LINES B,
        JAI_AR_SUP_HDRS_ALL C
      WHERE C.CUSTOMER_TRX_ID = B.CUSTOMER_TRX_ID
        AND C.SUPP_INV_TYPE = B.SUP_INV_TYPE
        AND B.CUSTOMER_TRX_LINE_ID = A.LINK_TO_CUST_TRX_LINE_ID
        AND B.SUP_INV_TYPE = A.SUP_INV_TYPE
        AND C.CUSTOMER_TRX_ID = L_CUSTOMER_TRX_ID
        AND C.SUPP_INV_TYPE = L_SUPP_INV_TYPE
        AND EXISTS (
        SELECT
          1
        FROM
          JAI_CMN_TAXES_ALL D
        WHERE TAX_TYPE not LIKE LV_EXCISE
          AND TAX_TYPE NOT LIKE LV_CST
          AND TAX_TYPE not like LV_SALES_TAX
          AND D.TAX_ID = A.NEW_TAX_ID )
      GROUP BY
        C.CUSTOMER_TRX_ID,
        C.SUPP_INV_TYPE;
    V_OTHERS NUMBER;
  BEGIN
    LV_EXCISE := '%Excise%';
    LV_CST := '%CST%';
    LV_SALES_TAX := '%Sales Tax%';
    OPEN OTHERS;
    FETCH OTHERS
     INTO V_OTHERS;
    CLOSE OTHERS;
    RETURN NVL(V_OTHERS
              ,0);
  END OTHERS_FORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.2 Last modified date is 25/07/2005')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION SERIAL_NUMBER_P RETURN NUMBER IS
  BEGIN
    RETURN SERIAL_NUMBER;
  END SERIAL_NUMBER_P;

END JA_JAINSITR_XMLP_PKG;



/
