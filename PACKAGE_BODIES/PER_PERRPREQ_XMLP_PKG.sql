--------------------------------------------------------
--  DDL for Package Body PER_PERRPREQ_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PER_PERRPREQ_XMLP_PKG" AS
/* $Header: PERRPREQB.pls 120.1 2007/12/06 11:32:23 amakrish noship $ */

function BeforeReport return boolean is
begin

declare
   v_business_group varchar2(240);
begin

--hr_standard.event('BEFORE REPORT');

insert into fnd_sessions (session_id, effective_date)
       select userenv('sessionid'), trunc(sysdate)
       from   dual
       where not exists
             (select 1
              from   fnd_sessions fs
              where fs.session_id = userenv('sessionid'));
select bg.name
INTO v_business_group
FROM per_business_groups bg
WHERE bg.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID;
C_BUSINESS_GROUP := v_business_group;
end;  return (TRUE);
end;

FUNCTION GET_ORGANIZATION RETURN VARCHAR2 IS
L_ORG_NAME 	varchar(240);
BEGIN
IF P_ORGANIZATION_ID IS NOT NULL THEN
   SELECT NAME
   INTO L_ORG_NAME
   FROM HR_ORGANIZATION_UNITS
   WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
END IF;
RETURN L_ORG_NAME;
END GET_ORGANIZATION;

FUNCTION GET_JOB RETURN VARCHAR2 IS
L_JOB		PER_JOBS.NAME%TYPE;
BEGIN
IF P_JOB_ID IS NOT NULL THEN
   SELECT NAME
   INTO L_JOB
   FROM PER_JOBS_VL
   WHERE JOB_ID = P_JOB_ID;
END IF;
RETURN L_JOB;
END GET_JOB;

FUNCTION GET_POSITION RETURN VARCHAR2 IS
L_POSITION	VARCHAR(240);
BEGIN
IF P_POSITION_ID IS NOT NULL THEN
   SELECT NAME
   INTO L_POSITION
   FROM PER_POSITIONS
   WHERE POSITION_ID = P_POSITION_ID;
END IF;
RETURN L_POSITION;
END GET_POSITION;

FUNCTION GET_GRADE RETURN VARCHAR2 IS
L_GRADE	VARCHAR(240);
BEGIN
IF P_GRADE_ID IS NOT NULL THEN
   SELECT NAME
   INTO L_GRADE
   FROM PER_GRADES_VL
   WHERE GRADE_ID = P_GRADE_ID;
END IF;
RETURN L_GRADE;
END GET_GRADE;

FUNCTION GET_LOCATION RETURN VARCHAR2 IS
L_LOCATION	VARCHAR(30);
BEGIN
IF P_LOCATION_ID IS NOT NULL THEN
   SELECT LOCATION_CODE
   INTO L_LOCATION
   FROM HR_LOCATIONS
   WHERE LOCATION_ID = P_LOCATION_ID;
END IF;
RETURN L_LOCATION;
END GET_LOCATION;

FUNCTION GET_RECRUITMENT RETURN VARCHAR2 IS
L_RECRUITMENT	VARCHAR(30);
BEGIN
IF P_RECRUITMENT_ACTIVITY_ID IS NOT NULL THEN
   SELECT NAME
   INTO L_RECRUITMENT
   FROM PER_RECRUITMENT_ACTIVITIES
   WHERE RECRUITMENT_ACTIVITY_ID = P_RECRUITMENT_ACTIVITY_ID;
END IF;
RETURN L_RECRUITMENT;
END GET_RECRUITMENT;

FUNCTION GET_REQUISITION RETURN VARCHAR2 IS
L_REQUISITION	VARCHAR(30);
BEGIN
IF P_REQUISITION_ID IS NOT NULL THEN
   SELECT NAME
   INTO L_REQUISITION
   FROM PER_REQUISITIONS
   WHERE REQUISITION_ID = P_REQUISITION_ID;
END IF;
RETURN L_REQUISITION;
END GET_REQUISITION;

FUNCTION GET_APPS_STATUS RETURN VARCHAR2 IS
L_APPS_STATUS	VARCHAR(80);
BEGIN
IF P_APPLICANT_STATUS_ID IS NOT NULL THEN
   SELECT USER_STATUS
   INTO L_APPS_STATUS
   FROM PER_ASSIGNMENT_STATUS_TYPES
   WHERE ASSIGNMENT_STATUS_TYPE_ID = P_APPLICANT_STATUS_ID;
END IF;
RETURN L_APPS_STATUS;
END GET_APPS_STATUS;

FUNCTION GET_VAC_STATUS RETURN VARCHAR2 IS
L_VAC_STATUS	VARCHAR(30);
BEGIN
IF P_VACANCY_STATUS IS NOT NULL THEN
   SELECT MEANING
   INTO L_VAC_STATUS
   FROM hr_lookups
   WHERE LOOKUP_TYPE = 'VACANCY_STATUS'
   AND LOOKUP_CODE = P_VACANCY_STATUS;
END IF;
RETURN L_VAC_STATUS;
END GET_VAC_STATUS;

function AfterReport return boolean is
begin

--hr_standard.event('AFTER REPORT');

  return (TRUE);
end;

--Functions to refer Oracle report placeholders--

 Function C_BUSINESS_GROUP_p return varchar2 is
	Begin
	 return C_BUSINESS_GROUP;
	 END;
END PER_PERRPREQ_XMLP_PKG ;

/
