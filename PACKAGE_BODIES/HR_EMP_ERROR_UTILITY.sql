--------------------------------------------------------
--  DDL for Package Body HR_EMP_ERROR_UTILITY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HR_EMP_ERROR_UTILITY" as
/* $Header: hreruweb.pkb 120.2 2005/09/23 14:51:17 svittal noship $ */
-- ---------------------------------------------------------------------------
-- private package global declarations
-- ---------------------------------------------------------------------------
  g_package                 constant varchar2(31) := 'hr_emp_error_utility.';
--
-- ---------------------------------------------------------------------------
-- private package procedure and function declarations
-- ---------------------------------------------------------------------------
--
-- ---------------------------------------------------------------------------
-- |---------------------< set_activity_status >-----------------------------|
-- ---------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   Procedure to set the status of the specified activity.
--
-- Pre-Requisities:
--   None
--
-- In Parameters:
--   p_item_type  -> The internal name for the item type.
--   p_item_key   -> A string that represents a primary key generated by
--                   the application for the item type. The string uniquely
--                   identifies the item within an item type.
--   p_actid      -> Unique identifier for the activity.
--   p_status     -> String to define the status of the activity.
--
-- Post Success:
--
-- Post Failure:
--   None.
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Private
--
-- {End Of Comments}
-- ---------------------------------------------------------------------------
procedure set_activity_status
  (p_item_type in varchar2
  ,p_item_key  in varchar2
  ,p_actid     in number
  ,p_status    in varchar2) is
--
  l_textbuf   varchar(2000);
  l_numberbuf number;
  l_datebuf   date;
  l_context   varchar2(80);
--
begin
  l_context := p_item_type||':'||p_item_key||':'||to_char(p_actid);
  wf_engine.cb
    (command      => p_status
    ,context      => l_context
    ,attr_name    => null
    ,attr_type    => null
    ,text_value   => l_textbuf
    ,number_value => l_numberbuf
    ,date_value   => l_datebuf);
end set_activity_status;
-- ---------------------------------------------------------------------------
-- |------------------< set_transact_step_messages >------------------------|
-- ---------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   Item attributes can not be deleted. If none exist, then creates one.
--   Otherwise at least one attribute is defined for the transaction step
--   so need to determine the first attribute which is defined to be null
--
-- Pre-Requisities:
--   None
--
-- In Parameters:
--   p_item_type  -> The internal name for the item type.
--   p_item_key   -> A string that represents a primary key generated by
--                   the application for the item type. The string uniquely
--                   identifies the item within an item type.
--   p_transaction_step_id     -> transaction identifier for transaction
--   p_actid      -> Unique identifier for the activity.
--   p_error_text -> String defining the contents of the error/warning messages.
--   p_type      -> A string which accepts 'ERROR_TEXT' or 'WARNING_TEXT'
--                  which specifies errors or warnings respectively.
--
-- Post Success:
--   Creates or updates error/warning text messages.
--
-- Post Failure:
--   None
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Private
--
-- {End Of Comments}
-- ---------------------------------------------------------------------------
PROCEDURE set_transact_step_messages
  (p_item_type           IN wf_items.item_type%TYPE
  ,p_item_key            IN wf_items.item_key%TYPE
  ,p_transaction_step_id IN NUMBER
  ,p_error_text          IN VARCHAR2
  ,p_type                IN varchar2) IS
  -- --------------------------------------------------------------------------
  -- local cursor definitions
  -- --------------------------------------------------------------------------
  -- csr_min_error_instance        -> selects the minimum value of the error
  --                                  /warning instance for the error
  --                                  text item attributes for a given
  --                                  transaction step id which is set to NULL
  --
  CURSOR csr_wf_count IS
     select count(*)
     from   wf_item_attribute_values iav
     where  iav.item_type = p_item_type
     and    iav.item_key  = p_item_key
     and    iav.name like p_type||':%';
  CURSOR csr_wf_min_error_instance IS
    select min(to_number(substr(iav.name
                               ,instr(iav.name,':',1,2) + 1)))
    from   wf_item_attribute_values iav
    where  iav.item_type = p_item_type
    and    iav.item_key  = p_item_key
    and    iav.name like p_type||':%'
    and    to_number(substr(iav.name
                           ,instr(iav.name,':') + 1
                           ,instr(iav.name,':',1,2)
                            - instr(iav.name,':') - 1))
           = p_transaction_step_id
    and    iav.text_value IS NULL;
  -- ---------------------------------------------------------------------------
  -- Local variable declerations
  -- ---------------------------------------------------------------------------
  l_proc_name       varchar2(71) := g_package||'set_transact_step_messages';
  l_error_instance  number;
  l_count           number;
  l_aname           wf_item_attribute_values.name%TYPE :=
                    p_type||':'||to_char(p_transaction_step_id)||':';
BEGIN
  -- -------------------------------------------------------------------------
  -- Test to see if any item attributes exist
  -- -------------------------------------------------------------------------
  OPEN csr_wf_count;
  FETCH csr_wf_count INTO l_count;
  CLOSE csr_wf_count;
  -- -------------------------------------------------------------------------
  -- If no item attributes exist then create a new one
  -- -------------------------------------------------------------------------
  IF l_count = 0 THEN
    -- Set l_transact_step_error_instance to 0
    l_error_instance := 0;
    --
    l_aname := l_aname||to_char(l_error_instance);
    -- Add the new item attribute
    wf_engine.AddItemAttr
      (itemtype   => p_item_type
      ,itemkey    => p_item_key
      ,aname      => l_aname);
  ELSE
    -- -------------------------------------------------------------------------
    -- At least one attribute is defined for the transaction step so
    -- need to determine the first attribute which is defined to be null
    -- If none exists we need to create a new one at count
    -- -------------------------------------------------------------------------
    OPEN csr_wf_min_error_instance;
    FETCH csr_wf_min_error_instance INTO l_error_instance;
    CLOSE csr_wf_min_error_instance;

    IF l_error_instance IS NULL THEN
      -- Create attribute with an instance of l_count
      l_aname := l_aname||to_char(l_count);
      -- Add the new item attribute
      wf_engine.AddItemAttr
        (itemtype   => p_item_type
        ,itemkey    => p_item_key
        ,aname      => l_aname);
    ELSE
      l_aname := l_aname||to_char(l_error_instance);
    END IF;

  END IF;
  -- -------------------------------------------------------------------------
  -- Set the error text item attribute to p_error_text
  -- -------------------------------------------------------------------------
  wf_engine.SetItemAttrText
    (itemtype       => p_item_type
    ,itemkey        => p_item_key
    ,aname          => l_aname
    ,avalue         => p_error_text);
END set_transact_step_messages;
-- ---------------------------------------------------------------------------
-- |-----------------------< exists_messages >-----------------------------|
-- ---------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   Tests to see whether any errors or warnings exist.
--
-- Pre-Requisities:
--   None
--
-- In Parameters:
--   p_item_type -> The internal name for the item type.
--   p_item_key  -> A string that represents a primary key generated by
--                  the application for the item type. The string uniquely
--                  identifies the item within an item type.
--   p_actid     -> Unique identifier for the activity.
--   p_type      -> A string which accepts 'ERROR_TEXT' or 'WARNING_TEXT'
--                  which specifies errors or warnings respectively.
--
-- Post Success:
--   Returns a boolean of true if a message does exist and false if
--   does not.
--
-- Post Failure:
--   None.
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Private.
--
-- {End Of Comments}
-- ---------------------------------------------------------------------------
FUNCTION exists_messages
  (p_item_type      IN wf_items.item_type%TYPE
  ,p_item_key       IN wf_items.item_key%TYPE
  ,p_actid          IN wf_process_activities.instance_id%TYPE
  ,p_type           IN varchar2) RETURN BOOLEAN IS
  -- --------------------------------------------------------------------------
  -- local cursor definitions
  -- --------------------------------------------------------------------------
  -- csr_wf_text        -> selects the text for all transactions of an activity
  --
  CURSOR csr_wf_text is
   -- fix for bug # 1577987
    /*
      Modified the cursor to use the PK of the table wf_item_attribute_values and
      avoid a full table scan so as to enhance performance.
    */
  select iav.text_value
    from   hr_api_transaction_steps hats
          ,wf_item_attribute_values iav
    where iav.item_type = p_item_type
    and   iav.item_key = p_item_key
    and   iav.name like p_type||':%'
    and   hats.activity_id = p_actid
    and   hats.transaction_step_id =
            to_number(substr(iav.name
                     ,instr(iav.name,':') + 1
                     ,instr(iav.name,':',1,2) - instr(iav.name,':') - 1));


  /*  select iav.text_value
    from   hr_api_transaction_steps hats
          ,wf_item_attribute_values iav
    where hats.activity_id = p_actid
    and   hats.item_type = p_item_type
    and   hats.item_key = p_item_key
    and   iav.name like p_type||':%'
    and   hats.transaction_step_id =
            to_number(substr(iav.name
                     ,instr(iav.name,':') + 1
                     ,instr(iav.name,':',1,2) - instr(iav.name,':') - 1));
  */
  -- ---------------------------------------------------------------------------
  -- Local variable declarations
  -- ---------------------------------------------------------------------------
  l_proc_name               varchar2(61) := g_package||'exists_text';
  l_exist_message  BOOLEAN := FALSE;
BEGIN
  -- Loop through all attributes. If any are null or none exist then return FALSE
  -- otherwise return TRUE
  FOR lcsr IN csr_wf_text LOOP
    -- If the text_value is not NULL then set l_exist_text to TRUE
    -- and leave the loop
    IF lcsr.text_value IS NOT NULL THEN
      l_exist_message := TRUE;
      exit;
    END IF;
  END LOOP;
  RETURN l_exist_message;
END exists_messages;
--
-- ---------------------------------------------------------------------------
-- |-----------------------< exists_messages >-----------------------------|
-- ---------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   Tests to see whether any errors or warnings exist.
--
-- Pre-Requisities:
--   None
--
-- In Parameters:
--   p_item_type -> The internal name for the item type.
--   p_item_key  -> A string that represents a primary key generated by
--                  the application for the item type. The string uniquely
--                  identifies the item within an item type.
--   p_actid     -> Unique identifier for the activity.
--   p_type      -> A string which accepts 'ERROR_TEXT' or 'WARNING_TEXT'
--                  which specifies errors or warnings respectively.
--   p_transaction_step_id -> transaction step id with in the activity
--
-- Post Success:
--   Returns a boolean of true if a message does exist and false if
--   does not.
--
-- Post Failure:
--   None.
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Private.
--
-- {End Of Comments}
-- ---------------------------------------------------------------------------
FUNCTION exists_messages
  (p_item_type      IN wf_items.item_type%TYPE
  ,p_item_key       IN wf_items.item_key%TYPE
  ,p_actid          IN wf_process_activities.instance_id%TYPE
  ,p_transaction_step_id IN hr_api_transaction_steps.transaction_step_id%TYPE
  ,p_type           IN varchar2) RETURN BOOLEAN IS
  -- --------------------------------------------------------------------------
  -- local cursor definitions
  -- --------------------------------------------------------------------------
  -- csr_wf_text        -> selects the text for all transactions of an activity
  --
  CURSOR csr_wf_text is
  -- fix for bug # 1577987
   select iav.text_value
    from   hr_api_transaction_steps hats
          ,wf_item_attribute_values iav
    where iav.item_type = p_item_type
    and   iav.item_key = p_item_key
    and   iav.name like p_type||':%'
    and   hats.activity_id = p_actid
    and   hats.transaction_step_id = p_transaction_step_id
    and   hats.transaction_step_id =
            to_number(substr(iav.name
                     ,instr(iav.name,':') + 1
                     ,instr(iav.name,':',1,2) - instr(iav.name,':') - 1));


    /*select iav.text_value
    from   hr_api_transaction_steps hats
          ,wf_item_attribute_values iav
    where hats.activity_id = p_actid
    and   hats.item_type = p_item_type
    and   hats.item_key = p_item_key
    and   iav.name like p_type||':%'
    and   hats.transaction_step_id = p_transaction_step_id
    and   hats.transaction_step_id =
            to_number(substr(iav.name
                     ,instr(iav.name,':') + 1
                     ,instr(iav.name,':',1,2) - instr(iav.name,':') - 1));
*/
  -- ---------------------------------------------------------------------------
  -- Local variable declarations
  -- ---------------------------------------------------------------------------
  l_proc_name               varchar2(61) := g_package||'exists_text';
  l_exist_message  BOOLEAN := FALSE;
BEGIN
  -- Loop through all attributes. If any are null or none exist then return FALSE
  -- otherwise return TRUE
  FOR lcsr IN csr_wf_text LOOP
    -- If the text_value is not NULL then set l_exist_text to TRUE
    -- and leave the loop
    IF lcsr.text_value IS NOT NULL THEN
      l_exist_message := TRUE;
      exit;
    END IF;
  END LOOP;
  RETURN l_exist_message;
END exists_messages;
--
-- ---------------------------------------------------------------------------
-- public package procedure and function declarations
-- ---------------------------------------------------------------------------
--
-- ---------------------------------------------------------------------------
-- |-----------------------< raise_system_error >----------------------------|
-- ---------------------------------------------------------------------------
procedure raise_system_error
  (p_item_type        in varchar2
  ,p_item_key         in varchar2
  ,p_actid            in number
  ,p_set_error_status in boolean default true) is
--
begin
  if p_set_error_status then
    -- set the activity to an ERROR status
    set_activity_status
      (p_item_type => p_item_type
      ,p_item_key  => p_item_key
      ,p_actid     => p_actid
      ,p_status    => 'ERROR');
  end if;
end raise_system_error;
-- ---------------------------------------------------------------------------
-- |---------------------< abort_process_in_error >--------------------------|
-- ---------------------------------------------------------------------------
procedure abort_process_in_error
  (itemtype in     varchar2
  ,itemkey  in     varchar2
  ,actid    in     number
  ,funmode  in     varchar2
  ,result      out nocopy varchar2) is
  --
  l_error_item_type varchar2(8);
  l_error_item_key  varchar2(240);
  l_result          varchar2(1);
  --
  begin
    if funmode = 'RUN' then
      -- get the error item type and key
      l_error_item_type := wf_engine.getitemattrtext
                             (itemtype => itemtype
                             ,itemkey  => itemkey
                             ,aname    => 'ERROR_ITEM_TYPE');
      l_error_item_key  := wf_engine.getitemattrtext
                             (itemtype => itemtype
                             ,itemkey  => itemkey
                             ,aname    => 'ERROR_ITEM_KEY');
      -- abort the process which is in error
      wf_engine.abortprocess
        (itemtype         => l_error_item_type
        ,itemkey          => l_error_item_key
        ,result           => wf_engine.eng_exception);
      --
      result := 'SUCCESS';
    elsif funmode = 'CANCEL' then
      null;
    end if;
exception
  when others then
    result := 'COMPLETE:ERROR';
end abort_process_in_error;
-- ---------------------------------------------------------------------------
-- |------------------------< reset workflow >-------------------------------|
-- ---------------------------------------------------------------------------
procedure reset_workflow
  (itemtype in     varchar2
  ,itemkey  in     varchar2
  ,actid    in     number
  ,funmode  in     varchar2
  ,result      out nocopy varchar2) is
  -- ---------------------------------------------------------------------------
  -- Local variable declarations
  -- ---------------------------------------------------------------------------
  l_error_item_type varchar2(8) :=
    wf_engine.getitemattrtext
      (itemtype => itemtype
      ,itemkey  => itemkey
      ,aname    => 'ERROR_ITEM_TYPE') ;
  l_error_item_key  varchar2(240) :=
    wf_engine.getitemattrtext
      (itemtype => itemtype
      ,itemkey  => itemkey
      ,aname    => 'ERROR_ITEM_KEY');
  l_error_actid     number :=
    wf_engine.getitemattrnumber
      (itemtype => itemtype
      ,itemkey  => itemkey
      ,aname    => 'ERROR_ACTIVITY_ID');
--
  l_activity_status varchar2(80);
  l_error_instance_label wf_process_activities.instance_label%TYPE;
--
begin
  if funmode = 'RUN' then
    l_error_instance_label := hr_workflow_utility.get_activity_instance_label
    (p_actid    => l_error_actid);
    wf_engine.handleerror
      (itemtype => l_error_item_type
      ,itemkey  => l_error_item_key
      ,activity => l_error_instance_label
      ,command  => 'RETRY');
    -- we need to determine if the activity is still in
    -- error
    wf_item_activity_status.status
      (itemtype => l_error_item_type
      ,itemkey  => l_error_item_key
      ,actid    => l_error_actid
      ,status   => l_activity_status);
    --
    if l_activity_status <> 'ERROR' then
      -- as the error has been handled we need to reset the
      -- SYSTEM_ERROR_ACTID to null.
      wf_engine.setitemattrnumber
        (itemtype => l_error_item_type
        ,itemkey  => l_error_item_key
        ,aname    => 'SYSTEM_ERROR_ACTID'
        ,avalue   => null);
    end if;
  elsif funmode = 'CANCEL' then
    null;
  end if;
exception
  when others then
    raise;
end reset_workflow;
-- ---------------------------------------------------------------------------
-- |--------------------< initialise_system_error >--------------------------|
-- ---------------------------------------------------------------------------
procedure initialise_system_error
  (itemtype in     varchar2
  ,itemkey  in     varchar2
  ,actid    in     number
  ,funmode  in     varchar2
  ,result      out nocopy varchar2) is
--
  l_error_person_display_name wf_users.display_name%type;
  l_error_person_username     wf_users.name%type;
--
  l_error_item_type varchar2(8) :=
    wf_engine.getitemattrtext
      (itemtype => itemtype
      ,itemkey  => itemkey
      ,aname    => 'ERROR_ITEM_TYPE') ;
  l_error_item_key  varchar2(240) :=
    wf_engine.getitemattrtext
      (itemtype => itemtype
      ,itemkey  => itemkey
      ,aname    => 'ERROR_ITEM_KEY');
  l_error_actid     number :=
    wf_engine.getitemattrnumber
      (itemtype => itemtype
      ,itemkey  => itemkey
      ,aname    => 'ERROR_ACTIVITY_ID');
  l_person_id per_people_f.person_id%type :=
    wf_engine.getitemattrnumber
      (itemtype => l_error_item_type
      ,itemkey  => l_error_item_key
      ,aname    => 'CURRENT_PERSON_ID');
--
begin
  if funmode = 'RUN' then
    -- ------------------------------------------------------------------------
    -- set the ERROR_PERSON_ID item attribute
    -- ------------------------------------------------------------------------
    -- check to see if the item attribute exists
    if not hr_workflow_utility.item_attribute_exists
      (p_item_type => itemtype
      ,p_item_key  => itemkey
      ,p_name      => 'ERROR_PERSON_ID') then
      -- the ERROR_PERSON_ID does not exist so create it
      wf_engine.additemattr
        (itemtype => itemtype
        ,itemkey  => itemkey
        ,aname    => 'ERROR_PERSON_ID');
    end if;
    -- set the ERROR_PERSON_ID attribute value
    wf_engine.setitemattrnumber
      (itemtype => itemtype
      ,itemkey  => itemkey
      ,aname    => 'ERROR_PERSON_ID'
      ,avalue   => l_person_id);
    -- ------------------------------------------------------------------------
    -- set the ERROR_PERSON_USERNAME item attribute
    -- ------------------------------------------------------------------------
    -- get the username from workflow by calling the directory services
    wf_directory.getusername
      (p_orig_system    => 'PER'
      ,p_orig_system_id => l_person_id
      ,p_name           => l_error_person_username
      ,p_display_name   => l_error_person_display_name);
    -- check to see if the item attribute exists
    if not hr_workflow_utility.item_attribute_exists
      (p_item_type => itemtype
      ,p_item_key  => itemkey
      ,p_name      => 'ERROR_PERSON_USERNAME') then
      -- the ERROR_PERSON_USERNAME does not exist so create it
      wf_engine.additemattr
        (itemtype => itemtype
        ,itemkey  => itemkey
        ,aname    => 'ERROR_PERSON_USERNAME');
    end if;
    -- set the ERROR_PERSON_USERNAME attribute value
    wf_engine.setitemattrtext
      (itemtype => itemtype
      ,itemkey  => itemkey
      ,aname    => 'ERROR_PERSON_USERNAME'
      ,avalue   => l_error_person_username);
    -- ------------------------------------------------------------------------
    -- set the TRANSACTION_ID item attribute
    -- ------------------------------------------------------------------------
    -- check to see if the item attribute exists
    if not hr_workflow_utility.item_attribute_exists
      (p_item_type => itemtype
      ,p_item_key  => itemkey
      ,p_name      => 'TRANSACTION_ID') then
      -- the TRANSACTION_ID does not exist so create it
      wf_engine.additemattr
        (itemtype => itemtype
        ,itemkey  => itemkey
        ,aname    => 'TRANSACTION_ID');
    end if;
    -- set the TRANSACTION_ID item attribute value
    wf_engine.setitemattrnumber
      (itemtype => itemtype
      ,itemkey  => itemkey
      ,aname    => 'TRANSACTION_ID'
      ,avalue   => hr_transaction_ss.get_transaction_id
                     (p_item_type => l_error_item_type
                     ,p_item_key  => l_error_item_key));
    -- ------------------------------------------------------------------------
    -- set the SYSTEM_ERROR_ACTID item attribute
    -- ------------------------------------------------------------------------
    -- set the item attribute SYSTEM_ERROR_ACTID to the
    -- current activity
    -- check to see if the item attribute exists
    if not hr_workflow_utility.item_attribute_exists
      (p_item_type => l_error_item_type
      ,p_item_key  => l_error_item_key
      ,p_name      => 'SYSTEM_ERROR_ACTID') then
      -- the SYSTEM_ERROR_ACTID does not exist so create it
      wf_engine.additemattr
        (itemtype => l_error_item_type
        ,itemkey  => l_error_item_key
        ,aname    => 'SYSTEM_ERROR_ACTID');
    end if;
    -- set the SYSTEM_ERROR_ACTID attribute value
    wf_engine.setitemattrnumber
      (itemtype => l_error_item_type
      ,itemkey  => l_error_item_key
      ,aname    => 'SYSTEM_ERROR_ACTID'
      ,avalue   => l_error_actid);
    --
    result := 'COMPLETE';
    --
  elsif funmode = 'CANCEL' then
    null;
  end if;
--
end initialise_system_error;
-- ---------------------------------------------------------------------------
-- |------------------< clr_activity_messages >----------------------|
-- ---------------------------------------------------------------------------
PROCEDURE clr_activity_messages
  (p_item_type           IN wf_items.item_type%TYPE
  ,p_item_key            IN wf_items.item_key%TYPE
  ,p_actid          IN wf_process_activities.instance_id%TYPE) IS
  -- --------------------------------------------------------------------------
  -- local cursor definitions
  -- --------------------------------------------------------------------------
  -- csr_wf_attribute_name       -> selects the name of all the
  --                                error/warning text item attributes
  --                                for a given activity
  --
  CURSOR csr_wf_attribute_name IS
  SELECT iav.name
    FROM  wf_item_attribute_values iav,
          hr_api_transaction_steps hats
   WHERE  iav.item_type = hats.item_type
   AND    iav.item_key = hats.item_key
   AND  (iav.name LIKE 'ERROR_TEXT:%'
   OR    iav.name LIKE 'WARNING_TEXT:%')
   AND    TO_NUMBER(SUBSTR(iav.name,
              INSTR (iav.name, ':') + 1,
              INSTR (iav.name, ':', 1, 2) - INSTR (iav.name, ':') - 1)) =
         hats.transaction_step_id
   AND    hats.item_type = p_item_type
   AND    hats.item_key = p_item_key
   AND    hats.activity_id = p_actid;

  /*CURSOR csr_wf_attribute_name IS
    select iav.name
    from   wf_item_attribute_values iav
    where  iav.item_type = p_item_type
    and    iav.item_key  = p_item_key
    and    iav.name like 'ERROR_TEXT'||':%'
    or    iav.name like 'WARNING_TEXT'||':%'
    and    to_number(
             substr(iav.name
                   ,instr(iav.name,':') + 1
                   ,instr(iav.name,':',1,2) - instr(iav.name,':') - 1
             )
           ) in
    (select hats.transaction_step_id
     from   hr_api_transaction_steps hats
     where  hats.item_type = p_item_type
         and    hats.item_key  = p_item_key
     and    hats.activity_id   = p_actid);*/
  -- ---------------------------------------------------------------------------
  -- Local variable declerations
  -- ---------------------------------------------------------------------------
  l_proc_name               varchar2(61) := g_package||'clr_activity_messages';
BEGIN
  -- ---------------------------------------------------------------------------
  -- Clear all error text for this activity by setting each to NULL
  -- ---------------------------------------------------------------------------
  FOR lcsr IN csr_wf_attribute_name LOOP
    -- Clear current error_text attribute
    wf_engine.SetItemAttrText
      (itemtype   => p_item_type
      ,itemkey    => p_item_key
      ,aname      => lcsr.name
      ,avalue     => null);
  END LOOP;
END clr_activity_messages;
--
-- ---------------------------------------------------------------------------
-- |------------------< clr_transact_step_messages >----------------------|
-- ---------------------------------------------------------------------------
PROCEDURE clr_transact_step_messages
  (p_item_type           IN wf_items.item_type%TYPE
  ,p_item_key            IN wf_items.item_key%TYPE
  ,p_transaction_step_id IN NUMBER) IS
  -- --------------------------------------------------------------------------
  -- local cursor definitions
  -- --------------------------------------------------------------------------

  -- csr_wf_attribute_name       -> selects the name of the
  --                                error/warning text item attribute
  --                                for a given transaction step
  --
  CURSOR csr_wf_attribute_name IS
  SELECT iav.name
    FROM  wf_item_attribute_values iav
   WHERE  iav.item_type = p_item_type
   AND    iav.item_key  = p_item_key
   AND  (iav.name LIKE 'ERROR_TEXT:%'
   OR    iav.name LIKE 'WARNING_TEXT:%')
   AND    TO_NUMBER(SUBSTR(iav.name,
        INSTR(iav.name, ':') + 1,
        INSTR(iav.name, ':', 1, 2) - INSTR(iav.name, ':') - 1)) =
      p_transaction_step_id;

  /*CURSOR csr_wf_attribute_name IS
    select iav.name
    from   wf_item_attribute_values iav
    where  iav.item_type = p_item_type
    and    iav.item_key  = p_item_key
    and    iav.name like 'ERROR_TEXT'||':%'
    or    iav.name like 'WARNING_TEXT'||':%'
    and    to_number(
             substr(iav.name
                   ,instr(iav.name,':') + 1
                   ,instr(iav.name,':',1,2) - instr(iav.name,':') - 1
             )
           ) = p_transaction_step_id; */
 -- ---------------------------------------------------------------------------
  -- Local variable declerations
  -- ---------------------------------------------------------------------------
  l_proc_name               varchar2(61) := g_package||'clr_transact_step_messages';
BEGIN
  -- ---------------------------------------------------------------------------
  -- Clear all error text for this transaction step by setting each to NULL
  -- ---------------------------------------------------------------------------
  FOR lcsr IN csr_wf_attribute_name LOOP
    -- Clear current error_text attribute
    wf_engine.SetItemAttrText
      (itemtype   => p_item_type
      ,itemkey    => p_item_key
      ,aname      => lcsr.name
      ,avalue     => null);
  END LOOP;
END clr_transact_step_messages;
-- ---------------------------------------------------------------------------
-- |------------------< set_transact_step_error_text >------------------------|
-- ---------------------------------------------------------------------------
PROCEDURE set_transact_step_error_text
  (p_item_type           IN wf_items.item_type%TYPE
  ,p_item_key            IN wf_items.item_key%TYPE
  ,p_transaction_step_id IN NUMBER
  ,p_error_text          IN VARCHAR2) IS
  -- ---------------------------------------------------------------------------
  -- Local variable declerations
  -- ---------------------------------------------------------------------------
  l_proc_name       varchar2(71) := g_package||'set_transact_step_error_text';
BEGIN
  set_transact_step_messages
    (p_item_type            => p_item_type
    ,p_item_key             => p_item_key
    ,p_transaction_step_id  => p_transaction_step_id
    ,p_error_text           => p_error_text
    ,p_type                 => 'ERROR_TEXT');
END set_transact_step_error_text;
--
-- ---------------------------------------------------------------------------
-- |-----------------------< exists_error_text >-----------------------------|
-- ---------------------------------------------------------------------------
FUNCTION exists_error_text
  (p_item_type      IN wf_items.item_type%TYPE
  ,p_item_key       IN wf_items.item_key%TYPE
  ,p_actid          IN wf_process_activities.instance_id%TYPE) RETURN BOOLEAN IS
  -- ---------------------------------------------------------------------------
  -- Local variable declarations
  -- ---------------------------------------------------------------------------
  l_proc_name               varchar2(61) := g_package||'exists_error_text';
BEGIN
  RETURN exists_messages
    (p_item_type            => p_item_type
    ,p_item_key             => p_item_key
    ,p_actid                => p_actid
    ,p_type                 => 'ERROR_TEXT');
END exists_error_text;
--
FUNCTION exists_error_text
  (p_item_type      IN wf_items.item_type%TYPE
  ,p_item_key       IN wf_items.item_key%TYPE
  ,p_actid          IN wf_process_activities.instance_id%TYPE
  ,p_transaction_step_id IN hr_api_transaction_steps.transaction_step_id%TYPE) RETURN BOOLEAN IS
  -- ---------------------------------------------------------------------------
  -- Local variable declarations
  -- ---------------------------------------------------------------------------
  l_proc_name               varchar2(61) := g_package||'exists_error_text';
BEGIN
  RETURN exists_messages
    (p_item_type            => p_item_type
    ,p_item_key             => p_item_key
    ,p_actid                => p_actid
    ,p_transaction_step_id  => p_transaction_step_id
    ,p_type                 => 'ERROR_TEXT');
END exists_error_text;
--
-- ---------------------------------------------------------------------------
-- |------------------< set_transact_step_warning_text >------------------------|
-- ---------------------------------------------------------------------------
PROCEDURE set_transact_step_warning_text
  (p_item_type           IN wf_items.item_type%TYPE
  ,p_item_key            IN wf_items.item_key%TYPE
  ,p_transaction_step_id IN NUMBER
  ,p_error_text          IN VARCHAR2) IS
  -- ---------------------------------------------------------------------------
  -- Local variable declerations
  -- ---------------------------------------------------------------------------
  l_proc_name       varchar2(71) := g_package||'set_transact_step_warning_text';
BEGIN
  set_transact_step_messages
    (p_item_type            => p_item_type
    ,p_item_key             => p_item_key
    ,p_transaction_step_id  => p_transaction_step_id
    ,p_error_text           => p_error_text
    ,p_type                 => 'WARNING_TEXT');
END set_transact_step_warning_text;
--
-- ---------------------------------------------------------------------------
-- |-----------------------< exists_warning_text >----------------------------|
-- ---------------------------------------------------------------------------
FUNCTION exists_warning_text
  (p_item_type      IN wf_items.item_type%TYPE
  ,p_item_key       IN wf_items.item_key%TYPE
  ,p_actid          IN wf_process_activities.instance_id%TYPE) RETURN BOOLEAN IS
  -- ---------------------------------------------------------------------------
  -- Local variable declarations
  -- ---------------------------------------------------------------------------
  l_proc_name               varchar2(61) := g_package||'exists_warning_text';
BEGIN
  RETURN exists_messages
    (p_item_type            => p_item_type
    ,p_item_key             => p_item_key
    ,p_actid                => p_actid
    ,p_type                 => 'WARNING_TEXT');
END exists_warning_text;
--
FUNCTION exists_warning_text
  (p_item_type      IN wf_items.item_type%TYPE
  ,p_item_key       IN wf_items.item_key%TYPE
  ,p_actid          IN wf_process_activities.instance_id%TYPE
  ,p_transaction_step_id IN hr_api_transaction_steps.transaction_step_id%TYPE) RETURN BOOLEAN IS
  -- ---------------------------------------------------------------------------
  -- Local variable declarations
  -- ---------------------------------------------------------------------------
  l_proc_name               varchar2(61) := g_package||'exists_warning_text';
BEGIN
  RETURN exists_messages
    (p_item_type            => p_item_type
    ,p_item_key             => p_item_key
    ,p_actid                => p_actid
    ,p_transaction_step_id  => p_transaction_step_id
    ,p_type                 => 'WARNING_TEXT');
END exists_warning_text;
--
end hr_emp_error_utility;

/
