--------------------------------------------------------
--  DDL for Package Body AR_VAT_TAX_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AR_VAT_TAX_PKG" as
/* $Header: ARPAVTSB.pls 120.12 2006/03/30 02:46:42 sachandr ship $ */

procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_ORG_ID in NUMBER,
  X_VAT_TAX_ID in NUMBER,
  X_TAX_CONSTRAINT_ID in NUMBER,
  X_TAX_CLASS in VARCHAR2,
  X_DISPLAYED_FLAG in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_GLOBAL_ATTRIBUTE20 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_AMOUNT_INCLUDES_TAX_FLAG in VARCHAR2,
  X_AMOUNT_INCLUDES_TAX_OVERRIDE in VARCHAR2,
  X_TAXABLE_BASIS in VARCHAR2,
  X_TAX_CALCULATION_PLSQL_BLOCK in VARCHAR2,
  X_INTERIM_TAX_CCID in NUMBER,
  X_ADJ_CCID in NUMBER,
  X_EDISC_CCID in NUMBER,
  X_UNEDISC_CCID in NUMBER,
  X_FINCHRG_CCID in NUMBER,
  X_ADJ_NON_REC_TAX_CCID in NUMBER,
  X_EDISC_NON_REC_TAX_CCID in NUMBER,
  X_UNEDISC_NON_REC_TAX_CCID in NUMBER,
  X_FINCHRG_NON_REC_TAX_CCID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_TAX_CODE in VARCHAR2,
  X_TAX_RATE in NUMBER,
  X_TAX_TYPE in VARCHAR2,
  X_VALIDATE_FLAG in VARCHAR2,
  X_TAX_ACCOUNT_ID in NUMBER,
  X_START_DATE in DATE,
  X_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_UNAPPROVED_EXEMPTION_FLAG in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_VAT_TRANSACTION_TYPE in VARCHAR2,
  X_GLOBAL_ATTRIBUTE1 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE2 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE3 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE4 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE5 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE6 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE7 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE8 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE9 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE10 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE11 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE12 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE13 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE14 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE16 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE17 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE18 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE19 in VARCHAR2,
  X_PRINTED_TAX_NAME in VARCHAR2,
  X_ADJUSTMENT_TAX_CODE in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_LEASING_FLAG in VARCHAR2 DEFAULT 'N',
  X_TAX_REGIME_CODE in VARCHAR2     DEFAULT  NULL,
  X_TAX             in VARCHAR2     DEFAULT  NULL,
  X_TAX_STATUS_CODE in VARCHAR2     DEFAULT  NULL
) is
  --X_ORG_ID   NUMBER;

  l_lookup_type     NUMBER;
  l_fnd_lkp_rowid   VARCHAR2(30);

  cursor C is select ROWID from AR_VAT_TAX_ALL_B
    where VAT_TAX_ID = X_VAT_TAX_ID
    ;
begin

  /*
     bug 1722260 : do not nvl(org_id) to -99, rather simply return to_number(null)
     Why do we need the decode for client_info = ' ' ?
     Apparently there are situations wherein client_info returns a space rather then null
     and the decode is necessary to avoid the bug logged in 1328940.

   Commented out the following select for multi-org changes

  select TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),
                  ' ', NULL,
                       SUBSTRB(USERENV('CLIENT_INFO'),1,10)))
    into X_ORG_ID
    from dual;   */

  insert into AR_VAT_TAX_ALL_B (
    ORG_ID,
    TAX_CONSTRAINT_ID,
    TAX_CLASS,
    DISPLAYED_FLAG,
    ENABLED_FLAG,
    GLOBAL_ATTRIBUTE20,
    GLOBAL_ATTRIBUTE_CATEGORY,
    AMOUNT_INCLUDES_TAX_FLAG,
    AMOUNT_INCLUDES_TAX_OVERRIDE,
    TAXABLE_BASIS,
    TAX_CALCULATION_PLSQL_BLOCK,
    INTERIM_TAX_CCID,
    ADJ_CCID,
    EDISC_CCID,
    UNEDISC_CCID,
    FINCHRG_CCID,
    ADJ_NON_REC_TAX_CCID,
    EDISC_NON_REC_TAX_CCID,
    UNEDISC_NON_REC_TAX_CCID,
    FINCHRG_NON_REC_TAX_CCID,
    VAT_TAX_ID,
    SET_OF_BOOKS_ID,
    TAX_CODE,
    TAX_RATE,
    TAX_TYPE,
    VALIDATE_FLAG,
    TAX_ACCOUNT_ID,
    START_DATE,
    END_DATE,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    UNAPPROVED_EXEMPTION_FLAG,
    DESCRIPTION,
    VAT_TRANSACTION_TYPE,
    GLOBAL_ATTRIBUTE1,
    GLOBAL_ATTRIBUTE2,
    GLOBAL_ATTRIBUTE3,
    GLOBAL_ATTRIBUTE4,
    GLOBAL_ATTRIBUTE5,
    GLOBAL_ATTRIBUTE6,
    GLOBAL_ATTRIBUTE7,
    GLOBAL_ATTRIBUTE8,
    GLOBAL_ATTRIBUTE9,
    GLOBAL_ATTRIBUTE10,
    GLOBAL_ATTRIBUTE11,
    GLOBAL_ATTRIBUTE12,
    GLOBAL_ATTRIBUTE13,
    GLOBAL_ATTRIBUTE14,
    GLOBAL_ATTRIBUTE15,
    GLOBAL_ATTRIBUTE16,
    GLOBAL_ATTRIBUTE17,
    GLOBAL_ATTRIBUTE18,
    GLOBAL_ATTRIBUTE19,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    ADJUSTMENT_TAX_CODE,
    LEASING_FLAG,
    TAX_REGIME_CODE,
    TAX,
    TAX_STATUS_CODE
  ) values (
    X_ORG_ID,
    X_TAX_CONSTRAINT_ID,
    X_TAX_CLASS,
    X_DISPLAYED_FLAG,
    X_ENABLED_FLAG,
    X_GLOBAL_ATTRIBUTE20,
    X_GLOBAL_ATTRIBUTE_CATEGORY,
    X_AMOUNT_INCLUDES_TAX_FLAG,
    X_AMOUNT_INCLUDES_TAX_OVERRIDE,
    X_TAXABLE_BASIS,
    X_TAX_CALCULATION_PLSQL_BLOCK,
    X_INTERIM_TAX_CCID,
    X_ADJ_CCID,
    X_EDISC_CCID,
    X_UNEDISC_CCID,
    X_FINCHRG_CCID,
    X_ADJ_NON_REC_TAX_CCID,
    X_EDISC_NON_REC_TAX_CCID,
    X_UNEDISC_NON_REC_TAX_CCID,
    X_FINCHRG_NON_REC_TAX_CCID,
    X_VAT_TAX_ID,
    X_SET_OF_BOOKS_ID,
    X_TAX_CODE,
    X_TAX_RATE,
    X_TAX_TYPE,
    X_VALIDATE_FLAG,
    X_TAX_ACCOUNT_ID,
    X_START_DATE,
    X_END_DATE,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_UNAPPROVED_EXEMPTION_FLAG,
    X_DESCRIPTION,
    X_VAT_TRANSACTION_TYPE,
    X_GLOBAL_ATTRIBUTE1,
    X_GLOBAL_ATTRIBUTE2,
    X_GLOBAL_ATTRIBUTE3,
    X_GLOBAL_ATTRIBUTE4,
    X_GLOBAL_ATTRIBUTE5,
    X_GLOBAL_ATTRIBUTE6,
    X_GLOBAL_ATTRIBUTE7,
    X_GLOBAL_ATTRIBUTE8,
    X_GLOBAL_ATTRIBUTE9,
    X_GLOBAL_ATTRIBUTE10,
    X_GLOBAL_ATTRIBUTE11,
    X_GLOBAL_ATTRIBUTE12,
    X_GLOBAL_ATTRIBUTE13,
    X_GLOBAL_ATTRIBUTE14,
    X_GLOBAL_ATTRIBUTE15,
    X_GLOBAL_ATTRIBUTE16,
    X_GLOBAL_ATTRIBUTE17,
    X_GLOBAL_ATTRIBUTE18,
    X_GLOBAL_ATTRIBUTE19,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_ADJUSTMENT_TAX_CODE,
    X_LEASING_FLAG,
    X_TAX_REGIME_CODE,
    X_TAX,
    X_TAX_STATUS_CODE
  );

  /* bug 1722260 : modify where clause of t.org_id */

  insert into AR_VAT_TAX_ALL_TL (
    ORG_ID,
    VAT_TAX_ID,
    PRINTED_TAX_NAME,
    LAST_UPDATE_DATE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_ORG_ID,
    X_VAT_TAX_ID,
    X_PRINTED_TAX_NAME,
    X_LAST_UPDATE_DATE,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from AR_VAT_TAX_ALL_TL T
    where T.VAT_TAX_ID = X_VAT_TAX_ID
    and T.LANGUAGE = L.LANGUAGE_CODE
    and T.ORG_ID = X_ORG_ID);
  /*and NVL(T.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),
            ' ', NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
        NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),
            ' ', NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99) );*/

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

  --
  -- Bug 3905897 : Activating a call to zx_upgrade_control_pkg
  --               by removing comment.

  -- Bug 3970600    Temporarily comment out for dependency issue

  -- Bug 3554056
  -- Implemted eTBax sync procedure

  ZX_UPGRADE_CONTROL_PKG.SYNC_AR_VAT_TAX (
  P_DML_TYPE => 'I',
  P_ORG_ID  => X_ORG_ID,
  P_VAT_TAX_ID => X_VAT_TAX_ID,
  P_TAX_CONSTRAINT_ID => X_TAX_CONSTRAINT_ID,
  P_TAX_CLASS => X_TAX_CLASS,
  P_DISPLAYED_FLAG => X_DISPLAYED_FLAG,
  P_ENABLED_FLAG => X_ENABLED_FLAG,
  P_AMOUNT_INCLUDES_TAX_FLAG => X_AMOUNT_INCLUDES_TAX_FLAG,
  P_AMOUNT_INCLUDES_TAX_OVERRIDE => X_AMOUNT_INCLUDES_TAX_OVERRIDE,
  P_TAXABLE_BASIS => X_TAXABLE_BASIS,
  P_TAX_CALCULATION_PLSQL_BLOCK => X_TAX_CALCULATION_PLSQL_BLOCK,
  P_INTERIM_TAX_CCID => X_INTERIM_TAX_CCID,
  P_ADJ_CCID => X_ADJ_CCID,
  P_EDISC_CCID => X_EDISC_CCID,
  P_UNEDISC_CCID => X_UNEDISC_CCID,
  P_FINCHRG_CCID => X_FINCHRG_CCID,
  P_ADJ_NON_REC_TAX_CCID => X_ADJ_NON_REC_TAX_CCID,
  P_EDISC_NON_REC_TAX_CCID => X_EDISC_NON_REC_TAX_CCID,
  P_UNEDISC_NON_REC_TAX_CCID => X_UNEDISC_NON_REC_TAX_CCID,
  P_FINCHRG_NON_REC_TAX_CCID => X_FINCHRG_NON_REC_TAX_CCID,
  P_SET_OF_BOOKS_ID => X_SET_OF_BOOKS_ID,
  P_TAX_CODE => X_TAX_CODE,
  P_TAX_RATE => X_TAX_RATE,
  P_TAX_TYPE => X_TAX_TYPE,
  P_VALIDATE_FLAG => X_VALIDATE_FLAG,
  P_TAX_ACCOUNT_ID => X_TAX_ACCOUNT_ID,
  P_START_DATE => X_START_DATE,
  P_END_DATE => X_END_DATE,
  P_ATTRIBUTE_CATEGORY => X_ATTRIBUTE_CATEGORY,
  P_ATTRIBUTE1 => X_ATTRIBUTE1,
  P_ATTRIBUTE2 => X_ATTRIBUTE2,
  P_ATTRIBUTE3 => X_ATTRIBUTE3,
  P_ATTRIBUTE4 => X_ATTRIBUTE4,
  P_ATTRIBUTE5 => X_ATTRIBUTE5,
  P_ATTRIBUTE6 => X_ATTRIBUTE6,
  P_ATTRIBUTE7 => X_ATTRIBUTE7,
  P_ATTRIBUTE8 => X_ATTRIBUTE8,
  P_ATTRIBUTE9 => X_ATTRIBUTE9,
  P_ATTRIBUTE10 => X_ATTRIBUTE10,
  P_ATTRIBUTE11 => X_ATTRIBUTE11,
  P_ATTRIBUTE12 => X_ATTRIBUTE12,
  P_ATTRIBUTE13 => X_ATTRIBUTE13,
  P_ATTRIBUTE14 => X_ATTRIBUTE14,
  P_ATTRIBUTE15 => X_ATTRIBUTE15,
  P_UNAPPROVED_EXEMPTION_FLAG => X_UNAPPROVED_EXEMPTION_FLAG,
  P_DESCRIPTION => X_DESCRIPTION,
  P_VAT_TRANSACTION_TYPE => X_VAT_TRANSACTION_TYPE,
  P_GLOBAL_ATTRIBUTE_CATEGORY => X_GLOBAL_ATTRIBUTE_CATEGORY,
  P_GLOBAL_ATTRIBUTE1 => X_GLOBAL_ATTRIBUTE1,
  P_GLOBAL_ATTRIBUTE2 => X_GLOBAL_ATTRIBUTE2,
  P_GLOBAL_ATTRIBUTE3 => X_GLOBAL_ATTRIBUTE3,
  P_GLOBAL_ATTRIBUTE4 => X_GLOBAL_ATTRIBUTE4,
  P_GLOBAL_ATTRIBUTE5 => X_GLOBAL_ATTRIBUTE5,
  P_GLOBAL_ATTRIBUTE6 => X_GLOBAL_ATTRIBUTE6,
  P_GLOBAL_ATTRIBUTE7 => X_GLOBAL_ATTRIBUTE7,
  P_GLOBAL_ATTRIBUTE8 => X_GLOBAL_ATTRIBUTE8,
  P_GLOBAL_ATTRIBUTE9 => X_GLOBAL_ATTRIBUTE9,
  P_GLOBAL_ATTRIBUTE10 => X_GLOBAL_ATTRIBUTE10,
  P_GLOBAL_ATTRIBUTE11 => X_GLOBAL_ATTRIBUTE11,
  P_GLOBAL_ATTRIBUTE12 => X_GLOBAL_ATTRIBUTE12,
  P_GLOBAL_ATTRIBUTE13 => X_GLOBAL_ATTRIBUTE13,
  P_GLOBAL_ATTRIBUTE14 => X_GLOBAL_ATTRIBUTE14,
  P_GLOBAL_ATTRIBUTE15 => X_GLOBAL_ATTRIBUTE15,
  P_GLOBAL_ATTRIBUTE16 => X_GLOBAL_ATTRIBUTE16,
  P_GLOBAL_ATTRIBUTE17 => X_GLOBAL_ATTRIBUTE17,
  P_GLOBAL_ATTRIBUTE18 => X_GLOBAL_ATTRIBUTE18,
  P_GLOBAL_ATTRIBUTE19 => X_GLOBAL_ATTRIBUTE19,
  P_GLOBAL_ATTRIBUTE20 => X_GLOBAL_ATTRIBUTE20,
  P_PRINTED_TAX_NAME => X_PRINTED_TAX_NAME,
  P_CREATION_DATE => X_CREATION_DATE,
  P_CREATED_BY => X_CREATED_BY,
  P_LAST_UPDATE_DATE => X_LAST_UPDATE_DATE,
  P_LAST_UPDATED_BY => X_LAST_UPDATED_BY,
  P_LAST_UPDATE_LOGIN => X_LAST_UPDATE_LOGIN,
  P_TAX_REGIME_CODE => X_TAX_REGIME_CODE,
  P_TAX => X_TAX,
  P_TAX_STATUS_CODE => X_TAX_STATUS_CODE);

  SELECT COUNT(*)
  INTO l_lookup_type
  FROM FND_LOOKUP_TYPES
  WHERE LOOKUP_TYPE = 'ZX_OUTPUT_CLASSIFICATIONS';

  IF x_tax_type = 'TAX_GROUP' THEN
    IF l_lookup_type = 0 THEN

      INSERT INTO FND_LOOKUP_TYPES (APPLICATION_ID,
                                    LOOKUP_TYPE,
                                    CUSTOMIZATION_LEVEL,
                                    CREATED_BY,
                                    CREATION_DATE,
                                    LAST_UPDATED_BY,
                                    LAST_UPDATE_DATE,
                                    LAST_UPDATE_LOGIN,
                                    SECURITY_GROUP_ID,
                                    VIEW_APPLICATION_ID)
                            VALUES (7004,
                                    'ZX_OUTPUT_CLASSIFICATIONS',
                                    'E',
                                    X_CREATED_BY,
                                    X_CREATION_DATE,
                                    X_LAST_UPDATED_BY,
                                    X_LAST_UPDATE_DATE,
                                    X_LAST_UPDATE_LOGIN,
                                    0,
                                    0);
    END IF;

/*
    INSERT INTO FND_LOOKUPS (LOOKUP_TYPE,
                             LOOKUP_CODE,
                             MEANING,
                             DESCRIPTION,
                             ENABLED_FLAG,
                             START_DATE_ACTIVE,
                             END_DATE_ACTIVE)
                     VALUES ('ZX_OUTPUT_CLASSIFICATIONS',
                             X_TAX_CODE,
                             X_DESCRIPTION,
                             X_PRINTED_TAX_NAME,
                             'Y',
                             X_CREATION_DATE,
                             NULL);
*/

   -- Bug#4684687

   FND_LOOKUP_VALUES_PKG.INSERT_ROW (
         X_Rowid               => l_fnd_lkp_rowid,
         X_lookup_type         => 'ZX_OUTPUT_CLASSIFICATIONS',
         X_lookup_code         => X_TAX_CODE,
         X_enabled_flag        => 'Y',
         X_START_DATE_ACTIVE   => X_CREATION_DATE,
         X_END_DATE_ACTIVE     => NULL,
         X_meaning             => X_DESCRIPTION,
         X_description         => X_PRINTED_TAX_NAME,
         X_CREATION_DATE       => X_CREATION_DATE                    ,
         X_CREATED_BY          => X_CREATED_BY                       ,
         X_LAST_UPDATE_DATE    => X_LAST_UPDATE_DATE                 ,
         X_LAST_UPDATED_BY     => X_LAST_UPDATED_BY                  ,
         X_LAST_UPDATE_LOGIN   => X_LAST_UPDATE_LOGIN                ,
         X_SECURITY_GROUP_ID   => 0,
         X_VIEW_APPLICATION_ID => 0,
         X_TAG                 => NULL,   --X_TAG                    ,
         X_TERRITORY_CODE      => NULL,   --X_TERRITORY_CODE         ,
         X_ATTRIBUTE_CATEGORY  => X_ATTRIBUTE_CATEGORY               ,
         X_ATTRIBUTE1          => X_ATTRIBUTE1                       ,
         X_ATTRIBUTE2          => X_ATTRIBUTE2                       ,
         X_ATTRIBUTE3          => X_ATTRIBUTE3                       ,
         X_ATTRIBUTE4          => X_ATTRIBUTE4                       ,
         X_ATTRIBUTE5          => X_ATTRIBUTE5                       ,
         X_ATTRIBUTE6          => X_ATTRIBUTE6                       ,
         X_ATTRIBUTE7          => X_ATTRIBUTE7                       ,
         X_ATTRIBUTE8          => X_ATTRIBUTE8                       ,
         X_ATTRIBUTE9          => X_ATTRIBUTE9                       ,
         X_ATTRIBUTE10         => X_ATTRIBUTE10                      ,
         X_ATTRIBUTE11         => X_ATTRIBUTE11                      ,
         X_ATTRIBUTE12         => X_ATTRIBUTE12                      ,
         X_ATTRIBUTE13         => X_ATTRIBUTE13                      ,
         X_ATTRIBUTE14         => X_ATTRIBUTE14                      ,
         X_ATTRIBUTE15         => X_ATTRIBUTE15);

  END IF;

end INSERT_ROW;

procedure LOCK_ROW (
  X_ORG_ID in NUMBER,
  X_VAT_TAX_ID in NUMBER,
  X_TAX_CONSTRAINT_ID in NUMBER,
  X_TAX_CLASS in VARCHAR2,
  X_DISPLAYED_FLAG in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_GLOBAL_ATTRIBUTE20 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_AMOUNT_INCLUDES_TAX_FLAG in VARCHAR2,
  X_AMOUNT_INCLUDES_TAX_OVERRIDE in VARCHAR2,
  X_TAXABLE_BASIS in VARCHAR2,
  X_TAX_CALCULATION_PLSQL_BLOCK in VARCHAR2,
  X_INTERIM_TAX_CCID in NUMBER,
  X_ADJ_CCID in NUMBER,
  X_EDISC_CCID in NUMBER,
  X_UNEDISC_CCID in NUMBER,
  X_FINCHRG_CCID in NUMBER,
  X_ADJ_NON_REC_TAX_CCID in NUMBER,
  X_EDISC_NON_REC_TAX_CCID in NUMBER,
  X_UNEDISC_NON_REC_TAX_CCID in NUMBER,
  X_FINCHRG_NON_REC_TAX_CCID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_TAX_CODE in VARCHAR2,
  X_TAX_RATE in NUMBER,
  X_TAX_TYPE in VARCHAR2,
  X_VALIDATE_FLAG in VARCHAR2,
  X_TAX_ACCOUNT_ID in NUMBER,
  X_START_DATE in DATE,
  X_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_UNAPPROVED_EXEMPTION_FLAG in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_VAT_TRANSACTION_TYPE in VARCHAR2,
  X_GLOBAL_ATTRIBUTE1 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE2 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE3 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE4 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE5 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE6 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE7 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE8 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE9 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE10 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE11 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE12 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE13 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE14 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE16 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE17 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE18 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE19 in VARCHAR2,
  X_PRINTED_TAX_NAME in VARCHAR2,
  X_ADJUSTMENT_TAX_CODE in VARCHAR2,
  X_LEASING_FLAG in VARCHAR2 DEFAULT 'N',
  X_TAX_REGIME_CODE in VARCHAR2    DEFAULT  NULL,
  X_TAX             in VARCHAR2    DEFAULT  NULL,
  X_TAX_STATUS_CODE in VARCHAR2    DEFAULT  NULL
) is
  cursor c is select
      TAX_CONSTRAINT_ID,
      TAX_CLASS,
      DISPLAYED_FLAG,
      ENABLED_FLAG,
      GLOBAL_ATTRIBUTE20,
      GLOBAL_ATTRIBUTE_CATEGORY,
      AMOUNT_INCLUDES_TAX_FLAG,
      AMOUNT_INCLUDES_TAX_OVERRIDE,
      TAXABLE_BASIS,
      TAX_CALCULATION_PLSQL_BLOCK,
      INTERIM_TAX_CCID,
      ADJ_CCID,
      EDISC_CCID,
      UNEDISC_CCID,
      FINCHRG_CCID,
      ADJ_NON_REC_TAX_CCID,
      EDISC_NON_REC_TAX_CCID,
      UNEDISC_NON_REC_TAX_CCID,
      FINCHRG_NON_REC_TAX_CCID,
      SET_OF_BOOKS_ID,
      TAX_CODE,
      TAX_RATE,
      TAX_TYPE,
      VALIDATE_FLAG,
      TAX_ACCOUNT_ID,
      START_DATE,
      END_DATE,
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15,
      UNAPPROVED_EXEMPTION_FLAG,
      DESCRIPTION,
      VAT_TRANSACTION_TYPE,
      GLOBAL_ATTRIBUTE1,
      GLOBAL_ATTRIBUTE2,
      GLOBAL_ATTRIBUTE3,
      GLOBAL_ATTRIBUTE4,
      GLOBAL_ATTRIBUTE5,
      GLOBAL_ATTRIBUTE6,
      GLOBAL_ATTRIBUTE7,
      GLOBAL_ATTRIBUTE8,
      GLOBAL_ATTRIBUTE9,
      GLOBAL_ATTRIBUTE10,
      GLOBAL_ATTRIBUTE11,
      GLOBAL_ATTRIBUTE12,
      GLOBAL_ATTRIBUTE13,
      GLOBAL_ATTRIBUTE14,
      GLOBAL_ATTRIBUTE15,
      GLOBAL_ATTRIBUTE16,
      GLOBAL_ATTRIBUTE17,
      GLOBAL_ATTRIBUTE18,
      GLOBAL_ATTRIBUTE19,
      ORG_ID,
      TAX_REGIME_CODE,
      TAX,
      TAX_STATUS_CODE
    from AR_VAT_TAX_ALL_B
    where VAT_TAX_ID = X_VAT_TAX_ID
/* and   ORG_ID = X_ORG_ID
   and NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)*/
    for update of VAT_TAX_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      PRINTED_TAX_NAME,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from AR_VAT_TAX_ALL_TL
    where VAT_TAX_ID = X_VAT_TAX_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
/*  and ORG_ID = X_ORG_ID
    and NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)*/
    for update of VAT_TAX_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.TAX_CONSTRAINT_ID = X_TAX_CONSTRAINT_ID)
           OR ((recinfo.TAX_CONSTRAINT_ID is null) AND (X_TAX_CONSTRAINT_ID is null)))
      AND ((recinfo.TAX_CLASS = X_TAX_CLASS)
           OR ((recinfo.TAX_CLASS is null) AND (X_TAX_CLASS is null)))
      AND ((recinfo.DISPLAYED_FLAG = X_DISPLAYED_FLAG)
           OR ((recinfo.DISPLAYED_FLAG is null) AND (X_DISPLAYED_FLAG is null)))
      AND ((recinfo.ENABLED_FLAG = X_ENABLED_FLAG)
           OR ((recinfo.ENABLED_FLAG is null) AND (X_ENABLED_FLAG is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE20 = X_GLOBAL_ATTRIBUTE20)
           OR ((recinfo.GLOBAL_ATTRIBUTE20 is null) AND (X_GLOBAL_ATTRIBUTE20 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE_CATEGORY = X_GLOBAL_ATTRIBUTE_CATEGORY)
           OR ((recinfo.GLOBAL_ATTRIBUTE_CATEGORY is null) AND (X_GLOBAL_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.AMOUNT_INCLUDES_TAX_FLAG = X_AMOUNT_INCLUDES_TAX_FLAG)
           OR ((recinfo.AMOUNT_INCLUDES_TAX_FLAG is null) AND (X_AMOUNT_INCLUDES_TAX_FLAG is null)))
      AND ((recinfo.AMOUNT_INCLUDES_TAX_OVERRIDE = X_AMOUNT_INCLUDES_TAX_OVERRIDE)
           OR ((recinfo.AMOUNT_INCLUDES_TAX_OVERRIDE is null) AND (X_AMOUNT_INCLUDES_TAX_OVERRIDE is null)))
      AND ((recinfo.TAXABLE_BASIS = X_TAXABLE_BASIS)
           OR ((recinfo.TAXABLE_BASIS is null) AND (X_TAXABLE_BASIS is null)))
      AND ((recinfo.TAX_CALCULATION_PLSQL_BLOCK = X_TAX_CALCULATION_PLSQL_BLOCK)
           OR ((recinfo.TAX_CALCULATION_PLSQL_BLOCK is null) AND (X_TAX_CALCULATION_PLSQL_BLOCK is null)))
      AND ((recinfo.INTERIM_TAX_CCID = X_INTERIM_TAX_CCID)
           OR ((recinfo.INTERIM_TAX_CCID is null) AND (X_INTERIM_TAX_CCID is null)))
      AND ((recinfo.ADJ_CCID = X_ADJ_CCID)
           OR ((recinfo.ADJ_CCID is null) AND (X_ADJ_CCID is null)))
      AND ((recinfo.EDISC_CCID = X_EDISC_CCID)
           OR ((recinfo.EDISC_CCID is null) AND (X_EDISC_CCID is null)))
      AND ((recinfo.UNEDISC_CCID = X_UNEDISC_CCID)
           OR ((recinfo.UNEDISC_CCID is null) AND (X_UNEDISC_CCID is null)))
      AND ((recinfo.FINCHRG_CCID = X_FINCHRG_CCID)
           OR ((recinfo.FINCHRG_CCID is null) AND (X_FINCHRG_CCID is null)))
      AND ((recinfo.ADJ_NON_REC_TAX_CCID = X_ADJ_NON_REC_TAX_CCID)
           OR ((recinfo.ADJ_NON_REC_TAX_CCID is null) AND (X_ADJ_NON_REC_TAX_CCID is null)))
      AND ((recinfo.EDISC_NON_REC_TAX_CCID = X_EDISC_NON_REC_TAX_CCID)
           OR ((recinfo.EDISC_NON_REC_TAX_CCID is null) AND (X_EDISC_NON_REC_TAX_CCID is null)))
      AND ((recinfo.UNEDISC_NON_REC_TAX_CCID = X_UNEDISC_NON_REC_TAX_CCID)
           OR ((recinfo.UNEDISC_NON_REC_TAX_CCID is null) AND (X_UNEDISC_NON_REC_TAX_CCID is null)))
      AND ((recinfo.FINCHRG_NON_REC_TAX_CCID = X_FINCHRG_NON_REC_TAX_CCID)
           OR ((recinfo.FINCHRG_NON_REC_TAX_CCID is null) AND (X_FINCHRG_NON_REC_TAX_CCID is null)))
      AND (recinfo.SET_OF_BOOKS_ID = X_SET_OF_BOOKS_ID)
      AND (recinfo.TAX_CODE = X_TAX_CODE)
      AND ((recinfo.TAX_RATE = X_TAX_RATE)
           OR ((recinfo.TAX_RATE is null) AND (X_TAX_RATE is null)))
      AND (recinfo.TAX_TYPE = X_TAX_TYPE)
      AND ((recinfo.VALIDATE_FLAG = X_VALIDATE_FLAG)
           OR ((recinfo.VALIDATE_FLAG is null) AND (X_VALIDATE_FLAG is null)))
      AND ((recinfo.TAX_ACCOUNT_ID = X_TAX_ACCOUNT_ID)
           OR ((recinfo.TAX_ACCOUNT_ID is null) AND (X_TAX_ACCOUNT_ID is null)))
      AND (recinfo.START_DATE = X_START_DATE)
      AND ((recinfo.END_DATE = X_END_DATE)
           OR ((recinfo.END_DATE is null) AND (X_END_DATE is null)))
      AND ((recinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
           OR ((recinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
      AND ((recinfo.UNAPPROVED_EXEMPTION_FLAG = X_UNAPPROVED_EXEMPTION_FLAG)
           OR ((recinfo.UNAPPROVED_EXEMPTION_FLAG is null) AND (X_UNAPPROVED_EXEMPTION_FLAG is null)))
      AND ((recinfo.DESCRIPTION = X_DESCRIPTION)
           OR ((recinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
      AND ((recinfo.VAT_TRANSACTION_TYPE = X_VAT_TRANSACTION_TYPE)
           OR ((recinfo.VAT_TRANSACTION_TYPE is null) AND (X_VAT_TRANSACTION_TYPE is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE1 = X_GLOBAL_ATTRIBUTE1)
           OR ((recinfo.GLOBAL_ATTRIBUTE1 is null) AND (X_GLOBAL_ATTRIBUTE1 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE2 = X_GLOBAL_ATTRIBUTE2)
           OR ((recinfo.GLOBAL_ATTRIBUTE2 is null) AND (X_GLOBAL_ATTRIBUTE2 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE3 = X_GLOBAL_ATTRIBUTE3)
           OR ((recinfo.GLOBAL_ATTRIBUTE3 is null) AND (X_GLOBAL_ATTRIBUTE3 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE4 = X_GLOBAL_ATTRIBUTE4)
           OR ((recinfo.GLOBAL_ATTRIBUTE4 is null) AND (X_GLOBAL_ATTRIBUTE4 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE5 = X_GLOBAL_ATTRIBUTE5)
           OR ((recinfo.GLOBAL_ATTRIBUTE5 is null) AND (X_GLOBAL_ATTRIBUTE5 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE6 = X_GLOBAL_ATTRIBUTE6)
           OR ((recinfo.GLOBAL_ATTRIBUTE6 is null) AND (X_GLOBAL_ATTRIBUTE6 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE7 = X_GLOBAL_ATTRIBUTE7)
           OR ((recinfo.GLOBAL_ATTRIBUTE7 is null) AND (X_GLOBAL_ATTRIBUTE7 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE8 = X_GLOBAL_ATTRIBUTE8)
           OR ((recinfo.GLOBAL_ATTRIBUTE8 is null) AND (X_GLOBAL_ATTRIBUTE8 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE9 = X_GLOBAL_ATTRIBUTE9)
           OR ((recinfo.GLOBAL_ATTRIBUTE9 is null) AND (X_GLOBAL_ATTRIBUTE9 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE10 = X_GLOBAL_ATTRIBUTE10)
           OR ((recinfo.GLOBAL_ATTRIBUTE10 is null) AND (X_GLOBAL_ATTRIBUTE10 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE11 = X_GLOBAL_ATTRIBUTE11)
           OR ((recinfo.GLOBAL_ATTRIBUTE11 is null) AND (X_GLOBAL_ATTRIBUTE11 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE12 = X_GLOBAL_ATTRIBUTE12)
           OR ((recinfo.GLOBAL_ATTRIBUTE12 is null) AND (X_GLOBAL_ATTRIBUTE12 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE13 = X_GLOBAL_ATTRIBUTE13)
           OR ((recinfo.GLOBAL_ATTRIBUTE13 is null) AND (X_GLOBAL_ATTRIBUTE13 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE14 = X_GLOBAL_ATTRIBUTE14)
           OR ((recinfo.GLOBAL_ATTRIBUTE14 is null) AND (X_GLOBAL_ATTRIBUTE14 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE15 = X_GLOBAL_ATTRIBUTE15)
           OR ((recinfo.GLOBAL_ATTRIBUTE15 is null) AND (X_GLOBAL_ATTRIBUTE15 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE16 = X_GLOBAL_ATTRIBUTE16)
           OR ((recinfo.GLOBAL_ATTRIBUTE16 is null) AND (X_GLOBAL_ATTRIBUTE16 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE17 = X_GLOBAL_ATTRIBUTE17)
           OR ((recinfo.GLOBAL_ATTRIBUTE17 is null) AND (X_GLOBAL_ATTRIBUTE17 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE18 = X_GLOBAL_ATTRIBUTE18)
           OR ((recinfo.GLOBAL_ATTRIBUTE18 is null) AND (X_GLOBAL_ATTRIBUTE18 is null)))
      AND ((recinfo.GLOBAL_ATTRIBUTE19 = X_GLOBAL_ATTRIBUTE19)
           OR ((recinfo.GLOBAL_ATTRIBUTE19 is null) AND (X_GLOBAL_ATTRIBUTE19 is null)))
--moac change
      AND ((recinfo.ORG_ID = X_ORG_ID)
           OR ((recinfo.ORG_ID is null) AND (X_ORG_ID is null)))
      AND ((recinfo.TAX_REGIME_CODE = X_TAX_REGIME_CODE)
           OR ((recinfo.TAX_REGIME_CODE is null) AND (X_TAX_REGIME_CODE is null)))
      AND ((recinfo.TAX = X_TAX)
           OR ((recinfo.TAX is null) AND (X_TAX is null)))
      AND ((recinfo.TAX_STATUS_CODE = X_TAX_STATUS_CODE)
           OR ((recinfo.TAX_STATUS_CODE is null) AND (X_TAX_STATUS_CODE is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.PRINTED_TAX_NAME = X_PRINTED_TAX_NAME)
               OR ((tlinfo.PRINTED_TAX_NAME is null) AND (X_PRINTED_TAX_NAME is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_ORG_ID in NUMBER,
  X_VAT_TAX_ID in NUMBER,
  X_TAX_CONSTRAINT_ID in NUMBER,
  X_TAX_CLASS in VARCHAR2,
  X_DISPLAYED_FLAG in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_GLOBAL_ATTRIBUTE20 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_AMOUNT_INCLUDES_TAX_FLAG in VARCHAR2,
  X_AMOUNT_INCLUDES_TAX_OVERRIDE in VARCHAR2,
  X_TAXABLE_BASIS in VARCHAR2,
  X_TAX_CALCULATION_PLSQL_BLOCK in VARCHAR2,
  X_INTERIM_TAX_CCID in NUMBER,
  X_ADJ_CCID in NUMBER,
  X_EDISC_CCID in NUMBER,
  X_UNEDISC_CCID in NUMBER,
  X_FINCHRG_CCID in NUMBER,
  X_ADJ_NON_REC_TAX_CCID in NUMBER,
  X_EDISC_NON_REC_TAX_CCID in NUMBER,
  X_UNEDISC_NON_REC_TAX_CCID in NUMBER,
  X_FINCHRG_NON_REC_TAX_CCID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_TAX_CODE in VARCHAR2,
  X_TAX_RATE in NUMBER,
  X_TAX_TYPE in VARCHAR2,
  X_VALIDATE_FLAG in VARCHAR2,
  X_TAX_ACCOUNT_ID in NUMBER,
  X_START_DATE in DATE,
  X_END_DATE in DATE,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_UNAPPROVED_EXEMPTION_FLAG in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_VAT_TRANSACTION_TYPE in VARCHAR2,
  X_GLOBAL_ATTRIBUTE1 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE2 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE3 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE4 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE5 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE6 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE7 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE8 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE9 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE10 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE11 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE12 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE13 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE14 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE15 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE16 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE17 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE18 in VARCHAR2,
  X_GLOBAL_ATTRIBUTE19 in VARCHAR2,
  X_PRINTED_TAX_NAME in VARCHAR2,
  X_ADJUSTMENT_TAX_CODE in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_LEASING_FLAG in VARCHAR2 DEFAULT 'N',
  X_TAX_REGIME_CODE in VARCHAR2  DEFAULT NULL,
  X_TAX             in VARCHAR2  DEFAULT NULL,
  X_TAX_STATUS_CODE in VARCHAR2  DEFAULT NULL
) is
begin
  update AR_VAT_TAX_ALL_B set
    TAX_CONSTRAINT_ID = X_TAX_CONSTRAINT_ID,
    TAX_CLASS = X_TAX_CLASS,
    DISPLAYED_FLAG = X_DISPLAYED_FLAG,
    ENABLED_FLAG = X_ENABLED_FLAG,
    GLOBAL_ATTRIBUTE20 = X_GLOBAL_ATTRIBUTE20,
    GLOBAL_ATTRIBUTE_CATEGORY = X_GLOBAL_ATTRIBUTE_CATEGORY,
    AMOUNT_INCLUDES_TAX_FLAG = X_AMOUNT_INCLUDES_TAX_FLAG,
    AMOUNT_INCLUDES_TAX_OVERRIDE = X_AMOUNT_INCLUDES_TAX_OVERRIDE,
    TAXABLE_BASIS = X_TAXABLE_BASIS,
    TAX_CALCULATION_PLSQL_BLOCK = X_TAX_CALCULATION_PLSQL_BLOCK,
    INTERIM_TAX_CCID = X_INTERIM_TAX_CCID,
    ADJ_CCID = X_ADJ_CCID,
    EDISC_CCID = X_EDISC_CCID,
    UNEDISC_CCID = X_UNEDISC_CCID,
    FINCHRG_CCID = X_FINCHRG_CCID,
    ADJ_NON_REC_TAX_CCID = X_ADJ_NON_REC_TAX_CCID,
    EDISC_NON_REC_TAX_CCID = X_EDISC_NON_REC_TAX_CCID,
    UNEDISC_NON_REC_TAX_CCID = X_UNEDISC_NON_REC_TAX_CCID,
    FINCHRG_NON_REC_TAX_CCID = X_FINCHRG_NON_REC_TAX_CCID,
    SET_OF_BOOKS_ID = X_SET_OF_BOOKS_ID,
    TAX_CODE = X_TAX_CODE,
    TAX_RATE = X_TAX_RATE,
    TAX_TYPE = X_TAX_TYPE,
    VALIDATE_FLAG = X_VALIDATE_FLAG,
    TAX_ACCOUNT_ID = X_TAX_ACCOUNT_ID,
    START_DATE = X_START_DATE,
    END_DATE = X_END_DATE,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    UNAPPROVED_EXEMPTION_FLAG = X_UNAPPROVED_EXEMPTION_FLAG,
    DESCRIPTION = X_DESCRIPTION,
    VAT_TRANSACTION_TYPE = X_VAT_TRANSACTION_TYPE,
    GLOBAL_ATTRIBUTE1 = X_GLOBAL_ATTRIBUTE1,
    GLOBAL_ATTRIBUTE2 = X_GLOBAL_ATTRIBUTE2,
    GLOBAL_ATTRIBUTE3 = X_GLOBAL_ATTRIBUTE3,
    GLOBAL_ATTRIBUTE4 = X_GLOBAL_ATTRIBUTE4,
    GLOBAL_ATTRIBUTE5 = X_GLOBAL_ATTRIBUTE5,
    GLOBAL_ATTRIBUTE6 = X_GLOBAL_ATTRIBUTE6,
    GLOBAL_ATTRIBUTE7 = X_GLOBAL_ATTRIBUTE7,
    GLOBAL_ATTRIBUTE8 = X_GLOBAL_ATTRIBUTE8,
    GLOBAL_ATTRIBUTE9 = X_GLOBAL_ATTRIBUTE9,
    GLOBAL_ATTRIBUTE10 = X_GLOBAL_ATTRIBUTE10,
    GLOBAL_ATTRIBUTE11 = X_GLOBAL_ATTRIBUTE11,
    GLOBAL_ATTRIBUTE12 = X_GLOBAL_ATTRIBUTE12,
    GLOBAL_ATTRIBUTE13 = X_GLOBAL_ATTRIBUTE13,
    GLOBAL_ATTRIBUTE14 = X_GLOBAL_ATTRIBUTE14,
    GLOBAL_ATTRIBUTE15 = X_GLOBAL_ATTRIBUTE15,
    GLOBAL_ATTRIBUTE16 = X_GLOBAL_ATTRIBUTE16,
    GLOBAL_ATTRIBUTE17 = X_GLOBAL_ATTRIBUTE17,
    GLOBAL_ATTRIBUTE18 = X_GLOBAL_ATTRIBUTE18,
    GLOBAL_ATTRIBUTE19 = X_GLOBAL_ATTRIBUTE19,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    ORG_ID = X_ORG_ID,
    TAX_REGIME_CODE = X_TAX_REGIME_CODE,
    TAX = X_TAX,
    TAX_STATUS_CODE = X_TAX_STATUS_CODE
  where VAT_TAX_ID = X_VAT_TAX_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update AR_VAT_TAX_ALL_TL set
    PRINTED_TAX_NAME = X_PRINTED_TAX_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where VAT_TAX_ID = X_VAT_TAX_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);
/*  and   NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
        NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99); */

  if (sql%notfound) then
    raise no_data_found;
  end if;

  --
  -- Bug 3905897 : Activating a call to zx_upgrade_control_pkg
  --               by removing comment.

  --  Bug 3970600    Temporarily comment out for dependency issue
  -- Bug 3554056
  -- Implemted eTBax sync procedure
  ZX_UPGRADE_CONTROL_PKG.SYNC_AR_VAT_TAX (
  P_DML_TYPE => 'U',
  P_ORG_ID  => NULL,
  P_VAT_TAX_ID => X_VAT_TAX_ID,
  P_TAX_CONSTRAINT_ID => X_TAX_CONSTRAINT_ID,
  P_TAX_CLASS => X_TAX_CLASS,
  P_DISPLAYED_FLAG => X_DISPLAYED_FLAG,
  P_ENABLED_FLAG => X_ENABLED_FLAG,
  P_AMOUNT_INCLUDES_TAX_FLAG => X_AMOUNT_INCLUDES_TAX_FLAG,
  P_AMOUNT_INCLUDES_TAX_OVERRIDE => X_AMOUNT_INCLUDES_TAX_OVERRIDE,
  P_TAXABLE_BASIS => X_TAXABLE_BASIS,
  P_TAX_CALCULATION_PLSQL_BLOCK => X_TAX_CALCULATION_PLSQL_BLOCK,
  P_INTERIM_TAX_CCID => X_INTERIM_TAX_CCID,
  P_ADJ_CCID => X_ADJ_CCID,
  P_EDISC_CCID => X_EDISC_CCID,
  P_UNEDISC_CCID => X_UNEDISC_CCID,
  P_FINCHRG_CCID => X_FINCHRG_CCID,
  P_ADJ_NON_REC_TAX_CCID => X_ADJ_NON_REC_TAX_CCID,
  P_EDISC_NON_REC_TAX_CCID => X_EDISC_NON_REC_TAX_CCID,
  P_UNEDISC_NON_REC_TAX_CCID => X_UNEDISC_NON_REC_TAX_CCID,
  P_FINCHRG_NON_REC_TAX_CCID => X_FINCHRG_NON_REC_TAX_CCID,
  P_SET_OF_BOOKS_ID => X_SET_OF_BOOKS_ID,
  P_TAX_CODE => X_TAX_CODE,
  P_TAX_RATE => X_TAX_RATE,
  P_TAX_TYPE => X_TAX_TYPE,
  P_VALIDATE_FLAG => X_VALIDATE_FLAG,
  P_TAX_ACCOUNT_ID => X_TAX_ACCOUNT_ID,
  P_START_DATE => X_START_DATE,
  P_END_DATE => X_END_DATE,
  P_ATTRIBUTE_CATEGORY => X_ATTRIBUTE_CATEGORY,
  P_ATTRIBUTE1 => X_ATTRIBUTE1,
  P_ATTRIBUTE2 => X_ATTRIBUTE2,
  P_ATTRIBUTE3 => X_ATTRIBUTE3,
  P_ATTRIBUTE4 => X_ATTRIBUTE4,
  P_ATTRIBUTE5 => X_ATTRIBUTE5,
  P_ATTRIBUTE6 => X_ATTRIBUTE6,
  P_ATTRIBUTE7 => X_ATTRIBUTE7,
  P_ATTRIBUTE8 => X_ATTRIBUTE8,
  P_ATTRIBUTE9 => X_ATTRIBUTE9,
  P_ATTRIBUTE10 => X_ATTRIBUTE10,
  P_ATTRIBUTE11 => X_ATTRIBUTE11,
  P_ATTRIBUTE12 => X_ATTRIBUTE12,
  P_ATTRIBUTE13 => X_ATTRIBUTE13,
  P_ATTRIBUTE14 => X_ATTRIBUTE14,
  P_ATTRIBUTE15 => X_ATTRIBUTE15,
  P_UNAPPROVED_EXEMPTION_FLAG => X_UNAPPROVED_EXEMPTION_FLAG,
  P_DESCRIPTION => X_DESCRIPTION,
  P_VAT_TRANSACTION_TYPE => X_VAT_TRANSACTION_TYPE,
  P_GLOBAL_ATTRIBUTE_CATEGORY => X_GLOBAL_ATTRIBUTE_CATEGORY,
  P_GLOBAL_ATTRIBUTE1 => X_GLOBAL_ATTRIBUTE1,
  P_GLOBAL_ATTRIBUTE2 => X_GLOBAL_ATTRIBUTE2,
  P_GLOBAL_ATTRIBUTE3 => X_GLOBAL_ATTRIBUTE3,
  P_GLOBAL_ATTRIBUTE4 => X_GLOBAL_ATTRIBUTE4,
  P_GLOBAL_ATTRIBUTE5 => X_GLOBAL_ATTRIBUTE5,
  P_GLOBAL_ATTRIBUTE6 => X_GLOBAL_ATTRIBUTE6,
  P_GLOBAL_ATTRIBUTE7 => X_GLOBAL_ATTRIBUTE7,
  P_GLOBAL_ATTRIBUTE8 => X_GLOBAL_ATTRIBUTE8,
  P_GLOBAL_ATTRIBUTE9 => X_GLOBAL_ATTRIBUTE9,
  P_GLOBAL_ATTRIBUTE10 => X_GLOBAL_ATTRIBUTE10,
  P_GLOBAL_ATTRIBUTE11 => X_GLOBAL_ATTRIBUTE11,
  P_GLOBAL_ATTRIBUTE12 => X_GLOBAL_ATTRIBUTE12,
  P_GLOBAL_ATTRIBUTE13 => X_GLOBAL_ATTRIBUTE13,
  P_GLOBAL_ATTRIBUTE14 => X_GLOBAL_ATTRIBUTE14,
  P_GLOBAL_ATTRIBUTE15 => X_GLOBAL_ATTRIBUTE15,
  P_GLOBAL_ATTRIBUTE16 => X_GLOBAL_ATTRIBUTE16,
  P_GLOBAL_ATTRIBUTE17 => X_GLOBAL_ATTRIBUTE17,
  P_GLOBAL_ATTRIBUTE18 => X_GLOBAL_ATTRIBUTE18,
  P_GLOBAL_ATTRIBUTE19 => X_GLOBAL_ATTRIBUTE19,
  P_GLOBAL_ATTRIBUTE20 => X_GLOBAL_ATTRIBUTE20,
  P_PRINTED_TAX_NAME => X_PRINTED_TAX_NAME,
  P_CREATION_DATE => NULL,
  P_CREATED_BY => NULL,
  P_LAST_UPDATE_DATE => X_LAST_UPDATE_DATE,
  P_LAST_UPDATED_BY => X_LAST_UPDATED_BY,
  P_LAST_UPDATE_LOGIN => X_LAST_UPDATE_LOGIN,
  P_TAX_REGIME_CODE => X_TAX_REGIME_CODE,
  P_TAX => X_TAX,
  P_TAX_STATUS_CODE => X_TAX_STATUS_CODE);


end UPDATE_ROW;

procedure DELETE_ROW (
  X_VAT_TAX_ID in NUMBER
) is
begin
  delete from AR_VAT_TAX_ALL_TL
  where VAT_TAX_ID = X_VAT_TAX_ID;
/* moac yk  and   NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
        NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99); */

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from AR_VAT_TAX_ALL_B
  where VAT_TAX_ID = X_VAT_TAX_ID;
/* moac yk  and   NVL(ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
        NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
        NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99);  */

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from AR_VAT_TAX_ALL_TL T
  where not exists
    (select NULL
    from AR_VAT_TAX_ALL_B B
    where B.VAT_TAX_ID = T.VAT_TAX_ID
/* moac yk2    and   NVL(B.ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(T.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) */
    );

  update AR_VAT_TAX_ALL_TL T set (
      PRINTED_TAX_NAME
    ) = (select
      B.PRINTED_TAX_NAME
    from AR_VAT_TAX_ALL_TL B
    where B.VAT_TAX_ID = T.VAT_TAX_ID
    and B.LANGUAGE = T.SOURCE_LANG
/* moac yk3    and   NVL(B.ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(T.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) */ )
  where (
      T.VAT_TAX_ID,
      T.LANGUAGE
  ) in (select
      SUBT.VAT_TAX_ID,
      SUBT.LANGUAGE
    from AR_VAT_TAX_ALL_TL SUBB, AR_VAT_TAX_ALL_TL SUBT
    where SUBB.VAT_TAX_ID = SUBT.VAT_TAX_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
/* moac yk4    and   NVL(SUBB.ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(SUBT.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) */
    and (SUBB.PRINTED_TAX_NAME <> SUBT.PRINTED_TAX_NAME
      or (SUBB.PRINTED_TAX_NAME is null and SUBT.PRINTED_TAX_NAME is not null)
      or (SUBB.PRINTED_TAX_NAME is not null and SUBT.PRINTED_TAX_NAME is null)
  ));

  insert into AR_VAT_TAX_ALL_TL (
    ORG_ID,
    VAT_TAX_ID,
    PRINTED_TAX_NAME,
    LAST_UPDATE_DATE,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.ORG_ID,
    B.VAT_TAX_ID,
    B.PRINTED_TAX_NAME,
    B.LAST_UPDATE_DATE,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from AR_VAT_TAX_ALL_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from AR_VAT_TAX_ALL_TL T
    where T.VAT_TAX_ID = B.VAT_TAX_ID
    and T.LANGUAGE = L.LANGUAGE_CODE
/* moac yk5   and   NVL(T.ORG_ID,NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99)) =
          NVL(B.ORG_ID, NVL(TO_NUMBER(DECODE( SUBSTRB(USERENV('CLIENT_INFO'),1,1),' ',
          NULL, SUBSTRB(USERENV('CLIENT_INFO'),1,10))),-99))*/ );
end ADD_LANGUAGE;


procedure LOAD_ROW (
   X_ORG_ID in NUMBER,
   X_VAT_TAX_ID in NUMBER,
   X_TAX_CONSTRAINT_ID in NUMBER,
   X_TAX_CLASS in VARCHAR2,
   X_DISPLAYED_FLAG in VARCHAR2,
   X_ENABLED_FLAG in VARCHAR2,
   X_GLOBAL_ATTRIBUTE20 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE_CATEGORY in VARCHAR2,
   X_AMOUNT_INCLUDES_TAX_FLAG in VARCHAR2,
   X_AMOUNT_INCLUDES_TAX_OVERRIDE in VARCHAR2,
   X_TAXABLE_BASIS in VARCHAR2,
   X_TAX_CALCULATION_PLSQL_BLOCK in VARCHAR2,
   X_INTERIM_TAX_CCID in NUMBER,
   X_ADJ_CCID in NUMBER,
   X_EDISC_CCID in NUMBER,
   X_UNEDISC_CCID in NUMBER,
   X_FINCHRG_CCID in NUMBER,
   X_ADJ_NON_REC_TAX_CCID in NUMBER,
   X_EDISC_NON_REC_TAX_CCID in NUMBER,
   X_UNEDISC_NON_REC_TAX_CCID in NUMBER,
   X_FINCHRG_NON_REC_TAX_CCID in NUMBER,
   X_SET_OF_BOOKS_ID in NUMBER,
   X_TAX_CODE in VARCHAR2,
   X_TAX_RATE in NUMBER,
   X_TAX_TYPE in VARCHAR2,
   X_VALIDATE_FLAG in VARCHAR2,
   X_TAX_ACCOUNT_ID in NUMBER,
   X_START_DATE in DATE,
   X_END_DATE in DATE,
   X_ATTRIBUTE_CATEGORY in VARCHAR2,
   X_ATTRIBUTE1 in VARCHAR2,
   X_ATTRIBUTE2 in VARCHAR2,
   X_ATTRIBUTE3 in VARCHAR2,
   X_ATTRIBUTE4 in VARCHAR2,
   X_ATTRIBUTE5 in VARCHAR2,
   X_ATTRIBUTE6 in VARCHAR2,
   X_ATTRIBUTE7 in VARCHAR2,
   X_ATTRIBUTE8 in VARCHAR2,
   X_ATTRIBUTE9 in VARCHAR2,
   X_ATTRIBUTE10 in VARCHAR2,
   X_ATTRIBUTE11 in VARCHAR2,
   X_ATTRIBUTE12 in VARCHAR2,
   X_ATTRIBUTE13 in VARCHAR2,
   X_ATTRIBUTE14 in VARCHAR2,
   X_ATTRIBUTE15 in VARCHAR2,
   X_UNAPPROVED_EXEMPTION_FLAG in VARCHAR2,
   X_DESCRIPTION in VARCHAR2,
   X_VAT_TRANSACTION_TYPE in VARCHAR2,
   X_GLOBAL_ATTRIBUTE1 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE2 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE3 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE4 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE5 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE6 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE7 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE8 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE9 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE10 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE11 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE12 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE13 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE14 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE15 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE16 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE17 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE18 in VARCHAR2,
   X_GLOBAL_ATTRIBUTE19 in VARCHAR2,
   X_PRINTED_TAX_NAME in VARCHAR2,
   X_ADJUSTMENT_TAX_CODE in VARCHAR2,
   X_OWNER in VARCHAR2,
   X_LEASING_FLAG in VARCHAR2 DEFAULT 'N',
   X_TAX_REGIME_CODE in VARCHAR2  DEFAULT  NULL,
   X_TAX             in VARCHAR2  DEFAULT  NULL,
   X_TAX_STATUS_CODE in VARCHAR2  DEFAULT  NULL
      ) IS
begin
  declare
     user_id            number := 0;
     row_id             varchar2(64);

  begin

     if (X_OWNER = 'SEED') then
        user_id := -1;
     end if;

     begin
     AR_VAT_TAX_PKG.UPDATE_ROW (
         X_ORG_ID => X_ORG_ID,
         X_VAT_TAX_ID => X_VAT_TAX_ID,
         X_TAX_CONSTRAINT_ID => X_TAX_CONSTRAINT_ID,
         X_TAX_CLASS => X_TAX_CLASS,
         X_DISPLAYED_FLAG => X_DISPLAYED_FLAG,
         X_ENABLED_FLAG => X_ENABLED_FLAG ,
         X_GLOBAL_ATTRIBUTE20 => X_GLOBAL_ATTRIBUTE20,
         X_GLOBAL_ATTRIBUTE_CATEGORY => X_GLOBAL_ATTRIBUTE_CATEGORY,
         X_AMOUNT_INCLUDES_TAX_FLAG => X_AMOUNT_INCLUDES_TAX_FLAG,
         X_AMOUNT_INCLUDES_TAX_OVERRIDE => X_AMOUNT_INCLUDES_TAX_OVERRIDE ,
         X_TAXABLE_BASIS => X_TAXABLE_BASIS,
         X_TAX_CALCULATION_PLSQL_BLOCK => X_TAX_CALCULATION_PLSQL_BLOCK,
         X_INTERIM_TAX_CCID => X_INTERIM_TAX_CCID,
         X_ADJ_CCID => X_ADJ_CCID,
         X_EDISC_CCID => X_EDISC_CCID,
         X_UNEDISC_CCID => X_UNEDISC_CCID,
         X_FINCHRG_CCID => X_FINCHRG_CCID,
         X_ADJ_NON_REC_TAX_CCID => X_ADJ_NON_REC_TAX_CCID,
         X_EDISC_NON_REC_TAX_CCID => X_EDISC_NON_REC_TAX_CCID,
         X_UNEDISC_NON_REC_TAX_CCID => X_UNEDISC_NON_REC_TAX_CCID,
         X_FINCHRG_NON_REC_TAX_CCID => X_FINCHRG_NON_REC_TAX_CCID,
         X_SET_OF_BOOKS_ID => X_SET_OF_BOOKS_ID,
         X_TAX_CODE => X_TAX_CODE,
         X_TAX_RATE => X_TAX_RATE,
         X_TAX_TYPE => X_TAX_TYPE,
         X_VALIDATE_FLAG => X_VALIDATE_FLAG,
         X_TAX_ACCOUNT_ID => X_TAX_ACCOUNT_ID,
         X_START_DATE => X_START_DATE,
         X_END_DATE => X_END_DATE,
         X_ATTRIBUTE_CATEGORY => X_ATTRIBUTE_CATEGORY,
         X_ATTRIBUTE1 => X_ATTRIBUTE1,
         X_ATTRIBUTE2 => X_ATTRIBUTE2,
         X_ATTRIBUTE3 => X_ATTRIBUTE3,
         X_ATTRIBUTE4 => X_ATTRIBUTE4,
         X_ATTRIBUTE5 => X_ATTRIBUTE5,
         X_ATTRIBUTE6 => X_ATTRIBUTE6,
         X_ATTRIBUTE7 => X_ATTRIBUTE7,
         X_ATTRIBUTE8 => X_ATTRIBUTE8,
         X_ATTRIBUTE9 => X_ATTRIBUTE9,
         X_ATTRIBUTE10 => X_ATTRIBUTE10,
         X_ATTRIBUTE11 => X_ATTRIBUTE11,
         X_ATTRIBUTE12 => X_ATTRIBUTE12,
         X_ATTRIBUTE13 => X_ATTRIBUTE13,
         X_ATTRIBUTE14 => X_ATTRIBUTE14,
         X_ATTRIBUTE15 => X_ATTRIBUTE15,
         X_UNAPPROVED_EXEMPTION_FLAG => X_UNAPPROVED_EXEMPTION_FLAG,
         X_DESCRIPTION => X_DESCRIPTION,
         X_VAT_TRANSACTION_TYPE => X_VAT_TRANSACTION_TYPE,
         X_GLOBAL_ATTRIBUTE1 => X_GLOBAL_ATTRIBUTE1,
         X_GLOBAL_ATTRIBUTE2 => X_GLOBAL_ATTRIBUTE2,
         X_GLOBAL_ATTRIBUTE3 => X_GLOBAL_ATTRIBUTE3,
         X_GLOBAL_ATTRIBUTE4 => X_GLOBAL_ATTRIBUTE4,
         X_GLOBAL_ATTRIBUTE5 => X_GLOBAL_ATTRIBUTE5,
         X_GLOBAL_ATTRIBUTE6 => X_GLOBAL_ATTRIBUTE6,
         X_GLOBAL_ATTRIBUTE7 => X_GLOBAL_ATTRIBUTE7,
         X_GLOBAL_ATTRIBUTE8 => X_GLOBAL_ATTRIBUTE8,
         X_GLOBAL_ATTRIBUTE9 => X_GLOBAL_ATTRIBUTE9,
         X_GLOBAL_ATTRIBUTE10 => X_GLOBAL_ATTRIBUTE10,
         X_GLOBAL_ATTRIBUTE11 => X_GLOBAL_ATTRIBUTE11,
         X_GLOBAL_ATTRIBUTE12 => X_GLOBAL_ATTRIBUTE12,
         X_GLOBAL_ATTRIBUTE13 => X_GLOBAL_ATTRIBUTE13,
         X_GLOBAL_ATTRIBUTE14 => X_GLOBAL_ATTRIBUTE14,
         X_GLOBAL_ATTRIBUTE15 => X_GLOBAL_ATTRIBUTE15,
         X_GLOBAL_ATTRIBUTE16 => X_GLOBAL_ATTRIBUTE16,
         X_GLOBAL_ATTRIBUTE17 => X_GLOBAL_ATTRIBUTE17,
         X_GLOBAL_ATTRIBUTE18 => X_GLOBAL_ATTRIBUTE18,
         X_GLOBAL_ATTRIBUTE19 => X_GLOBAL_ATTRIBUTE19,
         X_PRINTED_TAX_NAME => X_PRINTED_TAX_NAME,
         X_ADJUSTMENT_TAX_CODE => X_ADJUSTMENT_TAX_CODE,
         X_LAST_UPDATE_DATE => sysdate,
         X_LAST_UPDATED_BY => user_id,
         X_LAST_UPDATE_LOGIN => 0,
         X_LEASING_FLAG => X_LEASING_FLAG,
         X_TAX_REGIME_CODE => X_TAX_REGIME_CODE,
         X_TAX => X_TAX,
         X_TAX_STATUS_CODE => X_TAX_STATUS_CODE
        );

    exception
       when NO_DATA_FOUND then
           AR_VAT_TAX_PKG.INSERT_ROW (
               X_ROWID => row_id,
               X_ORG_ID => X_ORG_ID,
               X_VAT_TAX_ID => X_VAT_TAX_ID,
               X_TAX_CONSTRAINT_ID => X_TAX_CONSTRAINT_ID,
               X_TAX_CLASS => X_TAX_CLASS,
               X_DISPLAYED_FLAG => X_DISPLAYED_FLAG,
               X_ENABLED_FLAG => X_ENABLED_FLAG,
               X_GLOBAL_ATTRIBUTE20 => X_GLOBAL_ATTRIBUTE20,
               X_GLOBAL_ATTRIBUTE_CATEGORY => X_GLOBAL_ATTRIBUTE_CATEGORY,
               X_AMOUNT_INCLUDES_TAX_FLAG => X_AMOUNT_INCLUDES_TAX_FLAG,
               X_AMOUNT_INCLUDES_TAX_OVERRIDE => X_AMOUNT_INCLUDES_TAX_OVERRIDE,
               X_TAXABLE_BASIS => X_TAXABLE_BASIS,
               X_TAX_CALCULATION_PLSQL_BLOCK => X_TAX_CALCULATION_PLSQL_BLOCK,
               X_INTERIM_TAX_CCID => X_INTERIM_TAX_CCID,
               X_ADJ_CCID => X_ADJ_CCID,
               X_EDISC_CCID => X_EDISC_CCID ,
               X_UNEDISC_CCID => X_UNEDISC_CCID,
               X_FINCHRG_CCID => X_FINCHRG_CCID,
               X_ADJ_NON_REC_TAX_CCID => X_ADJ_NON_REC_TAX_CCID,
               X_EDISC_NON_REC_TAX_CCID => X_EDISC_NON_REC_TAX_CCID,
               X_UNEDISC_NON_REC_TAX_CCID => X_UNEDISC_NON_REC_TAX_CCID,
               X_FINCHRG_NON_REC_TAX_CCID => X_FINCHRG_NON_REC_TAX_CCID,
               X_SET_OF_BOOKS_ID => X_SET_OF_BOOKS_ID,
               X_TAX_CODE => X_TAX_CODE,
               X_TAX_RATE => X_TAX_RATE,
               X_TAX_TYPE => X_TAX_TYPE,
               X_VALIDATE_FLAG => X_VALIDATE_FLAG,
               X_TAX_ACCOUNT_ID => X_TAX_ACCOUNT_ID,
               X_START_DATE => X_START_DATE,
               X_END_DATE => X_END_DATE,
               X_ATTRIBUTE_CATEGORY => X_ATTRIBUTE_CATEGORY,
               X_ATTRIBUTE1 => X_ATTRIBUTE1,
               X_ATTRIBUTE2 => X_ATTRIBUTE2,
               X_ATTRIBUTE3 => X_ATTRIBUTE3,
               X_ATTRIBUTE4 => X_ATTRIBUTE4,
               X_ATTRIBUTE5 => X_ATTRIBUTE5,
               X_ATTRIBUTE6 => X_ATTRIBUTE6,
               X_ATTRIBUTE7 => X_ATTRIBUTE7,
               X_ATTRIBUTE8 => X_ATTRIBUTE8,
               X_ATTRIBUTE9 => X_ATTRIBUTE9,
               X_ATTRIBUTE10 => X_ATTRIBUTE10,
               X_ATTRIBUTE11 => X_ATTRIBUTE11,
               X_ATTRIBUTE12 => X_ATTRIBUTE12,
               X_ATTRIBUTE13 => X_ATTRIBUTE13,
               X_ATTRIBUTE14 => X_ATTRIBUTE14,
               X_ATTRIBUTE15 => X_ATTRIBUTE15,
               X_UNAPPROVED_EXEMPTION_FLAG => X_UNAPPROVED_EXEMPTION_FLAG,
               X_DESCRIPTION => X_DESCRIPTION,
               X_VAT_TRANSACTION_TYPE => X_VAT_TRANSACTION_TYPE,
               X_GLOBAL_ATTRIBUTE1 => X_GLOBAL_ATTRIBUTE1,
               X_GLOBAL_ATTRIBUTE2 => X_GLOBAL_ATTRIBUTE2,
               X_GLOBAL_ATTRIBUTE3 => X_GLOBAL_ATTRIBUTE3,
               X_GLOBAL_ATTRIBUTE4 => X_GLOBAL_ATTRIBUTE4,
               X_GLOBAL_ATTRIBUTE5 => X_GLOBAL_ATTRIBUTE5,
               X_GLOBAL_ATTRIBUTE6 => X_GLOBAL_ATTRIBUTE6,
               X_GLOBAL_ATTRIBUTE7 => X_GLOBAL_ATTRIBUTE7,
               X_GLOBAL_ATTRIBUTE8 => X_GLOBAL_ATTRIBUTE8,
               X_GLOBAL_ATTRIBUTE9 => X_GLOBAL_ATTRIBUTE9,
               X_GLOBAL_ATTRIBUTE10 => X_GLOBAL_ATTRIBUTE10,
               X_GLOBAL_ATTRIBUTE11 => X_GLOBAL_ATTRIBUTE11,
               X_GLOBAL_ATTRIBUTE12 => X_GLOBAL_ATTRIBUTE12,
               X_GLOBAL_ATTRIBUTE13 => X_GLOBAL_ATTRIBUTE13,
               X_GLOBAL_ATTRIBUTE14 => X_GLOBAL_ATTRIBUTE14,
               X_GLOBAL_ATTRIBUTE15 => X_GLOBAL_ATTRIBUTE15,
               X_GLOBAL_ATTRIBUTE16 => X_GLOBAL_ATTRIBUTE16,
               X_GLOBAL_ATTRIBUTE17 => X_GLOBAL_ATTRIBUTE17,
               X_GLOBAL_ATTRIBUTE18 => X_GLOBAL_ATTRIBUTE18,
               X_GLOBAL_ATTRIBUTE19 => X_GLOBAL_ATTRIBUTE19,
               X_PRINTED_TAX_NAME => X_PRINTED_TAX_NAME,
               X_ADJUSTMENT_TAX_CODE => X_ADJUSTMENT_TAX_CODE,
               X_CREATION_DATE => sysdate,
               X_CREATED_BY => user_id,
               X_LAST_UPDATE_DATE => sysdate,
               X_LAST_UPDATED_BY => user_id,
               X_LAST_UPDATE_LOGIN => 0,
               X_LEASING_FLAG => X_LEASING_FLAG,
               X_TAX_REGIME_CODE => X_TAX_REGIME_CODE,
               X_TAX => X_TAX,
               X_TAX_STATUS_CODE => X_TAX_STATUS_CODE);
      end;
    end;
end LOAD_ROW;

procedure TRANSLATE_ROW (
  X_VAT_TAX_ID in NUMBER,
  X_PRINTED_TAX_NAME in VARCHAR2,
  X_OWNER in VARCHAR2) IS
begin

    -- note org_id is not used here because in NLS mode it is important
    -- update a line id across all orgs because data will be translated
    -- only once for a single org

    update AR_VAT_TAX_ALL_TL
      set PRINTED_TAX_NAME = X_PRINTED_TAX_NAME,
          source_lang = userenv('LANG'),
          last_update_date = sysdate,
          last_updated_by = decode(X_OWNER, 'SEED', -1, 0),
          last_update_login = 0
    where vat_tax_id = X_VAT_TAX_ID
    and   userenv('LANG') in (language, source_lang);

end TRANSLATE_ROW;

end AR_VAT_TAX_PKG;

/
