--------------------------------------------------------
--  DDL for Package Body ZX_ZXARRECV_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ZX_ZXARRECV_XMLP_PKG" AS
/* $Header: ZXARRECVB.pls 120.2.12010000.1 2008/07/28 13:27:49 appldev ship $ */
  L_FIRST NUMBER;

  L_LAST NUMBER;

  L_DIFF NUMBER;

  L_PRIOR NUMBER;

  L_MISSING_SEQUENCE VARCHAR2(30000);

  L_CURR_TRX_SOURCE_NAME VARCHAR2(50) := '<different>';

  L_BATCH_SOURCE_ID NUMBER;

  LP_INVOICE_WORD VARCHAR2(2);

  LP_INITIAL_TRX_NUM NUMBER;

  LP_FINAL_TRX_NUM NUMBER;

  NL CONSTANT VARCHAR2(1) DEFAULT fnd_global.local_chr(10);

  C_GUI_NUMBER VARCHAR2(15);

  C_GUI_TYPE VARCHAR2(2);

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    ERRBUF VARCHAR2(2000);
    RETCODE NUMBER;
    INIT_FAILURE EXCEPTION;
    DUMMY VARCHAR2(1000);
    L_SET_OF_BOOKS_ID APPS.GL_SETS_OF_BOOKS.SET_OF_BOOKS_ID%TYPE;
    L_PERIOD_FROM APPS.GL_PERIOD_STATUSES.PERIOD_NAME%TYPE;
    L_PERIOD_TO APPS.GL_PERIOD_STATUSES.PERIOD_NAME%TYPE;
    L_DETAIL_LEVEL AR_LOOKUPS.MEANING%TYPE;
    L_INCLUDE_TRX_TYPE VARCHAR2(1000);
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    LP_ACCT_PERIOD_FROM := P_ACCT_PERIOD_FROM;
    LP_ACCT_PERIOD_TO := P_ACCT_PERIOD_TO;
    IF INITIALIZE <> TRUE THEN
      RAISE INIT_FAILURE;
    END IF;
    IF GET_GL_DATE <> TRUE THEN
      RAISE INIT_FAILURE;
    END IF;
    P_RESPONSIBILITY_NAME := FND_GLOBAL.RESP_NAME;
    P_USER_NAME := FND_GLOBAL.USER_NAME;
    IF CALL_TRL_ENGINE <> TRUE THEN
      RAISE INIT_FAILURE;
    END IF;
    SELECT
      COUNT(1)
    INTO CP_TRL_ROW_COUNT
    FROM
      ZX_REP_CONTEXT_T CON,
      ZX_REP_TRX_DETAIL_T DET
    WHERE CON.REQUEST_ID = P_CONC_REQUEST_ID
      AND DET.REQUEST_ID = CON.REQUEST_ID
      AND NVL(DET.REP_CONTEXT_ID
       ,CON.REP_CONTEXT_ID) = CON.REP_CONTEXT_ID;
    BEGIN
      SELECT
        GL.SET_OF_BOOKS_ID
      INTO L_SET_OF_BOOKS_ID
      FROM
        GL_SETS_OF_BOOKS GL,
        AR_SYSTEM_PARAMETERS AR
      WHERE GL.SET_OF_BOOKS_ID = AR.SET_OF_BOOKS_ID;
      SELECT
        GL.PERIOD_NAME
      INTO L_PERIOD_FROM
      FROM
        GL_PERIOD_STATUSES GL,
        AR_SYSTEM_PARAMETERS AR
      WHERE GL.START_DATE = P_GL_DATE_LOW
        AND GL.SET_OF_BOOKS_ID = L_SET_OF_BOOKS_ID
        AND GL.APPLICATION_ID = 222
        AND ROWNUM = 1;
      SELECT
        GL.PERIOD_NAME
      INTO L_PERIOD_TO
      FROM
        GL_PERIOD_STATUSES GL,
        AR_SYSTEM_PARAMETERS AR
      WHERE GL.END_DATE = P_GL_DATE_HIGH
        AND GL.SET_OF_BOOKS_ID = L_SET_OF_BOOKS_ID
        AND GL.APPLICATION_ID = 222
        AND ROWNUM = 1;
      IF (P_ACCT_PERIOD_FROM IS NULL) THEN
        LP_ACCT_PERIOD_FROM := L_PERIOD_FROM;
      END IF;
      IF (P_ACCT_PERIOD_TO IS NULL) THEN
        LP_ACCT_PERIOD_TO := L_PERIOD_TO;
      END IF;
      P_GL_ACTIVITY_DISPLAY_FLAG := '1';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_GL_ACTIVITY_DISPLAY_FLAG := '0';

      WHEN OTHERS THEN
        NULL;

    END;
    BEGIN
      CP_DETAIL_LEVEL_MNG := P_DETAIL_LEVEL;
      IF (P_REPORT_NAME = 'ZXXVATRN') THEN
        SELECT
          MEANING
        INTO L_DETAIL_LEVEL
        FROM
          AR_LOOKUPS
        WHERE LOOKUP_TYPE = 'ARXVATRN_DETAIL_OPTION'
          AND LOOKUP_CODE = P_DETAIL_LEVEL;
        CP_DETAIL_LEVEL_MNG := L_DETAIL_LEVEL;
        IF (P_INCLUDE_AR_INV_TRX_CLASS = 'Y') THEN
          L_INCLUDE_TRX_TYPE := L_INCLUDE_TRX_TYPE || 'Accruals' || ' ';
        END IF;
        IF (P_INCLUDE_AR_APPL_TRX_CLASS = 'Y') THEN
          L_INCLUDE_TRX_TYPE := L_INCLUDE_TRX_TYPE || 'Applications' || ' ';
        END IF;
        IF (P_INCLUDE_DISCOUNTS = 'Y') THEN
          L_INCLUDE_TRX_TYPE := L_INCLUDE_TRX_TYPE || 'Discounts' || ' ';
        END IF;
        IF (P_INCLUDE_AR_ADJ_TRX_CLASS = 'Y') THEN
          L_INCLUDE_TRX_TYPE := L_INCLUDE_TRX_TYPE || 'Adjustments' || ' ';
        END IF;
        IF (P_INCLUDE_AR_MISC_TRX_CLASS = 'Y') THEN
          L_INCLUDE_TRX_TYPE := L_INCLUDE_TRX_TYPE || 'Miscellaneous Cash' || ' ';
        END IF;
        IF (P_INCLUDE_AR_BR_TRX_CLASS = 'Y') THEN
          L_INCLUDE_TRX_TYPE := L_INCLUDE_TRX_TYPE || 'Bills Receivable';
        END IF;
        CP_INCLUDE_TRX_TYPE := L_INCLUDE_TRX_TYPE;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;

    END;
    BEGIN
      IF P_REP_CONTEXT_LVL_MNG = '1000' THEN
        SELECT
          SOB.NAME
        INTO P_COMPANY_NAME_DESC
        FROM
          GL_SETS_OF_BOOKS SOB
        WHERE SET_OF_BOOKS_ID = P_REP_CONTEXT_ENTITY_NAME;
      ELSIF P_REP_CONTEXT_LVL_MNG = '2000' THEN
        SELECT
          LEDGER_NAME
        INTO P_COMPANY_NAME_DESC
        FROM
          GL_LEDGER_LE_V
        WHERE LEGAL_ENTITY_ID = P_REP_CONTEXT_ENTITY_NAME;
      ELSIF P_REP_CONTEXT_LVL_MNG = '3000' THEN
        SELECT
          SOB.NAME
        INTO P_COMPANY_NAME_DESC
        FROM
          HR_OPERATING_UNITS HR,
          GL_SETS_OF_BOOKS SOB
        WHERE HR.SET_OF_BOOKS_ID = SOB.SET_OF_BOOKS_ID
          AND HR.ORGANIZATION_ID = P_REP_CONTEXT_ENTITY_NAME;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;

    END;
    RETURN (TRUE);
  EXCEPTION
    WHEN INIT_FAILURE THEN
      RETURN (FALSE);

    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20101
                             ,NULL);

  END BEFOREREPORT;

  FUNCTION GET_GL_DATE RETURN BOOLEAN IS
    L_START_DATE DATE;
    L_END_DATE DATE;
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);

  END GET_GL_DATE;

  FUNCTION INITIALIZE RETURN BOOLEAN IS
    NLS_NO_DATA_FOUND VARCHAR2(50);
    NLS_END_OF_REPORT VARCHAR2(50);
    INIT_EXCEPTION EXCEPTION;
    L_CANONICAL_DATE VARCHAR2(200);
  BEGIN
    FND_MO_REPORTING_API.INITIALIZE(P_REP_CONTEXT_LVL_MNG
                                   ,P_REP_CONTEXT_ENTITY_NAME
                                   ,'AUTO');
    CP_REPORTING_LEVEL_NAME := FND_MO_REPORTING_API.GET_REPORTING_LEVEL_NAME;
    CP_REPORTING_ENTITY_NAME := FND_MO_REPORTING_API.GET_REPORTING_ENTITY_NAME;
    FND_MESSAGE.SET_NAME('JL'
                        ,'JL_ZZ_NO_DATA_FOUND');
    NLS_NO_DATA_FOUND := '**** ' || SUBSTR(FND_MESSAGE.GET
                               ,1
                               ,35) || ' ****';
    FND_MESSAGE.SET_NAME('JL'
                        ,'JL_ZZ_END_OF_REPORT');
    NLS_END_OF_REPORT := '**** ' || SUBSTR(FND_MESSAGE.GET
                               ,1
                               ,35) || ' ****';
    CP_NO_DATA_FOUND := NLS_NO_DATA_FOUND;
    CP_END_OF_REPORT := NLS_END_OF_REPORT;
    SELECT
      MEANING
    INTO CP_NLS_YES
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = 'Y';
    SELECT
      MEANING
    INTO CP_NLS_NO
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = 'N';
    IF GET_DATE_FORMAT <> TRUE THEN
      RAISE INIT_EXCEPTION;
    END IF;
    IF SET_REPORT_TITLE <> TRUE THEN
      RETURN FALSE;
    END IF;
    BEGIN
      L_CANONICAL_DATE := FND_DATE.DATE_TO_CANONICAL(P_GL_DATE_LOW);
      P_TW_GL_DATE_LOW := TO_CHAR(TO_NUMBER(SUBSTRB(L_CANONICAL_DATE
                                                   ,1
                                                   ,4)) - 1911) || '/' || SUBSTRB(L_CANONICAL_DATE
                                 ,6
                                 ,5);
      L_CANONICAL_DATE := FND_DATE.DATE_TO_CANONICAL(P_GL_DATE_HIGH);
      P_TW_GL_DATE_HIGH := TO_CHAR(TO_NUMBER(SUBSTRB(L_CANONICAL_DATE
                                                    ,1
                                                    ,4)) - 1911) || '/' || SUBSTRB(L_CANONICAL_DATE
                                  ,6
                                  ,5);
      L_CANONICAL_DATE := FND_DATE.DATE_TO_CANONICAL(P_TRX_DATE_LOW);
      P_TW_TRX_DATE_LOW := TO_CHAR(TO_NUMBER(SUBSTRB(L_CANONICAL_DATE
                                                    ,1
                                                    ,4)) - 1911) || '/' || SUBSTRB(L_CANONICAL_DATE
                                  ,6
                                  ,5);
      L_CANONICAL_DATE := FND_DATE.DATE_TO_CANONICAL(P_TRX_DATE_HIGH);
      P_TW_TRX_DATE_HIGH := TO_CHAR(TO_NUMBER(SUBSTRB(L_CANONICAL_DATE
                                                     ,1
                                                     ,4)) - 1911) || '/' || SUBSTRB(L_CANONICAL_DATE
                                   ,6
                                   ,5);
    EXCEPTION
      WHEN OTHERS THEN
        NULL;

    END;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);

  END INITIALIZE;

  FUNCTION CALL_TRL_ENGINE RETURN BOOLEAN IS
    L_TAX_CLASS VARCHAR2(1);
    L_PRODUCT VARCHAR2(15);
    L_POSTING_STATUS VARCHAR2(15);
    L_TRX_DATE_LOW DATE;
    L_TRX_DATE_HIGH DATE;
    L_TRX_NUMBER_LOW VARCHAR2(30);
    L_TRX_NUMBER_HIGH VARCHAR2(30);
    L_APPLIED_TRX_NUMBER_LOW VARCHAR2(30);
    L_APPLIED_TRX_NUMBER_HIGH VARCHAR2(30);
    L_SUMMARY_LEVEL VARCHAR2(30);
    L_TRADING_PARTNER_ID VARCHAR2(200);
    L_RETCODE NUMBER;
    L_ERRBUF VARCHAR2(2000);
  BEGIN
    L_TAX_CLASS := 'O';
    L_SUMMARY_LEVEL := 'TRANSACTION_LINE';
    IF P_REPORT_NAME = 'ZXCLRSSL' THEN
      L_SUMMARY_LEVEL := 'TRANSACTION_LINE';
    END IF;
    IF P_REPORT_NAME in ('ZXXVATRN','ZXCLPPLR','ZXCLRSLL') THEN
      L_SUMMARY_LEVEL := 'TRANSACTION_DISTRIBUTION';
    END IF;
    LP_ACCT_PERIOD_TO := NVL(LP_ACCT_PERIOD_TO
                           ,LP_ACCT_PERIOD_FROM);
    IF P_REPORT_NAME in ('ZXZZTCFF','ZXCLRSLL','ZXTWRVAT','ZXTWRSRD','ZXTHROTS') THEN
      L_POSTING_STATUS := 'POSTED';
    ELSE
      L_POSTING_STATUS := 'ALL';
    END IF;
    ZX_EXTRACT_PKG.POPULATE_TAX_DATA(P_REPORTING_LEVEL => P_REP_CONTEXT_LVL_MNG
                                    ,P_REPORTING_CONTEXT => P_REP_CONTEXT_ENTITY_NAME
                                    ,P_LEGAL_ENTITY_ID => P_COMPANY_NAME
                                    ,P_REPORT_NAME => P_REPORT_NAME
                                    ,P_REGISTER_TYPE => P_TAX_REGISTER_TYPE
                                    ,P_SUMMARY_LEVEL => L_SUMMARY_LEVEL
                                    ,P_PRODUCT => P_PRODUCT
                                    ,P_GL_DATE_LOW => P_GL_DATE_LOW
                                    ,P_GL_DATE_HIGH => P_GL_DATE_HIGH
                                    ,P_TRX_DATE_LOW => P_TRX_DATE_LOW
                                    ,P_TRX_DATE_HIGH => P_TRX_DATE_HIGH
                                    ,P_GL_PERIOD_NAME_LOW => LP_ACCT_PERIOD_FROM
                                    ,P_GL_PERIOD_NAME_HIGH => LP_ACCT_PERIOD_TO
                                    ,P_INCLUDE_AR_INV_TRX_CLASS => P_INCLUDE_AR_INV_TRX_CLASS
                                    ,P_INCLUDE_AR_APPL_TRX_CLASS => P_INCLUDE_AR_APPL_TRX_CLASS
                                    ,P_INCLUDE_AR_ADJ_TRX_CLASS => P_INCLUDE_AR_ADJ_TRX_CLASS
                                    ,P_INCLUDE_AR_MISC_TRX_CLASS => P_INCLUDE_AR_MISC_TRX_CLASS
                                    ,P_INCLUDE_AR_BR_TRX_CLASS => P_INCLUDE_AR_BR_TRX_CLASS
                                    ,P_POSTING_STATUS => L_POSTING_STATUS
                                    ,P_MATRIX_REPORT => 'N'
                                    ,P_INCLUDE_FULLY_NR_TAX_FLAG => 'N'
                                    ,P_TAX_REGIME_CODE => P_TAX_REGIME
                                    ,P_TAX_TYPE_CODE_LOW => P_TAX_TYPE
                                    ,P_TAX_TYPE_CODE_HIGH => P_TAX_TYPE
                                    ,P_TAX_RATE_CODE_LOW => P_TAX_CODE
                                    ,P_TAX_RATE_CODE_HIGH => P_TAX_CODE
                                    ,P_VAT_TAX => P_VAT_TAX_CATEGORY
                                    ,P_VAT_PERCEPTION_TAX => P_VAT_PERC_TAX_CATEGORY
                                    ,P_VAT_ADDITIONAL_TAX => P_VAT_ADDIT_TAX_CATEGORY
                                    ,P_VAT_NOT_TAX => P_VAT_NOT_CATEG_TAX_CATEG
                                    ,P_VAT_NON_TAXABLE_TAX => P_VAT_NON_TAXAB_TAX_CATEG
                                    ,P_PROVINCIAL_TAX => P_TAX_CATEG_REGIME
                                    ,P_MUNICIPAL_TAX => P_MUN_TAX_CATEG_REGIME
                                    ,P_EXCISE_TAX => P_EXC_TAX_CATEGORY
                                    ,P_TRX_LETTER_LOW => P_TRX_LETTER_FROM
                                    ,P_TRX_LETTER_HIGH => P_TRX_LETTER_TO
                                    ,P_BATCH_SOURCE_ID => P_TRX_SOURCE_NAME
                                    ,P_PARTY_NAME => P_CUSTOMER_ID
                                    ,P_INCLUDE_REFERENCED_SOURCE => P_INCLUDE_REFERENCED_SOURCE
                                    ,P_EXP_CERT_DATE_FROM => P_EXPORT_DATE_FROM
                                    ,P_EXP_CERT_DATE_TO => P_EXPORT_DATE_TO
                                    ,P_ADJUSTED_DOC_FROM => P_ORG_TRX_NUMBER_FROM
                                    ,P_ADJUSTED_DOC_TO => P_ORG_TRX_NUMBER_TO
                                    ,P_EXP_METHOD => P_EXP_METHOD
                                    ,P_REQUEST_ID => P_CONC_REQUEST_ID
                                    ,P_ACCOUNTING_STATUS => P_ACCOUNTING_STATUS
                                    ,P_INCLUDE_ACCOUNTING_SEGMENTS => P_INCLUDE_ACCOUNTING_SEGMENTS
                                    ,P_ERRBUF => L_ERRBUF
                                    ,P_RETCODE => L_RETCODE);
    IF L_RETCODE <> 0 THEN
      RETURN (FALSE);
    END IF;
    RETURN (TRUE);
  END CALL_TRL_ENGINE;

  FUNCTION GET_DYNAMIC_CLAUSE RETURN BOOLEAN IS
  BEGIN
    LP_CM_BATCH_SOURCE_NAME := 'NULL';
    LP_CM_TRX_NUMBER := 'NULL';
    LP_FROM_CLAUSE := NULL;
    LP_REPORT_WHERE := NULL;
    LP_DOC_SEQUENCE_ORDER := 'NULL';
    IF P_REPORT_NAME = 'ZXCOARSW' THEN
      LP_CM_BATCH_SOURCE_NAME := 'DET1.trx_batch_source_name';
      LP_CM_TRX_NUMBER := 'DET1.trx_number';
      LP_FROM_CLAUSE := ' ZX_REP_TRX_DETAIL_T  DET1 ';
      LP_REPORT_WHERE := 'DET1.request_id = DET.request_id and rownum <=10 and ';
    ELSIF P_REPORT_NAME = 'ZXCLRSLL' THEN
      LP_DOC_SEQUENCE_ORDER := 'DECODE(EXT.GDF_RA_CUST_TRX_ATT19,
                                                                      NULL, EXT.GDF_RA_CUST_TRX_TYPES_ATT5,
                                                                      EXT1.GDF_RX_CUST_TRX_TYPES_ATT5)';
      LP_FROM_CLAUSE := ', ZX_REP_TRX_DETAIL_T  DET1,
                                                  ZX_REP_TRX_JX_EXT_T  EXT1';
      LP_REPORT_WHERE := ' DET1.request_id = DET.request_id
                                                AND DET1.applied_to_trx_line_id(+) = DET.trx_line_id
                                                AND EXT.gdf_ra_cust_trx_att9 = DET1.trx_type_id
                                                AND EXT1.DETAIL_TAX_LINE_ID = DET1.DETAIL_TAX_LINE_ID';
    END IF;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);

  END GET_DYNAMIC_CLAUSE;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      ZX_EXTRACT_PKG.PURGE(P_CONC_REQUEST_ID);
    EXCEPTION
      WHEN OTHERS THEN
        NULL;

    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION SET_REPORT_TITLE RETURN BOOLEAN IS
  BEGIN
    SELECT
      MEANING
    INTO CP_REPORT_TITLE
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'ZXARRECV'
      AND LOOKUP_CODE = P_REPORT_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      CP_REPORT_TITLE := 'Receivables Tax Report';
      RETURN (TRUE);

    WHEN OTHERS THEN
      RETURN (FALSE);

  END SET_REPORT_TITLE;

  FUNCTION CF_RESPONSIBILITYFORMULA RETURN CHAR IS
  BEGIN
    RETURN (FND_GLOBAL.RESP_NAME);
  END CF_RESPONSIBILITYFORMULA;

  FUNCTION CF_USER_NAMEFORMULA RETURN CHAR IS
  BEGIN
    RETURN (FND_GLOBAL.USER_NAME);
  END CF_USER_NAMEFORMULA;

  PROCEDURE PRINT_MISSING_SEQUENCE IS
    NL CONSTANT VARCHAR2(1) DEFAULT fnd_global.local_chr(10);
  BEGIN
    LP_MISSING_SEQUENCE_FINAL := LP_MISSING_SEQ_FINAL || ' ' || NL || LP_MISSING_SEQ;
  END PRINT_MISSING_SEQUENCE;

  FUNCTION VALIDATE_GUI_NUM(TRX_NUMBER IN VARCHAR2
                           ,TRX_SOURCE IN VARCHAR2) RETURN BOOLEAN IS
    L_DUMMY VARCHAR2(10);
    GUI_PREFIX VARCHAR2(2);
  BEGIN
    GUI_PREFIX := SUBSTR(TRX_NUMBER
                        ,1
                        ,2);
    IF LENGTH(TRX_NUMBER) <> 10 THEN
      RETURN FALSE;
    ELSE
      IF (NVL(RTRIM(TRANSLATE(GUI_PREFIX
                         ,'1234567890'
                         ,'        '))
         ,'0') = '0') THEN
        RETURN FALSE;
      ELSE
        BEGIN
          SELECT
            'SUCCESS'
          INTO L_DUMMY
          FROM
            JG_ZZ_AR_SRC_TRX_TY ST,
            RA_BATCH_SOURCES SRC
          WHERE ST.BATCH_SOURCE_ID = DECODE(SRC.GLOBAL_ATTRIBUTE1
                ,NULL
                ,SRC.BATCH_SOURCE_ID
                ,SRC.GLOBAL_ATTRIBUTE1)
            AND SRC.NAME = TRX_SOURCE
            AND ST.ENABLE_FLAG = 'Y';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            L_DUMMY := 'FAILED';
            RETURN FALSE;

        END;
        RETURN TRUE;
      END IF;
    END IF;
  END VALIDATE_GUI_NUM;

  FUNCTION GET_ROC_DATE(P_DATE IN DATE) RETURN VARCHAR2 IS
    L_DATE DATE := P_DATE;
    L_CANONICAL_DATE VARCHAR2(20);
    L_ROC_YEAR NUMBER(15);
    L_ROC_MMDD VARCHAR2(5);
    L_ROC_DATE VARCHAR2(20);
    L_LOC VARCHAR2(20) := 'Get_Roc_Date';
  BEGIN
    IF P_DATE IS NULL THEN
      RETURN (NULL);
    END IF;
    L_CANONICAL_DATE := FND_DATE.DATE_TO_CANONICAL(L_DATE);
    L_ROC_YEAR := TO_NUMBER(SUBSTRB(L_CANONICAL_DATE
                                   ,1
                                   ,4)) - 1911;
    L_ROC_MMDD := SUBSTRB(L_CANONICAL_DATE
                         ,6
                         ,5);
    L_ROC_DATE := TO_CHAR(L_ROC_YEAR) || '/' || L_ROC_MMDD;
    RETURN (L_ROC_DATE);
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20101
                             ,NULL);

  END GET_ROC_DATE;

  FUNCTION P_TRX_DATE_HIGHVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_TRX_DATE_HIGHVALIDTRIGGER;

  FUNCTION CP_TW_GL_DATE_FROMFORMULA RETURN CHAR IS
  BEGIN
    RETURN (GET_ROC_DATE(NVL(P_TW_GL_DATE_FROM
                           ,P_GL_DATE_LOW)));
  END CP_TW_GL_DATE_FROMFORMULA;

  FUNCTION CP_TW_GL_DATE_TOFORMULA RETURN CHAR IS
  BEGIN
    RETURN (GET_ROC_DATE(NVL(P_TW_GL_DATE_TO
                           ,P_GL_DATE_HIGH)));
  END CP_TW_GL_DATE_TOFORMULA;

  FUNCTION CP_TW_TRX_DATE_LOWFORMULA RETURN CHAR IS
  BEGIN
    RETURN (GET_ROC_DATE(NVL(P_TW_TRX_DATE_LOW
                           ,P_TRX_DATE_LOW)));
  END CP_TW_TRX_DATE_LOWFORMULA;

  FUNCTION CP_TW_TRX_DATE_HIGHFORMULA RETURN CHAR IS
  BEGIN
    RETURN (GET_ROC_DATE(NVL(P_TW_TRX_DATE_HIGH
                           ,P_TRX_DATE_HIGH)));
  END CP_TW_TRX_DATE_HIGHFORMULA;

  FUNCTION CF_TAXABLE_AMTFORMULA(C_TRANSACTION_ID IN NUMBER
                                ,C_TRANSACTION_LINE IN NUMBER) RETURN NUMBER IS
    L_INV_TAXABLE_AMT NUMBER := 0;
  BEGIN
    IF (CP_TRX_ID IS NULL) THEN
      CP_TRX_ID := 0;
    END IF;
    IF (CP_TRX_LINE_ID IS NULL) THEN
      CP_TRX_LINE_ID := 0;
    END IF;
    IF ((CP_TRX_ID <> C_TRANSACTION_ID) OR (CP_TRX_LINE_ID <> C_TRANSACTION_LINE)) THEN
      SELECT
        SUM(A.TAXABLE_AMT)
      INTO L_INV_TAXABLE_AMT
      FROM
        ZX_REP_TRX_DETAIL_T A
      WHERE A.TRX_ID = C_TRANSACTION_ID
        AND A.TRX_LINE_ID = C_TRANSACTION_LINE
        AND A.REQUEST_ID = P_CONC_REQUEST_ID
        AND A.ROWID = (
        SELECT
          MIN(B.ROWID)
        FROM
          ZX_REP_TRX_DETAIL_T B
        WHERE A.TRX_ID = B.TRX_ID
          AND A.TRX_LINE_ID = B.TRX_LINE_ID
          AND B.REQUEST_ID = P_CONC_REQUEST_ID );
    ELSE
      L_INV_TAXABLE_AMT := 0;
    END IF;
    CP_TRX_ID := C_TRANSACTION_ID;
    CP_TRX_LINE_ID := C_TRANSACTION_LINE;
    RETURN (L_INV_TAXABLE_AMT);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;

  END CF_TAXABLE_AMTFORMULA;

  FUNCTION CF_TAXABLE_ACC_AMTFORMULA(C_TRANSACTION_ID IN NUMBER
                                    ,C_TRANSACTION_LINE IN NUMBER) RETURN NUMBER IS
    L_INV_TAXABLE_AMT NUMBER := 0;
  BEGIN
    IF (CP_TRX_ID_ACC IS NULL) THEN
      CP_TRX_ID_ACC := 0;
    END IF;
    IF (CP_TRX_LINE_ID_ACC IS NULL) THEN
      CP_TRX_LINE_ID_ACC := 0;
    END IF;
    IF ((CP_TRX_ID_ACC <> C_TRANSACTION_ID) OR (CP_TRX_LINE_ID_ACC <> C_TRANSACTION_LINE)) THEN
      SELECT
        SUM(A.TAXABLE_AMT_FUNCL_CURR)
      INTO L_INV_TAXABLE_AMT
      FROM
        ZX_REP_TRX_DETAIL_T A
      WHERE A.TRX_ID = C_TRANSACTION_ID
        AND A.TRX_LINE_ID = C_TRANSACTION_LINE
        AND A.REQUEST_ID = P_CONC_REQUEST_ID
        AND A.ROWID = (
        SELECT
          MIN(B.ROWID)
        FROM
          ZX_REP_TRX_DETAIL_T B
        WHERE A.TRX_ID = B.TRX_ID
          AND A.TRX_LINE_ID = B.TRX_LINE_ID
          AND B.REQUEST_ID = P_CONC_REQUEST_ID );
      SELECT
        SUM(NVL(A.TAXABLE_AMT
               ,0) + NVL(A.TAX_AMT
               ,0)),
        SUM(NVL(A.TAXABLE_AMT_FUNCL_CURR
               ,0) + NVL(A.TAX_AMT_FUNCL_CURR
               ,0))
      INTO CF_TOT_AMOUNT,CF_TOT_FUNC_AMT
      FROM
        ZX_REP_TRX_DETAIL_T A
      WHERE A.TRX_ID = C_TRANSACTION_ID
        AND A.TRX_LINE_ID = C_TRANSACTION_LINE
        AND A.REQUEST_ID = P_CONC_REQUEST_ID
        AND A.ROWID = (
        SELECT
          MIN(B.ROWID)
        FROM
          ZX_REP_TRX_DETAIL_T B
        WHERE A.TRX_ID = B.TRX_ID
          AND A.TRX_LINE_ID = B.TRX_LINE_ID
          AND B.REQUEST_ID = P_CONC_REQUEST_ID );
    ELSE
      L_INV_TAXABLE_AMT := 0;
      CF_TOT_AMOUNT := 0;
      CF_TOT_FUNC_AMT := 0;
    END IF;
    CP_TRX_ID_ACC := C_TRANSACTION_ID;
    CP_TRX_LINE_ID_ACC := C_TRANSACTION_LINE;
    RETURN (L_INV_TAXABLE_AMT);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 0;

  END CF_TAXABLE_ACC_AMTFORMULA;

  FUNCTION CP_CUSTOMER_NAMEFORMULA RETURN CHAR IS
    L_CUST_NAME VARCHAR2(200);
  BEGIN
    IF (P_CUSTOMER_ID IS NOT NULL) THEN
      SELECT
        PARTY.PARTY_NAME
      INTO L_CUST_NAME
      FROM
        HZ_CUST_ACCOUNTS CUST,
        HZ_PARTIES PARTY
      WHERE CUST.PARTY_ID = PARTY.PARTY_ID
        AND CUST.CUST_ACCOUNT_ID = P_CUSTOMER_ID;
    END IF;
    RETURN L_CUST_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;

  END CP_CUSTOMER_NAMEFORMULA;

  FUNCTION CF_TW_EXPORT_DATEFORMULA(C_EXPORT_DATE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    RETURN (GET_ROC_DATE(TO_DATE(C_EXPORT_DATE
                               ,'YYYY/MM/DD HH24:MI:SS')));
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;

  END CF_TW_EXPORT_DATEFORMULA;

  FUNCTION CF_LEDGER_CURRENCYFORMULA RETURN CHAR IS
    L_LEDGER_CURRENCY VARCHAR2(200);
  BEGIN
    IF (P_REP_CONTEXT_LVL_MNG = '1000') THEN
      SELECT
        CURRENCY_CODE
      INTO L_LEDGER_CURRENCY
      FROM
        GL_LEDGERS
      WHERE LEDGER_ID = P_REP_CONTEXT_ENTITY_NAME;
    ELSIF (P_REP_CONTEXT_LVL_MNG = '2000') THEN
      SELECT
        CURRENCY_CODE
      INTO L_LEDGER_CURRENCY
      FROM
        GL_LEDGER_LE_V
      WHERE LEGAL_ENTITY_ID = P_REP_CONTEXT_ENTITY_NAME;
    ELSE
      SELECT
        B.CURRENCY_CODE
      INTO L_LEDGER_CURRENCY
      FROM
        HR_OPERATING_UNITS A,
        GL_LEDGERS B
      WHERE A.SET_OF_BOOKS_ID = B.LEDGER_ID
        AND A.ORGANIZATION_ID = P_REP_CONTEXT_ENTITY_NAME;
    END IF;
    RETURN L_LEDGER_CURRENCY;
  EXCEPTION
    WHEN OTHERS THEN
      L_LEDGER_CURRENCY := NULL;
      RETURN L_LEDGER_CURRENCY;

  END CF_LEDGER_CURRENCYFORMULA;

  FUNCTION CF_TOT_FUNC_AMT_P RETURN NUMBER IS
  BEGIN
    RETURN CF_TOT_FUNC_AMT;
  END CF_TOT_FUNC_AMT_P;

  FUNCTION CF_TOT_AMOUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CF_TOT_AMOUNT;
  END CF_TOT_AMOUNT_P;

  FUNCTION CP_TRX_LINE_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TRX_LINE_ID;
  END CP_TRX_LINE_ID_P;

  FUNCTION CP_TRX_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TRX_ID;
  END CP_TRX_ID_P;

  FUNCTION CP_TRX_ID_ACC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TRX_ID_ACC;
  END CP_TRX_ID_ACC_P;

  FUNCTION CP_TRX_LINE_ID_ACC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TRX_LINE_ID_ACC;
  END CP_TRX_LINE_ID_ACC_P;

  FUNCTION LP_FROM_CLAUSE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_FROM_CLAUSE;
  END LP_FROM_CLAUSE_P;

  FUNCTION LP_REPORT_WHERE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_REPORT_WHERE;
  END LP_REPORT_WHERE_P;

  FUNCTION LP_TAX_ACCOUNT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_TAX_ACCOUNT;
  END LP_TAX_ACCOUNT_P;

  FUNCTION LP_EXTENDED_AMOUNT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_EXTENDED_AMOUNT;
  END LP_EXTENDED_AMOUNT_P;

  FUNCTION CP_REPORTING_LEVEL_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORTING_LEVEL_NAME;
  END CP_REPORTING_LEVEL_NAME_P;

  FUNCTION CP_REPORTING_ENTITY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORTING_ENTITY_NAME;
  END CP_REPORTING_ENTITY_NAME_P;

  FUNCTION CP_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_NLS_YES;
  END CP_NLS_YES_P;

  FUNCTION CP_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_NLS_NO;
  END CP_NLS_NO_P;

  FUNCTION CP_REPORT_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORT_TITLE;
  END CP_REPORT_TITLE_P;

  FUNCTION CP_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_NO_DATA_FOUND;
  END CP_NO_DATA_FOUND_P;

  FUNCTION CP_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_END_OF_REPORT;
  END CP_END_OF_REPORT_P;

  FUNCTION LP_CM_BATCH_SOURCE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_CM_BATCH_SOURCE_NAME;
  END LP_CM_BATCH_SOURCE_NAME_P;

  FUNCTION LP_CM_TRX_NUMBER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_CM_TRX_NUMBER;
  END LP_CM_TRX_NUMBER_P;

  FUNCTION LP_VOID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_VOID;
  END LP_VOID_P;

  FUNCTION LP_MISSING_SEQ_FINAL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_MISSING_SEQ_FINAL;
  END LP_MISSING_SEQ_FINAL_P;

  FUNCTION CP_TAX_CATEGORY_DESC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TAX_CATEGORY_DESC;
  END CP_TAX_CATEGORY_DESC_P;

  FUNCTION LP_MISSING_SEQ_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_MISSING_SEQ;
  END LP_MISSING_SEQ_P;

  FUNCTION LP_MISSING_SEQUENCE_FINAL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_MISSING_SEQUENCE_FINAL;
  END LP_MISSING_SEQUENCE_FINAL_P;

  FUNCTION LP_DOC_SEQUENCE_ORDER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LP_DOC_SEQUENCE_ORDER;
  END LP_DOC_SEQUENCE_ORDER_P;

  FUNCTION CP_TRL_ROW_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TRL_ROW_COUNT;
  END CP_TRL_ROW_COUNT_P;

  PROCEDURE POPULATE_DATA(C_TRX_BATCH_SOURCE_NAME VARCHAR2, C_BATCH_SOURCES_ATT1 VARCHAR2,
  C_BATCH_SOURCE_ID NUMBER, C_INVOICE_WORD VARCHAR2, C_INITIAL_TRX_NUM VARCHAR2,
  C_FINAL_TRX_NUM VARCHAR2, C_EXTRACT_SOURCE_LEDGER VARCHAR2,
  C_DOCUMENT_SUB_TYPE VARCHAR2, C_TRX_NUMBER VARCHAR2, C_APPLIED_TO_TRX_NUMBER VARCHAR2) IS
  BEGIN
    IF L_CURR_TRX_SOURCE_NAME <> C_TRX_BATCH_SOURCE_NAME THEN
      IF LP_MISSING_SEQ_FINAL IS NULL THEN
        LP_MISSING_SEQ_FINAL := LP_MISSING_SEQ;
      ELSE
        LP_MISSING_SEQ_FINAL := LP_MISSING_SEQ_FINAL || ' ' || NL || LP_MISSING_SEQ;
      END IF;
      IF GUI_TABLE.COUNT > 1 THEN
        GUI_TABLE.DELETE;
        CNT := 1;
      END IF;
      BEGIN
        IF C_TRX_BATCH_SOURCE_NAME IS NOT NULL THEN
          IF C_BATCH_SOURCES_ATT1 IS NOT NULL THEN
            L_BATCH_SOURCE_ID := C_BATCH_SOURCES_ATT1;
          ELSE
            L_BATCH_SOURCE_ID := C_BATCH_SOURCE_ID;
          END IF;
        END IF;
        LP_INVOICE_WORD := C_INVOICE_WORD;
        LP_INITIAL_TRX_NUM := C_INITIAL_TRX_NUM;
        LP_FINAL_TRX_NUM := C_FINAL_TRX_NUM;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE_APPLICATION_ERROR(-20101
                                 ,NULL);

      END;
      L_CURR_TRX_SOURCE_NAME := C_TRX_BATCH_SOURCE_NAME;
    END IF;
    IF C_EXTRACT_SOURCE_LEDGER = 'AR' THEN
      IF NVL(C_DOCUMENT_SUB_TYPE
         ,'NULL') in ('31','32','35','36') THEN
        C_GUI_NUMBER := C_TRX_NUMBER;
      ELSIF NVL(C_DOCUMENT_SUB_TYPE
         ,'NULL') in ('33','34') THEN
        C_GUI_NUMBER := C_APPLIED_TO_TRX_NUMBER;
      ELSIF NVL(C_DOCUMENT_SUB_TYPE
         ,'NULL') = 'NULL' THEN
        C_GUI_NUMBER := '**********';
      ELSE
        C_GUI_NUMBER := NULL;
      END IF;
    END IF;
    C_GUI_TYPE := C_DOCUMENT_SUB_TYPE;
    GUI_TABLE(CNT).GUI_NUMBER := C_GUI_NUMBER;
    GUI_TABLE(CNT).GUI_TYPE := C_GUI_TYPE;
    GUI_TABLE(CNT).GUI_TRX_SRC := C_TRX_BATCH_SOURCE_NAME;
    GUI_TABLE(CNT).GUI := SUBSTRB(C_GUI_NUMBER
                                 ,3
                                 ,10);
    IF CNT = 1 THEN
      GUI_TABLE(CNT).DIFF := GUI_TABLE(CNT).GUI - LP_INITIAL_TRX_NUM;
    ELSE
      GUI_TABLE(CNT).DIFF := GUI_TABLE(CNT).GUI - GUI_TABLE(CNT - 1).GUI;
    END IF;
    CNT := CNT + 1;
  END POPULATE_DATA;

  PROCEDURE FIND_MISSING_SEQ IS
  BEGIN
    L_MISSING_SEQUENCE := ' ';
    FOR i IN GUI_TABLE.FIRST .. GUI_TABLE.LAST LOOP
      IF GUI_TABLE(I).DIFF <= 1 THEN
        L_MISSING_SEQUENCE := L_MISSING_SEQUENCE;
      ELSIF GUI_TABLE(I).DIFF = 2 THEN
        L_MISSING_SEQUENCE := L_MISSING_SEQUENCE || LP_INVOICE_WORD || LPAD(TO_CHAR(GUI_TABLE(I).GUI - 1)
                                  ,8
                                  ,0) || ', ';
      ELSE
        IF I = 1 THEN
          L_MISSING_SEQUENCE := L_MISSING_SEQUENCE || LP_INVOICE_WORD || LPAD(TO_CHAR(LP_INITIAL_TRX_NUM + 1)
                                    ,8
                                    ,0) || ' - ' || LP_INVOICE_WORD || LPAD(TO_CHAR(GUI_TABLE(I).GUI - 1)
                                    ,8
                                    ,0) || ', ';
        ELSE
          L_MISSING_SEQUENCE := L_MISSING_SEQUENCE || LP_INVOICE_WORD || LPAD(TO_CHAR(GUI_TABLE(I - 1).GUI + 1)
                                    ,8
                                    ,0) || ' - ' || LP_INVOICE_WORD || LPAD(TO_CHAR(GUI_TABLE(I).GUI - 1)
                                    ,8
                                    ,0) || ', ';
        END IF;
      END IF;
    END LOOP;
    L_LAST := GUI_TABLE.LAST;
    IF GUI_TABLE(L_LAST).GUI < LP_FINAL_TRX_NUM THEN
      L_DIFF := LP_FINAL_TRX_NUM - GUI_TABLE(L_LAST).GUI;
      IF L_DIFF = 1 THEN
        L_MISSING_SEQUENCE := L_MISSING_SEQUENCE || LP_INVOICE_WORD || LPAD(TO_CHAR(LP_FINAL_TRX_NUM)
                                  ,8
                                  ,0);
      ELSIF L_DIFF >= 2 THEN
        L_MISSING_SEQUENCE := L_MISSING_SEQUENCE || LP_INVOICE_WORD || LPAD(TO_CHAR(GUI_TABLE(L_LAST).GUI + 1)
                                  ,8
                                  ,0) || ' - ' || LP_INVOICE_WORD || LPAD(TO_CHAR(LP_FINAL_TRX_NUM)
                                  ,8
                                  ,0);
      ELSE
        L_MISSING_SEQUENCE := SUBSTRB(L_MISSING_SEQUENCE
                                     ,1
                                     ,LENGTH(L_MISSING_SEQUENCE) - 2);
      END IF;
    END IF;
    LP_MISSING_SEQ := L_MISSING_SEQUENCE;
  END FIND_MISSING_SEQ;

  FUNCTION GET_DATE_FORMAT RETURN BOOLEAN IS
  BEGIN
    P_DATE4_FORMAT := 'DD-MON-YYYY';
    RETURN TRUE;
  END;

END ZX_ZXARRECV_XMLP_PKG;



/
