--------------------------------------------------------
--  DDL for Package Body GMF_CMR05USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMF_CMR05USR_XMLP_PKG" AS
/* $Header: CMR05USRB.pls 120.0 2007/12/24 13:19:11 nchinnam noship $ */
  FUNCTION ITEMCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_ITEM IS NOT NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and iim.item_number >= ''' || FROM_ITEM || ''' and iim.item_number <= ''' || TO_ITEM || '''';
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NULL THEN
      ITEMCP := ' ';
      FROM_ITEM := SY_ALL;
      TO_ITEM := SY_ALL;
    ELSIF FROM_ITEM IS NOT NULL AND TO_ITEM IS NULL THEN
      ITEMCP := ' and iim.item_number >= ''' || FROM_ITEM || '''';
      TO_ITEM := SY_ALL;
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and iim.item_number <= ''' || TO_ITEM || '''';
      FROM_ITEM := SY_ALL;
    END IF;
    RETURN NULL;
  END ITEMCFFORMULA;

  FUNCTION ITEMCPFORMULA(ITEMCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
     RETURN NULL;
  END ITEMCPFORMULA;

  FUNCTION ORGANIZATIONCPFORMULA(ORGANIZATIONCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
     RETURN NULL;
  END ORGANIZATIONCPFORMULA;

  FUNCTION ORGANIZATIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_ORGN IS NOT NULL AND TO_ORGN IS NOT NULL THEN
      ORGANIZATIONCP := ' and mp.organization_code >= ''' || FROM_ORGN || ''' and mp.organization_code <= ''' || TO_ORGN || '''';
    ELSIF FROM_ORGN IS NULL AND TO_ORGN IS NULL THEN
      ORGANIZATIONCP := ' ';
      FROM_ORGN := SY_ALL;
      TO_ORGN := SY_ALL;
    ELSIF FROM_ORGN IS NOT NULL AND TO_ORGN IS NULL THEN
      ORGANIZATIONCP := ' and  mp.organization_code >= ''' || FROM_ORGN || '''';
      TO_ORGN := SY_ALL;
    ELSIF FROM_ORGN IS NULL AND TO_ORGN IS NOT NULL THEN
      ORGANIZATIONCP := ' and  mp.organization_code <= ''' || TO_ORGN || '''';
      FROM_ORGN := SY_ALL;
    END IF;
    RETURN NULL;
  END ORGANIZATIONCFFORMULA;

  FUNCTION COSTCATEGORYCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_COST_CATEGORY IS NOT NULL AND TO_COST_CATEGORY IS NOT NULL THEN
      COSTCATEGORYCP := ' and NVL(mckfv.concatenated_segments,'' '') >= ''' || FROM_COST_CATEGORY || ''' and NVL(mckfv.concatenated_segments,'' '') <= ''' || TO_COST_CATEGORY || '''';
    ELSIF FROM_COST_CATEGORY IS NULL AND TO_COST_CATEGORY IS NULL THEN
      COSTCATEGORYCP := ' ';
      FROM_COST_CATEGORY := SY_ALL;
      TO_COST_CATEGORY := SY_ALL;
    ELSIF FROM_COST_CATEGORY IS NOT NULL AND TO_COST_CATEGORY IS NULL THEN
      COSTCATEGORYCP := ' and NVL(mckfv.concatenated_segments,'' '') >= ''' || FROM_COST_CATEGORY || '''';
      TO_COST_CATEGORY := SY_ALL;
    ELSIF FROM_COST_CATEGORY IS NULL AND TO_COST_CATEGORY IS NOT NULL THEN
      COSTCATEGORYCP := ' and NVL(mckfv.concatenated_segments,'' '') <= ''' || TO_COST_CATEGORY || '''';
      FROM_COST_CATEGORY := SY_ALL;
    END IF;
    RETURN NULL;
  END COSTCATEGORYCFFORMULA;

  FUNCTION COSTCATEGORYCPFORMULA(COSTCATEGORYCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
     RETURN NULL;
  END COSTCATEGORYCPFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    FROM_ORGN := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_FROM_ORGANIZATION_ID);
    TO_ORGN := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_TO_ORGANIZATION_ID);
    FROM_ITEM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_FROM_ITEM_ID
                                                  ,P_FROM_ORGANIZATION_ID);
    TO_ITEM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_TO_ITEM_ID
                                                ,P_TO_ORGANIZATION_ID);
    FROM_COST_CATEGORY := GMF_UTILITIES_GRP.GET_COST_CATEGORY(P_FROM_COST_CATEGORY_ID);
    TO_COST_CATEGORY := GMF_UTILITIES_GRP.GET_COST_CATEGORY(P_TO_COST_CATEGORY_ID);
    IF FROM_ORGN > TO_ORGN THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_FRMWHSECODE_TOWHSECODE');
      RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF FROM_ITEM > TO_ITEM THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_FRMITEM_LTE_TOITM');
      RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF FROM_COST_CATEGORY > TO_COST_CATEGORY THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_FRMITEM_CLS_LTE_TOITEM_CLS');
      RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BASE_CURRCFFORMULA RETURN VARCHAR2 IS
    BCURR VARCHAR2(15);
  BEGIN
    SELECT
      BASE_CURRENCY_CODE
    INTO BCURR
    FROM
      GMF_FISCAL_POLICIES
    WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
    RETURN (BCURR);
  END BASE_CURRCFFORMULA;

  PROCEDURE GMF_CMR05USR_XMLP_PKG_HEADER IS
  BEGIN
    NULL;
  END GMF_CMR05USR_XMLP_PKG_HEADER;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_BASE_CURRENCY_CODE GMF_FISCAL_POLICIES.BASE_CURRENCY_CODE%TYPE;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    SELECT
      BASE_CURRENCY_CODE
    INTO L_BASE_CURRENCY_CODE
    FROM
      GMF_FISCAL_POLICIES
    WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
    IF ((P_CURRENCY_CODE IS NULL) OR (P_CURRENCY_CODE = L_BASE_CURRENCY_CODE)) THEN
      LP_CURRENCY_CODE := L_BASE_CURRENCY_CODE;
      LP_EXCHANGE_RATE := 1;
    ELSE
      IF (P_EXCHANGE_RATE IS NULL) THEN
        FND_MESSAGE.SET_NAME('GMF'
                            ,'GMF_SRS_EFC_NO_XCHG');
        RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;

  PROCEDURE REPORT_HEADER IS
  BEGIN
    NULL;
  END REPORT_HEADER;

  FUNCTION PERIOD_IDFORMULA RETURN NUMBER IS
    L_PERIOD_ID NUMBER;
  BEGIN
    BEGIN
      SELECT
        PERIOD_ID
      INTO L_PERIOD_ID
      FROM
        GMF_PERIOD_STATUSES
      WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID
        AND CALENDAR_CODE = P_CALENDAR
        AND PERIOD_CODE = P_PERIOD_CODE
        AND COST_TYPE_ID = P_COST_TYPE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_PERIOD_ID := 0;
    END;
    RETURN (NVL(L_PERIOD_ID
              ,-1));
  END PERIOD_IDFORMULA;

  FUNCTION COST_MTHD_CODEFORMULA RETURN CHAR IS
    L_COST_MTHD_CODE VARCHAR2(10);
  BEGIN
    BEGIN
      SELECT
        COST_MTHD_CODE
      INTO L_COST_MTHD_CODE
      FROM
        CM_MTHD_MST
      WHERE COST_TYPE_ID = P_COST_TYPE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_COST_MTHD_CODE := NULL;
    END;
    RETURN (L_COST_MTHD_CODE);
  END COST_MTHD_CODEFORMULA;

  FUNCTION LEGAL_ENTITYCFFORMULA RETURN CHAR IS
    L_LEGAL_ENTITY_NAME VARCHAR2(240);
  BEGIN
    BEGIN
      SELECT
        LEGAL_ENTITY_NAME
      INTO L_LEGAL_ENTITY_NAME
      FROM
        GMF_LEGAL_ENTITIES
      WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_LEGAL_ENTITY_NAME := NULL;
    END;
    RETURN (L_LEGAL_ENTITY_NAME);
  END LEGAL_ENTITYCFFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
     RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION ORGANIZATIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORGANIZATIONCP;
  END ORGANIZATIONCP_P;

  FUNCTION ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ITEMCP;
  END ITEMCP_P;

  FUNCTION COSTCATEGORYCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN COSTCATEGORYCP;
  END COSTCATEGORYCP_P;

END GMF_CMR05USR_XMLP_PKG;


/
