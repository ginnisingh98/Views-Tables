--------------------------------------------------------
--  DDL for Package Body JA_JAIN57F4_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAIN57F4_XMLP_PKG" AS
/* $Header: JAIN57F4B.pls 120.1 2007/12/25 16:08:35 dwkrishn noship $ */
  FUNCTION CF_1FORMULA(CANCEL_FLAG IN VARCHAR2
                      ,PRINT_ORIGINAL IN VARCHAR2) RETURN CHARACTER IS
  BEGIN
    IF NVL(CANCEL_FLAG
       ,'N') = 'Y' THEN
      RETURN ('Cancelled');
    ELSIF NVL(PRINT_ORIGINAL
       ,'N') = 'Y' THEN
      RETURN ('Original');
    ELSE
      RETURN ('Duplicate');
    END IF;
  END CF_1FORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
    CURSOR C_COUNT_UPDATE IS
      SELECT
        FORM_ID,
        PRINT_CNT
      FROM
        JAI_PO_OSP_HDRS J57F4
      WHERE TRUNC(J57F4.ISSUE_DATE) <= NVL(P_TO_DATE
         ,TRUNC(SYSDATE))
        AND TRUNC(J57F4.ISSUE_DATE) >= TRUNC(NVL(P_FROM_DATE
               ,TRUNC(J57F4.ISSUE_DATE)))
        AND TRUNC(J57F4.FORM_ID) >= NVL(P_FORM_ID_FROM
         ,TRUNC(J57F4.FORM_ID))
        AND TRUNC(J57F4.FORM_ID) <= NVL(P_FORM_ID_TO
         ,TRUNC(J57F4.FORM_ID))
        AND UPPER(J57F4.ISSUE_APPROVED) = 'Y'
        AND J57F4.VENDOR_ID = NVL(P_VENDOR_ID
         ,J57F4.VENDOR_ID)
        AND ( J57F4.PRINT_ORIGINAL = 'Y'
      OR J57F4.PRINT_DUPLICATE = 'Y' );
    V_COUNT NUMBER;
    V_FORM_ID NUMBER;
  BEGIN
    FOR c_cnt_upd IN C_COUNT_UPDATE LOOP
      V_COUNT := NVL(C_CNT_UPD.PRINT_CNT
                    ,0) + 1;
      V_FORM_ID := C_CNT_UPD.FORM_ID;
      UPDATE
        JAI_PO_OSP_HDRS
      SET
        PRINT_CNT = V_COUNT
        ,PRINT_ORIGINAL = 'N'
        ,PRINT_DUPLICATE = 'N'
      WHERE FORM_ID = V_FORM_ID;
    END LOOP;
    COMMIT;
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.3 Last modified date is 21/12/2006')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_VENDOR_SITE_NAMEFORMULA(VENDOR_ID_v IN NUMBER
                                     ,VENDOR_SITE_ID_v IN NUMBER) RETURN CHAR IS
    V_EC_CODE JAI_CMN_VENDOR_SITES.EC_CODE%TYPE;
  BEGIN
    FOR c_fetch_ec_code IN (SELECT
                              EC_CODE
                            FROM
                              JAI_CMN_VENDOR_SITES
                            WHERE VENDOR_ID = VENDOR_ID_v
                              AND VENDOR_SITE_ID = VENDOR_SITE_ID_v) LOOP
      V_EC_CODE := C_FETCH_EC_CODE.EC_CODE;
    END LOOP;
    IF V_EC_CODE IS NULL THEN
      RETURN (NULL);
    ELSE
      RETURN (V_EC_CODE);
    END IF;
  END CF_VENDOR_SITE_NAMEFORMULA;

  FUNCTION CF_PO_NUMBERFORMULA(PO_HEADER_ID IN NUMBER) RETURN CHAR IS
    LC_PO_NUMBER VARCHAR2(20);
    CURSOR LCU_GET_PO_NUMBER(P_PO_HEADER_ID IN NUMBER) IS
      SELECT
        PHA.SEGMENT1
      FROM
        PO_HEADERS_ALL PHA
      WHERE PHA.PO_HEADER_ID = P_PO_HEADER_ID;
  BEGIN
    IF (PO_HEADER_ID IS NOT NULL) THEN
      OPEN LCU_GET_PO_NUMBER(PO_HEADER_ID);
      FETCH LCU_GET_PO_NUMBER
       INTO LC_PO_NUMBER;
      CLOSE LCU_GET_PO_NUMBER;
    END IF;
    RETURN (LC_PO_NUMBER);
  EXCEPTION
    WHEN OTHERS THEN
      IF (LCU_GET_PO_NUMBER%ISOPEN) THEN
        CLOSE LCU_GET_PO_NUMBER;
      END IF;
      RETURN (NULL);
  END CF_PO_NUMBERFORMULA;

  FUNCTION CF_RELEASE_NUMBERFORMULA(PO_RELEASE_ID IN NUMBER) RETURN NUMBER IS
    LN_RELEASE_NUMBER NUMBER;
    CURSOR LCU_GET_RELEASE_NUMBER(P_RELEASE_ID IN NUMBER) IS
      SELECT
        PRA.RELEASE_NUM
      FROM
        PO_RELEASES_ALL PRA
      WHERE PRA.PO_RELEASE_ID = P_RELEASE_ID;
  BEGIN
    IF (PO_RELEASE_ID IS NOT NULL) THEN
      OPEN LCU_GET_RELEASE_NUMBER(P_RELEASE_ID => PO_RELEASE_ID);
      FETCH LCU_GET_RELEASE_NUMBER
       INTO LN_RELEASE_NUMBER;
      CLOSE LCU_GET_RELEASE_NUMBER;
    END IF;
    RETURN (LN_RELEASE_NUMBER);
  EXCEPTION
    WHEN OTHERS THEN
      IF (LCU_GET_RELEASE_NUMBER%ISOPEN) THEN
        CLOSE LCU_GET_RELEASE_NUMBER;
      END IF;
      RETURN (NULL);
  END CF_RELEASE_NUMBERFORMULA;

  FUNCTION CF_JOB_NAMEFORMULA(WIP_ENTITY_ID IN NUMBER
                             ,ORGANIZATION_ID IN NUMBER) RETURN CHAR IS
    LC_JOB_NAME VARCHAR2(240);
    CURSOR LCU_GET_JOB_NAME(P_WIP_ENTITY_ID IN NUMBER,P_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        WE.WIP_ENTITY_NAME
      FROM
        WIP_ENTITIES WE
      WHERE WE.WIP_ENTITY_ID = P_WIP_ENTITY_ID
        AND WE.ORGANIZATION_ID = P_ORGANIZATION_ID;
  BEGIN
    IF (WIP_ENTITY_ID IS NOT NULL) THEN
      OPEN LCU_GET_JOB_NAME(P_WIP_ENTITY_ID => WIP_ENTITY_ID,P_ORGANIZATION_ID => ORGANIZATION_ID);
      FETCH LCU_GET_JOB_NAME
       INTO LC_JOB_NAME;
      CLOSE LCU_GET_JOB_NAME;
    END IF;
    RETURN LC_JOB_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      IF (LCU_GET_JOB_NAME%ISOPEN) THEN
        CLOSE LCU_GET_JOB_NAME;
      END IF;
      RETURN (NULL);
  END CF_JOB_NAMEFORMULA;

  FUNCTION CF_JOB_START_DATEFORMULA(WIP_ENTITY_ID IN NUMBER
                                   ,ORGANIZATION_ID IN NUMBER) RETURN DATE IS
    LD_JOB_START_DATE DATE;
    CURSOR LCU_GET_JOB_START_DATE(P_WIP_ENTITY_ID IN NUMBER,P_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        WDJ.SCHEDULED_START_DATE
      FROM
        WIP_DISCRETE_JOBS WDJ
      WHERE WDJ.WIP_ENTITY_ID = P_WIP_ENTITY_ID
        AND WDJ.ORGANIZATION_ID = P_ORGANIZATION_ID;
  BEGIN
    IF (WIP_ENTITY_ID IS NOT NULL) THEN
      OPEN LCU_GET_JOB_START_DATE(P_WIP_ENTITY_ID => WIP_ENTITY_ID,P_ORGANIZATION_ID => ORGANIZATION_ID);
      FETCH LCU_GET_JOB_START_DATE
       INTO LD_JOB_START_DATE;
      CLOSE LCU_GET_JOB_START_DATE;
    END IF;
    RETURN LD_JOB_START_DATE;
  EXCEPTION
    WHEN OTHERS THEN
      IF (LCU_GET_JOB_START_DATE%ISOPEN) THEN
        CLOSE LCU_GET_JOB_START_DATE;
      END IF;
      RETURN (NULL);
  END CF_JOB_START_DATEFORMULA;

  FUNCTION CF_ASSEMBLY_ITEM_CODEFORMULA(ASSEMBLY_ID IN NUMBER
                                       ,ORGANIZATION_ID IN NUMBER) RETURN CHAR IS
    LC_ASSEMBLY_ITEM_CODE VARCHAR2(40);
    CURSOR LCU_GET_ASSEMBLY_ITEM_CODE(P_ASSEMBLY_ID IN NUMBER,P_ORGANIZATION_ID IN NUMBER) IS
      SELECT
        MSIK.CONCATENATED_SEGMENTS
      FROM
        MTL_SYSTEM_ITEMS_KFV MSIK
      WHERE MSIK.INVENTORY_ITEM_ID = P_ASSEMBLY_ID
        AND MSIK.ORGANIZATION_ID = P_ORGANIZATION_ID;
  BEGIN
    IF (ASSEMBLY_ID IS NOT NULL) THEN
      OPEN LCU_GET_ASSEMBLY_ITEM_CODE(P_ASSEMBLY_ID => ASSEMBLY_ID,P_ORGANIZATION_ID => ORGANIZATION_ID);
      FETCH LCU_GET_ASSEMBLY_ITEM_CODE
       INTO LC_ASSEMBLY_ITEM_CODE;
      CLOSE LCU_GET_ASSEMBLY_ITEM_CODE;
    END IF;
    RETURN (LC_ASSEMBLY_ITEM_CODE);
  EXCEPTION
    WHEN OTHERS THEN
      IF (LCU_GET_ASSEMBLY_ITEM_CODE%ISOPEN) THEN
        CLOSE LCU_GET_ASSEMBLY_ITEM_CODE;
      END IF;
      RETURN (NULL);
  END CF_ASSEMBLY_ITEM_CODEFORMULA;

END JA_JAIN57F4_XMLP_PKG;



/
