--------------------------------------------------------
--  DDL for Package Body AR_ARXPIREP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AR_ARXPIREP_XMLP_PKG" AS
/* $Header: ARXPIREPB.pls 120.0 2007/12/27 14:00:05 abraghun noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_LD_SP VARCHAR2(1);
  BEGIN
  LP_BAL_LOW:=' ';
  LP_BAL_HIGH:=' ';
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    IF UPPER(P_MRCSOBTYPE) = 'R' THEN
      FND_CLIENT_INFO.SET_CURRENCY_CONTEXT(P_CA_SET_OF_BOOKS_ID);
    END IF;
    BEGIN
      P_POSTED_FLAG := RTRIM(P_POSTED_FLAG
                            ,' ');
      IF (P_CURRENCY_CODE IS NOT NULL) AND (UPPER(P_CURRENCY_CODE) <> 'ALL') THEN
        LP_CURRENCY_CODE := ' AND rep.currency_code  =  ''' || P_CURRENCY_CODE || ''' ';
      END IF;
      IF P_BAL_LOW IS NOT NULL THEN
        LP_BAL_LOW := ' and  ' || LP_BAL_LOW1;
      END IF;
      IF P_BAL_HIGH IS NOT NULL THEN
        LP_BAL_HIGH := ' and  ' || LP_BAL_HIGH1;
      END IF;
      /*SRW.MESSAGE('100'
                 ,'bal_low: ' || LP_BAL_LOW || ' -- bal_high: ' || LP_BAL_HIGH)*/NULL;
    END;
    RP_MESSAGE := NULL;
    IF TO_NUMBER(P_REPORTING_LEVEL) = 1000 THEN
      L_LD_SP := MO_UTILS.CHECK_LEDGER_IN_SP(TO_NUMBER(P_REPORTING_ENTITY_ID));
      IF L_LD_SP = 'N' THEN
        FND_MESSAGE.SET_NAME('FND'
                            ,'FND_MO_RPT_PARTIAL_LEDGER');
        RP_MESSAGE := FND_MESSAGE.GET;
      END IF;
    END IF;
    FND_MESSAGE.SET_NAME('AR'
                        ,'AR_REPORT_ACC_NOT_GEN');
    CP_ACC_MESSAGE := FND_MESSAGE.GET;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION REPORT_NAMEFORMULA(COMPANY_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      RP_COMPANY_NAME := COMPANY_NAME;
    END;
    RETURN NULL;
  END REPORT_NAMEFORMULA;
  FUNCTION C_POSTED_DESCRIPTIONFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      POSTED_DESCRIPTION VARCHAR2(100);
    BEGIN
      SELECT
        MEANING
      INTO POSTED_DESCRIPTION
      FROM
        AR_LOOKUPS
      WHERE LOOKUP_TYPE = 'POSTED_STATUS'
        AND LOOKUP_CODE = 'BOTH';
      C_POSTED_DESC := POSTED_DESCRIPTION;
      RETURN (POSTED_DESCRIPTION);
    END;
    RETURN NULL;
  END C_POSTED_DESCRIPTIONFORMULA;
  FUNCTION C_DELIMFORMULA(COA_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      DELIM VARCHAR2(1);
    BEGIN
      SELECT
        CONCATENATED_SEGMENT_DELIMITER
      INTO DELIM
      FROM
        FND_ID_FLEX_STRUCTURES
      WHERE ID_FLEX_CODE = 'GL#'
        AND ID_FLEX_NUM = COA_ID;
      RETURN (DELIM);
    END;
    RETURN NULL;
  END C_DELIMFORMULA;
  FUNCTION C_BAL_VS_IDFORMULA(COA_ID IN NUMBER
                             ,ACCT_FLEX_BAL_SEG IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    DECLARE
      BAL_VS_ID NUMBER(15);
    BEGIN
      /*SRW.REFERENCE(COA_ID)*/NULL;
      SELECT
        FLEX_VALUE_SET_ID
      INTO BAL_VS_ID
      FROM
        FND_ID_FLEX_SEGMENTS
      WHERE ID_FLEX_CODE = 'GL#'
        AND ID_FLEX_NUM = COA_ID
        AND ENABLED_FLAG = 'Y'
        AND APPLICATION_COLUMN_NAME = SUBSTR(ACCT_FLEX_BAL_SEG
            ,INSTR(ACCT_FLEX_BAL_SEG
                 ,'.') + 1);
      RETURN (BAL_VS_ID);
    END;
    RETURN NULL;
  END C_BAL_VS_IDFORMULA;
  FUNCTION GL_HDRFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_GL_HDR VARCHAR2(500);
      L_DATE_LOW VARCHAR2(50);
      L_DATE_HIGH VARCHAR2(50);
    BEGIN
      IF P_LOW_DATE IS NULL THEN
        L_DATE_LOW := '      ';
      ELSE
        L_DATE_LOW := TO_CHAR(P_LOW_DATE
                             ,'DD-MON-YYYY');
      END IF;
      IF P_HIGH_DATE IS NULL THEN
        L_DATE_HIGH := '      ';
      ELSE
        L_DATE_HIGH := TO_CHAR(P_HIGH_DATE
                              ,'DD-MON-YYYY');
      END IF;
      PL_GL_DATE_FROM_TO := ARP_STANDARD.FND_MESSAGE('AR_REPORTS_GL_DATE_FROM_TO'
                                                    ,'FROM_DATE'
                                                    ,L_DATE_LOW
                                                    ,'TO_DATE'
                                                    ,L_DATE_HIGH);
      RP_GL_HDR := PL_GL_DATE_FROM_TO;
      L_GL_HDR := PL_GL_DATE_FROM_TO;
      RETURN (L_GL_HDR);
    END;
    RETURN NULL;
  END GL_HDRFORMULA;
  FUNCTION SET_SUM_SPFORMULA(ENTERED_DR_DBC IN NUMBER
                            ,ENTERED_CR_DBC IN NUMBER
                            ,ACCOUNTED_DR_DBC IN NUMBER
                            ,ACCOUNTED_CR_DBC IN NUMBER
                            ,CATEGORY_CODE_DBC IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    /*SRW.REFERENCE(ENTERED_DR_DBC)*/NULL;
    /*SRW.REFERENCE(ENTERED_CR_DBC)*/NULL;
    /*SRW.REFERENCE(ACCOUNTED_DR_DBC)*/NULL;
    /*SRW.REFERENCE(ACCOUNTED_CR_DBC)*/NULL;
    /*SRW.REFERENCE(CATEGORY_CODE_DBC)*/NULL;
    IF ((UPPER(CATEGORY_CODE_DBC) <> 'ADJ_REC') AND (UPPER(CATEGORY_CODE_DBC) <> 'DM_REC')
    AND (UPPER(CATEGORY_CODE_DBC) <> 'CM_REC') AND (UPPER(CATEGORY_CODE_DBC) <> 'TRADE_REC')
    AND (UPPER(CATEGORY_CODE_DBC) <> 'CCURR_REC') AND (UPPER(CATEGORY_CODE_DBC) <> 'CB_REC') AND (UPPER(CATEGORY_CODE_DBC) <> 'BR_REC')
    AND (UPPER(CATEGORY_CODE_DBC) <> 'BR_REC_ASSIGNMENT') AND (UPPER(CATEGORY_CODE_DBC) <> 'BR_UNPAIDREC') AND (UPPER(CATEGORY_CODE_DBC) <> 'CMAPP_REC') AND (UPPER(CATEGORY_CODE_DBC) <> 'INV_REC')) THEN
      SUM_SP_ENT_DR_DBC := NVL(SUM_SP_ENT_DR_DBC
                              ,0) + NVL(ENTERED_DR_DBC
                              ,0);
      SUM_SP_ENT_CR_DBC := NVL(SUM_SP_ENT_CR_DBC
                              ,0) + NVL(ENTERED_CR_DBC
                              ,0);
      SUM_SP_ACCT_DR_DBC := NVL(SUM_SP_ACCT_DR_DBC
                               ,0) + NVL(ACCOUNTED_DR_DBC
                               ,0);
      SUM_SP_ACCT_CR_DBC := NVL(SUM_SP_ACCT_CR_DBC
                               ,0) + NVL(ACCOUNTED_CR_DBC
                               ,0);
      RETURN (1);
    END IF;
    RETURN (1);
  END SET_SUM_SPFORMULA;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;

    select argument1,argument2,argument3,argument4,argument5,to_date(substr(argument6,1,10),'YYYY/MM/DD'),to_date(substr(argument7,1,10),'YYYY/MM/DD'),argument8,argument9,argument10,argument11
    into P_BAL_HIGH,P_BAL_LOW,P_CA_SET_OF_BOOKS_ID,P_COAID,P_CURRENCY_CODE,P_HIGH_DATE,P_LOW_DATE,P_MIN_PRECISION,P_MRCSOBTYPE,P_REPORTING_ENTITY_ID,P_REPORTING_LEVEL
    from fnd_concurrent_requests
    where request_id = P_CONC_REQUEST_ID;

    if P_CA_SET_OF_BOOKS_ID is null then
      P_CA_SET_OF_BOOKS_ID:=-1999;
    end if;
    if P_MRCSOBTYPE is null then
      P_MRCSOBTYPE:='P';
    end if;

    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(100
               ,'p_ca_set_of_books_id: ' || P_CA_SET_OF_BOOKS_ID)*/NULL;
    IF P_CA_SET_OF_BOOKS_ID <> -1999 THEN
      BEGIN
        SELECT
          MRC_SOB_TYPE_CODE
        INTO P_MRCSOBTYPE
        FROM
          GL_SETS_OF_BOOKS
        WHERE SET_OF_BOOKS_ID = P_CA_SET_OF_BOOKS_ID;
      EXCEPTION
        WHEN OTHERS THEN
          P_MRCSOBTYPE := 'P';
      END;
    ELSE
      P_MRCSOBTYPE := 'P';
    END IF;
    /*SRW.MESSAGE(101
               ,'p_mrcsobtype = ' || P_MRCSOBTYPE)*/NULL;
    IF (UPPER(P_MRCSOBTYPE) = 'R') THEN
      /*SRW.MESSAGE(102
                 ,'SEtting currency context')*/NULL;
      FND_CLIENT_INFO.SET_ORG_CONTEXT(P_CA_SET_OF_BOOKS_ID);
    END IF;
    IF UPPER(P_MRCSOBTYPE) = 'R' THEN
      LP_AR_SYSTEM_PARAMETERS := 'AR_SYSTEM_PARAMETERS_MRC_V';
      LP_AR_SYSTEM_PARAMETERS_ALL := 'AR_SYSTEM_PARAMS_ALL_MRC_V';
      LP_AR_PAYMENT_SCHEDULES := 'AR_PAYMENT_SCHEDULES_MRC_V';
      LP_AR_PAYMENT_SCHEDULES_ALL := 'AR_PAYMENT_SCHEDULES_ALL_MRC_V';
      LP_AR_ADJUSTMENTS := 'AR_ADJUSTMENTS_MRC_V';
      LP_AR_ADJUSTMENTS_ALL := 'AR_ADJUSTMENTS_ALL_MRC_V';
      LP_AR_CASH_RECEIPT_HISTORY := 'AR_CASH_RECEIPT_HIST_MRC_V';
      LP_AR_CASH_RECEIPT_HISTORY_ALL := 'AR_CASH_RECEIPT_HIST_ALL_MRC_V';
      LP_AR_BATCHES := 'AR_BATCHES_MRC_V';
      LP_AR_BATCHES_ALL := 'AR_BATCHES_ALL_MRC_V';
      LP_AR_CASH_RECEIPTS := 'AR_CASH_RECEIPTS_MRC_V';
      LP_AR_CASH_RECEIPTS_ALL := 'AR_CASH_RECEIPTS_ALL_MRC_V';
      LP_AR_DISTRIBUTIONS := 'AR_DISTRIBUTIONS_MRC_V';
      LP_AR_DISTRIBUTIONS_ALL := 'AR_DISTRIBUTIONS_ALL_MRC_V';
      LP_RA_CUSTOMER_TRX := 'RA_CUSTOMER_TRX_MRC_V';
      LP_RA_CUSTOMER_TRX_ALL := 'RA_CUSTOMER_TRX_ALL_MRC_V';
      LP_RA_BATCHES := 'RA_BATCHES_MRC_V';
      LP_RA_BATCHES_ALL := 'RA_BATCHES_ALL_MRC_V';
      LP_RA_CUST_TRX_GL_DIST := 'RA_TRX_LINE_GL_DIST_ALL_MRC_V';
      LP_RA_CUST_TRX_GL_DIST_ALL := 'RA_TRX_LINE_GL_DIST_MRC_V';
      LP_AR_MISC_CASH_DISTS := 'AR_MISC_CASH_DISTS_MRC_V';
      LP_AR_MISC_CASH_DISTS_ALL := 'AR_MISC_CASH_DISTS_ALL_MRC_V';
      LP_AR_RATE_ADJUSTMENTS := 'AR_RATE_ADJUSTMENTS_MRC_V';
      LP_AR_RATE_ADJUSTMENTS_ALL := 'AR_RATE_ADJUSTMENTS_ALL_MRC_V';
      LP_AR_RECEIVABLE_APPS := 'AR_RECEIVABLE_APPS_MRC_V';
      LP_AR_RECEIVABLE_APPS_ALL := 'AR_RECEIVABLE_APPS_ALL_MRC_V';
    ELSE
      LP_AR_SYSTEM_PARAMETERS := 'AR_SYSTEM_PARAMETERS';
      LP_AR_SYSTEM_PARAMETERS_ALL := 'AR_SYSTEM_PARAMETERS_ALL';
      LP_AR_PAYMENT_SCHEDULES := 'AR_PAYMENT_SCHEDULES';
      LP_AR_PAYMENT_SCHEDULES_ALL := 'AR_PAYMENT_SCHEDULES_ALL';
      LP_AR_ADJUSTMENTS := 'AR_ADJUSTMENTS';
      LP_AR_ADJUSTMENTS_ALL := 'AR_ADJUSTMENTS_ALL';
      LP_AR_CASH_RECEIPT_HISTORY := 'AR_CASH_RECEIPT_HISTORY';
      LP_AR_CASH_RECEIPT_HISTORY_ALL := 'AR_CASH_RECEIPT_HISTORY_ALL';
      LP_AR_BATCHES := 'AR_BATCHES';
      LP_AR_BATCHES_ALL := 'AR_BATCHES_ALL';
      LP_AR_CASH_RECEIPTS := 'AR_CASH_RECEIPTS';
      LP_AR_CASH_RECEIPTS_ALL := 'AR_CASH_RECEIPTS_ALL';
      LP_AR_DISTRIBUTIONS := 'AR_XLA_ARD_LINES_V';
      LP_AR_DISTRIBUTIONS_ALL := 'AR_XLA_ARD_LINES_V';
      LP_RA_CUSTOMER_TRX := 'RA_CUSTOMER_TRX';
      LP_RA_CUSTOMER_TRX_ALL := 'RA_CUSTOMER_TRX_ALL';
      LP_RA_BATCHES := 'RA_BATCHES';
      LP_RA_BATCHES_ALL := 'RA_BATCHES_ALL';
      LP_RA_CUST_TRX_GL_DIST := 'AR_XLA_CTLGD_LINES_V';
      LP_RA_CUST_TRX_GL_DIST_ALL := 'AR_XLA_CTLGD_LINES_V';
      LP_AR_MISC_CASH_DISTS := 'AR_MISC_CASH_DISTRIBUTIONS';
      LP_AR_MISC_CASH_DISTS_ALL := 'AR_MISC_CASH_DISTRIBUTIONS_ALL';
      LP_AR_RATE_ADJUSTMENTS := 'AR_RATE_ADJUSTMENTS';
      LP_AR_RATE_ADJUSTMENTS_ALL := 'AR_RATE_ADJUSTMENTS_ALL';
      LP_AR_RECEIVABLE_APPS := 'AR_RECEIVABLE_APPLICATIONS';
      LP_AR_RECEIVABLE_APPS_ALL := 'AR_RECEIVABLE_APPLICATIONS_ALL';
    END IF;
    XLA_MO_REPORTING_API.INITIALIZE(P_REPORTING_LEVEL
                                   ,P_REPORTING_ENTITY_ID
                                   ,'AUTO');
    /*SRW.MESSAGE(103
               ,'p_reporting_level = ' || P_REPORTING_LEVEL || ' p_reporting_entity_id = ' || TO_CHAR(P_REPORTING_ENTITY_ID))*/NULL;
    P_ORG_WHERE_GLDIST := XLA_MO_REPORTING_API.GET_PREDICATE('gldist'
                                                            ,NULL);
    P_ORG_WHERE_CT := XLA_MO_REPORTING_API.GET_PREDICATE('ct'
                                                        ,NULL);
    P_ORG_WHERE_CTT := XLA_MO_REPORTING_API.GET_PREDICATE('ctt'
                                                         ,NULL);
    P_ORG_WHERE_ARD := XLA_MO_REPORTING_API.GET_PREDICATE('ard'
                                                         ,NULL);
    P_ORG_WHERE_ACCT := XLA_MO_REPORTING_API.GET_PREDICATE('acct'
                                                          ,NULL);
    P_ORG_WHERE_MCD := XLA_MO_REPORTING_API.GET_PREDICATE('mcd'
                                                         ,NULL);
    P_ORG_WHERE_TH := XLA_MO_REPORTING_API.GET_PREDICATE('th'
                                                        ,NULL);
    P_ORG_WHERE_ADJ := XLA_MO_REPORTING_API.GET_PREDICATE('adj'
                                                         ,NULL);
    P_ORG_WHERE_RA := XLA_MO_REPORTING_API.GET_PREDICATE('ra'
                                                        ,NULL);
    P_ORG_WHERE_CRH := XLA_MO_REPORTING_API.GET_PREDICATE('crh'
                                                         ,NULL);
    P_ORG_WHERE_CR := XLA_MO_REPORTING_API.GET_PREDICATE('cr'
                                                        ,NULL);
    P_ORG_WHERE_CTINV := XLA_MO_REPORTING_API.GET_PREDICATE('ctinv'
                                                           ,NULL);
    /*SRW.MESSAGE(105
               ,'Get_Predicate calls complete')*/NULL;
    P_REPORTING_ENTITY_NAME := SUBSTRB(XLA_MO_REPORTING_API.GET_REPORTING_ENTITY_NAME
                                      ,1
                                      ,80);
    P_REPORTING_LEVEL_NAME := SUBSTRB(XLA_MO_REPORTING_API.GET_REPORTING_LEVEL_NAME
                                     ,1
                                     ,30);
    LP_ADJ_SELECT := 'Select ''ADJ_ADJ'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''Y'' LIABILITY_TYPE ,''Y'' EXPENSE_TYPE ,''Y'' REVENUE_TYPE from dual
                     union all
                     Select ''ADJ_ADJ_NON_REC_TAX'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''Y'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                     union all
                     Select ''ADJ_FINCHRG'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''Y'' REVENUE_TYPE from dual
                     union all
                     Select ''ADJ_REC'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual ';
    LP_CB_SELECT := 'Select ''CB_REC'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                    union all
                    Select ''CB_REV'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''Y'' REVENUE_TYPE from dual
                    union all
                    Select ''CB_UNBILL'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                    union all
                    Select ''CB_UNEARN'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''Y'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual ';
    LP_CM_SELECT := 'Select ''CM_CHARGES'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''Y'' REVENUE_TYPE from dual
                    union all
                    Select ''CM_REC'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                    union all
                    Select ''CM_REV'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''Y'' REVENUE_TYPE from dual
                    union all
                    Select ''CM_UNBILL'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                    union all
                    Select ''CM_UNEARN'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''Y'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual ';
    LP_DM_SELECT := 'Select ''DM_CHARGES'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''Y'' REVENUE_TYPE from dual
                    union all
                    Select ''DM_REC'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                    union all
                    Select ''DM_REV'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''Y'' REVENUE_TYPE from dual
                    union all
                    Select ''DM_UNBILL'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                    union all
                    Select ''DM_UNEARN'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''Y'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual ';
    LP_INV_SELECT := 'Select ''INV_CHARGES'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''Y'' REVENUE_TYPE from dual
                     union all
                     Select ''INV_REC'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                     union all
                     Select ''INV_REV'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''Y'' REVENUE_TYPE from dual
                     union all
                     Select ''INV_UNBILL'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                     union all
                     Select ''INV_UNEARN'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''Y'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual ';
    LP_MISC_SELECT := 'Select ''MISC_CASH'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                      union all
                      Select ''MISC_CONFIRMATION'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                      union all
                      Select ''MISC_REMITTANCE'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                      union all
                      Select ''MISC_SHORT_TERM_DEBT'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''Y'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual ';
    LP_TRADE_SELECT := 'Select ''TRADE_ACC'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                       union all
                       Select ''TRADE_CASH'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                       union all
                       Select ''TRADE_CONFIRMATION'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                       union all
                       Select ''TRADE_EDISC_NON_REC_TAX'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''Y'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                       union all
                       Select ''TRADE_REC'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                       union all
                       Select ''TRADE_REMITTANCE'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                       union all
                       Select ''TRADE_SHORT_TERM_DEBIT'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''Y'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                       union all
                       Select ''TRADE_UNAPP'' JOURNAL_CATEGORY ,''Y'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''N'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual
                       union all
                       Select ''TRADE_UNEDISC_NON_REC_TAX'' JOURNAL_CATEGORY ,''N'' ASSET_TYPE ,''N'' LIABILITY_TYPE ,''Y'' EXPENSE_TYPE ,''N'' REVENUE_TYPE from dual';
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION C_CURRENCY_CODEFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(P_CURRENCY_CODE)*/NULL;
    IF P_CURRENCY_CODE IS NULL THEN
      RETURN ('All');
    ELSE
      RETURN (P_CURRENCY_CODE);
    END IF;
    RETURN NULL;
  END C_CURRENCY_CODEFORMULA;
  FUNCTION SET_FUNC_CURRFORMULA(C_FUNCTIONAL_CURRENCY IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      /*SRW.REFERENCE(C_FUNCTIONAL_CURRENCY)*/NULL;
      FUNCTIONAL_CURRENCY := C_FUNCTIONAL_CURRENCY;
      RETURN (C_FUNCTIONAL_CURRENCY);
    END;
    RETURN NULL;
  END SET_FUNC_CURRFORMULA;
  FUNCTION SET_CURR_CODE_DBCFORMULA(CURRENCY_CODE_DBC IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      /*SRW.REFERENCE(CURRENCY_CODE_DBC)*/NULL;
      C_CURRENCY_CODE_DBC := CURRENCY_CODE_DBC;
      RETURN (CURRENCY_CODE_DBC);
    END;
    RETURN NULL;
  END SET_CURR_CODE_DBCFORMULA;
  PROCEDURE GET_LOOKUP_MEANING(P_LOOKUP_TYPE IN VARCHAR2
                              ,P_LOOKUP_CODE IN VARCHAR2
                              ,P_LOOKUP_MEANING IN OUT NOCOPY VARCHAR2) IS
    W_MEANING VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO W_MEANING
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = P_LOOKUP_TYPE
      AND LOOKUP_CODE = P_LOOKUP_CODE;
    P_LOOKUP_MEANING := W_MEANING;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_LOOKUP_MEANING := NULL;
  END GET_LOOKUP_MEANING;
 /* PROCEDURE GET_BOILER_PLATES IS
    W_INDUSTRY_CODE VARCHAR2(20);
    W_INDUSTRY_STAT VARCHAR2(20);
  BEGIN
    IF GET(0
       ,0
       ,W_INDUSTRY_STAT
       ,W_INDUSTRY_CODE) THEN
      IF W_INDUSTRY_CODE = 'C' THEN
        C_SALES_TITLE := NULL;
      ELSE
        GET_LOOKUP_MEANING('IND_SALES'
                          ,W_INDUSTRY_CODE
                          ,C_SALES_TITLE);
      END IF;
    END IF;
    C_INDUSTRY_CODE := W_INDUSTRY_CODE;
  END GET_BOILER_PLATES;*/
  FUNCTION SET_DISPLAY_FOR_CORE(P_FIELD_NAME IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF C_INDUSTRY_CODE = 'C' THEN
      RETURN (TRUE);
    ELSIF P_FIELD_NAME = 'SALES' THEN
      IF C_SALES_TITLE IS NOT NULL THEN
        RETURN (FALSE);
      ELSE
        RETURN (TRUE);
      END IF;
    ELSIF P_FIELD_NAME = 'BALSEGMENT' THEN
      RETURN (FALSE);
    END IF;
    RETURN NULL;
  END SET_DISPLAY_FOR_CORE;
  FUNCTION SET_DISPLAY_FOR_GOV(P_FIELD_NAME IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    IF C_INDUSTRY_CODE = 'C' THEN
      RETURN (FALSE);
    ELSIF P_FIELD_NAME = 'SALES' THEN
      IF C_SALES_TITLE IS NOT NULL THEN
        RETURN (TRUE);
      ELSE
        RETURN (FALSE);
      END IF;
    ELSIF P_FIELD_NAME = 'BALSEGMENT' THEN
      RETURN (TRUE);
    END IF;
    RETURN NULL;
  END SET_DISPLAY_FOR_GOV;
  FUNCTION POSTED_HDRFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_POSTED_STATUS VARCHAR2(50);
    BEGIN
      SELECT
        MEANING
      INTO L_POSTED_STATUS
      FROM
        AR_LOOKUPS
      WHERE LOOKUP_TYPE = 'POSTED_STATUS'
        AND LOOKUP_CODE = 'BOTH';
      RP_POSTED_HDR := L_POSTED_STATUS;
      RETURN (L_POSTED_STATUS);
    END;
  END POSTED_HDRFORMULA;
  FUNCTION POSTED_YES_NOFORMULA(POSTING_CONTROL_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    IF POSTING_CONTROL_ID = -3 THEN
      RETURN ('+');
    END IF;
    RETURN NULL;
  END POSTED_YES_NOFORMULA;
  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;
  FUNCTION ACCT_BAL_APROMPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCT_BAL_APROMPT;
  END ACCT_BAL_APROMPT_P;
  FUNCTION REF_CURR_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN REF_CURR_CODE;
  END REF_CURR_CODE_P;
  FUNCTION SUM_SP_ENT_CR_DBC_P RETURN NUMBER IS
  BEGIN
    RETURN SUM_SP_ENT_CR_DBC;
  END SUM_SP_ENT_CR_DBC_P;
  FUNCTION SUM_SP_ACCT_DR_DBC_P RETURN NUMBER IS
  BEGIN
    RETURN SUM_SP_ACCT_DR_DBC;
  END SUM_SP_ACCT_DR_DBC_P;
  FUNCTION SUM_SP_ACCT_CR_DBC_P RETURN NUMBER IS
  BEGIN
    RETURN SUM_SP_ACCT_CR_DBC;
  END SUM_SP_ACCT_CR_DBC_P;
  FUNCTION TMP_ENT_CR_DBC_P RETURN NUMBER IS
  BEGIN
    RETURN TMP_ENT_CR_DBC;
  END TMP_ENT_CR_DBC_P;
  FUNCTION TMP_ACCT_DR_DBC_P RETURN NUMBER IS
  BEGIN
    RETURN TMP_ACCT_DR_DBC;
  END TMP_ACCT_DR_DBC_P;
  FUNCTION TMP_ACCT_CR_DBC_P RETURN NUMBER IS
  BEGIN
    RETURN TMP_ACCT_CR_DBC;
  END TMP_ACCT_CR_DBC_P;
  FUNCTION TMP_ENT_DR_DBC_P RETURN NUMBER IS
  BEGIN
    RETURN TMP_ENT_DR_DBC;
  END TMP_ENT_DR_DBC_P;
  FUNCTION SUM_SP_ENT_DR_DBC_P RETURN NUMBER IS
  BEGIN
    RETURN SUM_SP_ENT_DR_DBC;
  END SUM_SP_ENT_DR_DBC_P;
  FUNCTION D_GSUM_ENT_CR_DBC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN D_GSUM_ENT_CR_DBC;
  END D_GSUM_ENT_CR_DBC_P;
  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;
  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_NAME;
  END RP_REPORT_NAME_P;
  FUNCTION RP_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_DATA_FOUND;
  END RP_DATA_FOUND_P;
  FUNCTION RP_POSTED_HDR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_POSTED_HDR;
  END RP_POSTED_HDR_P;
  FUNCTION RP_GL_HDR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_GL_HDR;
  END RP_GL_HDR_P;
  FUNCTION D_GSUM_ENT_DR_DBC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN D_GSUM_ENT_DR_DBC;
  END D_GSUM_ENT_DR_DBC_P;
  FUNCTION D_GSUM_ACCT_DR_DBC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN D_GSUM_ACCT_DR_DBC;
  END D_GSUM_ACCT_DR_DBC_P;
  FUNCTION D_GSUM_ACCT_CR_DBC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN D_GSUM_ACCT_CR_DBC;
  END D_GSUM_ACCT_CR_DBC_P;
  FUNCTION C_FLEX_SBC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_FLEX_SBC;
  END C_FLEX_SBC_P;
  FUNCTION FUNCTIONAL_CURRENCY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FUNCTIONAL_CURRENCY;
  END FUNCTIONAL_CURRENCY_P;
  FUNCTION C_CURRENCY_CODE_DBC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CURRENCY_CODE_DBC;
  END C_CURRENCY_CODE_DBC_P;
  FUNCTION C_CURRENCY_CODE_SBC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_CURRENCY_CODE_SBC;
  END C_CURRENCY_CODE_SBC_P;
  FUNCTION C_POSTED_DESC_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_POSTED_DESC;
  END C_POSTED_DESC_P;
  FUNCTION C_INDUSTRY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INDUSTRY_CODE;
  END C_INDUSTRY_CODE_P;
  FUNCTION C_SALES_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_SALES_TITLE;
  END C_SALES_TITLE_P;
  FUNCTION PL_POSTED_DATE_FROM_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PL_POSTED_DATE_FROM_TO;
  END PL_POSTED_DATE_FROM_TO_P;
  FUNCTION RP_REPORT_SUBNAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_SUBNAME;
  END RP_REPORT_SUBNAME_P;
  FUNCTION PL_GL_DATE_FROM_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PL_GL_DATE_FROM_TO;
  END PL_GL_DATE_FROM_TO_P;
  FUNCTION RP_MESSAGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_MESSAGE;
  END RP_MESSAGE_P;
  FUNCTION CP_ACC_MESSAGE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ACC_MESSAGE;
  END CP_ACC_MESSAGE_P;
/*  FUNCTION GET(APPL_ID IN INTEGER
              ,DEP_APPL_ID IN INTEGER
              ,STATUS OUT NOCOPY VARCHAR2
              ,INDUSTRY OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
     X0rv BOOLEAN;
  BEGIN
    begin
    X0rv := FND_INSTALLATION.GET(
APPL_ID,
DEP_APPL_ID,
STATUS,
INDUSTRY);
X0 := sys.diutil.bool_to_int(X0rv);
end;
    RETURN X0;
  END GET;
  FUNCTION GET_APP_INFO(APPLICATION_SHORT_NAME IN VARCHAR2
                       ,STATUS OUT NOCOPY VARCHAR2
                       ,INDUSTRY OUT NOCOPY VARCHAR2
                       ,ORACLE_SCHEMA OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_INSTALLATION.GET_APP_INFO(:APPLICATION_SHORT_NAME, :STATUS, :INDUSTRY, :ORACLE_SCHEMA); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_O(STATUS);
    STPROC.BIND_O(INDUSTRY);
    STPROC.BIND_O(ORACLE_SCHEMA);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,STATUS);
    STPROC.RETRIEVE(3
                   ,INDUSTRY);
    STPROC.RETRIEVE(4
                   ,ORACLE_SCHEMA);
    STPROC.RETRIEVE(5
                   ,X0);
    RETURN X0;
  END GET_APP_INFO;
  FUNCTION GET_APP_INFO_OTHER(APPLICATION_SHORT_NAME IN VARCHAR2
                             ,TARGET_SCHEMA IN VARCHAR2
                             ,STATUS OUT NOCOPY VARCHAR2
                             ,INDUSTRY OUT NOCOPY VARCHAR2
                             ,ORACLE_SCHEMA OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_INSTALLATION.GET_APP_INFO_OTHER(:APPLICATION_SHORT_NAME, :TARGET_SCHEMA, :STATUS, :INDUSTRY, :ORACLE_SCHEMA); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_I(TARGET_SCHEMA);
    STPROC.BIND_O(STATUS);
    STPROC.BIND_O(INDUSTRY);
    STPROC.BIND_O(ORACLE_SCHEMA);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,STATUS);
    STPROC.RETRIEVE(4
                   ,INDUSTRY);
    STPROC.RETRIEVE(5
                   ,ORACLE_SCHEMA);
    STPROC.RETRIEVE(6
                   ,X0);
    RETURN X0;
  END GET_APP_INFO_OTHER;*/
END AR_ARXPIREP_XMLP_PKG;



/
