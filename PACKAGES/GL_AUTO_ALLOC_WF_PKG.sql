--------------------------------------------------------
--  DDL for Package GL_AUTO_ALLOC_WF_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "APPS"."GL_AUTO_ALLOC_WF_PKG" AUTHID CURRENT_USER AS
/*  $Header: glwfalcs.pls 120.7 2005/05/05 02:08:06 kvora ship $  */

  -- Determines if debugging mesg  and trace file is created
  diagn_debug_msg_flag       BOOLEAN := FALSE;

  --    Public variables
  p_item_type                Varchar2(10) := 'GLALLOC';
  p_item_key                 Varchar2(40) ;
  G_FILE                     Varchar2(255)     := null;
  G_DIR                      Varchar2(255)
              :=  nvl(fnd_profile.value ('UTL_FILE_LOG'), NULL);
  G_FILE_PTR                 utl_file.file_type;
  err_name                   Varchar2(30);
  err_msg                    Varchar2(2000);
  err_stack                  Varchar2(32000);

  -- Procedure
  -- Start_AutoAllocation_Workflow
  -- Purpose
  --    Called from  AutoAllocation launcher concurrent program (glalgen.sql )
  --    Create work flow process and Start work flow
  -- Arguments
  --   Request_Id of AutoAllocation concurrent program
  -- Example
  --    gl_auto_allocation_wf_pkg.Start_AutoAllocation_Workflow;
  -- Notes
  --

PROCEDURE Start_AutoAllocation_Workflow(p_request_Id       IN NUMBER);


  -- Procedure
  -- set_wf_variables
  -- Purpose
  --  Called from  Start_AutoAllocation_Workflow
  --  Initilize all work flow item attributes
  --  Arguments
  --   Item key  (which is a request_id)  of workflow process

PROCEDURE Create_And_Start_Wf( p_request_Id       IN NUMBER );

  -- Procedure
  -- Next_Step_Type
  -- Purpose
  --  Called from  Workflow activity
  --  Determines what is the batch type of the step

Procedure Next_Step_Type(p_item_type      IN VARCHAR2,
                p_item_key       IN VARCHAR2,
                p_actid          IN NUMBER,
                p_funcmode       IN VARCHAR2,
                p_result         OUT NOCOPY VARCHAR2);

  -- Procedure
  -- Find_Je_Batch_Type
  -- Purpose
  --  Called from  Workflow activity
  --  Determines what is the batch type of the GL batch


Procedure Find_Je_Batch_Type(p_item_type  IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);

  -- Procedure
  -- Is_Review_Required
  -- Purpose
  --  Called from  Workflow activity
  --  Determines whether generated JE batch required review before posting

Procedure Is_Review_Required(p_item_type  IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);

  -- Procedure
  -- Is_Approval_Required
  -- Purpose
  --  Called from  Workflow activity
  --  Determines whether generated JE batch required approval before posting
Procedure Is_Approval_Required(p_item_type IN VARCHAR2,
                         p_item_key        IN VARCHAR2,
                         p_actid           IN NUMBER,
                         p_funcmode        IN VARCHAR2,
                         p_result          OUT NOCOPY VARCHAR2);

  -- Procedure
  -- Is_Batch_Approved
  -- Purpose
  --  Called from  Workflow activity
  --  Determines whether generated JE batch  is approved or not
Procedure Is_Batch_Approved(p_item_type   IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);


  -- Procedure
  -- Launch_JE_Approval
  -- Purpose
  --  Called from  Workflow activity
  --  Launched Journal Approval Workflow process

Procedure Launch_JE_Approval(p_item_type  IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);

  -- Procedure
  -- Is_Batch_Generated
  -- Purpose
  --  Called from  Workflow activity
  --  Determines whether any JE batch is generated by generation program
Procedure Is_Batch_Generated(p_item_type  IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);

  --  Select_And_Validate_Batch
  --  Purpose
  --  Called from  Workflow activity
  --  Validates batch status before posting
Procedure Select_And_Validate_Batch(p_item_type      IN VARCHAR2,
                                    p_item_key       IN VARCHAR2,
                                    p_actid          IN NUMBER,
                                    p_funcmode       IN VARCHAR2,
                                    p_result         OUT NOCOPY VARCHAR2);

  --  Is_Batch_Posted
  --  Purpose
  --  Called from  Workflow activity
  --  Determines whether batch is posted successfully

Procedure Is_Batch_Posted(p_item_type     IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);

  --  Delete_Batch
  --  Purpose
  --  Called from  Workflow activity
  --  Delete batch generated but not posted during rollback process

Procedure Delete_Batch(p_item_type      IN VARCHAR2,
                         p_item_key     IN VARCHAR2,
                         p_actid        IN NUMBER,
                         p_funcmode     IN VARCHAR2,
                         p_result       OUT NOCOPY VARCHAR2);

  --  Are_More_JE_Reverse
  --  Purpose
  --  Called from  Workflow activity
  --  Called during rollback process.
  --  Is there more batches left which needs to be reversed

Procedure Are_More_JE_Reverse(p_item_type IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);

  --  Is_Posting_Required
  --  Purpose
  --  Called from  Workflow activity
  --  Called during rollback process.
  --  Any reversed batch needs to be posted

Procedure Is_Posting_Required(p_item_type IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);

 --  Is_Jrnl_Reversed
  --  Purpose
  --  Called from  Workflow activity
  --  Called during rollback process.
  --  Determines whether batch is successfully reversed

Procedure Is_Jrnl_Reversed(p_item_type    IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);


  --  Select_And_Validate_AllBatches
  --  Purpose
  --  Called from  Workflow activity
  --  Called during rollback process.
  --  Validates reversed batches status before posting

Procedure Select_And_Validate_AllBatches(p_item_type      IN VARCHAR2,
                                         p_item_key       IN VARCHAR2,
                                         p_actid          IN NUMBER,
                                         p_funcmode       IN VARCHAR2,
                                         p_result         OUT NOCOPY VARCHAR2);

 --  Select_And_Validate_AllBatches
  --  Purpose
  --  Called from  Workflow activity
  --  Called during rollback process.
  --  Dertermines whether all reversed batches are posted successfully

Procedure Are_All_Batches_Posted(p_item_type      IN VARCHAR2,
                                 p_item_key       IN VARCHAR2,
                                 p_actid          IN NUMBER,
                                 p_funcmode       IN VARCHAR2,
                                 p_result         OUT NOCOPY VARCHAR2);


  --  Is_Rollback_Allowed
  --  Purpose
  --  Called from  Workflow activity
  --  Dertermines whether rollback is allowed when when any error occurs
  --  rollback is allowed only wher set doesnot conatain any project batch

Procedure Is_Rollback_Allowed(p_item_type      IN VARCHAR2,
                              p_item_key       IN VARCHAR2,
                              p_actid          IN NUMBER,
                              p_funcmode       IN VARCHAR2,
                              p_result         OUT NOCOPY VARCHAR2);

  --  Submit_MA_Program
  --  Purpose
  --  Called from  Workflow activity
  --  Submit request for MassAllocation generation program

Procedure Submit_MA_Program(p_item_type      IN VARCHAR2,
                            p_item_key       IN VARCHAR2,
                            p_actid          IN NUMBER,
                            p_funcmode       IN VARCHAR2,
                            p_result         OUT NOCOPY VARCHAR2);

  --  WAITING_TO_COMPLETE
  --  Purpose
  --  Called from  Workflow activity
  --   Wait for completion of the submitted concurrent program

Procedure WAITING_TO_COMPLETE(p_item_type       IN VARCHAR2,
                              p_item_key        IN VARCHAR2,
                              p_actid           IN NUMBER,
                              p_funcmode        IN VARCHAR2,
                              p_result          OUT NOCOPY VARCHAR2);

  --  Submit_Posting_Program
  --  Purpose
  --  Called from  Workflow activity
  --  Submit request for posting program

Procedure Submit_Posting_Program
                        (p_item_type      IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);


  --  Submit_RJE_Program
  --  Purpose
  --  Called from  Workflow activity
  --  Submit request for recurring generation

Procedure Submit_RJE_Program(p_item_type  IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);

  --  is_je_valid_for_posting
  --  Purpose
  --  Called from  Workflow activity
  --  Determine whether batch status is correct for posting

PROCEDURE is_je_valid_for_posting
                      (itemtype        IN VARCHAR2,
                       itemkey         IN VARCHAR2,
                       l_je_batch_id   IN NUMBER,
                       l_invalid_error OUT NOCOPY VARCHAR2,
                       result          OUT NOCOPY VARCHAR2 ) ;

  --  Submit_REV_Program
  --  Purpose
  --  Called from  Workflow activity
  --  Called only during rollback process
  --  Submit request for journal reversal program

Procedure Submit_REV_Program(p_item_type  IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);

  --  Submit_REV_Program
  --  Purpose
  --  Called from  Workflow activity
  --  Called only during rollback process
  --  Validate set before initiating rollback process.
  --  Initialize rollback context if allocation set is valid

Procedure VAL_SET_FOR_ROLLBACK
                        (p_item_type      IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2) ;

  --  END_FAIL
  --  Purpose
  --  Called from  Workflow activity
  --   Top level End Activity if work flow is terminated
  --   Set the wok flow step status to "Terminated"

procedure END_FAIL (p_item_type      IN VARCHAR2,
                    p_item_key       IN VARCHAR2,
                    p_actid          IN NUMBER,
                    p_funcmode       IN VARCHAR2,
                    p_result         OUT NOCOPY VARCHAR2) ;


procedure Selector_Func (p_item_type      IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2) ;

   -- Procedure   Submit_Request
  --  Purpose
  -- Submit concurrent request and insert record into
  -- GL_AUTO_ALLOC_BAT_HIST_DET table

Procedure Submit_Request(
          p_parent_request_id  IN NUMBER
         ,p_step_number        IN NUMBER
         ,Prog_Code            IN VARCHAR2
         ,p_attribute1         IN VARCHAR2 DEFAULT NULL
         ,p_attribute2         IN VARCHAR2 DEFAULT NULL
         ,p_attribute3         IN VARCHAR2 DEFAULT NULL
         ,p_attribute4         IN VARCHAR2 DEFAULT NULL
         ,p_attribute5         IN VARCHAR2 DEFAULT NULL
         ,p_attribute6         IN VARCHAR2 DEFAULT NULL
         ,p_attribute7         IN VARCHAR2 DEFAULT NULL
         ,p_attribute8         IN VARCHAR2 DEFAULT NULL
         ,p_attribute9         IN VARCHAR2 DEFAULT NULL
         ,p_attribute10        IN VARCHAR2 DEFAULT NULL
         ,p_attribute11        IN VARCHAR2 DEFAULT NULL
         ,p_attribute12        IN VARCHAR2 DEFAULT NULL
         ,p_sub_req_id         OUT NOCOPY NUMBER);

  -- Procedure   get_standard_who
  --  Purpose
  --  To set the standard who columns in the table

Procedure get_standard_who (
            l_CREATED_BY           OUT NOCOPY NUMBER
            ,l_LAST_UPDATED_BY     OUT NOCOPY NUMBER
            ,l_LAST_UPDATE_LOGIN   OUT NOCOPY NUMBER );

  --  Procedure INSERT_BATCH_HIST_DET
  --  Purpose
  --  Called after concurrent request is submitted
  --  To insert record into GL_ALLOC_BATCH_HIST_DET table

Procedure INSERT_BATCH_HIST_DET(
           p_request_id        IN NUMBER
          ,p_parent_request_id IN NUMBER
          ,p_step_number       IN NUMBER
          ,p_program_name_code IN VARCHAR2
          ,p_run_mode          IN VARCHAR2
          ,p_allocation_type   IN VARCHAR2 DEFAULT 'GL'
          ,p_created_by        IN NUMBER DEFAULT   -1
          ,p_last_updated_by   IN NUMBER DEFAULT   -1
          ,p_last_update_login IN NUMBER DEFAULT   -1
          );

  --  Function Contain_Projects
  --  Purpose
  --  Determine whether allocation set contain any project batch
  --  To insert record into GL_ALLOC_BATCH_HIST_DET table

Function Contain_Projects(
                     X_Request_Id   IN   NUMBER
                    )  RETURN BOOLEAN ;



  --  Procedure Update_Status
  --  Purpose
  --  Update status_code in GL_AUTO_ALLOC_BATCH_HISTORY for a step
  --  Called from WAITING_TO_COMPLETE

Procedure  Update_Status(
       l_request_id     IN NUMBER
      ,l_step_number    IN NUMBER
      ,l_status_code    IN Varchar2 ) ;


  --  Procedure Get_Status_and_Message
  --  Purpose
  --  Get status_code and set up the value for workflow notification message name
  --  Called from WAITING_TO_COMPLETE

Procedure Get_Status_and_Message(
          conc_prg_code    IN  Varchar2
         ,ptype            IN  Varchar2
         ,rollback_allowed IN Varchar2
         ,status_code      OUT NOCOPY Varchar2
         ,message_name     OUT NOCOPY Varchar2 );



  --  Procedure initialize_debug
  --  Purpose
  --  Initialize debug file
  --  initialize only if debug_flag is TRUE

Procedure initialize_debug ;

  --  Procedure diagn_debug_msg
  --  Purpose
  --  Write debug message to debug file
  --  debug message is written only if debug_flag is TRUE

PROCEDURE diagn_debug_msg (debug_message   IN  VARCHAR2);

 -- Procedure
  -- Continue_Next_Step
  -- Purpose
  --  Called from  Workflow activity
  --  Determines whether the step-down allocation should continue
  --  to process next step when no journal is generated.

Procedure continue_next_step(p_item_type  IN VARCHAR2,
                         p_item_key       IN VARCHAR2,
                         p_actid          IN NUMBER,
                         p_funcmode       IN VARCHAR2,
                         p_result         OUT NOCOPY VARCHAR2);


End GL_AUTO_ALLOC_WF_PKG;

 

/
