--------------------------------------------------------
--  DDL for Package HR_TRANSACTION_SS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "APPS"."HR_TRANSACTION_SS" AUTHID CURRENT_USER as
/* $Header: hrtrnwrs.pkh 120.1.12010000.2 2010/03/14 18:51:23 ckondapi ship $ */
-- Global variables
   g_date_format varchar2(10) := 'RRRR/MM/DD';
-- ---------------------------------------------------------------------------
-- Following are the Bulk Fetch Type Declaration
-- ---------------------------------------------------------------------------
TYPE NumberTblType IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE VarChar30TblType IS TABLE OF VARCHAR2(30) INDEX BY BINARY_INTEGER;
TYPE VarChar2000TblType IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
TYPE DateTblType IS TABLE OF DATE INDEX BY BINARY_INTEGER;

TYPE transaction_data IS RECORD
     (NAME                              VarChar30TblType
     ,VARCHAR2_VALUE                    VarChar2000TblType
     ,NUMBER_VALUE                      NumberTblType
     ,DATE_VALUE                        DateTblType);
g_oracle_db_version  CONSTANT NUMBER := hr_general2.get_oracle_db_version;
-- ---------------------------------------------------------------------------
-- Following two variables are used by save_transaction_step procedure.
-- ---------------------------------------------------------------------------

TYPE transaction_row IS RECORD
	(param_name VARCHAR2(200)
	,param_value LONG
        ,param_original_value LONG  --ns
	,param_data_type VARCHAR2(200));

TYPE transaction_table IS TABLE OF transaction_row INDEX BY BINARY_INTEGER;
-- ----------------------------------------------------------------------------
-- get workflow attribute p_effective_date.
-- ----------------------------------------------------------------------------

FUNCTION get_wf_effective_date
  (p_transaction_step_id in number)
RETURN varchar2;

-- ----------------------------------------------------------------------------
-- |---------------------------< get_transaction_id >-------------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   This function returns the TRANSACTION_ID for the specified item type
--   and key exist. If the TRANSACTION_ID does not exist a NULL value is
--   returned.
--
-- Pre-Requisities:
--   None.
--
-- In Parameters:
--   p_item_type -> The internal name for the item type.
--   p_item_key  -> A string that represents a primary key generated by the
--                  application for the item type. The string uniquely
--                  identifies the item within an item type.
--
-- Post Success:
--   If the TRANSACTION_ID exists for the item type and key then the value
--   is returned.
--   If the TRANSACTION_ID does not exist then a NULL value is returned.
--
-- Post Failure:
--   None.
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Internal Development Use Only.
--
-- {End Of Comments}
--
-------------------------------------------------------------------------------
-- Validate the transaction.
-- result returns 'Y' - pass validation
-- result returns 'N' - has errors.
-------------------------------------------------------------------------------
procedure validate_transaction
  (p_item_type     in     varchar2
  ,p_item_key      in     varchar2
  ,p_effective_date in varchar2 default null
  ,p_update_object_version in varchar2 default 'N'
  ,p_result          out nocopy varchar2);
-------------------------------------------------------------------------------
-- ns 11/06/2003: Bug 3223682: Overloaded version
-- Validate the transaction.
-- additional parameter p_ignore_warnings
-------------------------------------------------------------------------------
procedure validate_transaction
  (p_item_type      in     varchar2
  ,p_item_key       in     varchar2
  ,p_effective_date in varchar2 default null
  ,p_update_object_version in varchar2 default 'N'
  ,p_ignore_warnings in varchar2 default 'N'
  ,p_result         out nocopy varchar2);
-------------------------------------------------------------------------------
-- set workflow item attribute 'SAVE_FOR_LATER'
-- 'S' -- Save for Later
-- 'C' -- Returned for Correction
-- 'Y' -- Submitted for Approval
-- 'W' -- this is the default value. It is for the system crash or system time
--        out.
-- 'D' -- this is for the deleted suspended process.
-- ----------------------------------------------------------------------------
procedure set_initial_save_for_later
 (itemtype in varchar2,
  itemkey      in varchar2,
  actid        in number,
  funmode      in varchar2,
  result       out nocopy varchar2 );

procedure set_delete_save_for_later
 (itemtype in varchar2,
  itemkey      in varchar2,
  actid        in number,
  funmode      in varchar2,
  result       out nocopy varchar2 );

procedure set_save_for_later_status
    (p_item_type in     varchar2
    ,p_item_key  in     varchar2
    ,p_status    in     varchar2
    ,p_transaction_id in number default null);

procedure set_save_for_later
 (itemtype in varchar2,
  itemkey      in varchar2,
  actid        in number,
  funmode      in varchar2,
  result       out nocopy varchar2 );

procedure set_return_for_correction
 (itemtype in varchar2,
  itemkey      in varchar2,
  actid        in number,
  funmode      in varchar2,
  result       out nocopy varchar2 );

procedure set_submit_for_approval
 (itemtype in varchar2,
  itemkey      in varchar2,
  actid        in number,
  funmode      in varchar2,
  result       out nocopy varchar2 );

-- ----------------------------------------------------------------------------
function get_transaction_id
  (p_item_type   in varchar2
  ,p_item_key    in varchar2) return number;
-- ----------------------------------------------------------------------------
-- |----------------------------< start_transaction >-------------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   This procedure initiates a new transaction. When a new transaction is
--   initiated the following item attributes are created if they don't already
--   exist: TRANSACTION_ID, CURRENT_PERSON_ID, TRANSACTION_PRIVILEGE
--
--   The TRANSACTION_ID stores the transaction identifier.
--   The CURRENT_PERSON_ID stores the person identifier as the workflow
--   progresses.
--   The TRANSACTION_PRIVILEGE determines if the transaction is PUBLIC or
--   PRIVATE.
--
--   A transaction is created by calling the
--   hr_transaction_api.create_transaction business process API.
--
-- Pre-Requisities:
--   Executed from Oracle Workflow.
--
-- In Parameters:
--   All the following IN parameteres are set by Oracle Workflow:
--   itemtype -> The internal name for the item type.
--   itemkey  -> A string that represents a primary key generated by
--               the application for the item type. The string uniquely
--               identifies the item within an item type.
--   actid    -> The ID number of the activity that this procedure is
--               called from.
--   funmode  -> The mode of the function activity. Either 'RUN' or
--               'CANCEL'.
--
-- Post Success:
--   A new transaction is created with the following item attributes set:
--   TRANSACTION_ID, CURRENT_PERSON_ID, TRANSACTION_PRIVILEGE
--   A workflow result of SUCCESS is set
--
-- Post Failure:
--   This procedure can fail under the following circumstances:
--   1) If a TRANSACTION_ID item attribute already exists with a value for
--      the item type and key. You cannot start a new transaction if the
--      item type and key already have a transaction in progress.
--   2) Validating the login
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Internal Development Use Only.
--
-- {End Of Comments}
-- ----------------------------------------------------------------------------
procedure start_transaction
  (itemtype     in     varchar2
  ,itemkey      in     varchar2
  ,actid        in     number
  ,funmode      in     varchar2
  ,p_login_person_id in number
  ,p_product_code                   in varchar2 default null
  ,p_url                          in varchar2 default null
  ,p_status                       in varchar2 default null
  ,p_section_display_name          in varchar2 default null
  ,p_function_id                  in number default null
  ,p_transaction_ref_table        in varchar2 default 'HR_API_TRANSACTIONS'
  ,p_transaction_ref_id           in number default null
  ,p_transaction_type             in varchar2 default null
  ,p_assignment_id                in number default null
  ,p_api_addtnl_info              in varchar2 default null
  ,p_selected_person_id           in number default null
  ,p_transaction_effective_date       in date default null
  ,p_process_name                 in varchar2 default null
  ,p_plan_id                      in number default null
  ,p_rptg_grp_id                  in number default null
  ,p_effective_date_option        in varchar2 default null
  ,result         out nocopy  varchar2
  );
-- ----------------------------------------------------------------------------
-- |----------------------------< rollback_transaction >----------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   This procedure deletes the transaction values, steps and transaction for
--   the specified item type and key.
--
-- Pre-Requisities:
--   Executed from Oracle Workflow.
--
-- In Parameters:
--   All the following IN parameteres are set by Oracle Workflow:
--   itemtype -> The internal name for the item type.
--   itemkey  -> A string that represents a primary key generated by
--               the application for the item type. The string uniquely
--               identifies the item within an item type.
--   actid    -> The ID number of the activity that this procedure is
--               called from.
--   funmode  -> The mode of the function activity. Either 'RUN' or
--               'CANCEL'.
--
-- Post Success:
--   The transaction values, steps and transaction will be deleted from
--   the transaction schema for the given item type and key.
--   A workflow result of SUCCESS is set
--
-- Post Failure:
--   If the deletion of the transaction raises an exception this is treated
--   as a system error and raised as such.
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Internal Development Use Only.
--
-- {End Of Comments}
-- ----------------------------------------------------------------------------
procedure rollback_transaction
  (itemtype     in     varchar2
  ,itemkey      in     varchar2
  ,actid        in     number
  ,funmode      in     varchar2
  ,result         out nocopy  varchar2);
-- ----------------------------------------------------------------------------
-- |-------------------------< process_web_api_call >-------------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   This procedure will for the specified transaction step and web form API
--   name execute the API using dynamic PL/SQL.
--
-- Pre-Requisities:
--   The transaction step and API code must exist.
--
-- In Parameters:
--   p_transaction_step_id -> The transaction step identifier.
--   p_api_name            -> The API name to be called (e.g.
--                            hr_emp_marital_web.process_api).
--   p_validate            -> If set to TRUE all the work
--                            performed by the API will be
--                            rolled back. If set to FALSE,
--                            the work is not rolled back.
--
-- Post Success:
--   The API would be dynamically built, parsed and executed.
--
-- Post Failure:
--   The exception is raised.
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Internal Development Use Only.
--
-- {End Of Comments}
-- ----------------------------------------------------------------------------
procedure process_web_api_call
  (p_transaction_step_id   in number
  ,p_api_name              in varchar2
  ,p_extra_parameter_name  in varchar2 default null
  ,p_extra_parameter_value in varchar2 default null
  ,p_validate              in boolean default false);
-- ----------------------------------------------------------------------------
-- |----------------------------< commit_transaction >------------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   This procedure will process each transaction step for the transaction.
--   If ALL the transaction step process successfully then the transaction
--   is committed to the HR Schema.
--   If any application errors or warnings are raised then the errors are
--   reported (warnings are only reported once). If a system error occurrs
--   the system error is raised. If either an application, warning or system
--   error has been reported, the work performed by the transaction is
--   rolled back (the transaction itself stays intact).
--
-- Pre-Requisities:
--   Executed from Oracle Workflow.
--
-- In Parameters:
--   All the following IN parameteres are set by Oracle Workflow:
--   itemtype -> The internal name for the item type.
--   itemkey  -> A string that represents a primary key generated by
--               the application for the item type. The string uniquely
--               identifies the item within an item type.
--   actid    -> The ID number of the activity that this procedure is
--               called from.
--   funmode  -> The mode of the function activity. Either 'RUN' or
--               'CANCEL'.
--
-- Post Success:
--   The work performed by the transaction is committed to the Schema and
--   a result of SUCCESS is returned.
--
-- Post Failure:
--   If an application or warning error is raised then the errors are
--   displayed as a HTML form.
--   If a system error is raised, the workflow activity is placed in
--   ERROR.
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Internal Development Use Only.
--
-- {End Of Comments}
-- ----------------------------------------------------------------------------
procedure commit_transaction
  (itemtype     in     varchar2
  ,itemkey      in     varchar2
  ,actid        in     number
  ,funmode      in     varchar2
  ,result          out nocopy varchar2);
-- ----------------------------------------------------------------------------
-- |---------------------< commit_approval_transaction >----------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   This procedure will process each transaction step for the transaction.
--   If ALL the transaction step process successfully then the transaction
--   is committed to the HR Schema.
--   If any application errors are raised then a result of
--   APPLICATION_ERROR is returned. If a warning is raised it is ignored.
--   At no point is any HTML is generated.
--   If a system error occurrs the system error is raised. If either an
--   application or system error has been reported, the work
--   performed by the transaction is rolled back (the transaction itself
--   stays intact).
--
-- Pre-Requisities:
--   Executed from Oracle Workflow.
--
-- In Parameters:
--   All the following IN parameteres are set by Oracle Workflow:
--   itemtype -> The internal name for the item type.
--   itemkey  -> A string that represents a primary key generated by
--               the application for the item type. The string uniquely
--               identifies the item within an item type.
--   actid    -> The ID number of the activity that this procedure is
--               called from.
--   funmode  -> The mode of the function activity. Either 'RUN' or
--               'CANCEL'.
--
-- Post Success:
--   The work performed by the transaction is committed to the Schema and
--   a result of SUCCESS is returned.
--
-- Post Failure:
--   If an application error is raised then the APPLICATION_ERROR result
--   is returned.
--   If a system error is raised, the workflow activity is placed in
--   ERROR.
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Internal Development Use Only.
--
-- {End Of Comments}
-- ----------------------------------------------------------------------------
procedure commit_approval_transaction
  (itemtype     in     varchar2
  ,itemkey      in     varchar2
  ,actid        in     number
  ,funmode      in     varchar2
  ,result          out nocopy varchar2);
-- ----------------------------------------------------------------------------
-- |-----------------------------< retry_transaction >------------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Description:
--   This procedure will retry an transaction which had previously failed
--   due to errors or warnings being processed.
--   If ALL the transaction step process successfully then the transaction
--   is committed to the HR Schema. All warnings are ignored.
--   If any application errors are raised then the errors are
--   reported (warnings are ignored). If a system error occurrs
--   the system error is raised. If either an application or system
--   error has been reported, the work performed by the transaction is
--   rolled back (the transaction itself stays intact).
--
-- Pre-Requisities:
--
-- In Parameters:
--   p_item_type -> The internal name for the item type.
--   p_item_key  -> A string that represents a primary key generated by
--                  the application for the item type. The string uniquely
--                  identifies the item within an item type.
--   p_actid     -> The ID number of the activity that this procedure is
--                  called from.
--
-- Post Success:
--   The work performed by the transaction is committed to the Schema and
--   the workflow activity is completed with a result of SUCCESS.
--
-- Post Failure:
--   If an application error is raised then the errors are displayed
--   as a HTML form.
--   If a system error is raised, the workflow activity is placed in
--   ERROR.
--
-- Developer Implementation Notes:
--   None
--
-- Access Status:
--   Internal Development Use Only.
--
-- {End Of Comments}
-- ----------------------------------------------------------------------------
procedure retry_transaction
  (p_item_type in varchar2
  ,p_item_key  in varchar2
  ,p_actid     in number);
--
/*------------------------------------------------------------------------------
|
|       Name           : save_transaction_step
|
|       Purpose        :
|
|       Saves the records into Transaction Tables.
|
|       In Parameters  :
|          p_item_type ->
|                   The internal name for the item type.
|          p_item_key  ->
|                   A string that represents a primary key generated by
|                   the application for the item type. The string uniquely
|                   identifies the item within an item type.
|          p_actid     ->
|                  The ID number of the activity that this procedure is called
|                  from.
|          p_transaction_Step_id =>
|                  Transaction Step ID
|          p_api_name ->
|                  Fully qualified procedure name which will update the HRMS
|                  table.(eg hr_addresses_web.process_api). This procedure will
|                  be called by the approval process.
|          p_api_display_name ->
|                  ?
|          p_transaction_data ->
|                 A record structure which contains the data to be saved to the
|                 transaction table.
+-----------------------------------------------------------------------------*/
PROCEDURE save_transaction_step
	(p_item_type IN VARCHAR2
	,p_item_key IN VARCHAR2
	,p_actid IN NUMBER
        ,p_login_person_id IN NUMBER
	,p_transaction_step_id IN OUT NOCOPY NUMBER
	,p_api_name IN VARCHAR2 default null
	,p_api_display_name IN VARCHAR2 DEFAULT NULL
	,p_transaction_data IN TRANSACTION_TABLE
        ,p_product_code                   in varchar2 default null
        ,p_url                          in varchar2 default null
        ,p_status                       in varchar2 default null
        ,p_section_display_name          in varchar2 default null
        ,p_function_id                  in number default null
        ,p_transaction_ref_table        in varchar2 default null
        ,p_transaction_ref_id           in number default null
        ,p_transaction_type             in varchar2 default null
        ,p_assignment_id                in number default null
        ,p_api_addtnl_info              in varchar2 default null
        ,p_selected_person_id           in number default null
        ,p_transaction_effective_date       in date default null
        ,p_process_name                 in varchar2 default null
        ,p_plan_id                      in number default null
        ,p_rptg_grp_id                  in number default null
        ,p_effective_date_option        in varchar2 default null
	) ;

        /*
       ||=======================================================================
       || FUNCTION    : get_activity_trans_step_id
       || DESCRIPTION : This will return the transaction step id for a given
       ||               activity name and from possible 'active' transaction
       ||               steps.
       ||=======================================================================
       */
	FUNCTION get_activity_trans_step_id
		 (p_activity_name IN
			wf_item_activity_statuses_v.activity_name%TYPE
  		 ,p_trans_step_id_tbl  IN hr_util_web.g_varchar2_tab_type)
		 RETURN hr_api_transaction_steps.transaction_step_id%TYPE ;
 /*
       ||======================================================================
       || FUNCTION    : check_txn_step_exists
       || DESCRIPTION : This will return TRUE or FALSE depending on whehter
       ||               data exists for an activity in the txn table

       || In Parameters  :
       ||     p_item_type ->
       ||       The internal name for the item type.
       ||     p_item_key  ->
       ||       A string that represents a primary key generated by
       ||       the application for the item type. The string uniquely
       ||       identifies the item within an item type.
       ||     p_actid     ->
       ||       The ID number of the activity that this procedure is called
       ||       from.
       ||=====================================================================
       */

        FUNCTION check_txn_step_exists (
          p_item_type IN     wf_items.item_type%TYPE,
          p_item_key IN      wf_items.item_key%TYPE,
          p_actid IN        NUMBER  )
        RETURN BOOLEAN ;


 /*
       ||======================================================================
       || PROCEDURE   : delete_txn_step
       || DESCRIPTION : Delete a transaction step for a given activity
       ||

       || In Parameters  :
       ||     p_item_type ->
       ||       The internal name for the item type.
       ||     p_item_key  ->
       ||       A string that represents a primary key generated by
       ||       the application for the item type. The string uniquely
       ||       identifies the item within an item type.
       ||     p_actid     ->
       ||       The ID number of the activity that this procedure is called
       ||       from.
       ||    p_activity_name ->
       ||       Name of the activity for which steps need to be deleted
       ||=====================================================================
       */

        PROCEDURE delete_trn_step_by_act_name(
          p_item_type IN     varchar2,
          p_item_key IN      varchar2,
          p_actid IN        varchar2,
          P_activity_name IN   VARCHAR2,
          p_login_person_id in varchar2 );

PROCEDURE delete_transaction_steps(
  p_item_type IN     varchar2,
  p_item_key  IN     varchar2,
  p_actid     IN     varchar2 default null,
  p_login_person_id  IN varchar2);

PROCEDURE delete_transaction_step(
  p_transaction_step_id IN varchar2,
  p_object_version_number IN varchar2 default null,
  p_login_person_id  IN varchar2);

function get_transaction_step_ovn(
  p_transaction_step_id in number)
return number;

procedure set_transaction_value
(p_transaction_step_id in varchar2
,p_login_person_id     in varchar2
,p_datatype            in varchar2
,p_name                in varchar2
,p_value               in varchar2);

procedure create_transaction_step
(p_item_type      in varchar2
,p_item_key       in varchar2
,p_actid          in varchar2
,p_login_person_id   in varchar2
,p_api_name       in varchar2
,p_transaction_step_id out nocopy varchar2
,p_object_version_number out nocopy varchar2);

--
-- --------------------<get_review_regions>----------------------------- --
-- Procedure to get the review region item names, step ids and activity ids of the
-- update regions involved in a current transaction.
-- This procedure return one string which will in turn gets parsed by the
-- jdbc code that is calling this.
-- ---------------------------------------------------------------------- --
--
procedure get_review_regions
(p_item_key        IN  VARCHAR2
,p_item_Type       IN  VARCHAR2
,p_review_regions OUT nocopy VARCHAR2
,p_status         OUT nocopy VARCHAR2);
--

procedure get_transaction_data
(p_transaction_step_id  IN            VARCHAR2
,p_bulk_fetch_limit     IN            NUMBER DEFAULT 200
,p_transaction_data     OUT nocopy transaction_data);
--

procedure set_transaction_approved
 (itemtype     in varchar2,
  itemkey      in varchar2,
  actid        in number,
  funmode      in varchar2,
  result       out nocopy varchar2 );
--
end hr_transaction_ss;

/
