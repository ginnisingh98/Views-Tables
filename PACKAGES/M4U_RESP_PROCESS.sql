--------------------------------------------------------
--  DDL for Package M4U_RESP_PROCESS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "APPS"."M4U_RESP_PROCESS" AUTHID CURRENT_USER AS
/* $Header: m4uresps.pls 120.1 2005/10/27 03:34:17 rkrishan noship $ */
/*#
 * This package contains the private helper APIs invoked while processing
 * UCCnet XML response messages for RCIR, CIN, Worklist query messages.
 * @rep:scope private
 * @rep:product CLN
 * @rep:displayname Response XML message processing APIs.
 * @rep:category BUSINESS_ENTITY EGO_ITEM
 */
        -- Name
        --      add_error_to_cln_hist
        -- Purpose
        --      This generic procedure is used to add error-messages to CLN History
        -- Arguments
        --      p_error_code                    - UCCnet specific error code
        --      p_error_message                 - UCCnet generated error description
        --      p_error_type                    - 'ERROR',(haven't seen anything else)
        --      p_collab_detail_id              - collaboration-history detail id to be updated
        --      p_ucc_doc_unique_id             - uccnet generated document identifer for inbound payload
        --      p_xmlg_internal_control_no      - XMLG ICN for debug purpose only
        --      x_return_status                 - return_status (S-Success/F-failure)
        --      x_msg_data                      - return message (if any)
        -- Notes
        --      Adds error-information to collaboration history detail messages
        /*#
        * This procedure is called to add error-messages parsed from UCCnet XML reponses to the collaboration history.
        * @param p_error_code UCCnet supplied error code.
        * @param p_error_type UCCnet supplied error string.
        * @param p_error_message UCCnet description of the error.
        * @param p_collab_detail_id Collaboration detail-id to be updated with error.
        * @param p_ucc_doc_unique_id UCCnet document identifier for response.
        * @param p_xmlg_internal_control_no XMLG Internal Control Number
        * @param x_return_status Return status of API call
        * @param x_msg_data Return message of API call
        * @rep:displayname Adds error messages to collaboration history
        * @rep:scope private
        * @rep:lifecycle active
        */
        PROCEDURE add_error_to_cln_hist(
                                p_error_code                    IN VARCHAR2,
                                p_error_type                    IN VARCHAR2,
                                p_error_message                 IN VARCHAR2,
                                p_collab_detail_id              IN VARCHAR2,
                                p_ucc_doc_unique_id             IN VARCHAR2,
                                p_xmlg_internal_control_no      IN VARCHAR2,
                                x_return_status                 OUT NOCOPY VARCHAR2,
                                x_msg_data                      OUT NOCOPY VARCHAR2 );

        -- Name
        --      process_cic_notification
        -- Purpose
        --      This process is called for each CIC notification received from a Retailer(in worklist query response)
        --      The Worklist-Query of the type/topic CatalogueItemConfirmation/RoutedDocument
        --      contains CIC notifications issued by retailers
        --      The ego_uccnet_events table, and CLN Collaboration need to be updated
        --      When the catalogueItemConfirmationState is "REJECTED|SYNCHRONIZED" an event needs to be
        --      raised to move the item-publication WF which is blocked at this stage.
        -- Arguments
        --      p_gtin                          => GTIN of item notified
        --      p_supp_gln                      => Supplier GLN
        --      p_target_market                 => Code of target market
        --      p_retailer_gln                  => GLN of ratiler to whom notification is sent
        --      p_cic_unique_id                 => Unique creator ID of CIC document generated by reatiler
        --      p_cic_state                     => State of CIC notification
        --      p_cin_unique_id                 => Unique creator of CIN for which this CIC was generated
        --      p_ucc_doc_unique_id             => Unique document identifier of wLQ response generated by UCCnet
        --      p_xmlg_internal_colntrol_no     => XMLG internal control no. from map
        --      x_return_status                 => Collaboration history detail-id, to be used for further processing
        --      x_return_status                 => return_status (s-Success/F-failure)
        --      x_msg_data                      => return message
        -- Notes
        --      (GTIN + Supplier GLN + Target Code) identify a unique item registered in the UCCnet registry.
        --      p_cin_unique_id = CLN Id for collaboration of outbound document
        /*#
        * This procedure is called for each CIC Catalog Item Confirmation - notification
        * received from a retailer as part of worklist query response.
        * The procedure updates EGO Item APIs  and collaboration history tables with the details parsed from the payloads.
        * A notification is issued to the document owner with the CIC details.
        * @param p_gtin GTIN corresponding to CIN
        * @param p_supp_gln GLN of supplier
        * @param p_target_market Target market of supplier
        * @param p_retailer_gln GLN of retailer
        * @param p_cic_unique_id Unique CIC identifier
        * @param p_cic_state CIC status sent by retailer.
        * @param p_cin_unique_id CIN unique identifier.
        * @param p_ucc_doc_unique_id UCC docuemnt unique Identifier
        * @param p_xmlg_internal_control_no XMLG internal control number
        * @param x_collab_detail_id Collaboraction detail returned by update collaboration call.
        * @param x_return_status API return status
        * @param x_msg_data API  return message.
        * @rep:scope private
        * @rep:lifecycle active
        * @rep:displayname Processes Catalogue Item Confirmation (CIC), notifications
        */
        PROCEDURE process_cic_notification(
                                p_gtin                          IN      VARCHAR2,
                                p_supp_gln                      IN      VARCHAR2,
                                p_target_market                 IN      vARCHAR2,
                                p_retailer_gln                  IN      VARCHAR2,
                                p_cic_unique_id                 IN      VARCHAR2,
                                p_cic_state                     IN      VARCHAR2,
                                p_cin_unique_id                 IN      VARCHAR2,
                                p_ucc_doc_unique_id             IN      VARCHAR2,
                                p_xmlg_internal_control_no      IN      NUMBER,
                                x_collab_detail_id              OUT     NOCOPY  NUMBER,
                                x_return_status                 OUT     NOCOPY  VARCHAR2,
                                x_msg_data                      OUT     NOCOPY  VARCHAR2 );


        -- Name
        --      process_cic_additional_info
        -- Purpose
        --      This process is called to cater for additional attributes obtained in
        --      CIC notification received from a Retailer(in worklist query response)
        /*#
        * This procedure is called to cater for the additional information
        * in each CIC Catalog Item Confirmation - notification received from a
        * retailer as part of worklist query response.
        * The procedure updates EGO Item APIs  and collaboration history tables
        * with the details parsed from the payloads.
        * @param p_cln_id Collaboration ID
        * @param p_cic_code CIC code sent from the customer
        * @param p_cic_description Code description
        * @param p_cic_action_needed Action Required
        * @param p_collab_detail_id Collaboration detail ID
        * @param x_return_status API return status
        * @param x_msg_data API  return message.
        * @rep:scope private
        * @rep:lifecycle active
        * @rep:displayname Processes Catalogue Item Confirmation (CIC), notifications
        */

        PROCEDURE process_cic_additional_info(
                                p_cln_id                IN  NUMBER,
                                p_cic_code              IN  VARCHAR2,
                                p_cic_description       IN  VARCHAR2,
                                p_cic_action_needed     IN  VARCHAR2,
                                p_collab_detail_id      IN  NUMBER,
                                x_return_status         OUT NOCOPY VARCHAR2,
                                x_msg_data              OUT NOCOPY VARCHAR2 );


        --      process_cic_trade_item
        -- Purpose
        --      This process is called if the optional trade-item information is sent along with the CIC document
        --      The Worklist-Query of the type/topic CatalogueItemConfirmation/RoutedDocument
        --        contains CIC notifications issued by retailers
        --      No processing is defined for this, dummy procedure call
        -- Arguments
        --      p_gtin                          => GTIN of item received as part of CIC
        --      p_supp_gln                      => Supplier GLN of item received as part of CIC
        --      p_target_market                 => Target market code of item received as part of CIC
        --      p_reailter_gln                  => GLN of retailer who generated the CIC
        --      p_cic_unique_id                 => uniquecreatorID of CIC document
        --      p_cic_state                     => State of CIC
        --      p_cin_unique_id                 => uniqueCreatorId of CIN for which this CIC is generated
        --      p_ucc_doc_unique_id             => uniqueCreatorId of UCCnet generated WLQ response
        --      p_xmlg_internal_colntrol_no     => XMLG map ICN
        --      x_collab_detail_id              => Collaboration history detail-id, to be used for further processing
        --      x_return_status                 => return_status (s-Success/F-failure)
        --      x_msg_data                      => return message
        -- Notes
        --      (GTIN + Supplier GLN + Target Code) identify a unique item registered in the UCCnet registry.
        PROCEDURE process_cic_trade_item(
                                p_gtin                          IN      VARCHAR2,
                                p_supp_gln                      IN      VARCHAR2,
                                p_target_market                 IN      vARCHAR2,
                                p_retailer_gln                  IN      VARCHAR2,
                                p_cic_unique_id                 IN      VARCHAR2,
                                p_cic_state                     IN      VARCHAR2,
                                p_cin_unique_id                 IN      VARCHAR2,
                                p_ucc_doc_unique_id             IN      VARCHAR2,
                                p_xmlg_internal_control_no      IN      NUMBER,
                                x_collab_detail_id              OUT     NOCOPY  NUMBER,
                                x_return_status                 OUT     NOCOPY  VARCHAR2,
                                x_msg_data                      OUT     NOCOPY  VARCHAR2 );

        -- Name
        --      process_rcir_notification
        -- Purpose
        --      This process is called for each RCIR command in a transaction batch.
        --      The Worklist-query response contains status of each of the RCIR command
        --      The ego_uccnet_events table, and CLN Collaboration need to be updated
        --    The Collaboration Detail Id is an out parameter, to be used subsequently for updating error messsages.
        -- Arguments
        --      p_gtin                          => The GTIN of the Item published in the Batch
        --      p_supp_gln                      => Unique GLN of Supplier
        --      p_target_market                 => target market to which the item is to be published
        --      p_rcir_batch_id                 => The Batch_Id of the Batch in which the RCIR command was sent
        --      p_rcir_command_success          => TRUE/FALSE flag, indicates if Item-Registration was successful
        --      p_rcir_command_unique_id        => Unique Creartor Id of RCIR command (command level)
        --      p_rcir_command_validation_key   => Unique validation key, received for successful registration.
        --      p_ucc_doc_unique_id             => Unique UCCnet generated identifier for the document
        --      p_xmlg_internal_control_no      => XMLG Generated Unique Id for Document
        --      x_collab_detail_id              => The collab_detail_id returned by CLN Update CH API call.
        --      x_return_status                 => return_status (s-Success/F-failure)
        --      x_msg_data                      => return message
        -- Notes
        --      (GTIN + Supplier GLN + Target Code) identify a unique item registered in the UCCnet registry.
        /*#
        * This procedure is called to update EGO Item APIs and collaboration history tables
        * for each RCIR notification in a transaction batch.
        * @param p_gtin GTIN of RCIR command
        * @param p_supp_gln GLN of RCIR command
        * @param p_target_market Target market of RCIR command
        * @param p_rcir_batch_id Batch of RCIR command
        * @param p_rcir_command_unique_id RCIR command identifier
        * @param p_rcir_command_success RCIR command success/failur response
        * @param p_rcir_command_validation_key RCIR command validaition key
        * @param p_ucc_doc_unique_id XML response document unique identifier
        * @param p_xmlg_internal_control_no XMLG internal control number
        * @param x_collab_detail_id Returned collaboration detail id
        * @param x_return_status API return status
        * @param x_msg_data API return message
        * @rep:scope private
        * @rep:lifecycle active
        * @rep:displayname Processes RCIR notifications.
        */

        PROCEDURE process_rcir_notification(
                                p_gtin                          IN      VARCHAR2,
                                p_supp_gln                      IN      VARCHAR2,
                                p_target_market                 IN      VARCHAR2,
                                p_rcir_batch_id                 IN      VARCHAR2,
                                p_rcir_command_unique_id        IN      VARCHAR2,
                                p_rcir_command_success          IN      VARCHAR2,
                                p_rcir_command_validation_key   IN      VARCHAR2,
                                p_ucc_doc_unique_id             IN      VARCHAR2,
                                p_xmlg_internal_control_no      IN      NUMBER,
                                x_collab_detail_id              OUT     NOCOPY  NUMBER,
                                x_return_status                 OUT     NOCOPY  VARCHAR2,
                                x_msg_data                      OUT     NOCOPY  VARCHAR2 );

        -- Name
        --      process_rcir_batch_list
        -- Purpose
        --      process all RCIR-BATCHes received in a Worlist-query Batch Notification reponse
        --      raise event, for each batch-id to move corresponding WF block
        -- Arguments
        --      p_rcir_batch_id_list            => distinct RCIR batch_ids which have been processed
        --                                                 are concatenated into a string, delimited by ':' string.
        --      p_rcir_batch_count              => Count of number of Batch_ids in the above string
        --      p_ucc_doc_unique_id             => unique UCCnet generated document identifer
        --      p_xmlg_internal_control_no      => XML Gateway generated Internal Control Number for document
        --      x_return_status                 => return_status (s-Success/F-failure)
        --      x_msg_data                      => return message
        -- Notes
        --      Sample input to this procedure would be
        --      p_rcir_batch_id_list - rcir1:rcir2:rcir3:
        --      p_rcir_batch_count   - 3
        /*#
        * A notifcation is issued to the RCIR-Batch document owner with the status of invididual RCIR commands in the batch.
        * @param p_rcir_batch_id_list List of RCIR Batch ids
        * @param p_rcir_batch_count Count of RCIR Batch ids in the list
        * @param p_ucc_doc_unique_id RCIR Batch response document unique id
        * @param p_xmlg_internal_control_no XMLG Internal control number
        * @param x_return_status API return status
        * @param x_msg_data API return message
        * @rep:scope private
        * @rep:lifecycle active
        * @rep:displayname Raises notifcation with RCIR Batch information.
        */
        PROCEDURE process_rcir_batch_list(
                                p_rcir_batch_id_list            VARCHAR2,
                                p_rcir_batch_count              NUMBER,
                                p_ucc_doc_unique_id             VARCHAR2,
                                p_xmlg_internal_control_no      VARCHAR2,
                                x_return_status                 OUT NOCOPY      VARCHAR2,
                                x_msg_data                      OUT NOCOPY      VARCHAR2 );


        -- Name
        --      process_wlq_response
        -- Purpose
        --      This process is called after a worklist query response document processed
        --      This is done to update the CLN collaboration  corresponding to the WLQ send
        -- Arguments
        --      p_wlq_message_id                => Used as CLN_Id for the WLQ Collaboration
        --      p_wlq_success_flag              => TRUE/FALSE flag, correspond to WLQ, generally true.
        --      p_ucc_unique_id                 => Unique document identifer for payload, from UCC
        --      p_xmlg_internal_control_no      => XMLG generated Unique Id for inbound document
        --      x_collab_detail_id              => collaboration history detail id
        --      x_return_status                 => return_status (s-Success/F-failure)
        --      x_msg_data                      => return message
        -- Notes
        --      No specific notes.
        /*#
        * This procedure is invoked to update collaboration history tables for each worklist query response.
        * @param p_wlq_message_id Worklist-query message id
        * @param p_wlq_success_flag Worklist-queury success/failure response indicator
        * @param p_wlq_response_type Query response type
        * @param p_ucc_doc_unique_id UCCnet response document id
        * @param p_xmlg_internal_control_no XMLG Internal control number
        * @param x_collab_detail_id Worklist query collaboration detail id
        * @param x_return_status API return status.
        * @param x_msg_data API return message
        * @rep:scope private
        * @rep:lifecycle active
        * @rep:displayname Updates collaboration history tables with worklist query response information.
        */
        PROCEDURE process_wlq_response(
                                p_wlq_message_id                IN      VARCHAR2,
                                p_wlq_success_flag              IN      VARCHAR2,
                                p_wlq_response_type             IN      VARCHAR2,
                                p_ucc_doc_unique_id             IN      VARCHAR2,
                                p_xmlg_internal_control_no      IN      VARCHAR2,
                                x_collab_detail_id              OUT     NOCOPY  NUMBER,
                                x_return_status                 OUT     NOCOPY  VARCHAR2,
                                x_msg_data                      OUT     NOCOPY  VARCHAR2 );

        -- Name
        --      process_rcir_ack
        -- Purpose
        --      This process is called processing the synchronous Ack received from UCCnet for RCIR messages
        --      The CLN Collaboration is updated with the response, and event is raised to move WF block*
        --      There is no need for this now.
        -- Arguments
        --      p_ack_type                      => Used as CLN_Id for the WLQ Collaboration
        --      p_command_unique_id             => Unique id of command for which response is received
        --      p_command_success               => Success/failure flag of command for which response is received
        --      p_command_validation_key        => validation key if command is succesfully processed
        --      p_xmlg_internal_control_no      => XMLG generated Unique Id for inbound document
        --      p_ucc_doc_unique_id             => UCCnet generated UniqueId for response
        --      x_collab_detail_id              => collab deatil-id to be returned to map
        --      x_return_status                 => return_status (s-Success/F-failure)
        --      x_msg_data                      => return message
        -- Notes
        --      No specific notes.
        /*#
        * This procedure is called to process synchronous acknowledgements received for RCIR messages.
        * It updates collaboration history and EGO Item APIs with RCIR command status
        * and raises a notification to the document owner.
        * @param p_gtin RCIR GTIN message
        * @param p_supp_gln RCIR supplier GLN
        * @param p_target_market RCIR target market
        * @param p_command_unique_id RCIR Command unique id.
        * @param p_command_success IN RCIR command sucess/failure response.
        * @param p_command_validation_key RCIR command validation key.
        * @param p_ucc_doc_unique_id RCIR command unique identifier
        * @param p_xmlg_internal_control_no RCIR internal control number
        * @param x_collab_detail_id RCIR collaboraton detail id
        * @param x_return_status API return status
        * @param x_msg_data API return message
        * @rep:scope private
        * @rep:lifecycle active
        * @rep:displayname Processes synchronous acknowledgement response for RCIR messages
        */
        PROCEDURE process_rcir_ack(
                                p_gtin                          IN      VARCHAR2,
                                p_supp_gln                      IN      VARCHAR2,
                                p_target_market                 IN      VARCHAR2,
                                p_command_unique_id             IN      VARCHAR2,
                                p_command_success               IN      VARCHAR2,
                                p_command_validation_key        IN      VARCHAR2,
                                p_ucc_doc_unique_id             IN      VARCHAR2,
                                p_xmlg_internal_control_no      IN      NUMBER,
                                x_collab_detail_id              OUT     NOCOPY  NUMBER,
                                x_return_status                 OUT     NOCOPY  VARCHAR2,
                                x_msg_data                      OUT     NOCOPY  VARCHAR2 );

        -- Name
        --      process_rcir_batch_ack
        -- Purpose
        --      This is used to process the RCIR Batch message
        --      In case of success, the individual RCIR collaborations are updated (status set to initiated)
        --      **In case of failure, the business event is raised to move WF block**
        --      Removing this as this is not  required.
        -- Arguments
        --      p_command_unique_id             => Unique id of batch
        --      p_supp_gln                      => unique GLN of supplier
        --      p_command_success               => Success/failure flag of command for which response is received
        --      p_ucc_doc_unique_id             => UCCnet generated UniqueId for response
        --      p_xmlg_internal_control_no      => XMLG generated Unique Id for inbound document
        --      x_collab_detail_id              => collab deatil-id to be returned to map
        --      x_return_status                 => return_status (s-Success/F-failure)
        --      x_msg_data                      => return message
        -- Notes
        --      No specific notes.
        /*#
        * This Procedure is called to process asynchronous batch notifications received for RCIR comand batch messages.
        * It updates the collaboration history and updates the EGO Item APIs in case the RCIR batch is rejected by UCCnet.
        * It also raises a notification to the document owner.
        * @param p_command_unique_id RCIR Batch command id
        * @param p_supp_gln RCIR batch supplier GLN
        * @param p_command_success RCIR command success
        * @param p_ucc_doc_unique_id RCIR batch response document id
        * @param p_xmlg_internal_control_no XMLG internal control number
        * @param x_collab_detail_id Returned collaboration detail id.
        * @param x_return_status API return status.
        * @param x_msg_data  API return message
        * @rep:scope private
        * @rep:lifecycle active
        * @rep:displayname Procedure to process synchronous RCIR batch acknowledgement messages.
        */
        PROCEDURE process_rcir_batch_ack(
                                p_command_unique_id             IN      VARCHAR2,
                                p_supp_gln                      IN      VARCHAR2,
                                p_command_success               IN      VARCHAR2,
                                p_ucc_doc_unique_id             IN      VARCHAR2,
                                p_xmlg_internal_control_no      IN      NUMBER,
                                x_collab_detail_id              OUT NOCOPY      NUMBER,
                                x_return_status                 OUT NOCOPY      VARCHAR2,
                                x_msg_data                      OUT NOCOPY      VARCHAR2 );

        -- Name
        --      process_cin_ack
        -- Purpose
        --      This process is called for processing the synchronous acknowledgement received from UCCnet for CIN messages
        --      The CLN collaboration, ego_uccnet_events table are updated with the response
        --      A CLN notification event is raised
        -- Arguments
        --      p_command_unique_id             => Unique id of command for which response is received
        --      p_supp_gln                      => datasource/gln of document originator
        --      p_command_success               => Success/failure flag of command for which response is received
        --      p_command_validation_key        => validation key if command is succesfully processed
        --      p_ucc_doc_unique_id             => UCCnet generated UniqueId for response document
        --      p_xmlg_internal_control_no      => XMLG generated Unique Id for inbound document
        --      x_collab_detail_id              => collab deatil-id to be returned to map
        --      x_return_status                 => return_status (S-Success/F-failure)
        --      x_msg_data                      => return message
        -- Notes
        --      No specific notes.
        /*#
        * This procedure is called to process synchronous acknowledgement received from UCCnet for Catalog Item Notification - messages.
        * It updates the collaboration history and the EGO Item API with the response information.
        * It sends a notification to the document owner with this information.
        * @param p_command_unique_id CIN command unique identifier.
        * @param p_supp_gln CIN supplier GLN.
        * @param p_command_success CIN success/failure indicator.
        * @param p_command_validation_key CIN command validation key.
        * @param p_ucc_doc_unique_id CIN response document unique identifier.
        * @param p_xmlg_internal_control_no CIN Internal control number.
        * @param x_collab_detail_id Collab detail id, returned from API call.
        * @param x_return_status API call return status.
        * @param x_msg_data API message data.
        * @rep:scope private
        * @rep:lifecycle active
        * @rep:displayname Processes synchronous CIN acknowledgement message received from UCCnet.
        */
        PROCEDURE process_cin_ack(
                                p_command_unique_id             IN      VARCHAR2,
                                p_supp_gln                      IN      VARCHAR2,
                                p_command_success               IN      VARCHAR2,
                                p_command_validation_key        IN      VARCHAR2,
                                p_ucc_doc_unique_id             IN      VARCHAR2,
                                p_xmlg_internal_control_no      IN      NUMBER,
                                x_collab_detail_id              OUT     NOCOPY  NUMBER,
                                x_return_status                 OUT     NOCOPY  VARCHAR2,
                                x_msg_data                      OUT     NOCOPY  VARCHAR2 );

        -- Name
        --      process_rfcin_ack
        -- Purpose
        --      This process is called for processing the "Request For Catalogue Item Notification" notifiacation
        --      from UCCnet. These notifications are recived as part of Worklistquery Responses where the
        --      filter in the Query is name = "REQUEST_FOR_NOTIFICATION".
        --      A CLN collaboration is to be created for this messsage.
        --      A CLN Notification is to be raised on for each of these responses received.
        -- Arguments
        --      p_wlq_message_id                => Unique identifier Worklist-query for which this notification is received as response
        --      p_target_market_country         => Retailer wants notification for item(s) of this target market
        --      p_target_market_subdivision     => Retailer wants notification for item(s) of this target market sub division
        --      p_gtin                          => Retailer wants notification for this specific GTIN
        --      p_data_recipient                => GLN of (this) supplier
        --      p_data_source                   => Datasoure
        --      p_recipient_data_pool           => Datapool of recipient
        --      p_classification_category       => Retailer wants notification for items of this Category
        --      p_rfcin_unique_id               => unique command level id of RFCIN command
        --      p_rfcin_owner_gln               => GLN of retailer who issued this command
        --      p_reload_flag                   => flag specifies whether retailer wants new GTIN or reload exisiting data
        --      p_ucc_doc_unique_id             => unique id of UCCnet message(worklist query response)
        --      p_xmlg_internal_control_no      => XMLG generated internal control number
        --      x_return_status                 => out param. ret status from CLN API call
        --      x_msg_data                      => out param. ret message from CLN API call
        -- Notes
        --      No specific notes.
        /*#
        * This procedure is called to process Request for Catalog Item Notifications (RFCIN) received from UCCnet, as part of worklist query responses.
        * It updates collaboration history and raises a notification to the CLN_ADMINISTRATOR with details of the RFCIN parsed from the payload.
        * @param p_wlq_message_id Worklistquery identifier
        * @param p_target_market_country RFCIN target market
        * @param p_target_market_subdivision RFCIN target subdivision
        * @param p_gtin IN RFCIN GTIN attribute
        * @param p_data_recipient Data recepient GLN for RFCIN request
        * @param p_data_source Data source of GTIN
        * @param p_recipient_data_pool Data recepient of RFCIN
        * @param p_classification_category RFCIN - GTIN categroy
        * @param p_rfcin_unique_id RFCIN command identifier
        * @param p_rfcin_owner_gln RFCIN owner gln
        * @param p_reload_flag RFCIN reload flag
        * @param p_rfcin_creation_date RFCIN creation date.
        * @param p_ucc_doc_unique_id Document unique identifier
        * @param p_xmlg_internal_control_no XMLG Internal control number
        * @param x_return_status API return status
        * @param x_msg_data API return message
        * @rep:scope private
        * @rep:lifecycle active
        * @rep:displayname Processes RFCIN notifications received for the supplier.
        */
        PROCEDURE process_rfcin_notification(
                                p_wlq_message_id                IN      VARCHAR2,
                                p_target_market_country         IN      VARCHAR2,
                                p_target_market_subdivision     IN      VARCHAR2,
                                p_gtin                          IN      VARCHAR2,
                                p_data_recipient                IN      VARCHAR2,
                                p_data_source                   IN      VARCHAR2,
                                p_recipient_data_pool           IN      VARCHAR2,
                                p_classification_category       IN      VARCHAR2,
                                p_rfcin_unique_id               IN      VARCHAR2,
                                p_rfcin_owner_gln               IN      VARCHAR2,
                                p_reload_flag                   IN      VARCHAR2,
                                p_rfcin_creation_date           IN      VARCHAR2,
                                p_ucc_doc_unique_id             IN      VARCHAR2,
                                p_xmlg_internal_control_no      IN      NUMBER,
                                x_return_status                 OUT     NOCOPY  VARCHAR2,
                                x_msg_data                      OUT NOCOPY      VARCHAR2 );
END m4u_resp_process;

 

/
