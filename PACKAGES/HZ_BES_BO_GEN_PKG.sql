--------------------------------------------------------
--  DDL for Package HZ_BES_BO_GEN_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "APPS"."HZ_BES_BO_GEN_PKG" AUTHID CURRENT_USER AS
/*$Header: ARHBESGS.pls 120.4 2006/06/28 07:10:55 smattegu noship $ */

 /* following are the variables used for generating SQL for event type SQL
    root node.
 */

G_EVT_RT_NODE_0 VARCHAR2(125) := 'UPDATE hz_bes_gt SET event_type_flag = ''U''
WHERE event_type_flag IS NULL AND bo_code = ';

G_EVT_RT_NODE_1 VARCHAR2(200) := ' AND party_id IN ( SELECT P_PARTY_ID FROM HZ_PARTIES P,
    (SELECT t.party_id P_PARTY_ID, NVL(MIN(t.last_update_date),SYSDATE) P_CUTOFF_DT
       FROM (SELECT connect_by_root';

G_EVT_RT_NODE_2 VARCHAR2(255) := ' tr.child_id party_id, tr.last_update_date
	FROM hz_bus_obj_tracking tr	START WITH tr.parent_bo_code IS NULL
  AND EVENT_ID IS NULL AND tr.child_bo_code = ';

G_EVT_RT_NODE_3 VARCHAR2(255) := ' AND tr.child_id IN (SELECT gt.party_id
  FROM hz_bes_gt gt WHERE gt.event_type_flag IS NULL AND gt.bo_code = ';

G_EVT_RT_NODE_4 VARCHAR2(255) := ' )
				CONNECT BY tr.parent_bo_code = PRIOR tr.child_bo_code AND
					tr.parent_id = PRIOR tr.child_id) t
			GROUP BY party_id) t
    WHERE P.PARTY_ID = P_PARTY_ID
    AND CREATION_DATE < P_CUTOFF_DT ';

G_LUD        VARCHAR2(50) :=	' AND CREATION_DATE < P_CUTOFF_DT ';
/*
  The G_RT_NODE1, 2 are used only for Person and Org Cust BO.
  For Per and Org, the delete statement must also delete the corresponding
  Cust business objects provided the gt.evet_type_flag is null.
  This can be acheived with following variables.
  Some of these variable names end with PO to denote that this is used for Person and Org.
  G_RT_NODE_1_PO
  G_RT_NODE_2_PO
  G_RT_NODE_3_PO
  G_RT_NODE_4_PO
  G_RT_NODE_2
  G_RT_NODE_BOCODE
*/
G_RT_NODE_1_PO VARCHAR2(80) := ' DELETE FROM HZ_BES_GT T1 WHERE T1.EVENT_TYPE_FLAG IS NULL
 AND (T1.BO_CODE = ';
G_RT_NODE_2_PO VARCHAR2(20) := ' OR (T1.BO_CODE = ';
G_RT_NODE_3_PO VARCHAR2(100) := ' AND EXISTS ( SELECT 1 FROM HZ_BES_GT T2 WHERE
 T2.PARTY_ID = T1.PARTY_ID AND T2.BO_CODE = ';
G_RT_NODE_4_PO VARCHAR2(40) := ' AND T2.EVENT_TYPE_FLAG IS NULL )))';

G_RT_NODE_1    VARCHAR2(80)  := ' DELETE FROM HZ_BES_GT WHERE EVENT_TYPE_FLAG IS NULL ';
G_RT_NODE_BOCODE   VARCHAR2(35) := ' AND BO_CODE = ';
G_RT_NODE_BOCODE2   VARCHAR2(35) := ' AND BO_CODE IN( ';
G_RT_NODE_2    VARCHAR2(120) := ' AND PARTY_ID NOT IN (
   SELECT P.PARTY_ID
    FROM HZ_BES_GT P
    WHERE P.EVENT_TYPE_FLAG IS NULL ';

G_HZ_CERT_P        VARCHAR2(200) :=
    ' AND EXISTS
    (SELECT 1
     FROM HZ_CERTIFICATIONS CER
     WHERE CER.PARTY_ID = P.PARTY_ID';

G_HZ_CITIZEN_P    VARCHAR2(200) :=
    ' AND EXISTS
   (SELECT 1
    FROM HZ_CITIZENSHIP CIT
    WHERE CIT.PARTY_ID = P.PARTY_ID';
	  -- HZ_CODE_ASSIGNMENTS can have Org or Person as parents
G_HZ_CODE_ASSIGN_P  VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CODE_ASSIGNMENTS CA
    WHERE CA.OWNER_TABLE_NAME = ''HZ_PARTIES'' AND
	CA.OWNER_TABLE_ID = P.PARTY_ID';

    -- contact point types are
	-- EDI, EFT, EMAIL, PHONE, WEB, TLX, SMS

G_CP_EFT    VARCHAR2(15) := '''EFT''';
G_CP_EDI    VARCHAR2(15) := '''EDI''';
G_CP_EMAIL  VARCHAR2(15) := '''EMAIL''';
G_CP_PHONE  VARCHAR2(15) := '''PHONE''';
G_CP_WEB    VARCHAR2(15) := '''WEB''';
G_CP_TLX    VARCHAR2(15) := '''TLX''';
G_CP_SMS    VARCHAR2(15) := '''SMS''';

	-- following are the variables for various contact points
	--  where parent is org or person

    -- 	CP for party
G_CP_P1 VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_POINTS CP
    WHERE CP.OWNER_TABLE_NAME = ''HZ_PARTIES'' AND
	CP.OWNER_TABLE_ID = P.PARTY_ID AND
    CP.CONTACT_POINT_TYPE = ';

G_CP_P1_ET1 VARCHAR2(220) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_POINTS CP
    WHERE CP.OWNER_TABLE_NAME = ''HZ_PARTIES'' AND
		CP.CREATION_DATE <P_CUTOFF_DT AND CP.OWNER_TABLE_ID = P.PARTY_ID AND
    CP.CONTACT_POINT_TYPE = ';

    -- 	CP for org contact
G_CP_REL1 VARCHAR2(250) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_POINTS CP, HZ_RELATIONSHIPS R
    WHERE CP.OWNER_TABLE_NAME = ''HZ_PARTIES'' AND R.RELATIONSHIP_ID =  OC.PARTY_RELATIONSHIP_ID
		AND	CP.OWNER_TABLE_ID = R.PARTY_ID AND
		CP.CONTACT_POINT_TYPE = ';

G_CP_REL1_ET1 VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_POINTS CP, HZ_RELATIONSHIPS R
    WHERE CP.OWNER_TABLE_NAME = ''HZ_PARTIES'' AND
		R.RELATIONSHIP_ID =  OC.PARTY_RELATIONSHIP_ID';
G_CP_REL1_ET2 VARCHAR2(150) := ' AND CP.OWNER_TABLE_ID = R.PARTY_ID AND
		CP.CREATION_DATE <P_CUTOFF_DT AND CP.CONTACT_POINT_TYPE = ';

    -- 	CP for PS
G_CP_PS1     VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_POINTS CP
    WHERE CP.OWNER_TABLE_NAME = ''HZ_PARTY_SITES'' AND
		CP.OWNER_TABLE_ID = PS.PARTY_SITE_ID AND CP.CONTACT_POINT_TYPE = ';

G_CP_PS1_ET1     VARCHAR2(225) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_POINTS CP
    WHERE CP.OWNER_TABLE_NAME = ''HZ_PARTY_SITES'' AND
		CP.OWNER_TABLE_ID = PS.PARTY_SITE_ID AND CP.CREATION_DATE <P_CUTOFF_DT
		AND CP.CONTACT_POINT_TYPE = ';

  -- HZ_CONTACT_PREFERENCES can have Org, Person, Contact, PS, CP as parents
  -- for person, org as parents - use the following

G_HZ_CONT_PREF_P       VARCHAR2(175) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_PREFERENCES CONTP
    WHERE CONTP.CONTACT_LEVEL_TABLE = ''HZ_PARTIES'' AND
		CONTP.CONTACT_LEVEL_TABLE_ID = P.PARTY_ID';

    -- for Contact - use the following
G_HZ_CONT_PREF_REL      VARCHAR2(250) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_PREFERENCES CONTP, HZ_RELATIONSHIPS R
    WHERE CONTP.CONTACT_LEVEL_TABLE = ''HZ_PARTIES'' AND
	CONTP.CONTACT_LEVEL_TABLE_ID  = R.PARTY_ID AND
	R.RELATIONSHIP_ID = OC.PARTY_RELATIONSHIP_ID';

G_HZ_CONT_PREF_REL_ET1      VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_PREFERENCES CONTP, HZ_RELATIONSHIPS R
    WHERE CONTP.CONTACT_LEVEL_TABLE = ''HZ_PARTIES'' AND
		CONTP.CONTACT_LEVEL_TABLE_ID  = R.PARTY_ID AND';


G_HZ_CONT_PREF_REL_ET2      VARCHAR2(100) := '
		R.RELATIONSHIP_ID = OC.PARTY_RELATIONSHIP_ID AND
		CONTP.CREATION_DATE <P_CUTOFF_DT ';


    -- for PS - use the following
G_HZ_CONT_PREF_PS        VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_PREFERENCES CONTP
    WHERE CONTP.CONTACT_LEVEL_TABLE = ''HZ_PARTY_SITES'' AND
	CONTP.CONTACT_LEVEL_TABLE_ID = PS.PARTY_SITE_ID';

    -- for CP - use the following
G_HZ_CONT_PREF_CP     VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CONTACT_PREFERENCES contp
    WHERE contp.CONTACT_LEVEL_TABLE = ''HZ_CONTACT_POINTS'' AND
	contp.CONTACT_LEVEL_TABLE_ID = CP.CONTACT_POINT_ID';

    -- HZ_CREDIT_RATINGS can have only Org as parent
G_HZ_CREDIT_RATINGS_P  VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CREDIT_RATINGS CR
    WHERE CR.party_id = P.PARTY_ID';

    -- HZ_CUST_ACCOUNT_ROLES Can have Account, Account Site as parent
    -- for Account as Parent use
G_HZ_CUST_ACCT_ROLES_A  VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CUST_ACCOUNT_ROLES ACR
    WHERE ACR.CUST_ACCOUNT_ID = AC.CUST_ACCOUNT_ID';

    -- for Account Site as parent
G_HZ_CUST_ACCT_ROLES_AS  VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CUST_ACCOUNT_ROLES ACR
    WHERE ACR.CUST_ACCT_SITE_ID = ASA.CUST_ACCT_SITE_ID';

    -- HZ_CUST_ACCOUNTS can have only Org or Person as parent
G_HZ_CUST_ACCTS_P       VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CUST_ACCOUNTS AC
    WHERE AC.party_id = P.PARTY_ID';

    -- HZ_CUST_ACCT_RELATE_ALL can only have cust account as parent
G_HZ_CUST_ACCT_REL_P    VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CUST_ACCT_RELATE_ALL ACREL
    WHERE ACREL.CUST_ACCOUNT_ID = AC.CUST_ACCOUNT_ID';

    -- HZ_CUST_ACCT_SITES_ALL have Cust Account as parent
G_HZ_CUST_ACCT_SITES_A   VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CUST_ACCT_SITES_ALL ASA
    WHERE ASA.CUST_ACCOUNT_ID = AC.CUST_ACCOUNT_ID';

    -- HZ_CUST_PROFILE_AMTS Can have Account Profile as parent
G_HZ_CUST_PROF_AMTS_AP   VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CUST_PROFILE_AMTS CPA
    WHERE CPA.CUST_ACCOUNT_PROFILE_ID = CAP.CUST_ACCOUNT_PROFILE_ID';

    -- HZ_CUST_SITE_USES_ALL Can have Account Site as parent
    -- for Account Site as parent
G_HZ_CUST_SITE_USES_AS    VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CUST_SITE_USES_ALL ACSU
    WHERE ACSU.CUST_ACCT_SITE_ID = ASA.CUST_ACCT_SITE_ID';

    -- HZ_CUSTOMER_PROFILES Can have Cust Account, Account Site Use as parents
    -- for Cust Account as parent
G_HZ_CUST_PROF_A     VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CUSTOMER_PROFILES CAP
    WHERE CAP.CUST_ACCOUNT_ID = AC.CUST_ACCOUNT_ID';

    -- for Cust Account Site Use as parent
G_HZ_CUST_PROF_ASU  VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_CUSTOMER_PROFILES CAP
    WHERE CAP.SITE_USE_ID = ACSU.SITE_USE_ID';

    -- HZ_EDUCATION Can have Person as parent
    -- for Person as parent
G_HZ_EDU_P          VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_EDUCATION E
    WHERE E.PARTY_ID = P.PARTY_ID';

    -- HZ_EMPLOYMENT_HISTORY Can have Person as parent
    -- for Person as parent
G_HZ_EMP_HIST_P     VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_EMPLOYMENT_HISTORY EH
    WHERE EH.PARTY_ID = P.PARTY_ID';

    -- HZ_FINANCIAL_NUMBERS Can have Financial reports as parent
    -- for Financial reports as parent
G_HZ_FIN_NUM_FR     VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_FINANCIAL_NUMBERS FN
    WHERE FN.FINANCIAL_REPORT_ID = FR.FINANCIAL_REPORT_ID';

    -- HZ_FINANCIAL_PROFILE can have Person,Org as parent
    -- for person or org as parent
G_HZ_FIN_PROF_P     VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_FINANCIAL_PROFILE FP
    WHERE FP.PARTY_ID = P.PARTY_ID';

    -- HZ_FINANCIAL_REPORTS can only have Org as parent
    -- for org as parent
G_HZ_FIN_REP_P      VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_FINANCIAL_REPORTS FR
    WHERE FR.PARTY_ID = P.PARTY_ID';

    -- HZ_LOCATIONS can only have PS as parent
    -- for PS as parent
G_HZ_LOC_PS          VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_LOCATIONS L
    WHERE L.LOCATION_ID = PS.LOCATION_ID';

    -- HZ_ORG_CONTACT_ROLES can only have Org Contact as parent
    -- for Org Contact as parent
G_HZ_ORG_CONT_ROLE_OC  VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_ORG_CONTACT_ROLES OCR
    WHERE OCR.ORG_CONTACT_ID = OC.ORG_CONTACT_ID';

    -- HZ_ORG_CONTACTS Can have Org,Person, Cust Acct Contact as parents
    -- for Org as parent. Please note that SQL is split into 3 variables.
    -- This is because of an inherent limitation on underlying HZ_GEN_PLSQL pkg.
G_HZ_ORG_CONT_P1       VARCHAR2(235) := ' AND EXISTS
    (SELECT 1
      FROM HZ_ORG_CONTACTS OC, HZ_RELATIONSHIPS R
      WHERE OC.PARTY_RELATIONSHIP_ID = R.RELATIONSHIP_ID
      AND R.SUBJECT_TYPE =''PERSON'' AND R.SUBJECT_TABLE_NAME = R.OBJECT_TABLE_NAME ';
G_HZ_ORG_CONT_P1_ORG    VARCHAR2(50) := ' AND R.OBJECT_TYPE = ''ORGANIZATION''';
G_HZ_ORG_CONT_P1_PER    VARCHAR2(50) := ' AND R.OBJECT_TYPE = ''PERSON''';

		G_HZ_ORG_CONT_P2 VARCHAR2(150) := ' AND R.OBJECT_TABLE_NAME = ''HZ_PARTIES''
		 AND R.OBJECT_ID =  P.PARTY_ID ';
G_HZ_ORG_CONT_P2_ET1  VARCHAR2(200) :=' AND R.OBJECT_TABLE_NAME = ''HZ_PARTIES'' AND
     R.OBJECT_ID =  P.PARTY_ID AND OC.CREATION_DATE <P_CUTOFF_DT ';
/*
G_HZ_ORG_CONT_P2 VARCHAR2(225) := ' AND R.OBJECT_TABLE_NAME = ''HZ_PARTIES''
  AND R.OBJECT_ID =  P.PARTY_ID AND EXISTS (SELECT 1 FROM
     HZ_CODE_ASSIGNMENTS CODE, HZ_RELATIONSHIP_TYPES RELTYPE
    WHERE RELTYPE.RELATIONSHIP_TYPE = R.RELATIONSHIP_TYPE ';

G_HZ_ORG_CONT_P2_ET1  VARCHAR2(253) :=' AND R.OBJECT_TABLE_NAME = ''HZ_PARTIES'' AND
		R.OBJECT_ID =  P.PARTY_ID AND OC.CREATION_DATE <P_CUTOFF_DT AND EXISTS
		(SELECT 1 FROM HZ_CODE_ASSIGNMENTS CODE,HZ_RELATIONSHIP_TYPES RELTYPE
		 WHERE RELTYPE.RELATIONSHIP_TYPE = R.RELATIONSHIP_TYPE ';

G_HZ_ORG_CONT_P3       VARCHAR2(250) := ' AND CODE.OWNER_TABLE_ID = RELTYPE.RELATIONSHIP_TYPE_ID
      AND CODE.CLASS_CATEGORY = ''RELATIONSHIP_TYPE_GROUP''
      AND CODE.CLASS_CODE = ''PARTY_REL_GRP_CONTACTS''
      AND CODE.OWNER_TABLE_NAME = ''HZ_RELATIONSHIP_TYPES'')';
*/
    -- for Cust Account Contact as parent
G_HZ_ORG_CONT_AC1     VARCHAR2(250) := ' AND EXISTS
(SELECT 1
 FROM HZ_ORG_CONTACTS OC, HZ_RELATIONSHIPS R, HZ_CUST_ACCOUNTS AC
WHERE OC.PARTY_RELATIONSHIP_ID = R.RELATIONSHIP_ID AND R.PARTY_ID = ACR.PARTY_ID
 AND AC.CUST_ACCOUNT_ID = ACR.CUST_ACCOUNT_ID AND R.SUBJECT_TYPE = ''PERSON'' ';

G_HZ_ORG_CONT_AC2     VARCHAR2(225) := ' AND R.OBJECT_TYPE = ''ORGANIZATION''
  AND R.SUBJECT_TABLE_NAME = R.OBJECT_TABLE_NAME AND R.OBJECT_TABLE_NAME = ''HZ_PARTIES''
  AND EXISTS (SELECT 1
    FROM HZ_CODE_ASSIGNMENTS CODE, HZ_RELATIONSHIP_TYPES RELTYPE';

G_HZ_ORG_CONT_AC2_ET1 VARCHAR2(250) :=' AND R.OBJECT_TYPE = ''ORGANIZATION''
  AND R.SUBJECT_TABLE_NAME = R.OBJECT_TABLE_NAME AND R.OBJECT_TABLE_NAME = ''HZ_PARTIES''
  AND OC.CREATION_DATE <P_CUTOFF_DT AND EXISTS (SELECT 1
    FROM HZ_CODE_ASSIGNMENTS CODE, HZ_RELATIONSHIP_TYPES RELTYPE';

G_HZ_ORG_CONT_AC3     VARCHAR2(235) := ' WHERE RELTYPE.RELATIONSHIP_TYPE = R.RELATIONSHIP_TYPE
      AND  CODE.OWNER_TABLE_ID = RELTYPE.RELATIONSHIP_TYPE_ID
      AND CODE.CLASS_CATEGORY = ''RELATIONSHIP_TYPE_GROUP''
      AND CODE.CLASS_CODE = ''PARTY_REL_GRP_CONTACTS''';

G_HZ_ORG_CONT_AC4     VARCHAR2(60) := ' AND CODE.OWNER_TABLE_NAME = ''HZ_RELATIONSHIP_TYPES'')';

    -- HZ_ORGANIZATION_PROFILES can only have Org as parent
    -- for Org as parent
G_HZ_ORG_PROF_P    VARCHAR2(100) := ' AND EXISTS
  (SELECT 1
   FROM HZ_ORGANIZATION_PROFILES OP
   WHERE OP.PARTY_ID=P.PARTY_ID';

    -- HZ_PARTIES is the parent - in the context of Person and Org
    -- P_PARTY_ID is the parameter that would be passed by the caller
G_HZ_PARTIES          VARCHAR2(100) := ' SELECT P.PARTY_ID
    FROM HZ_PARTIES P
    WHERE P.PARTY_ID = P_PARTY_ID';

    -- HZ_PARTIES is the child enetiy for Person Customer BO
    -- P_PARTY_ID is the parameter that would be passed by the caller
G_HZ_PARTIES_PCUST      VARCHAR2(100) := ' AND EXISTS
    (SELECT 1
     FROM HZ_PARTIES P
     WHERE P.PARTY_ID = P_PARTY_ID';

    -- HZ_PARTIES is the child enetiy for Org Customer BO
    -- P_PARTY_ID is the parameter that would be passed by the caller
G_HZ_PARTIES_OCUST      VARCHAR2(100) := ' AND EXISTS
    (SELECT 1
     FROM HZ_PARTIES P
     WHERE  P.PARTY_ID = P_PARTY_ID';

    -- HZ_PARTIES (person) as the child of Org Contact
    -- for Org Contact as the parent
G_HZ_PARTIES_OC       VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM  HZ_PARTIES P, HZ_RELATIONSHIPS R
    WHERE P.PARTY_ID = R.SUBJECT_ID AND R.subject_type = ''PERSON''
	  AND OC.PARTY_RELATIONSHIP_ID = R.RELATIONSHIP_ID';

G_HZ_PARTIES_OC_ET1       VARCHAR2(225) := ' AND EXISTS
   (SELECT 1
    FROM  HZ_PARTIES P, HZ_RELATIONSHIPS R
    WHERE P.PARTY_ID = R.SUBJECT_ID AND R.subject_type = ''PERSON''
	  AND OC.PARTY_RELATIONSHIP_ID = R.RELATIONSHIP_ID AND
		P.CREATION_DATE <P_CUTOFF_DT';


    -- HZ_PARTY_PREFERENCES Org and Person as parents
    -- for Org and Person as parents
G_HZ_PARTY_PREF_P      VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_PARTY_PREFERENCES PP
    WHERE PP.PARTY_ID = P.PARTY_ID';

    -- HZ_PARTY_SITE_USES can have only Party Site as parent
    -- for Party Site as parent
G_HZ_PS_USE_PS         VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_PARTY_SITE_USES PSU
	WHERE PSU.PARTY_SITE_ID = PS.PARTY_SITE_ID';

    -- HZ_PARTY_SITES Can have Org, Person, Contact and Account Site as parents
    -- for Org, Person as parent
G_HZ_PS_P          VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_PARTY_SITES PS
    WHERE PS.PARTY_ID = P.PARTY_ID';

    -- for Org Contact as parent
G_HZ_PS_OC         VARCHAR2(175) := ' AND EXISTS
   (SELECT 1
    FROM  HZ_PARTY_SITES PS, HZ_RELATIONSHIPS R
    WHERE PS.PARTY_ID = R.PARTY_ID AND OC.PARTY_RELATIONSHIP_ID = R.RELATIONSHIP_ID';

G_HZ_PS_OC_ET1         VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM  HZ_PARTY_SITES PS, HZ_RELATIONSHIPS R
    WHERE PS.PARTY_ID = R.PARTY_ID AND OC.PARTY_RELATIONSHIP_ID = R.RELATIONSHIP_ID
    AND PS.CREATION_DATE <P_CUTOFF_DT';

    -- for Acct Site as parent
G_HZ_PS_AS         VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_PARTY_SITES PS
    WHERE PS.PARTY_SITE_ID = ASA.CUST_ACCT_SITE_ID';

    -- HZ_PERSON_INTEREST Can have Person as parent
    -- for Person as parent
G_HZ_PER_INT_P     VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_PERSON_INTEREST PI
    WHERE PI.PARTY_ID = P.PARTY_ID';

    -- HZ_PERSON_LANGUAGE Can have Person as parent
    -- for Person as parent
G_HZ_PER_LANG_P     VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_PERSON_LANGUAGE PL
    WHERE PL.PARTY_ID = P.PARTY_ID';

    -- HZ_PERSON_PROFILES Can have Person as parent
    -- for Person as parent
G_HZ_PER_PROF_P      VARCHAR2(100) := ' AND EXISTS
   (SELECT 1
    FROM HZ_PERSON_PROFILES PP
    WHERE PP.PARTY_ID = P.PARTY_ID';

    -- HZ_RELATIONSHIPS Can have Org, Person, Org Contact, Cust Acct Contact as parents
    -- for Org, Person as parent
G_HZ_REL_P            VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_RELATIONSHIPS R
    WHERE R.SUBJECT_ID = P.PARTY_ID
	  AND R.OBJECT_TYPE IN (''PERSON'',''ORGANIZATION'')';
    -- for Org Contact as parent
G_HZ_REL_OC            VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_RELATIONSHIPS R
    WHERE R.RELATIONSHIP_ID = OC.PARTY_RELATIONSHIP_ID ';
    -- for Customer Account Contact as parent
G_HZ_REL_ACONT VARCHAR2(150) := ' AND EXISTS
    (SELECT 1 FROM HZ_RELATIONSHIPS R
		  WHERE R.PARTY_ID = ACR.PARTY_ID ';

    -- HZ_ROLE_RESPONSIBILITY can only have customer account contact as parent
G_HZ_ROLE_RESP_AC      VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_ROLE_RESPONSIBILITY RR
    WHERE RR.CUST_ACCOUNT_ROLE_ID = ACR.CUST_ACCOUNT_ROLE_ID';

    -- HZ_WORK_CLASS Can have Employement History as parent
    -- for Employement History as parent
G_HZ_WORK_CLASS_EH    VARCHAR2(150) := ' AND EXISTS
   (SELECT 1
    FROM HZ_WORK_CLASS  W
    WHERE W.EMPLOYMENT_HISTORY_ID = EH.EMPLOYMENT_HISTORY_ID';

    -- RA_CUST_RECEIPT_METHODS can have Cust Account and Account Site Use as parents
		-- For cust account as parent
G_CUST_RECEIPT_METHODS_AC    VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM RA_CUST_RECEIPT_METHODS CRM
    WHERE CRM.CUSTOMER_ID = AC.CUST_ACCOUNT_ID';

		-- For account site use as parent
G_CUST_RECEIPT_METHODS_ASU    VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM RA_CUST_RECEIPT_METHODS CRM
    WHERE CRM.SITE_USE_ID = ACSU.SITE_USE_ID';

    -- IBY_FNDCPT_PAYER_ASSGN_INSTR_V can have Cust Account and Account Site Use as parents
		-- For cust account as parent
G_BANK_ACCT_USE_AC    VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM IBY_FNDCPT_PAYER_ASSGN_INSTR_V BAU
    WHERE BAU.CUST_ACCOUNT_ID = AC.CUST_ACCOUNT_ID';

		-- For account site use as parent
G_BANK_ACCT_USE_ASU    VARCHAR2(200) := ' AND EXISTS
   (SELECT 1
    FROM IBY_FNDCPT_PAYER_ASSGN_INSTR_V BAU
    WHERE BAU.ACCT_SITE_USE_ID = ACSU.SITE_USE_ID';

-- ER 5055998 start
-- HZ_PARTY_USG_ASSIGNMENTS can have Person, Org as parents.
G_HZ_PARTY_USG_ASSIN_P      VARCHAR2(120) := ' AND EXISTS
   (SELECT 1
    FROM HZ_PARTY_USG_ASSIGNMENTS PUA
    WHERE PUA.PARTY_ID = P.PARTY_ID';
-- ER 5055998 end

   -- types that are used in this package.


--   TYPE NUMBER_COLUMN		  IS TABLE OF NUMBER;
--   TYPE BO_CODE  IS TABLE OF HZ_BUS_OBJ_DEFINITIONS.BUSINESS_OBJECT_CODE%TYPE;
   TYPE VAR106_TYPE  IS TABLE OF VARCHAR2(106);
   TYPE VAR30_TYPE  IS TABLE OF VARCHAR2(30);
--   TYPE ROOT_NODE_FLAG  IS TABLE OF HZ_BUS_OBJ_DEFINITIONS.ROOT_NODE_FLAG%TYPE;


   TYPE node_row_type IS RECORD
   (
     level_no        NUMBER,
     BO_CODE         HZ_BUS_OBJ_DEFINITIONS.BUSINESS_OBJECT_CODE%TYPE,
     RNF             HZ_BUS_OBJ_DEFINITIONS.ROOT_NODE_FLAG%TYPE,
     ENTITY_NAME     HZ_BUS_OBJ_DEFINITIONS.ENTITY_NAME%TYPE,
     PARENT_BO_CODE  HZ_BUS_OBJ_DEFINITIONS.BUSINESS_OBJECT_CODE%TYPE
   );

     -- Define a type to store the right paranthesis , bo_code, parent_bo_code
TYPE RP_TYPE IS RECORD
( node            NUMBER,
  RP              VARCHAR2(3),
  BO_CODE         HZ_BUS_OBJ_DEFINITIONS.BUSINESS_OBJECT_CODE%TYPE,
  PARENT_BO_CODE  HZ_BUS_OBJ_DEFINITIONS.BUSINESS_OBJECT_CODE%TYPE
);

TYPE NODE_TBL_TYPE IS TABLE OF NODE_ROW_TYPE INDEX BY PLS_INTEGER;
TYPE RP_TBL_TYPE   IS TABLE OF RP_TYPE  INDEX BY PLS_INTEGER;
TYPE var106_tbl_type IS TABLE OF VAR106_TYPE INDEX BY PLS_INTEGER;
TYPE var30_tbl_type IS TABLE OF VAR30_TYPE INDEX BY PLS_INTEGER;

/*
Scope:   Internal procedure.
Purpose: To write the cursor for completeness check procedure.
Called By: gen_bo_complete_proc()
Called From:
*/
PROCEDURE genBOSQL(
 P_BO_CODE IN VARCHAR2, -- holds the BO code.
 P_SQL_FOR IN VARCHAR2, -- conveys if the sql is for completeness check or to figure out the event type.
 -- this will take two values, COMPLETE, EVENT
 P_STATUS OUT NOCOPY BOOLEAN );-- holds the return status
/*
Scope: Internal Procedure
Purpose: To create the package body.
Called by: some conc program procedure
Called from: HZ_BES_BO_GEN_PKG
*/
PROCEDURE gen_pkg_body
 ( P_STATUS OUT NOCOPY BOOLEAN );-- holds the return status

PROCEDURE genCompletenessProc;
PROCEDURE genEvtTypeProc;

/*
Scope: Public Procedure
Purpose: To generate package body specific to BO definitions at the customer site.
Called by: Concurrent Program UI
*/
PROCEDURE gen_pkg_main (
 errbuf   OUT NOCOPY    VARCHAR2,
 retcode  OUT NOCOPY    VARCHAR2);

END HZ_BES_BO_GEN_PKG; -- Package spec

 

/
