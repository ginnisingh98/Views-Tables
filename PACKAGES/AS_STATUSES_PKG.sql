--------------------------------------------------------
--  DDL for Package AS_STATUSES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "APPS"."AS_STATUSES_PKG" AUTHID CURRENT_USER as
/* #$Header: asxtstas.pls 120.1 2005/06/14 01:33:23 appldev  $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_STATUS_CODE in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_LEAD_FLAG in VARCHAR2,
  X_OPP_FLAG in VARCHAR2,
  X_OPP_OPEN_STATUS_FLAG in VARCHAR2,
  X_OPP_DECISION_DATE_FLAG in VARCHAR2,
  X_STATUS_RANK in NUMBER,
  X_FORECAST_ROLLUP_FLAG in VARCHAR2,
  X_WIN_LOSS_INDICATOR in VARCHAR2,
  X_USAGE_INDICATOR in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_MEANING in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER);
procedure LOCK_ROW (
  X_STATUS_CODE in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_LEAD_FLAG in VARCHAR2,
  X_OPP_FLAG in VARCHAR2,
  X_OPP_OPEN_STATUS_FLAG in VARCHAR2,
  X_OPP_DECISION_DATE_FLAG in VARCHAR2,
  X_STATUS_RANK in NUMBER,
  X_FORECAST_ROLLUP_FLAG in VARCHAR2,
  X_WIN_LOSS_INDICATOR in VARCHAR2,
  X_USAGE_INDICATOR in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_MEANING in VARCHAR2,
  X_DESCRIPTION in VARCHAR2
);
procedure UPDATE_ROW (
  X_STATUS_CODE in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_LEAD_FLAG in VARCHAR2,
  X_OPP_FLAG in VARCHAR2,
  X_OPP_OPEN_STATUS_FLAG in VARCHAR2,
  X_OPP_DECISION_DATE_FLAG in VARCHAR2,
  X_STATUS_RANK in NUMBER,
  X_FORECAST_ROLLUP_FLAG in VARCHAR2,
  X_WIN_LOSS_INDICATOR in VARCHAR2,
  X_USAGE_INDICATOR in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_MEANING in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
);
procedure DELETE_ROW (
  X_STATUS_CODE in VARCHAR2
);

procedure LOAD_ROW (
  X_STATUS_CODE in VARCHAR2,
  X_ENABLED_FLAG in VARCHAR2,
  X_LEAD_FLAG in VARCHAR2,
  X_OPP_FLAG in VARCHAR2,
  X_OPP_OPEN_STATUS_FLAG in VARCHAR2,
  X_OPP_DECISION_DATE_FLAG in VARCHAR2,
  X_STATUS_RANK in NUMBER,
  X_FORECAST_ROLLUP_FLAG in VARCHAR2,
  X_WIN_LOSS_INDICATOR in VARCHAR2,
  X_USAGE_INDICATOR in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_MEANING in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CUSTOM  in VARCHAR2,
  X_OWNER   in VARCHAR2
);

procedure ADD_LANGUAGE;

procedure TRANSLATE_ROW (
  X_STATUS_CODE in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_MEANING in VARCHAR2,
  X_OWNER in VARCHAR2);



PROCEDURE update_accesses_Main
          (
           errbuf OUT NOCOPY VARCHAR2,
           retcode OUT NOCOPY NUMBER,
           x_open_flag   IN VARCHAR2,
           x_status_code IN VARCHAR2,
           p_num_workers IN NUMBER,
           p_batch_size  IN NUMBER,
           p_debug_flag  IN VARCHAR2
          );

procedure UPDATE_ACCESSES_SUB(
   ERRBUF   	OUT NOCOPY   VARCHAR2,
   RETCODE  	OUT NOCOPY   VARCHAR2,
   x_open_flag   IN VARCHAR2,
   x_status_code IN VARCHAR2,
   p_start_id 	 IN VARCHAR2,
   p_end_id 	 IN VARCHAR2,
   p_batch_size  IN NUMBER,
   p_debug_flag  IN VARCHAR2
);


PROCEDURE update_leads_Main
          (
           errbuf OUT NOCOPY VARCHAR2,
           retcode OUT NOCOPY NUMBER,
           x_open_flag   IN VARCHAR2,
           x_status_code IN VARCHAR2,
           p_num_workers IN NUMBER,
           p_batch_size  IN NUMBER,
           p_debug_flag  IN VARCHAR2
          );

procedure UPDATE_LEADS_ACCESSES(ERRBUF   OUT NOCOPY   VARCHAR2,
   RETCODE  OUT NOCOPY   VARCHAR2,
   x_open_flag   IN VARCHAR2,
   x_status_code IN VARCHAR2,
   p_start_id 	 IN VARCHAR2,
   p_end_id 	 IN VARCHAR2,
   p_batch_size  IN NUMBER,
   p_debug_flag  IN VARCHAR2);


PROCEDURE update_oppty_Main
          (
           errbuf OUT NOCOPY VARCHAR2,
           retcode OUT NOCOPY NUMBER,
           x_open_flag   IN VARCHAR2,
           x_status_code IN VARCHAR2,
           p_num_workers IN NUMBER,
           p_batch_size  IN NUMBER,
           p_debug_flag  IN VARCHAR2
          );

procedure UPDATE_OPPTY_ACCESSES(ERRBUF   OUT NOCOPY   VARCHAR2,
   RETCODE  OUT NOCOPY   VARCHAR2,
   x_open_flag   IN VARCHAR2,
   x_status_code IN VARCHAR2,
   p_start_id 	 IN VARCHAR2,
   p_end_id 	 IN VARCHAR2,
   p_batch_size  IN NUMBER,
   p_debug_flag  IN VARCHAR2);

procedure PRE_UPDATE(
  ERRBUF   OUT  NOCOPY  VARCHAR2,
  RETCODE  OUT  NOCOPY  VARCHAR2);

procedure POST_UPDATE(
  ERRBUF   OUT  NOCOPY  VARCHAR2,
  RETCODE  OUT  NOCOPY  VARCHAR2);

PROCEDURE Write_Log(p_module varchar2, p_which number, p_mssg  varchar2);

end AS_STATUSES_PKG;

 

/
