--------------------------------------------------------
--  DDL for Package FND_GFM
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "APPS"."FND_GFM" AUTHID CURRENT_USER AS
/* $Header: AFGFMS.pls 120.10.12010000.9 2019/04/19 20:01:58 ctilley ship $ */

------------------------------------------------------------------------------
/*
 * authenticate - validate an access key
 */
FUNCTION authenticate(access_id in NUMBER,
                      file_id   in NUMBER default -1) RETURN boolean;
------------------------------------------------------------------------------
/*
 * authorize - generate an authorized access key good for one day.
 *   This function is called to generate an access number that will
 *   be accepted by the GFM cartridge as authorization of the indicated
 *   operation.  The access number should be presented as part of the
 *   URL used to invoke the cartridge.
 *
 *   file_id      For downloads, the file identifier of the LOB to download;
 *                for uploads, this should be NULL.
 */
FUNCTION authorize(file_id NUMBER) RETURN NUMBER;

------------------------------------------------------------------------------
/*
 * construct_download_URL2 - construct a download URL
 *   This function constructs a URL that may be presented to a client
 *   browser in order to download the indicated file.  This function
 *   contains knowledge of the syntax of the required URL, but does
 *   require the web server's location, and PL/SQL agent's name to be
 *   known.  The function uses the authorize function described above
 *   to provide access.  The function returns the constructed URL.
 *   Optionally, this routine can be told to automatically commit
 *   the authorization step which is necessary before the URL can be
 *   viewed.
 *
 *   gfm_agent    	Value of the Generic File Manager agent with a
 *			trailing slash.
 *   file_id            The file identifier of the LOB to download.
 *   purge_on_view      Set to TRUE if the LOB should be purged from
 *                      the database after it has been downloaded.  If
 *                      this is set, the expiration date is also
 *                      marked to be in the near future, so the file
 *                      is eventually purged whether or not the
 *                      download succeeds.
 *   autocommit         If TRUE, the routine will automatically commit
 *                      the generated access key so the caller does not
 *                      need to. -- This is not required in 11.5, since
 *			we use AUTONOMOUS TRANSACTIONS. ---
 *   modplsql           If TRUE then reterives the MODPL/SQL catridge
 *                      URL for download.
 */
FUNCTION construct_download_URL2(gfm_agent     VARCHAR2,
				file_id       NUMBER,
				purge_on_view BOOLEAN DEFAULT FALSE,
				modplsql      BOOLEAN DEFAULT FALSE,
				authenticate  BOOLEAN DEFAULT TRUE)
				RETURN VARCHAR2;
------------------------------------------------------------------------------
/*
 * construct_upload_URL - construct a upload URL
 *   This function constructs a URL that may be embedded in a form
 *   action in order to upload a file type field.  This function
 *   contains knowledge of the syntax of the required URL, but does
 *   require the web server's location, and PL/SQL agent's name to be
 *   known, as well as the access_id generated using the authorize
 *   function described above.  The function returns the constructed URL.
 *
 *   gfm_agent    	Value of the Generic File Manager agent with a
 *			trailing slash.
 *   proc               Procedure to run
 *   access_id	        Authentication key as generated by fnd_gfm.authorize
 */
FUNCTION construct_upload_URL(gfm_agent     VARCHAR2,
                              proc          VARCHAR2,
			      access_id     NUMBER)
				RETURN VARCHAR2;
------------------------------------------------------------------------------

/*
 * construct_download_URL - construct a download URL
 *   This function constructs a URL that may be presented to a client
 *   browser in order to download the indicated file.  This function
 *   contains knowledge of the syntax of the required URL, but does
 *   require the web server's location, and PL/SQL agent's name to be
 *   known.  The function uses the authorize function described above
 *   to provide access.  The function returns the constructed URL.
 *   Optionally, this routine can be told to automatically commit
 *   the authorization step which is necessary before the URL can be
 *   viewed.
 *
 *   gfm_agent    	Value of the Generic File Manager agent with a
 *			trailing slash.
 *   file_id            The file identifier of the LOB to download.
 *   purge_on_view      To set expiry date for the record or not
 */
FUNCTION construct_download_URL(gfm_agent     VARCHAR2,
				file_id       NUMBER,
				purge_on_view BOOLEAN DEFAULT FALSE)
				RETURN VARCHAR2;
------------------------------------------------------------------------------
/*
 * construct_get_URL - construct a get request URL
 *   This function constructs a URL that may be presented to a client
 *   browser in order to get the indicated file.  This function
 *   contains knowledge of the syntax of the required URL, but does
 *   require the web server's location, and PL/SQL agent's name to be
 *   known.  The function returns the constructed URL.
 *
 *   gfm_agent    	Value of the Generic File Manager agent with a
 *			trailing slash.
 *   proc               Procedure to run
 *   path               Arg path
 */
FUNCTION construct_get_url(gfm_agent     varchar2,
			   proc          varchar2,
                           path          varchar2)
                           return varchar2;
------------------------------------------------------------------------------
/*
 * construct_relative_get - construct a relative get request URL
 *   fragment without the plsql_agent/dad info.
 *
 *   This function constructs a URL that may be presented to the browser
 *   as a relative url to a document that has already been "gotten".
 *
 *   proc               Procedure to run
 *   path               Arg path
 */
FUNCTION construct_relative_get(proc  varchar2,
                                path  varchar2)
	 return varchar2;
------------------------------------------------------------------------------
/*
 * confirm_upload - confirm the completion of an upload
 *   This procedure must be called from within the user's PL/SQL upload
 *   procedure to authenticate the upload and move the blob into the
 *   fnd_lobs table.  The new generated file_id is returned to the caller.
 *
 *   access_id        The access identifier that authorized the upload
 *   file_name        The file_name as stored in the fnd_lobs_document table
 *                    by WebDB...the value of the file type input field.
 *   program_name     The application short name to record
 *   program_tag      The application tag to record
 *   expiration_date  The expiration date to record; typically, this is null
 *                    which means that the LOB never expires, but must be
 *                    explicitly deleted
 *   language         The document language; defaults to userenv('LANG')
 *   wakeup           If TRUE, indicates that wait_for_upload is expected to
 *                    be called on the original authorization key; the GFM
 *                    can associate the given file identifier to the original
 *                    authorization key and wake up the identified waiter.
 */
FUNCTION confirm_upload(
    access_id         NUMBER,
    file_name         VARCHAR2,
    program_name      VARCHAR2 DEFAULT NULL,
    program_tag       VARCHAR2 DEFAULT NULL,
    expiration_date   DATE     DEFAULT NULL,
    language          VARCHAR2 DEFAULT userenv('LANG'),
    wakeup            BOOLEAN  DEFAULT FALSE )
RETURN NUMBER;
------------------------------------------------------------------------------
/*
 * dispatch
 *   This procedure takes a single argument in the form of
 *       <proc>/<arg>
 *
 *   and executes the proc, passing the single arg.
 *
 *   p_path       the proc and arg to call
 */
PROCEDURE dispatch(p_path varchar2);
------------------------------------------------------------------------------
/*
 * get_file_id
 *   This function retrieves the file_id for the corresponding access_id
 *   from the fnd_lob_access table.
 *
 *   access_id     the access id
 */
FUNCTION get_file_id(access_id NUMBER) RETURN NUMBER;
------------------------------------------------------------------------------
/*
 * wait_for_upload - wait for upload confirmation
 *   This procedure blocks the caller using the DBMS event facilities,
 *   and sleeps until the confirm_upload procedure is invoked to confirm
 *   that the intended LOB has indeed been uploaded, or until timeout
 *   seconds has elapsed.
 *
 *   access_id        The access id returned by the authorize function;
 *   timeout          The maximum number of seconds to wait for the upload
 *                    to complete.
 *   file_id          The file identifier of the new LOB; if this is null,
 *                    the wait timed out without receiving confirmation.
 */
PROCEDURE wait_for_upload(access_id NUMBER, timeout NUMBER,
			  file_id OUT NOCOPY NUMBER);
------------------------------------------------------------------------------
/*
 * purge_expired - purge all expired rows in GFM tables
 *   It is expected that this procedure will be called on a periodic
 *   basis in order to flush the GFM tables of expired information.
 */
PROCEDURE purge_expired(program_name VARCHAR2 DEFAULT NULL);
------------------------------------------------------------------------------
/*
 * purge_set - purge selected rows from the LOB table
 *   This procedure is called by programs wishing to clear out segments
 *   of the LOB table, usually when a program is deinstalled or otherwise
 *   becomes unavailable.
 *
 *   program_name   A string matched against the program_name column
 *   program_tag    A string matched against the program_tag column
 *
 *   If the program tag is omitted, then all rows matching the program
 *   name are purged.
 */
PROCEDURE purge_set(program_name VARCHAR2,
		                program_tag VARCHAR2 DEFAULT NULL);
------------------------------------------------------------------------------
/*
 * purge - CM cover routine for purge_set and purge_expired
 */
PROCEDURE purge(errbuf  out NOCOPY varchar2,
                retcode out NOCOPY varchar2,
                expired      varchar2 default 'Y',
                program_name varchar2 default null,
		            program_tag  varchar2 default null);
------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------
/*
 * The GFM allows new "files" to be created and written to directly
 * file rather than to a local file.  Files are identified by a file
 * handle, which is simply a number.
 *
 * A file may be created using file_create, then written to using
 * file_write or file_write_line, and eventually closed using
 * file_close.
 */
------------------------------------------------------------------------------
/*
 * file_create - create a new empty file
 *   This function creates a new empty GFM file to which data may be
 *   written.  A descriptor for the file is returned that may be used
 *   for subsequent operations performed on the file.  The descriptor
 *   is only valid within a single transaction.
 *
 *   file_name        The "name" of the file.  This is purely informative
 *                    and has no special meaning to the GFM as file iden-
 *                    tification is always done through file identifiers.
 *   content_type     This string must be a valid entity-header value for
 *                    the entity "Content-Type" (see IETF RFC 2045 for
 *                    complete information.
 *   program_name     The application short name to associate with the file
 *   program_tag      The application tag to associate with the file
 */
FUNCTION file_create(file_name VARCHAR2 DEFAULT NULL,
		     content_type VARCHAR2 DEFAULT 'text/plain',
		     program_name VARCHAR2 DEFAULT NULL,
		     program_tag VARCHAR2 DEFAULT NULL) RETURN NUMBER;
------------------------------------------------------------------------------
/*
 * file_close - close a file
 *   This function closes a file previously opened with file_create.
 *   The file identifier of the new LOB is returned.  This function
 *   must be called to ensure the file is permanently recorded by the
 *   GFM.  The transaction in which the file is written must also
 *   commit following this call.
 *
 *   fd               The file descriptor of the file to close
 */
FUNCTION file_close(fd NUMBER) RETURN NUMBER;
------------------------------------------------------------------------------
/*
 * file_write - write raw data to a file
 *   This procedure writes raw data to an open file.  This should be
 *   used only to write files whose media types are not 'text'.  The
 *   data will be written exactly as is without processing.  The data
 *   is appended to the file.
 *
 *   fd               The file descriptor of the file to which to write
 *   amount           The amount of data in the buffer to write
 *   buffer           The data to write to the file
 */
PROCEDURE file_write(fd NUMBER, amount BINARY_INTEGER, buffer RAW);
------------------------------------------------------------------------------
/*
 * file_write - write text to a file
 *   This procedure writes the given text to an open file, but does
 *   not include a line terminator.  The data is appended to the file.
 *
 *   fd               The file descriptor of the file to which to write
 *   buffer           The text to write to the file; this should not
 *                    exceed 1000 characters in length
 */
PROCEDURE file_write(fd NUMBER, buffer VARCHAR2);
------------------------------------------------------------------------------
/*
 * file_write_line - write text to a file with a line terminator
 *   This procedure writes the given text followed by a line terminator
 *   to an open file.  Line terminators in GFM files require special
 *   representation and this is the only safe mechanism to insert line
 *   terminators into a GFM file whose media type is 'text'.  If the
 *   media type is not text, you should use not use this procedure.
 *
 *   fd               The file descriptor of the file to which to write
 *   buffer           The text to write to the file; this should not
 *                    exceed 1000 characters in length; it may be null
 */
PROCEDURE file_write_line(fd NUMBER, buffer VARCHAR2);
------------------------------------------------------------------------------
/*
 * test - testing procedure
 *   This procedure is used during GFM installation to verify the
 *   configuration of the various software components.
 */
PROCEDURE test;
------------------------------------------------------------------------------
/*
 * download -
 *   This procedure processes a download request
 */
PROCEDURE download(file_id NUMBER, access NUMBER, purge VARCHAR2 DEFAULT NULL);
------------------------------------------------------------------------------
/*
 * get_iso_charset
 *   This procedure is used by fndgfm to retrieve the iso equivalent
 *   of the db's oracle character set.
 */
FUNCTION get_iso_charset RETURN VARCHAR2;
------------------------------------------------------------------------------
/*
 * oracle_to_iana
 *   This procedure retrieves the iana equivalent of the specified oracle
 *   charset
 */
FUNCTION oracle_to_iana(cs varchar2) return varchar2;
------------------------------------------------------------------------------
/*
 * iana_to_oracle
 *   This procedure retrieves the oracle equivalent of the specified iana
 *   charset.
 */
FUNCTION iana_to_oracle(ics varchar2) return varchar2;
------------------------------------------------------------------------------
/*
** download_blob
**   encapsulate the actual downloading of the blob using webdb
*/
PROCEDURE download_blob(fid number);
------------------------------------------------------------------------------
/*
 * one_time_use_store
 *   Store a value in the FND_LOB_ACCESS table and return a one-time-use
 *   ticket that can be used by one_time_use_retrieve() to fetch the value.
 */
FUNCTION one_time_use_store(value number) return number;
------------------------------------------------------------------------------
/*
 * one_time_use_store
 * A more secure API with a large entropy.
 * It returns a string that expires after lifespan
 * seconds. Opcode is a verification code used
 * when retrieving ticket value.
 */
FUNCTION ONE_TIME_USE_STORE( VALUE IN VARCHAR2 ,
                             LIFESPAN  IN NUMBER DEFAULT NULL,
                             OPCODE IN VARCHAR2 DEFAULT NULL)
                     RETURN VARCHAR2;
------------------------------------------------------------------------------
/*
 * one_time_use_retrieve
 *   Retrieve a value from the FND_LOB_ACCESS table, given a one-time-use
 *   ticket that was generated by one_time_use_store().
 */
FUNCTION one_time_use_retrieve(ticket number) return number;
------------------------------------------------------------------------------
/*
 * one_time_use_retrieve
 *   Retrieves value given a one-time-use
 *   ticket that was generated by one_time_use_store().
 *   if opcode passed, the API verifies the opcode value
 *   against the opcode value passed in one_time_use_store.
 */
FUNCTION ONE_TIME_USE_RETRIEVE( TICKET IN VARCHAR2 ,
                                OPCODE IN VARCHAR2 DEFAULT NULL)
                     RETURN VARCHAR2;
------------------------------------------------------------------------------
/*
 * get -
 *   This procedure processes a download request
 */
PROCEDURE get(p_path varchar2);
------------------------------------------------------------------------------
/*
 *   copy_lob - This function copies one lob to another
 *   Returns the file_id of the new lob.
 */
FUNCTION copy_lob(fid_from number) return number;
------------------------------------------------------------------------------
/*
 *   set_file_format - This function sets the file_format for fnd_lobs CTX
 *   Returns file_format derived from file_content_type in fnd_lobs.
 */
FUNCTION set_file_format(l_file_content_type VARCHAR2) RETURN VARCHAR2;
------------------------------------------------------------------------------
/*
 *   set_file_format - This function sets the file_format for fnd_lobs CTX
 *   Returns file_format derived from file_content_type in fnd_lobs.
 */
PROCEDURE CLOB_TO_BLOB (
    my_clob           clob,
    file_name         varchar2,
    fid               in out nocopy number,
    file_content_type varchar2 default null,
    language          varchar2 default null,
    x_return_status OUT   NOCOPY Varchar2,
    x_msg_count     OUT   NOCOPY Number,
    x_msg_data      OUT   NOCOPY Varchar2);

------------------------------------------------------------------------------
/*
 *   delete_lob - This api delete one record from fnd_lobs according to
 *   the file_id.
 */
PROCEDURE delete_lob(fid number);

------------------------------------------------------------------------------
/*
 *  getRelease - returns the current major release
 *
 */
FUNCTION getRelease RETURN NUMBER;

------------------------------------------------------------------------------

/*
 * verify_file_type
 *   This function indicates if a filetype is valid to be uploaded into fnd_lobs
 *   return value of Y or N
 */
FUNCTION verify_file_type(file_name varchar2 default null, file_ext varchar2 default null) return varchar2;

------------------------------------------------------------------------------
/*
 * purge_expired - purge all expired rows in GFM tables
 *   It is expected that this procedure will be called on a periodic
 *   basis in order to flush the GFM tables of expired information.
 *
 *  For program_name 'FNDATTCH' if purge_orph_attch is Y if orphaned attachment LOBs
 *  are found they will be expired and purged
 */
PROCEDURE purge_expired(program_name VARCHAR2 DEFAULT NULL, purge_orph_attch VARCHAR2);

------------------------------------------------------------------------------
/*
 * purge - CM cover routine for purge_set and purge_expired
 * Overloaded to include new arg to  specify whether to purge orphaned attachment LOBs.
 */
PROCEDURE purge(errbuf  out NOCOPY varchar2,
                retcode out NOCOPY varchar2,
                expired      varchar2 default 'Y',
                program_name varchar2 default null,
		            program_tag  varchar2 default null,
                purge_orph_attch varchar2);

FUNCTION verify_orphaned_lob (fid number) return boolean;
------------------------------------------------------------------------------

/*   Overload - add force arg to force the removal of the lob data
 *   delete_lob - This api delete one record from fnd_lobs according to
 *   the file_id.
 */
PROCEDURE delete_lob(fid number, force varchar2);
------------------------------------------------------------------------------

/*
 * check_ticket
 *   Retrieves value given a ticket
 *   ticket that was generated by one_time_use_store().
 *   if opcode passed, the API verifies the opcode value
 *   against the opcode value passed in one_time_use_store.
 */
function check_ticket(ticket in varchar2,
                      opcode in varchar2 default null)
                     return varchar2;


-------------------------------------------------------------------------------
/*
 * construct_download_URL - construct a download URL
 *   This function constructs a URL that may be presented to a client
 *   browser in order to download the indicated file.  This function
 *   contains knowledge of the syntax of the required URL, but does
 *   require the web server's location, and PL/SQL agent's name to be
 *   known.  The function uses the authorize function described above
 *   to provide access.  The function returns the constructed URL.
 *   Optionally, this routine can be told to automatically commit
 *   the authorization step which is necessary before the URL can be
 *   viewed.
 *
 *   gfm_agent          Value of the Generic File Manager agent with a
 *                      trailing slash.
 *   file_id            The file identifier of the LOB to download.
 *   purge_on_view      To set expiry date for the record or not
 *   authenticate       Require session
 *   user_name          Valid for the specified user
 *   lifespan           Valid for the specified lifespan (minutes)
 */
FUNCTION construct_download_URL(gfm_agent     VARCHAR2,
                                file_id       NUMBER,
                                purge_on_view BOOLEAN DEFAULT FALSE,
                                modplsql      BOOLEAN DEFAULT FALSE,
                                authenticate  BOOLEAN,
                                user_name     VARCHAR2 DEFAULT NULL,
                                lifespan      NUMBER   DEFAULT NULL)
                                RETURN VARCHAR2;

END fnd_gfm;

/
