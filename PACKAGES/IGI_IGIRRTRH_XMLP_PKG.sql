--------------------------------------------------------
--  DDL for Package IGI_IGIRRTRH_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "APPS"."IGI_IGIRRTRH_XMLP_PKG" AUTHID CURRENT_USER AS
/* $Header: IGIRRTRHS.pls 120.0.12010000.1 2008/07/29 08:59:28 appldev ship $ */
  P_CONC_REQUEST_ID NUMBER := 0;

  P_ORDER_BY VARCHAR2(50);
P_ORDER_BY_1 VARCHAR2(50);
  P_START_GL_DATE DATE;

  P_END_GL_DATE DATE;

  P_END_TRX_DATE DATE;

  P_START_TRX_DATE DATE;

  P_TRX_TYPE_TYPE VARCHAR2(80);

  P_INVOICE_TYPE_LOW VARCHAR2(30);

  P_INVOICE_TYPE_HIGH VARCHAR2(30);

  P_START_CURRENCY_CODE VARCHAR2(15);

  P_END_CURRENCY_CODE VARCHAR2(15);

  P_START_COMPANY_SEGMENT VARCHAR2(100);

  P_END_COMPANY_SEGMENT VARCHAR2(100);

  LP_ORDER_BY VARCHAR2(500);

  P_DUMMY_CURR_CODE_LOW VARCHAR2(30);

  P_DUMMY_CURR_CODE_HIGH VARCHAR2(30);

  LP_INVOICE_TYPE_LOW VARCHAR2(100):='and 1=1';

  LP_INVOICE_TYPE_HIGH VARCHAR2(100):='and 1=1';

  LP_START_TRX_DATE VARCHAR2(100):='and 1=1';

  LP_END_TRX_DATE VARCHAR2(100):='and 1=1';

  LP_TRX_TYPE_TYPE_LOW VARCHAR2(100):='and 1=1';

  LP_TRX_TYPE_TYPE_HIGH VARCHAR2(100):='and 1=1';

  LP_START_GL_DATE VARCHAR2(300):='and 1=1';

  LP_END_GL_DATE VARCHAR2(300):='and 1=1';

  P_COA NUMBER;

  LP_START_COMPANY_SEGMENT VARCHAR2(500):='and 1=1';

  LP_END_COMPANY_SEGMENT VARCHAR2(500):='and 1=1';

  LP_MEANING_INV VARCHAR2(11);

  LP_MEANING_DEP VARCHAR2(32767);

  LP_MEANING_GUAR VARCHAR2(32767);

  LP_MEANING_CM VARCHAR2(11);

  LP_MEANING_DM VARCHAR2(32767);

  LP_MEANING_CB VARCHAR2(32767);

  P_CONS_PROFILE_VALUE VARCHAR2(10) := 'N';

  LP_QUERY_SHOW_BILL VARCHAR2(1000) := 'trx.trx_number';

  LP_TABLE_SHOW_BILL VARCHAR2(1000);

  LP_WHERE_SHOW_BILL VARCHAR2(1000):='and 1=1';

  P_FROM_SC_REF VARCHAR2(50);

  P_TO_SC_REF VARCHAR2(50);

  RP_COMPANY_NAME VARCHAR2(50);

  RP_REPORT_NAME VARCHAR2(80);

  RP_DATA_FOUND VARCHAR2(300);

  RP_YES VARCHAR2(80);

  RP_NO VARCHAR2(80);

  RP_GL_DATE VARCHAR2(50);

  RP_INVOICE_DATE VARCHAR2(50);

  RP_CURR_CODE VARCHAR2(15) := 'USD';

  C_INDUSTRY_CODE VARCHAR2(20);

  C_COMPANY_TITLE VARCHAR2(20);

  RP_SUM_FOR VARCHAR2(240);

  FUNCTION BEFOREREPORT RETURN BOOLEAN;

  FUNCTION AFTERREPORT RETURN BOOLEAN;

  FUNCTION REPORT_NAMEFORMULA(FUNCTIONAL_CURRENCY IN VARCHAR2
                             ,COMPANY_NAME IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION C_COMPANY_SUMMARY_LABELFORMULA(COMPANY IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION C_POSTABLE_SUMMARY_LABELFORMUL(POSTABLE IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION C_CURRENCY_SUMMARY_LABELFORMUL(CURRENCY_A IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION C_CLASS_SUMMARY_LABELFORMULA(CLASS IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION C_DATA_NOT_FOUNDFORMULA(CURRENCY_A IN VARCHAR2) RETURN NUMBER;

  FUNCTION AFTERPFORM RETURN BOOLEAN;

  FUNCTION D_COMPANYFORMULA(COMPANY IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION AR_LOOKUP(L_TYPE IN VARCHAR2
                    ,L_CODE IN VARCHAR2) RETURN VARCHAR2;

  PROCEDURE GET_LOOKUP_MEANING(P_LOOKUP_TYPE IN VARCHAR2
                              ,P_LOOKUP_CODE IN VARCHAR2
                              ,P_LOOKUP_MEANING IN OUT NOCOPY VARCHAR2);

  PROCEDURE GET_BOILER_PLATES;

  FUNCTION SET_DISPLAY_FOR_CORE RETURN BOOLEAN;

  FUNCTION SET_DISPLAY_FOR_GOV RETURN BOOLEAN;

  FUNCTION INVOICE_CONSFORMULA(INVOICE_NUMBER IN VARCHAR2
                              ,CONS_BILLING_NUMBER IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2;

  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2;

  FUNCTION RP_DATA_FOUND_P RETURN VARCHAR2;

  FUNCTION RP_YES_P RETURN VARCHAR2;

  FUNCTION RP_NO_P RETURN VARCHAR2;

  FUNCTION RP_GL_DATE_P RETURN VARCHAR2;

  FUNCTION RP_INVOICE_DATE_P RETURN VARCHAR2;

  FUNCTION RP_CURR_CODE_P RETURN VARCHAR2;

  FUNCTION C_INDUSTRY_CODE_P RETURN VARCHAR2;

  FUNCTION C_COMPANY_TITLE_P RETURN VARCHAR2;

  FUNCTION RP_SUM_FOR_P RETURN VARCHAR2;

/*  FUNCTION GET_NEXT_WORD(LIST IN OUT NOCOPY VARCHAR2
                        ,VALUE IN OUT NOCOPY VARCHAR2) RETURN BOOLEAN;

  FUNCTION CEIL(D IN DATE) RETURN DATE;

  FUNCTION EVEN(N IN NUMBER) RETURN BOOLEAN;

  FUNCTION ODD(N IN NUMBER) RETURN BOOLEAN;

  FUNCTION CHECK_FLAG(OPTIONS IN NUMBER
                     ,FLAG IN NUMBER) RETURN BOOLEAN;

  PROCEDURE CLEAR_FLAG(OPTIONS IN OUT NOCOPY NUMBER
                      ,FLAG IN NUMBER);

  PROCEDURE SET_FLAG(OPTIONS IN OUT NOCOPY NUMBER
                    ,FLAG IN NUMBER);*/

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE RETURN VARCHAR2;

  FUNCTION PREVIOUS_MESSAGE(MD_OPTIONS IN NUMBER) RETURN VARCHAR2;

  FUNCTION PREVIOUS_MESSAGE RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2
                      ,T3 IN VARCHAR2
                      ,V3 IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2
                      ,T3 IN VARCHAR2
                      ,V3 IN VARCHAR2
                      ,T4 IN VARCHAR2
                      ,V4 IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2
                      ,T3 IN VARCHAR2
                      ,V3 IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2
                      ,T3 IN VARCHAR2
                      ,V3 IN VARCHAR2
                      ,T4 IN VARCHAR2
                      ,V4 IN VARCHAR2) RETURN VARCHAR2;

 /* FUNCTION FUNCTIONAL_AMOUNT(AMOUNT IN NUMBER
                            ,CURRENCY_CODE IN VARCHAR2
                            ,EXCHANGE_RATE IN NUMBER
                            ,PRECISION IN NUMBER
                            ,MIN_ACC_UNIT IN NUMBER) RETURN NUMBER;

  FUNCTION GL_DATE_RANGE_OPEN(PSTART_DATE IN VARCHAR2
                             ,PEND_DATE IN VARCHAR2) RETURN BOOLEAN;

  FUNCTION AR_LOOKUP(LOOKUP_TYPE IN VARCHAR2
                    ,LOOKUP_CODE IN VARCHAR2) RETURN VARCHAR2;

  FUNCTION MD_MSG_NUMBER RETURN NUMBER;

  FUNCTION MD_MSG_TEXT RETURN NUMBER;

  FUNCTION MD_MSG_NAME RETURN NUMBER;

  FUNCTION MD_MSG_TOKENS RETURN NUMBER;

  FUNCTION MD_MSG_EXPLANATION RETURN NUMBER;

  FUNCTION MD_MSG_FIND_NUMBER RETURN NUMBER;

  PROCEDURE GL_PERIOD_INFO(GL_DATE IN DATE
                          ,PERIOD_NAME OUT NOCOPY VARCHAR2
                          ,START_DATE OUT NOCOPY DATE
                          ,END_DATE OUT NOCOPY DATE
                          ,CLOSING_STATUS OUT NOCOPY VARCHAR2
                          ,PERIOD_TYPE OUT NOCOPY VARCHAR2
                          ,PERIOD_YEAR OUT NOCOPY NUMBER
                          ,PERIOD_NUM OUT NOCOPY NUMBER
                          ,QUARTER_NUM OUT NOCOPY NUMBER);

  FUNCTION GL_PERIOD_NAME(GL_DATE IN DATE) RETURN VARCHAR2;

  FUNCTION IS_GL_DATE_VALID(P_GL_DATE IN DATE
                           ,P_TRX_DATE IN DATE
                           ,P_VALIDATION_DATE1 IN DATE
                           ,P_VALIDATION_DATE2 IN DATE
                           ,P_VALIDATION_DATE3 IN DATE
                           ,P_ALLOW_NOT_OPEN_FLAG IN VARCHAR2
                           ,P_SET_OF_BOOKS_ID IN NUMBER
                           ,P_APPLICATION_ID IN NUMBER
                           ,P_CHECK_PERIOD_STATUS IN BOOLEAN) RETURN BOOLEAN;

  FUNCTION VALIDATE_AND_DEFAULT_GL_DATE(GL_DATE IN DATE
                                       ,TRX_DATE IN DATE
                                       ,VALIDATION_DATE1 IN DATE
                                       ,VALIDATION_DATE2 IN DATE
                                       ,VALIDATION_DATE3 IN DATE
                                       ,DEFAULT_DATE1 IN DATE
                                       ,DEFAULT_DATE2 IN DATE
                                       ,DEFAULT_DATE3 IN DATE
                                       ,P_ALLOW_NOT_OPEN_FLAG IN VARCHAR2
                                       ,P_INVOICING_RULE_ID IN VARCHAR2
                                       ,P_SET_OF_BOOKS_ID IN NUMBER
                                       ,P_APPLICATION_ID IN NUMBER
                                       ,DEFAULT_GL_DATE OUT NOCOPY DATE
                                       ,DEFAULTING_RULE_USED OUT NOCOPY VARCHAR2
                                       ,ERROR_MESSAGE OUT NOCOPY VARCHAR2) RETURN BOOLEAN;

  PROCEDURE DEBUG(LINE IN VARCHAR2);

  PROCEDURE ENABLE_DEBUG;

  PROCEDURE ENABLE_DEBUG(BUFFER_SIZE IN NUMBER);

  PROCEDURE DISABLE_DEBUG;

  PROCEDURE SET_WHO_INFORMATION(USER_ID IN NUMBER
                               ,REQUEST_ID IN NUMBER
                               ,PROGRAM_APPLICATION_ID IN NUMBER
                               ,PROGRAM_ID IN NUMBER
                               ,LAST_UPDATE_LOGIN IN NUMBER);

  PROCEDURE SET_APPLICATION_INFORMATION(APPL_ID IN NUMBER
                                       ,LANGUAGE_ID IN NUMBER);

  PROCEDURE FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2);

  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2);

  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2);

  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2
                       ,T3 IN VARCHAR2
                       ,V3 IN VARCHAR2);

  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2
                       ,T3 IN VARCHAR2
                       ,V3 IN VARCHAR2
                       ,T4 IN VARCHAR2
                       ,V4 IN VARCHAR2);

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER);

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2);

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2);

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2);

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2
                       ,T3 IN VARCHAR2
                       ,V3 IN VARCHAR2);

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2
                       ,T3 IN VARCHAR2
                       ,V3 IN VARCHAR2
                       ,T4 IN VARCHAR2
                       ,V4 IN VARCHAR2);

  PROCEDURE GL_ACTIVITY(P_PERIOD_FROM IN VARCHAR2
                       ,P_PERIOD_TO IN VARCHAR2
                       ,P_CODE_COMBINATION_ID IN NUMBER
                       ,P_SET_OF_BOOKS_ID IN NUMBER
                       ,P_PERIOD_NET_DR OUT NOCOPY NUMBER
                       ,P_PERIOD_NET_CR OUT NOCOPY NUMBER);

  PROCEDURE FIND_PREVIOUS_TRX_LINE_ID(P_CUSTOMER_TRX_LINE_ID IN NUMBER
                                     ,P_TAX_LINE_NUMBER IN NUMBER
                                     ,P_VAT_TAX_ID IN NUMBER
                                     ,P_TAX_CUSTOMER_TRX_ID OUT NOCOPY NUMBER
                                     ,P_TAX_CUSTOMER_TRX_LINE_ID OUT NOCOPY NUMBER
                                     ,P_CHK_APPLIED_CM IN BOOLEAN);*/



/*  FUNCTION GET_APP_INFO(APPLICATION_SHORT_NAME IN VARCHAR2
                       ,STATUS OUT NOCOPY VARCHAR2
                       ,INDUSTRY OUT NOCOPY VARCHAR2
                       ,ORACLE_SCHEMA OUT NOCOPY VARCHAR2) RETURN BOOLEAN;

  FUNCTION GET_APP_INFO_OTHER(APPLICATION_SHORT_NAME IN VARCHAR2
                             ,TARGET_SCHEMA IN VARCHAR2
                             ,STATUS OUT NOCOPY VARCHAR2
                             ,INDUSTRY OUT NOCOPY VARCHAR2
                             ,ORACLE_SCHEMA OUT NOCOPY VARCHAR2) RETURN BOOLEAN;*/

			     FUNCTION GET(APPL_ID IN INTEGER
              ,DEP_APPL_ID IN INTEGER
              ,STATUS OUT NOCOPY VARCHAR2
              ,INDUSTRY OUT NOCOPY VARCHAR2) RETURN BOOLEAN;

END IGI_IGIRRTRH_XMLP_PKG;


/
